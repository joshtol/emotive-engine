rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isValidCombo() {
      return request.resource.data.keys().hasAll(['name', 'gestures', 'timing']) &&
             request.resource.data.gestures is list &&
             request.resource.data.timing is list;
    }

    // Users can read their own data, update their own profile
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Prevent accidental deletion
    }

    // Public combos are readable by all, writable by creator
    match /combos/{comboId} {
      allow read: if resource.data.isPublic == true || isOwner(resource.data.discoveredBy);
      allow create: if isSignedIn() && isValidCombo();
      allow update: if isOwner(resource.data.discoveredBy);
      allow delete: if isOwner(resource.data.discoveredBy);
    }

    // Public grooves are readable by all, writable by creator
    match /grooves/{grooveId} {
      allow read: if resource.data.isPublic == true || isOwner(resource.data.createdBy);
      allow create: if isSignedIn();
      allow update: if isOwner(resource.data.createdBy);
      allow delete: if isOwner(resource.data.createdBy);
    }

    // Global stats are read-only for users
    match /stats/{document} {
      allow read: if true;
      allow write: if false; // Only server can update
    }

    // Waitlist - allow anyone to add their email (create only)
    match /waitlist/{docId} {
      allow read: if false; // No reading waitlist
      allow create: if request.resource.data.keys().hasAll(['email', 'timestamp']) &&
                       request.resource.data.email is string &&
                       request.resource.data.email.matches('^[^@]+@[^@]+\\.[^@]+$');
      allow update, delete: if false; // No updating or deleting
    }
  }
}