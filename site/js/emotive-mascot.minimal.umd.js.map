{"version":3,"file":"emotive-mascot.minimal.umd.js","sources":["../src/core/CanvasManager.js","../src/core/ErrorBoundary.js","../src/utils/colorUtils.js","../src/utils/easing.js","../src/core/emotions/plugin-adapter.js","../src/core/emotions/states/suspicion.js","../src/core/emotions/states/glitch.js","../src/core/emotions/states/calm.js","../src/core/emotions/index.js","../src/core/emotions/states/neutral.js","../src/core/emotions/states/joy.js","../src/core/emotions/states/sadness.js","../src/core/emotions/states/anger.js","../src/core/emotions/states/fear.js","../src/core/emotions/states/surprise.js","../src/core/emotions/states/disgust.js","../src/core/emotions/states/love.js","../src/core/emotions/states/excited.js","../src/core/emotions/states/resting.js","../src/core/emotions/states/euphoria.js","../src/core/emotions/states/focused.js","../src/core/EmotiveStateMachine.js","../src/core/particles/utils/colorUtils.js","../src/core/particles/behaviors/ambient.js","../src/core/particles/config/physics.js","../src/core/particles/behaviors/orbiting.js","../src/core/particles/behaviors/rising.js","../src/core/particles/behaviors/falling.js","../src/core/particles/config/playground.js","../src/core/particles/behaviors/popcorn.js","../src/core/particles/behaviors/burst.js","../src/core/particles/behaviors/aggressive.js","../src/core/particles/behaviors/scattering.js","../src/core/particles/behaviors/repelling.js","../src/core/particles/behaviors/connecting.js","../src/core/particles/behaviors/resting.js","../src/core/particles/behaviors/radiant.js","../src/core/particles/behaviors/ascending.js","../src/core/particles/behaviors/erratic.js","../src/core/particles/behaviors/cautious.js","../src/core/particles/behaviors/surveillance.js","../src/core/particles/behaviors/glitchy.js","../src/core/particles/behaviors/directed.js","../src/core/particles/behaviors/fizzy.js","../src/core/particles/behaviors/zen.js","../src/core/particles/behaviors/plugin-adapter.js","../src/core/particles/behaviors/index.js","../src/core/gestures/plugin-adapter.js","../src/core/gestures/motions/bounce.js","../src/core/gestures/motions/pulse.js","../src/core/gestures/motions/shake.js","../src/core/gestures/motions/nod.js","../src/core/gestures/motions/vibrate.js","../src/core/gestures/motions/orbit.js","../src/core/gestures/motions/twitch.js","../src/core/gestures/motions/sway.js","../src/core/gestures/motions/float.js","../src/core/gestures/motions/jitter.js","../src/core/gestures/transforms/spin.js","../src/core/gestures/transforms/jump.js","../src/core/gestures/transforms/morph.js","../src/core/gestures/transforms/stretch.js","../src/core/gestures/transforms/tilt.js","../src/core/gestures/transforms/orbital.js","../src/core/gestures/transforms/hula.js","../src/core/gestures/transforms/scan.js","../src/core/gestures/transforms/twist.js","../src/core/gestures/effects/wave.js","../src/core/gestures/effects/drift.js","../src/core/gestures/effects/flicker.js","../src/core/gestures/effects/burst.js","../src/core/gestures/effects/directional.js","../src/core/gestures/effects/settle.js","../src/core/gestures/effects/breathe.js","../src/core/gestures/effects/expand.js","../src/core/gestures/effects/contract.js","../src/core/gestures/effects/flash.js","../src/core/gestures/effects/glow.js","../src/core/gestures/effects/peek.js","../src/core/gestures/index.js","../src/core/gestures/effects/fade.js","../src/core/gestures/effects/hold.js","../src/core/gestures/effects/runningman.js","../src/core/gestures/effects/charleston.js","../src/core/rhythm.js","../src/core/rhythmIntegration.js","../src/core/Particle.js","../src/core/gestures/GestureMotion.js","../src/core/ParticleSystem.js","../src/config/undertoneModifiers.js","../src/core/GestureCompositor.js","../src/core/effects/zen-vortex.js","../src/core/effects/recording-glow.js","../src/core/effects/speaking-pulse.js","../src/core/effects/sleeping-effect.js","../src/core/effects/suspicion-scan.js","../src/core/effects/gaze-narrowing.js","../src/core/effects/fingerprint.js","../src/core/effects/index.js","../src/core/MusicalDuration.js","../src/core/renderer/GestureAnimator.js","../src/core/renderer/ColorUtilities.js","../src/core/renderer/SpecialEffects.js","../src/core/renderer/EyeRenderer.js","../src/core/renderer/BreathingAnimator.js","../src/core/renderer/GradientCache.js","../src/core/renderer/GlowRenderer.js","../src/core/renderer/CoreRenderer.js","../src/core/animation/RotationBrake.js","../src/core/renderer/AmbientDanceAnimator.js","../src/core/AnimationLoopManager.js","../src/core/EmotiveRenderer.js","../src/core/GazeTracker.js","../src/core/IdleBehavior.js","../src/core/MusicTheory.js","../src/core/HarmonicSystem.js","../src/core/SoundSystem.js","../src/core/SimpleFPSCounter.js","../src/core/AnimationController.js","../src/core/AudioLevelProcessor.js","../src/core/EventManager.js","../src/core/AccessibilityManager.js","../src/core/MobileOptimization.js","../src/core/PluginSystem.js","../src/utils/browserCompatibility.js","../src/utils/debugger.js","../src/core/shapes/shapeDefinitions.js","../src/utils/ArrayPool.js","../src/core/morpher/AudioDeformer.js","../src/core/morpher/AgentBPMDetector.js","../src/core/morpher/MusicDetector.js","../src/core/morpher/TransitionManager.js","../src/core/ShapeMorpher.js","../src/core/AudioAnalyzer.js","../src/core/GestureCompatibility.js","../src/core/GrooveTemplates.js","../src/mascot/AudioHandler.js","../src/mascot/GestureController.js","../src/mascot/StateCoordinator.js","../src/mascot/VisualizationRunner.js","../src/mascot/ConfigurationManager.js","../src/EmotiveMascot.js"],"sourcesContent":["/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE\r\n *  └─○═╝                                                                             \r\n *                      ◐ ◑ ◒ ◓  CANVAS MANAGER  ◓ ◒ ◑ ◐                      \r\n *                                                                                    \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Canvas Manager - High-DPI Rendering & Canvas Lifecycle\r\n * @author Emotive Engine Team\r\n * @version 2.1.0\r\n * @module CanvasManager\r\n * @changelog 2.1.0 - Added resize callback system for visual resampling\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                                   PURPOSE                                         \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ The FOUNDATION of visual rendering. Handles canvas setup, high-DPI scaling,       \r\n * ║ resize events, and provides optimized 2D context for smooth animations.           \r\n * ║ Ensures crisp rendering on Retina displays and manages canvas lifecycle.          \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 🎨 CANVAS FEATURES                                                                \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • Device Pixel Ratio (DPR) scaling for Retina displays                            \r\n * │ • Automatic resize handling with debouncing                                       \r\n * │ • Resize callback system for component notification                               \r\n * │ • Optimized 2D context settings for animations                                    \r\n * │ • Center point calculation for orb positioning                                    \r\n * │ • Clean canvas clearing with proper scaling                                       \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ ⚡ CONTEXT OPTIMIZATIONS                                                           \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • alpha: true               - Enables transparency                                \r\n * │ • desynchronized: true      - Better animation performance                        \r\n * │ • willReadFrequently: false - We don't read pixels                                \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ════════════════════════════════════════════════════════════════════════════════════\r\n */\r\nclass CanvasManager {\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n        // Get context with optimal settings for particle rendering\r\n        this.ctx = canvas.getContext('2d', {\r\n            alpha: true,\r\n            desynchronized: true,  // Better performance for animations\r\n            willReadFrequently: false  // We're not reading pixels\r\n        });\r\n        this.dpr = window.devicePixelRatio || 1;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.centerX = 0;\r\n        this.centerY = 0;\r\n        \r\n        // Resize callbacks\r\n        this.resizeCallbacks = [];\r\n        \r\n        // Bind resize handler\r\n        this.handleResize = this.handleResize.bind(this);\r\n        window.addEventListener('resize', this.handleResize);\r\n        \r\n        // Initial resize\r\n        this.resize();\r\n    }\r\n\r\n    /**\r\n     * Handles canvas resizing with proper high-DPI support\r\n     */\r\n    resize() {\r\n        // Check if canvas has explicit width/height attributes\r\n        const hasExplicitSize = this.canvas.hasAttribute('width') && this.canvas.hasAttribute('height');\r\n        \r\n        if (hasExplicitSize) {\r\n            // Use the explicit canvas dimensions from attributes\r\n            // This prevents the canvas from changing size when DevTools opens\r\n            const attrWidth = parseInt(this.canvas.getAttribute('width'), 10);\r\n            const attrHeight = parseInt(this.canvas.getAttribute('height'), 10);\r\n            \r\n            // Use attribute dimensions as base size\r\n            this.width = attrWidth;\r\n            this.height = attrHeight;\r\n            \r\n            // Set actual canvas buffer size (no DPR scaling for fixed-size canvases)\r\n            this.canvas.width = attrWidth;\r\n            this.canvas.height = attrHeight;\r\n            \r\n            // No DPR scaling needed for fixed-size canvases\r\n            // The browser will handle the scaling automatically\r\n        } else {\r\n            // For responsive canvases, use the bounding rect\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            \r\n            // Set display size (CSS pixels)\r\n            this.width = rect.width;\r\n            this.height = rect.height;\r\n            \r\n            // Set actual size in memory (scaled for high-DPI)\r\n            this.canvas.width = this.width * this.dpr;\r\n            this.canvas.height = this.height * this.dpr;\r\n            \r\n            // Scale the drawing context for high-DPI\r\n            this.ctx.scale(this.dpr, this.dpr);\r\n        }\r\n        \r\n        // Update center coordinates\r\n        this.centerX = this.width / 2;\r\n        this.centerY = this.height / 2;\r\n        \r\n        //     dpr: this.dpr,\r\n        //     center: { x: this.centerX, y: this.centerY }\r\n        // });\r\n        \r\n        // Trigger resize callbacks\r\n        this.resizeCallbacks.forEach(callback => {\r\n            try {\r\n                callback(this.width, this.height, this.dpr);\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Register a callback to be called on canvas resize\r\n     * @param {Function} callback - Function to call with (width, height, dpr) parameters\r\n     */\r\n    onResize(callback) {\r\n        if (typeof callback === 'function') {\r\n            this.resizeCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Debounced resize handler to prevent excessive resize calls\r\n     */\r\n    handleResize() {\r\n        clearTimeout(this.resizeTimeout);\r\n        this.resizeTimeout = setTimeout(() => {\r\n            this.resize();\r\n        }, 100);\r\n    }\r\n\r\n    /**\r\n     * Clears the entire canvas\r\n     */\r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n    }\r\n\r\n    /**\r\n     * Gets the center coordinates of the canvas\r\n     * @returns {Object} Object with x and y center coordinates\r\n     */\r\n    getCenter() {\r\n        return {\r\n            x: this.centerX,\r\n            y: this.centerY\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Sets transform for drawing operations\r\n     * @param {number} x - X translation\r\n     * @param {number} y - Y translation  \r\n     * @param {number} scale - Scale factor\r\n     * @param {number} rotation - Rotation in radians\r\n     */\r\n    setTransform(x = 0, y = 0, scale = 1, rotation = 0) {\r\n        this.ctx.save();\r\n        this.ctx.translate(x, y);\r\n        this.ctx.rotate(rotation);\r\n        this.ctx.scale(scale, scale);\r\n    }\r\n\r\n    /**\r\n     * Restores the previous transform state\r\n     */\r\n    restoreTransform() {\r\n        this.ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Gets the 2D rendering context\r\n     * @returns {CanvasRenderingContext2D} The canvas 2D context\r\n     */\r\n    getContext() {\r\n        return this.ctx;\r\n    }\r\n\r\n    /**\r\n     * Gets canvas dimensions\r\n     * @returns {Object} Object with width and height\r\n     */\r\n    getDimensions() {\r\n        return {\r\n            width: this.width,\r\n            height: this.height\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Cleanup method to remove event listeners\r\n     */\r\n    destroy() {\r\n        window.removeEventListener('resize', this.handleResize);\r\n        clearTimeout(this.resizeTimeout);\r\n    }\r\n}\r\n\r\nexport default CanvasManager;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                       ◐ ◑ ◒ ◓  ERROR BOUNDARY  ◓ ◒ ◑ ◐                       \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Error Boundary - Error Handling & Recovery System\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module ErrorBoundary\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ The SAFETY NET of the Emotive Engine. Catches errors, provides fallbacks,         \n * ║ logs issues for debugging, and attempts recovery to keep the animation            \n * ║ running even when things go wrong. Never let the orb die!                         \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🛡️ ERROR HANDLING FEATURES                                                        \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Try-catch wrapping for all critical functions                                   \n * │ • Safe default values for all emotional states                                    \n * │ • Error logging with context and timestamps                                       \n * │ • Automatic error suppression after threshold                                     \n * │ • Recovery attempts with exponential backoff                                      \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🔄 FALLBACK VALUES                                                                \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • emotion       : 'neutral' (safe default state)                                  \n * │ • gesture       : null (no animation)                                             \n * │ • audioLevel    : 0 (silent)                                                      \n * │ • particleCount : 0 (no particles)                                                \n * │ • glowIntensity : 0.7 (moderate glow)                                             \n * │ • color         : '#B0B0B0' (neutral gray)                                        \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 📊 VALIDATION LISTS                                                               \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ VALID EMOTIONS:                                                                   \n * │   neutral, joy, sadness, anger, fear, surprise, disgust, love,                    \n * │   suspicion, resting, connecting, thinking, speaking, zen, focused                \n * │                                                                                    \n * │ VALID UNDERTONES:                                                                 \n * │   nervous, confident, tired, intense, subdued                                     \n * │                                                                                    \n * │ VALID GESTURES:                                                                    \n * │   bounce, pulse, shake, spin, nod, tilt, expand, contract, flash,                 \n * │   drift, breathe, wave, slowBlink, jump, breathHold                               \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ ⚠️  ERROR THRESHOLDS                                                              \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Max errors in log      : 10 (then rotates)                                      \n * │ • Errors before suppress : 3 per context                                          \n * │ • Recovery max attempts  : 3                                                      \n * │ • Recovery backoff       : 100ms * 2^attempt                                      \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                           USING ERROR BOUNDARY                                    \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ // Wrap any risky function:                                                       \n * ║ const safeFunction = errorBoundary.wrap(riskyFunction, 'context', fallback);      \n * ║                                                                                    \n * ║ // Validate input:                                                                \n * ║ const validEmotion = errorBoundary.validateInput(input, 'emotion', 'neutral');    \n * ║                                                                                    \n * ║ // Attempt recovery:                                                              \n * ║ await errorBoundary.attemptRecovery('render', retryFn, 3);                        \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\nclass ErrorBoundary {\n    constructor() {\n        this.errors = [];\n        this.maxErrors = 10;\n        this.errorCounts = new Map();\n        \n        // Safe default values for various contexts\n        this.defaults = {\n            emotion: 'neutral',\n            gesture: null,\n            audioLevel: 0,\n            particleCount: 0,\n            glowIntensity: 0.7,\n            coreSize: 1.0,\n            breathRate: 1.0,\n            color: '#B0B0B0'\n        };\n    }\n\n    /**\n     * Wraps a function with error handling\n     * @param {Function} fn - Function to wrap\n     * @param {string} context - Context description for error logging\n     * @param {*} fallbackValue - Value to return on error\n     * @returns {Function} Wrapped function\n     */\n    wrap(fn, context, fallbackValue = null) {\n        return (...args) => {\n            try {\n                return fn(...args);\n            } catch (error) {\n                this.logError(error, context);\n                return fallbackValue !== null ? fallbackValue : this.getDefault(context);\n            }\n        };\n    }\n\n    /**\n     * Logs an error with context and timestamp\n     * @param {Error} error - The error object\n     * @param {string} context - Context where the error occurred\n     */\n    logError(error, context) {\n        const timestamp = new Date().toISOString();\n        const errorEntry = {\n            timestamp,\n            context,\n            message: error.message,\n            stack: error.stack\n        };\n\n        // Add to error log\n        this.errors.push(errorEntry);\n        \n        // Maintain error count per context\n        const count = this.errorCounts.get(context) || 0;\n        this.errorCounts.set(context, count + 1);\n\n        // Rotate error log if it gets too large\n        if (this.errors.length > this.maxErrors) {\n            this.errors.shift();\n        }\n\n        // Log to console with appropriate level based on frequency\n        if (count < 3) {\n        } else if (count === 3) {\n        }\n    }\n\n    /**\n     * Gets a safe default value for a given context\n     * @param {string} context - The context to get default for\n     * @returns {*} Safe default value\n     */\n    getDefault(context) {\n        // Context-specific defaults\n        const contextDefaults = {\n            'emotion-transition': this.defaults.emotion,\n            'gesture-execution': this.defaults.gesture,\n            'audio-processing': this.defaults.audioLevel,\n            'particle-system': this.defaults.particleCount,\n            'rendering': {\n                glowIntensity: this.defaults.glowIntensity,\n                coreSize: this.defaults.coreSize,\n                color: this.defaults.color\n            },\n            'canvas-operations': null,\n            'state-management': this.defaults.emotion\n        };\n\n        return contextDefaults.hasOwnProperty(context) ? contextDefaults[context] : null;\n    }\n\n    /**\n     * Validates input parameters and returns safe values\n     * @param {*} value - Value to validate\n     * @param {string} type - Expected type\n     * @param {*} defaultValue - Default value if validation fails\n     * @returns {*} Validated value or default\n     */\n    validateInput(value, type, defaultValue) {\n        try {\n            switch (type) {\n                case 'emotion':\n                    const validEmotions = ['neutral', 'joy', 'sadness', 'anger', 'fear', 'surprise', 'disgust', 'love', 'euphoria'];\n                    return validEmotions.includes(value) ? value : defaultValue;\n                \n                case 'undertone':\n                    const validUndertones = ['nervous', 'confident', 'tired', 'intense', 'subdued'];\n                    return value === null || validUndertones.includes(value) ? value : null;\n                \n                case 'gesture':\n                    const validGestures = ['bounce', 'pulse', 'shake', 'spin', 'nod', 'tilt', 'expand', 'contract', 'flash', 'drift'];\n                    return validGestures.includes(value) ? value : defaultValue;\n                \n                case 'number':\n                    return typeof value === 'number' && !isNaN(value) ? value : defaultValue;\n                \n                case 'string':\n                    return typeof value === 'string' ? value : defaultValue;\n                \n                case 'boolean':\n                    return typeof value === 'boolean' ? value : defaultValue;\n                \n                default:\n                    return value !== undefined && value !== null ? value : defaultValue;\n            }\n        } catch (error) {\n            this.logError(error, 'input-validation');\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Checks if a context has exceeded error threshold\n     * @param {string} context - Context to check\n     * @param {number} threshold - Error threshold (default: 5)\n     * @returns {boolean} True if threshold exceeded\n     */\n    hasExceededThreshold(context, threshold = 5) {\n        return (this.errorCounts.get(context) || 0) >= threshold;\n    }\n\n    /**\n     * Gets error statistics\n     * @returns {Object} Error statistics\n     */\n    getErrorStats() {\n        return {\n            totalErrors: this.errors.length,\n            errorsByContext: Object.fromEntries(this.errorCounts),\n            recentErrors: this.errors.slice(-5)\n        };\n    }\n\n    /**\n     * Clears error history\n     */\n    clearErrors() {\n        this.errors = [];\n        this.errorCounts.clear();\n    }\n\n    /**\n     * Attempts to recover from a failed operation\n     * @param {string} operation - The operation that failed\n     * @param {Function} retryFn - Function to retry\n     * @param {number} maxRetries - Maximum retry attempts\n     * @returns {Promise} Recovery attempt result\n     */\n    async attemptRecovery(operation, retryFn, maxRetries = 3) {\n        let attempts = 0;\n        \n        while (attempts < maxRetries) {\n            try {\n                return await retryFn();\n            } catch (error) {\n                attempts++;\n                this.logError(error, `recovery-${operation}-attempt-${attempts}`);\n                \n                if (attempts >= maxRetries) {\n                    throw new Error(`Recovery failed for ${operation} after ${maxRetries} attempts`);\n                }\n                \n                // Exponential backoff\n                await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempts) * 100));\n            }\n        }\n    }\n}\n\nexport default ErrorBoundary;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                     ◐ ◑ ◒ ◓  COLOR UTILS  ◓ ◒ ◑ ◐                     \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Color Utils - Color Interpolation & Manipulation\n * @author Emotive Engine Team\n * @version 2.1.0\n * @module ColorUtils\n * @changelog 2.1.0 - Added undertone saturation modifiers for dynamic depth\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ The COLOR SCIENCE module of the engine. Provides smooth color transitions         \n * ║ between emotional states using HSL interpolation for perceptually uniform         \n * ║ transitions that feel natural and emotionally resonant.                           \n * ║                                                                                    \n * ║ NEW: Undertone saturation system creates dynamic depth by adjusting saturation    \n * ║ based on emotional undertones (intense → oversaturated, subdued → desaturated)    \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎨 COLOR OPERATIONS                                                               \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Hex to RGB/HSL conversion                                                       \n * │ • RGB to Hex/HSL conversion                                                       \n * │ • HSL interpolation for smooth transitions                                        \n * │ • Color mixing and blending                                                       \n * │ • Luminance calculations                                                          \n * │ • Perceptually uniform color shifts                                               \n * │ • Undertone-based saturation adjustments                                          \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🌈 UNDERTONE SATURATION SYSTEM                                                    \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ Undertones dynamically adjust color saturation to create emotional depth:         \n * │                                                                                    \n * │ • INTENSE   : +60% saturation - Electric, vibrant, overwhelming                   \n * │ • CONFIDENT : +30% saturation - Bold, present, assertive                          \n * │ • NERVOUS   : +15% saturation - Slightly heightened, anxious energy               \n * │ • CLEAR     :   0% saturation - Normal midtone, balanced state                    \n * │ • TIRED     : -20% saturation - Washed out, fading, depleted                      \n * │ • SUBDUED   : -50% saturation - Ghostly, barely there, withdrawn                  \n * │                                                                                    \n * │ This creates a visual hierarchy where emotional intensity directly affects        \n * │ the vibrancy and presence of colors, making the mascot's state immediately        \n * │ readable through color alone.                                                     \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\n/**\n * Converts hex color to RGB values\n * @param {string} hex - Hex color string (e.g., '#FF0000')\n * @returns {Object} RGB object with r, g, b properties\n */\nexport function hexToRgb(hex) {\n    // Remove # if present\n    hex = hex.replace('#', '');\n    \n    // Handle 3-digit hex\n    if (hex.length === 3) {\n        hex = hex.split('').map(char => char + char).join('');\n    }\n    \n    const r = parseInt(hex.substr(0, 2), 16);\n    const g = parseInt(hex.substr(2, 2), 16);\n    const b = parseInt(hex.substr(4, 2), 16);\n    \n    return { r, g, b };\n}\n\n/**\n * Converts RGB values to hex color\n * @param {number} r - Red component (0-255)\n * @param {number} g - Green component (0-255)\n * @param {number} b - Blue component (0-255)\n * @returns {string} Hex color string\n */\nexport function rgbToHex(r, g, b) {\n    const toHex = (component) => {\n        const hex = Math.round(Math.max(0, Math.min(255, component))).toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n    \n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n}\n\n/**\n * Converts RGB to HSL color space\n * @param {number} r - Red component (0-255)\n * @param {number} g - Green component (0-255)\n * @param {number} b - Blue component (0-255)\n * @returns {Object} HSL object with h, s, l properties\n */\nexport function rgbToHsl(r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    \n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h, s, l = (max + min) / 2;\n    \n    if (max === min) {\n        h = s = 0; // achromatic\n    } else {\n        const d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        \n        switch (max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    \n    return { h: h * 360, s: s * 100, l: l * 100 };\n}\n\n/**\n * Converts HSL to RGB color space\n * @param {number} h - Hue (0-360)\n * @param {number} s - Saturation (0-100)\n * @param {number} l - Lightness (0-100)\n * @returns {Object} RGB object with r, g, b properties\n */\nexport function hslToRgb(h, s, l) {\n    h /= 360;\n    s /= 100;\n    l /= 100;\n    \n    const hue2rgb = (p, q, t) => {\n        if (t < 0) t += 1;\n        if (t > 1) t -= 1;\n        if (t < 1/6) return p + (q - p) * 6 * t;\n        if (t < 1/2) return q;\n        if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    };\n    \n    let r, g, b;\n    \n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n    \n    return {\n        r: Math.round(r * 255),\n        g: Math.round(g * 255),\n        b: Math.round(b * 255)\n    };\n}\n\n/**\n * Interpolates between two colors in RGB space\n * @param {string} color1 - Start color (hex)\n * @param {string} color2 - End color (hex)\n * @param {number} progress - Interpolation progress (0-1)\n * @returns {string} Interpolated color (hex)\n */\nexport function interpolateRgb(color1, color2, progress) {\n    const rgb1 = hexToRgb(color1);\n    const rgb2 = hexToRgb(color2);\n    \n    const r = Math.round(rgb1.r + (rgb2.r - rgb1.r) * progress);\n    const g = Math.round(rgb1.g + (rgb2.g - rgb1.g) * progress);\n    const b = Math.round(rgb1.b + (rgb2.b - rgb1.b) * progress);\n    \n    return rgbToHex(r, g, b);\n}\n\n/**\n * Interpolates between two colors in HSL space (better for emotional transitions)\n * @param {string} color1 - Start color (hex)\n * @param {string} color2 - End color (hex)\n * @param {number} progress - Interpolation progress (0-1)\n * @returns {string} Interpolated color (hex)\n */\nexport function interpolateHsl(color1, color2, progress) {\n    const rgb1 = hexToRgb(color1);\n    const rgb2 = hexToRgb(color2);\n    const hsl1 = rgbToHsl(rgb1.r, rgb1.g, rgb1.b);\n    const hsl2 = rgbToHsl(rgb2.r, rgb2.g, rgb2.b);\n    \n    // Handle hue interpolation (shortest path around color wheel)\n    let h1 = hsl1.h;\n    let h2 = hsl2.h;\n    let hDiff = h2 - h1;\n    \n    if (hDiff > 180) {\n        h2 -= 360;\n    } else if (hDiff < -180) {\n        h2 += 360;\n    }\n    \n    const h = h1 + (h2 - h1) * progress;\n    const s = hsl1.s + (hsl2.s - hsl1.s) * progress;\n    const l = hsl1.l + (hsl2.l - hsl1.l) * progress;\n    \n    // Normalize hue\n    const normalizedH = ((h % 360) + 360) % 360;\n    \n    const rgb = hslToRgb(normalizedH, s, l);\n    return rgbToHex(rgb.r, rgb.g, rgb.b);\n}\n\n/**\n * Creates an RGBA color string\n * @param {string} hex - Hex color\n * @param {number} alpha - Alpha value (0-1)\n * @returns {string} RGBA color string\n */\nexport function hexToRgba(hex, alpha = 1) {\n    const rgb = hexToRgb(hex);\n    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${alpha})`;\n}\n\n/**\n * Adjusts the brightness of a color\n * @param {string} hex - Hex color\n * @param {number} factor - Brightness factor (0.5 = darker, 1.5 = brighter)\n * @returns {string} Adjusted color (hex)\n */\nexport function adjustBrightness(hex, factor) {\n    const rgb = hexToRgb(hex);\n    const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);\n    \n    hsl.l = Math.max(0, Math.min(100, hsl.l * factor));\n    \n    const adjustedRgb = hslToRgb(hsl.h, hsl.s, hsl.l);\n    return rgbToHex(adjustedRgb.r, adjustedRgb.g, adjustedRgb.b);\n}\n\n/**\n * Adjusts the saturation of a color\n * @param {string} hex - Hex color\n * @param {number} factor - Saturation factor (0.5 = less saturated, 1.5 = more saturated)\n * @returns {string} Adjusted color (hex)\n */\nexport function adjustSaturation(hex, factor) {\n    const rgb = hexToRgb(hex);\n    const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);\n    \n    hsl.s = Math.max(0, Math.min(100, hsl.s * factor));\n    \n    const adjustedRgb = hslToRgb(hsl.h, hsl.s, hsl.l);\n    return rgbToHex(adjustedRgb.r, adjustedRgb.g, adjustedRgb.b);\n}\n\n/**\n * Gets the luminance of a color (for contrast calculations)\n * @param {string} hex - Hex color\n * @returns {number} Luminance value (0-1)\n */\nexport function getLuminance(hex) {\n    const rgb = hexToRgb(hex);\n    \n    // Convert to linear RGB\n    const toLinear = (component) => {\n        const c = component / 255;\n        return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n    };\n    \n    const r = toLinear(rgb.r);\n    const g = toLinear(rgb.g);\n    const b = toLinear(rgb.b);\n    \n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\n/**\n * Calculates contrast ratio between two colors\n * @param {string} color1 - First color (hex)\n * @param {string} color2 - Second color (hex)\n * @returns {number} Contrast ratio (1-21)\n */\nexport function getContrastRatio(color1, color2) {\n    const lum1 = getLuminance(color1);\n    const lum2 = getLuminance(color2);\n    \n    const brightest = Math.max(lum1, lum2);\n    const darkest = Math.min(lum1, lum2);\n    \n    return (brightest + 0.05) / (darkest + 0.05);\n}\n\n/**\n * Undertone saturation modifiers for dynamic emotional depth\n * Maps undertone names to saturation adjustment factors\n */\nexport const UNDERTONE_SATURATION = {\n    intense: 1.6,    // +60% saturation - Electric, overwhelming\n    confident: 1.3,  // +30% saturation - Bold, present\n    nervous: 1.15,   // +15% saturation - Slightly heightened\n    clear: 1.0,      // No change - Normal midtone\n    tired: 0.8,      // -20% saturation - Washed out, fading\n    subdued: 0.5     // -50% saturation - Ghostly, barely there\n};\n\n/**\n * Applies undertone saturation adjustment to a color\n * @param {string} hex - Base color\n * @param {string} undertone - Undertone name (intense, confident, nervous, clear, tired, subdued)\n * @returns {string} Adjusted color with undertone saturation applied\n */\nexport function applyUndertoneSaturation(hex, undertone) {\n    if (!undertone || undertone === 'clear') {\n        return hex; // No adjustment for clear or missing undertone\n    }\n    \n    const factor = UNDERTONE_SATURATION[undertone.toLowerCase()];\n    if (!factor || factor === 1.0) {\n        return hex;\n    }\n    \n    return adjustSaturation(hex, factor);\n}\n\n/**\n * Applies undertone saturation to an array of colors (for particle systems)\n * @param {Array} colors - Array of colors (can be strings or objects with color property)\n * @param {string} undertone - Undertone name\n * @returns {Array} Adjusted color array with undertone saturation applied\n */\nexport function applyUndertoneSaturationToArray(colors, undertone) {\n    if (!colors || !Array.isArray(colors)) return colors;\n    if (!undertone || undertone === 'clear') return colors;\n    \n    return colors.map(colorItem => {\n        if (typeof colorItem === 'string') {\n            // Simple color string\n            return applyUndertoneSaturation(colorItem, undertone);\n        } else if (colorItem && typeof colorItem === 'object' && colorItem.color) {\n            // Weighted color object\n            return {\n                ...colorItem,\n                color: applyUndertoneSaturation(colorItem.color, undertone)\n            };\n        }\n        return colorItem;\n    });\n}\n\n/**\n * Gets the saturation factor for an undertone\n * @param {string} undertone - Undertone name\n * @returns {number} Saturation multiplication factor\n */\nexport function getUndertoneSaturationFactor(undertone) {\n    if (!undertone) return 1.0;\n    return UNDERTONE_SATURATION[undertone.toLowerCase()] || 1.0;\n}\n\n/**\n * Emotional color palette for the mascot system\n */\nexport const EMOTIONAL_COLORS = {\n    neutral: '#B0B0B0',\n    joy: '#FFD700',\n    sadness: '#4169E1',\n    anger: '#DC143C',\n    fear: '#8B008B',\n    surprise: '#FF8C00',\n    disgust: '#9ACD32',\n    love: '#FF69B4'\n};\n\n/**\n * Gets RGB values for emotional colors (for performance)\n */\nexport const EMOTIONAL_COLORS_RGB = Object.fromEntries(\n    Object.entries(EMOTIONAL_COLORS).map(([emotion, hex]) => {\n        const rgb = hexToRgb(hex);\n        return [emotion, `${rgb.r}, ${rgb.g}, ${rgb.b}`];\n    })\n);","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                       ◐ ◑ ◒ ◓  EASING  ◓ ◒ ◑ ◐                       \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Easing Functions - Smooth Animation Transitions\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module Easing\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ The MOTION MATHEMATICS of the engine. Provides easing functions that create       \n * ║ natural, organic movement patterns for emotional transitions and gestures,         \n * ║ making the mascot feel alive and responsive rather than mechanical.               \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎢 EASING CURVES                                                                  \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Linear: Constant speed, no acceleration                                         \n * │ • Quadratic: Gentle acceleration/deceleration                                     \n * │ • Cubic: Moderate acceleration/deceleration                                       \n * │ • Elastic: Spring-like overshoot and bounce                                       \n * │ • Bounce: Realistic bouncing effect                                               \n * │ • Custom: Apply any easing by name                                                \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\n/**\n * Linear easing - no acceleration\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function linear(t) {\n    return t;\n}\n\n/**\n * Ease out quadratic - decelerating to zero velocity\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function easeOutQuad(t) {\n    return t * (2 - t);\n}\n\n/**\n * Ease in quadratic - accelerating from zero velocity\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function easeInQuad(t) {\n    return t * t;\n}\n\n/**\n * Ease in-out quadratic - acceleration until halfway, then deceleration\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function easeInOutQuad(t) {\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n}\n\n/**\n * Ease out cubic - decelerating to zero velocity (smoother than quad)\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function easeOutCubic(t) {\n    return 1 - Math.pow(1 - t, 3);\n}\n\n/**\n * Ease in cubic - accelerating from zero velocity\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function easeInCubic(t) {\n    return t * t * t;\n}\n\n/**\n * Ease in-out cubic - acceleration until halfway, then deceleration\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function easeInOutCubic(t) {\n    return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;\n}\n\n/**\n * Ease out elastic - elastic snap effect\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function easeOutElastic(t) {\n    const c4 = (2 * Math.PI) / 3;\n    return t === 0 ? 0 : t === 1 ? 1 : Math.pow(2, -10 * t) * Math.sin((t * 10 - 0.75) * c4) + 1;\n}\n\n/**\n * Ease out bounce - bouncing effect\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function easeOutBounce(t) {\n    const n1 = 7.5625;\n    const d1 = 2.75;\n\n    if (t < 1 / d1) {\n        return n1 * t * t;\n    } else if (t < 2 / d1) {\n        return n1 * (t -= 1.5 / d1) * t + 0.75;\n    } else if (t < 2.5 / d1) {\n        return n1 * (t -= 2.25 / d1) * t + 0.9375;\n    } else {\n        return n1 * (t -= 2.625 / d1) * t + 0.984375;\n    }\n}\n\n/**\n * Ease in-out back - slight overshoot effect\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function easeInOutBack(t) {\n    const c1 = 1.70158;\n    const c2 = c1 * 1.525;\n\n    return t < 0.5\n        ? (Math.pow(2 * t, 2) * ((c2 + 1) * 2 * t - c2)) / 2\n        : (Math.pow(2 * t - 2, 2) * ((c2 + 1) * (t * 2 - 2) + c2) + 2) / 2;\n}\n\n/**\n * Ease out sine - sinusoidal easing\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function easeOutSine(t) {\n    return Math.sin((t * Math.PI) / 2);\n}\n\n/**\n * Ease in-out sine - sinusoidal easing with smooth start and end\n * @param {number} t - Progress (0 to 1)\n * @returns {number} Eased value\n */\nexport function easeInOutSine(t) {\n    return -(Math.cos(Math.PI * t) - 1) / 2;\n}\n\n/**\n * Gets an easing function by name\n * @param {string} name - Name of the easing function\n * @returns {Function} Easing function\n */\nexport function getEasingFunction(name) {\n    const easingFunctions = {\n        linear,\n        easeOutQuad,\n        easeInQuad,\n        easeInOutQuad,\n        easeOutCubic,\n        easeInCubic,\n        easeInOutCubic,\n        easeOutElastic,\n        easeOutBounce,\n        easeInOutBack,\n        easeOutSine,\n        easeInOutSine\n    };\n\n    return easingFunctions[name] || linear;\n}\n\n/**\n * Applies easing to a value between start and end\n * @param {number} progress - Progress (0 to 1)\n * @param {number} start - Start value\n * @param {number} end - End value\n * @param {string|Function} easing - Easing function name or function\n * @returns {number} Eased value between start and end\n */\nexport function applyEasing(progress, start, end, easing = 'linear') {\n    const easingFn = typeof easing === 'string' ? getEasingFunction(easing) : easing;\n    const easedProgress = easingFn(Math.max(0, Math.min(1, progress)));\n    return start + (end - start) * easedProgress;\n}","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE v4.0 - Emotion Plugin Adapter\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Bridge between plugin system and emotion registry\n * @author Emotive Engine Team\n * @version 4.0.0\n * @module emotions/plugin-adapter\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Adapter for dynamic emotion registration from plugins.                            \n * ║ • Maintains separate registry for plugin emotions                                 \n * ║ • Validates emotion definitions for required properties                           \n * ║ • Provides legacy format conversion for older plugins                             \n * ║ • Enables runtime registration and unregistration                                 \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n */\n\n/**\n * Plugin emotion registry\n */\nconst pluginEmotions = new Map();\n\n/**\n * Register a plugin emotion\n * @param {string} name - Emotion name\n * @param {Object} emotionDef - Emotion definition object\n */\nexport function registerPluginEmotion(name, emotionDef) {\n    // Ensure emotion has required properties\n    if (!emotionDef.color) {\n        return false;\n    }\n    \n    // Add name if not present\n    if (!emotionDef.name) {\n        emotionDef.name = name;\n    }\n    \n    // Ensure visual and modifiers exist\n    if (!emotionDef.visual) {\n        emotionDef.visual = {\n            primaryColor: emotionDef.color,\n            particleCount: emotionDef.particleCount || 15,\n            particleSize: emotionDef.particleSize || { min: 2, max: 6 }\n        };\n    }\n    \n    if (!emotionDef.modifiers) {\n        emotionDef.modifiers = {\n            speed: 1.0,\n            amplitude: 1.0,\n            intensity: 1.0\n        };\n    }\n    \n    pluginEmotions.set(name, emotionDef);\n    \n    if (typeof window !== 'undefined' && window.DEBUG_EMOTIONS) {\n    }\n    \n    return true;\n}\n\n/**\n * Unregister a plugin emotion\n * @param {string} name - Emotion name to remove\n */\nexport function unregisterPluginEmotion(name) {\n    if (pluginEmotions.has(name)) {\n        pluginEmotions.delete(name);\n        \n        if (typeof window !== 'undefined' && window.DEBUG_EMOTIONS) {\n        }\n        \n        return true;\n    }\n    return false;\n}\n\n/**\n * Get a plugin emotion by name\n * @param {string} name - Emotion name\n * @returns {Object|null} Emotion object or null if not found\n */\nexport function getPluginEmotion(name) {\n    return pluginEmotions.get(name) || null;\n}\n\n/**\n * Get all plugin emotion names\n * @returns {Array<string>} Array of emotion names\n */\nexport function getAllPluginEmotions() {\n    return Array.from(pluginEmotions.keys());\n}\n\n/**\n * Clear all plugin emotions\n */\nexport function clearPluginEmotions() {\n    pluginEmotions.clear();\n}\n\n/**\n * Convert legacy plugin emotion format to new format\n * @param {Object} legacyEmotion - Old format emotion\n * @returns {Object} New format emotion\n */\nexport function createLegacyAdapter(legacyEmotion) {\n    return {\n        name: legacyEmotion.name || 'unknown',\n        emoji: legacyEmotion.emoji || '🔌',\n        color: legacyEmotion.primaryColor || legacyEmotion.color || '#7B68EE',\n        energy: legacyEmotion.energy || 'medium',\n        \n        visual: {\n            primaryColor: legacyEmotion.primaryColor || legacyEmotion.color || '#7B68EE',\n            secondaryColor: legacyEmotion.secondaryColor,\n            particleCount: legacyEmotion.particleCount || legacyEmotion.particleRate || 15,\n            particleSize: legacyEmotion.particleSize || { min: 2, max: 6 },\n            glowIntensity: legacyEmotion.glowIntensity || 0.5,\n            trailLength: legacyEmotion.trailLength || 5,\n            pulseRate: legacyEmotion.pulseRate || legacyEmotion.breathRate || 1.0\n        },\n        \n        particles: {\n            behavior: legacyEmotion.particleBehavior || 'ambient',\n            density: legacyEmotion.particleDensity || 'medium',\n            speed: legacyEmotion.particleSpeed || 'normal'\n        },\n        \n        modifiers: {\n            speed: legacyEmotion.speedMultiplier || 1.0,\n            amplitude: legacyEmotion.amplitudeMultiplier || 1.0,\n            intensity: legacyEmotion.intensityMultiplier || 1.0,\n            smoothness: legacyEmotion.smoothnessMultiplier || 1.0\n        },\n        \n        gestures: legacyEmotion.gestures || [],\n        transitions: legacyEmotion.transitions || {}\n    };\n}\n\n// Export adapter interface\nexport default {\n    registerPluginEmotion,\n    unregisterPluginEmotion,\n    getPluginEmotion,\n    getAllPluginEmotions,\n    clearPluginEmotions,\n    createLegacyAdapter\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Suspicion Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'suspicion',\n    emoji: '🤨',\n    description: 'Paranoid watchfulness with surveillance scanning',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#6B46C1',       // Deep purple paranoia\n        glowIntensity: 0.85,        // Watchful glow that intensifies with threat\n        particleRate: 18,           // Increased surveillance particles\n        minParticles: 6,            // More eyes watching\n        maxParticles: 12,           // Heightened alert capacity\n        particleBehavior: 'surveillance',  // NEW: Searchlight scanning behavior\n        particleSpeed: 0.2,         // Base particle speed\n        breathRate: 0.6,            // Slower, more deliberate breathing\n        breathDepth: 0.04,          // Very shallow, tense breaths\n        coreJitter: 0.02,           // Slight nervous tremor\n        particleColors: [\n            { color: '#6B46C1', weight: 30 },  // Deep purple paranoia\n            { color: '#4A5568', weight: 25 },  // Shadowy slate gray\n            { color: '#8B4789', weight: 20 },  // Dark magenta mystery\n            { color: '#9F7AEA', weight: 15 },  // Alert purple highlights\n            { color: '#2D3748', weight: 10 }   // Deep shadow lurking\n        ],\n        // Dynamic threat level properties\n        threatLevel: 0,             // 0-1 scale, updated by gaze distance\n        getGlowIntensity: function() {\n            return 0.3 + (this.threatLevel * 0.7);\n        },\n        getParticleSpeed: function() {\n            return 0.2 + (this.threatLevel * 0.8);\n        },\n        getGlowColor: function() {\n            // Color shifts from purple to red as threat increases\n            const baseColor = { r: 107, g: 70, b: 193 };  // #6B46C1\n            const alertColor = { r: 220, g: 38, b: 127 }; // #DC267F (magenta-red)\n            \n            const t = this.threatLevel || 0;\n            \n            const r = Math.round(baseColor.r + (alertColor.r - baseColor.r) * t);\n            const g = Math.round(baseColor.g + (alertColor.g - baseColor.g) * t);\n            const b = Math.round(baseColor.b + (alertColor.b - baseColor.b) * t);\n            \n            // Convert to hex\n            const toHex = (val) => val.toString(16).padStart(2, '0');\n            return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n        }\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 0.4,         // Slower, more deliberate movements\n        amplitude: 0.6,     // Smaller, controlled movements\n        intensity: 1.2,     // Higher alertness\n        smoothness: 0.3,    // Jerky, paranoid movements\n        regularity: 0.2,    // Highly unpredictable patterns\n        focus: 1.5,         // Hyper-focused attention\n        addWobble: true     // Uncertain, questioning motion\n    },\n    \n    // Typical gestures for suspicion\n    typicalGestures: ['scan', 'twitch', 'peek', 'tilt', 'hold'],\n    \n    // Transition configuration\n    transitions: { \n        duration: 500,       // Moderate alertness shift\n        easing: 'linear',   // Steady, controlled transition\n        priority: 4         // Mid-level alert priority\n    },\n    \n    // Special suspicion properties\n    special: {\n        coreSquint: 0.6,        // More pronounced eye narrowing\n        scanInterval: 2000,     // More frequent scans\n        scanDuration: 1200,     // Longer, more thorough scanning\n        scanAngle: 60,          // Wider scanning range\n        twitchChance: 0.02,     // 2% chance per frame to twitch\n        peekInterval: 4000,     // Time between peek gestures\n        maxThreatDistance: 300, // Distance for threat calculation\n        alertThreshold: 0.7     // Threat level for maximum alert\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Glitch Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'glitch',\n    emoji: '⚡',\n    description: 'Digital distortion with erratic particle stutters',\n    \n    // Visual properties\n    visual: {\n        primaryColor: '#00FFAA',    // Bright digital cyan-green\n        glowColor: '#00FFAA',       // Bright digital cyan-green\n        glowIntensity: 2.2,         // Intense, flickering energy\n        particleRate: 30,           // High rate for glitchy effect\n        minParticles: 12,           // Constant digital noise\n        maxParticles: 20,           // Maximum chaos\n        particleBehavior: 'glitchy', // New glitch behavior\n        particleSpeed: 1.5,         // Fast, erratic speeds\n        breathRate: 0.3,            // Rapid, stuttering breaths\n        breathDepth: 0.08,          // Shallow, digital hiccups\n        coreJitter: 0.04,           // Constant digital tremor\n        coreSize: 1.1,              // Slightly enlarged core\n        eyeOpenness: 1.0,           // Wide open eyes\n        particleColors: [\n            { color: '#00FFAA', weight: 25 },  // Bright cyan-green\n            { color: '#FF00AA', weight: 20 },  // Hot magenta\n            { color: '#00FF00', weight: 15 },  // Pure digital green\n            { color: '#FF0099', weight: 15 },  // Neon pink\n            { color: '#00FFFF', weight: 10 },  // Electric cyan\n            { color: '#FFAA00', weight: 8 },   // Digital amber warning\n            { color: '#FF00FF', weight: 5 },   // Pure magenta glitch\n            { color: '#FFFFFF', weight: 2 }    // Rare white static\n        ],\n        // Glitch-specific properties\n        glitchIntensity: 0.8,      // How intense the glitching is\n        flickerChance: 0.05,       // 5% chance per frame to flicker\n        rgbShift: true,            // Enable RGB channel separation\n        digitalNoise: true,        // Add digital noise pattern\n        getGlowIntensity: function() {\n            // Random intensity flickers\n            if (Math.random() < this.flickerChance) {\n                return 0.2 + Math.random() * 2.5;\n            }\n            return this.glowIntensity;\n        },\n        getGlowColor: function() {\n            // Occasionally shift to random glitch colors\n            if (Math.random() < 0.02) {\n                const glitchColors = ['#FF00AA', '#00FFFF', '#FF0099', '#00FFAA', '#FFAA00'];\n                return glitchColors[Math.floor(Math.random() * glitchColors.length)];\n            }\n            return this.glowColor;\n        }\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 2.0,         // Hyper-speed movements\n        amplitude: 0.8,     // Constrained but erratic\n        intensity: 1.8,     // High energy bursts\n        smoothness: 0.1,    // Extremely jerky, stuttering motion\n        regularity: 0.1,    // Completely unpredictable\n        focus: 0.5,         // Scattered, unfocused\n        addGlitch: true,    // Special glitch modifier\n        addStutter: true    // Stuttering motion effect\n    },\n    \n    // Typical gestures for glitch\n    typicalGestures: ['twitch', 'jitter', 'breathe', 'pulse', 'shake', 'flicker'],\n    \n    // Transition configuration\n    transitions: { \n        duration: 100,          // Instant, jarring transitions\n        easing: 'linear',       // No smoothing - digital snap\n        priority: 7,            // High priority disruption\n        glitchIn: true          // Special glitch transition effect\n    },\n    \n    // Special glitch properties\n    special: {\n        stutterInterval: 50,        // Stutter every 50ms\n        stutterDuration: 20,        // Each stutter lasts 20ms\n        rgbOffset: 3,               // Pixel offset for RGB separation\n        scanlineEffect: true,       // Add CRT scanlines\n        datamoshChance: 0.01,       // 1% chance to datamosh\n        corruptionZones: 3,         // Number of corruption areas\n        digitalTearHeight: 10       // Height of digital tears\n    }\n};","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Calm Emotion\r\n *  └─○═╝\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Calm emotional state - serene and peaceful\r\n * @author Emotive Engine Team\r\n * @module emotions/states/calm\r\n */\r\n\r\n/**\r\n * Calm emotion configuration\r\n * A state of deep tranquility and inner peace\r\n */\r\nexport default {\r\n    name: 'calm',\r\n    emoji: '😌',\r\n    description: 'Serene, peaceful state with gentle movements',\r\n\r\n    // Visual properties\r\n    visual: {\r\n        glowColor: '#66D9CC',        // Bright mint/turquoise (more distinct from neutral blue)\r\n        glowIntensity: 0.6,          // Softer glow than neutral\r\n        particleRate: 25,            // Steady, peaceful emission like sadness\r\n        minParticles: 8,             // Keep some particles always\r\n        maxParticles: 25,            // Allow more particles like sadness\r\n        particleBehavior: 'zen',     // Zen orbital behavior\r\n        breathRate: 0.4,             // Much slower breathing than neutral (1.0)\r\n        breathDepth: 0.12,           // Deeper breaths than neutral (0.08)\r\n        coreJitter: false,           // Perfectly still core\r\n        particleColors: [\r\n            { color: '#66D9CC', weight: 35 },  // Bright turquoise\r\n            { color: '#99E6D9', weight: 25 },  // Light mint\r\n            { color: '#40BFB3', weight: 20 },  // Medium teal\r\n            { color: '#B3F2E6', weight: 15 },  // Pale mint\r\n            { color: '#339980', weight: 5 }    // Deep teal shadow\r\n        ]\r\n    },\r\n\r\n    // Gesture modifiers\r\n    modifiers: {\r\n        speed: 0.5,         // Much slower than neutral (1.0)\r\n        amplitude: 0.3,     // Significantly reduced motion range\r\n        intensity: 0.4,     // Very gentle force level\r\n        smoothness: 2.0,    // Much smoother than neutral\r\n        regularity: 1.5,    // More consistent patterns\r\n        addWeight: false,   // Light, floating feeling\r\n        floatHeight: 0.2,   // Minimal floating height\r\n        swayAmount: 0.15,   // Very minimal side-to-side sway\r\n        duration: 1.5       // Extend gesture duration\r\n    },\r\n\r\n    // Typical gestures for this emotion\r\n    typicalGestures: [\r\n        'breathe',   // Deep, slow breathing\r\n        'float',     // Gentle floating\r\n        'drift',     // Slow drifting\r\n        'idle'       // Peaceful idle state\r\n    ],\r\n\r\n    // Transition hints\r\n    transitions: {\r\n        duration: 800,           // Slower transition into calm\r\n        easing: 'easeInOutSine', // Very smooth sine curve\r\n        priority: 1              // Low-medium priority\r\n    },\r\n\r\n    // Audio/sound associations\r\n    audio: {\r\n        ambientSound: 'soft_waves',  // Gentle ambient sounds\r\n        transitionSound: null,        // No harsh transition\r\n        gestureSound: null,           // Silent gestures\r\n        volumeModifier: 0.5           // Quieter overall\r\n    },\r\n\r\n    // Particle spawn patterns\r\n    particleSpawn: {\r\n        pattern: 'center_drift',  // Spawn from center, drift outward\r\n        frequency: 'slow',        // Very slow spawn rate\r\n        burstOnEntry: false,      // No burst when entering\r\n        fadeOnExit: true,         // Gentle fade when leaving\r\n        spawnRadius: 0.3,         // Spawn close to center\r\n        driftSpeed: 0.2           // Very slow particle drift\r\n    },\r\n\r\n    // Eye/core appearance\r\n    coreAppearance: {\r\n        pupilSize: 0.9,           // Slightly relaxed pupils\r\n        irisPattern: 'soft',       // Softer iris edges\r\n        blinkRate: 'slow',        // Slower, relaxed blinking\r\n        lookDirection: 'soft_center', // Soft focus, not sharp\r\n        eyeOpenness: 0.85         // Slightly droopy, relaxed eyes\r\n    },\r\n\r\n    // Movement patterns\r\n    movement: {\r\n        floatPattern: 'sine_slow',     // Slow sine wave floating\r\n        floatPeriod: 6000,              // 6 second float cycle\r\n        floatAmplitude: 8,              // 8 pixel vertical range\r\n        swayPattern: 'gentle',          // Gentle side sway\r\n        swayPeriod: 8000,               // 8 second sway cycle\r\n        swayAmplitude: 5,               // 5 pixel horizontal range\r\n        microMovements: false           // No jittery movements\r\n    },\r\n\r\n    /**\r\n     * Get core rendering parameters\r\n     * @param {Object} state - Current renderer state\r\n     * @returns {Object} Core rendering configuration\r\n     */\r\n    getCoreParams: function(state) {\r\n        const time = state.time || Date.now();\r\n        const breathPhase = Math.sin(time * 0.0006) * 0.5 + 0.5; // Very slow breathing\r\n\r\n        return {\r\n            scaleX: 1.0 - (breathPhase * 0.02),  // Very subtle breathing scale\r\n            scaleY: 1.0 - (breathPhase * 0.02),\r\n            eyeOpenness: 0.85,                   // Relaxed eyes\r\n            eyeExpression: 'serene',             // New serene expression\r\n            pupilOffset: {\r\n                x: Math.sin(time * 0.0003) * 2,  // Slow, minimal eye movement\r\n                y: Math.cos(time * 0.0004) * 1\r\n            },\r\n            glowPulse: 0.95 + (breathPhase * 0.05)  // Very subtle glow pulse\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Optional: Custom particle behavior for calm state\r\n     * @param {Object} particle - Particle to update\r\n     * @param {number} deltaTime - Time since last update\r\n     */\r\n    updateParticle: function(particle, deltaTime) {\r\n        // Super slow drift\r\n        particle.x += Math.sin(particle.life * 0.001) * 0.1;\r\n        particle.y -= deltaTime * 0.02; // Very slow rise\r\n\r\n        // Gentle fade based on life\r\n        particle.opacity = Math.sin(particle.life * 0.002) * 0.3 + 0.2;\r\n\r\n        // Slow size pulse\r\n        particle.size = particle.baseSize * (1 + Math.sin(particle.life * 0.001) * 0.2);\r\n    },\r\n\r\n    /**\r\n     * Optional: Custom core rendering\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n     * @param {number} x - Center X\r\n     * @param {number} y - Center Y\r\n     * @param {number} radius - Core radius\r\n     * @returns {boolean} True if custom rendering was done\r\n     */\r\n    renderCore: function(ctx, x, y, radius) {\r\n        // Return false to use default rendering with parameters\r\n        return false;\r\n    }\r\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE v4.0 - Emotion Registry\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Central emotion registry with full plugin support\n * @author Emotive Engine Team\n * @version 4.0.0\n * @module emotions\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Central registry for modular emotion system with plugin adapter integration.\n * ║ • Core emotions are loaded synchronously at startup\n * ║ • Plugin emotions can be registered dynamically via adapter\n * ║ • Each emotion is self-contained with visual, gesture, and transition data\n * ║ • Value-agnostic design allows easy tuning without code changes\n * ╚═══════════════════════════════════════════════════════════════════════════════════\n */\n\nimport pluginAdapter from './plugin-adapter.js';\n\n// Import all emotion modules\nimport neutral from './states/neutral.js';\nimport joy from './states/joy.js';\nimport sadness from './states/sadness.js';\nimport anger from './states/anger.js';\nimport fear from './states/fear.js';\nimport surprise from './states/surprise.js';\nimport disgust from './states/disgust.js';\nimport love from './states/love.js';\nimport suspicion from './states/suspicion.js';\nimport excited from './states/excited.js';\nimport resting from './states/resting.js';\nimport euphoria from './states/euphoria.js';\nimport focused from './states/focused.js';\nimport glitch from './states/glitch.js';\nimport calm from './states/calm.js';\n\n// Registry to store all registered emotions\nconst emotionRegistry = new Map();\n\n// Emotion aliases for compatibility\nconst emotionAliases = {\n    'happy': 'joy',\n    'peaceful': 'calm',\n    'curious': 'surprise',\n    'frustrated': 'anger',\n    'sad': 'sadness'\n};\n\n// Register all emotions SYNCHRONOUSLY\n[neutral, joy, sadness, anger, fear, surprise, disgust,\n love, suspicion, excited, resting, euphoria, focused, glitch, calm].forEach(emotion => {\n    if (emotion && emotion.name) {\n        emotionRegistry.set(emotion.name, emotion);\n    }\n});\n\n\n/**\n * Register an emotion module\n * @param {Object} emotionModule - The emotion module to register\n */\nexport function registerEmotion(emotionModule) {\n    if (!emotionModule.name) {\n        return;\n    }\n    emotionRegistry.set(emotionModule.name, emotionModule);\n}\n\n/**\n * Get emotion configuration by name (checks both core and plugin emotions)\n * @param {string} emotionName - Name of the emotion (or alias)\n * @returns {Object|null} The emotion configuration or null if not found\n */\nexport function getEmotion(emotionName) {\n    // Check aliases first\n    const resolvedName = emotionAliases[emotionName] || emotionName;\n\n    // Check core emotions\n    const coreEmotion = emotionRegistry.get(resolvedName);\n    if (coreEmotion) {\n        return coreEmotion;\n    }\n\n    // Check plugin emotions\n    const pluginEmotion = pluginAdapter.getPluginEmotion(resolvedName);\n    if (pluginEmotion) {\n        return pluginEmotion;\n    }\n\n    return null;\n}\n\n/**\n * Get emotion parameters (visual properties) with dynamic evaluation\n * @param {string} emotionName - Name of the emotion\n * @returns {Object} Visual parameters for the emotion\n */\nexport function getEmotionVisualParams(emotionName) {\n    const emotion = getEmotion(emotionName);\n    if (!emotion) {\n        return getEmotion('neutral').visual;\n    }\n\n    // Make sure visual exists\n    if (!emotion.visual) {\n        return {};\n    }\n    \n    // Create a copy of visual properties, excluding functions\n    const visual = emotion.visual;\n    const params = {};\n    \n    // Copy non-function properties\n    for (const key in visual) {\n        if (typeof visual[key] !== 'function') {\n            params[key] = visual[key];\n        }\n    }\n    \n    // Evaluate dynamic functions if they exist and override static values\n    if (typeof visual.getGlowIntensity === 'function') {\n        params.glowIntensity = visual.getGlowIntensity.call(visual);\n    }\n    \n    if (typeof visual.getParticleSpeed === 'function') {\n        params.particleSpeed = visual.getParticleSpeed.call(visual);\n    }\n    \n    if (typeof visual.getParticleRate === 'function') {\n        params.particleRate = visual.getParticleRate.call(visual);\n    }\n    \n    if (typeof visual.getGlowColor === 'function') {\n        params.glowColor = visual.getGlowColor.call(visual);\n    }\n    \n    return params;\n}\n\n/**\n * Get emotion modifiers (gesture adjustments)\n * @param {string} emotionName - Name of the emotion\n * @returns {Object} Gesture modifiers for the emotion\n */\nexport function getEmotionModifiers(emotionName) {\n    const emotion = getEmotion(emotionName);\n    if (!emotion) {\n        return getEmotion('neutral').modifiers;\n    }\n    return emotion.modifiers;\n}\n\n/**\n * Get list of available emotions (core and plugin)\n * @returns {Array<string>} List of emotion names\n */\nexport function listEmotions() {\n    const coreEmotions = Array.from(emotionRegistry.keys());\n    const pluginEmotions = pluginAdapter.getAllPluginEmotions();\n    return [...coreEmotions, ...pluginEmotions];\n}\n\n/**\n * Get all emotion configurations\n * @returns {Object} Object mapping emotion names to configurations\n */\nexport function getAllEmotions() {\n    const emotions = {};\n    emotionRegistry.forEach((value, key) => {\n        emotions[key] = value;\n    });\n    return emotions;\n}\n\n/**\n * Check if an emotion exists (checks both core and plugin)\n * @param {string} emotionName - Name of the emotion to check\n * @returns {boolean} True if emotion exists\n */\nexport function hasEmotion(emotionName) {\n    const resolvedName = emotionAliases[emotionName] || emotionName;\n    return emotionRegistry.has(resolvedName) || pluginAdapter.getPluginEmotion(resolvedName) !== null;\n}\n\n/**\n * Add an emotion alias\n * @param {string} alias - The alias name\n * @param {string} emotionName - The actual emotion name\n */\nexport function addEmotionAlias(alias, emotionName) {\n    emotionAliases[alias] = emotionName;\n}\n\n/**\n * Get emotion transition parameters\n * @param {string} fromEmotion - Starting emotion\n * @param {string} toEmotion - Target emotion\n * @returns {Object} Transition parameters\n */\nexport function getTransitionParams(fromEmotion, toEmotion) {\n    const from = getEmotion(fromEmotion);\n    const to = getEmotion(toEmotion);\n    \n    if (!from || !to) {\n        return {\n            duration: 1000,\n            easing: 'ease-in-out'\n        };\n    }\n    \n    // Check if 'to' emotion has specific transition hints\n    if (to.transitions && to.transitions[fromEmotion]) {\n        return to.transitions[fromEmotion];\n    }\n    \n    // Use default transition\n    return {\n        duration: 1000,\n        easing: 'ease-in-out',\n        gesture: to.transitions?.defaultGesture || null\n    };\n}\n\n/**\n * Get typical gestures for an emotion\n * @param {string} emotionName - Name of the emotion\n * @returns {Array<string>} List of typical gesture names\n */\nexport function getEmotionGestures(emotionName) {\n    const emotion = getEmotion(emotionName);\n    return emotion?.gestures || [];\n}\n\n// Debug utilities can be imported directly if needed\n// No longer polluting global scope\n\n// Export plugin adapter for external use\nexport { pluginAdapter };\n\n// Export everything\nexport default {\n    registerEmotion,\n    getEmotion,\n    getEmotionVisualParams,\n    getEmotionParams: getEmotionVisualParams, // Alias for compatibility\n    getEmotionModifiers,\n    listEmotions,\n    getAllEmotions,\n    hasEmotion,\n    addEmotionAlias,\n    getTransitionParams,\n    getEmotionGestures,\n    pluginAdapter\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Neutral Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Neutral emotional state - calm baseline\n * @author Emotive Engine Team\n * @module emotions/states/neutral\n */\n\n/**\n * Neutral emotion configuration\n * The default calm state, baseline for all other emotions\n */\nexport default {\n    name: 'neutral',\n    emoji: '😐',\n    description: 'Calm, balanced emotional state',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#00BCD4',        // Cyan baseline (more modern)\n        glowIntensity: 0.9,          // Slightly softer glow\n        particleRate: 2,              // Minimal particle generation\n        minParticles: 8,             // Baseline particle presence\n        maxParticles: 10,            // Limited particle count\n        particleBehavior: 'ambient', // Gentle floating behavior\n        breathRate: 1.0,             // Normal, relaxed breathing\n        breathDepth: 0.08,           // Subtle breath variation\n        coreJitter: false,           // Stable, still core\n        particleColors: [\n            { color: '#00BCD4', weight: 25 },  // Primary cyan\n            { color: '#00ACC1', weight: 20 },  // Darker cyan\n            { color: '#26C6DA', weight: 15 },  // Light cyan\n            { color: '#B2EBF2', weight: 15 },  // Pale cyan highlight\n            { color: '#0097A7', weight: 10 },  // Deep cyan shadow\n            { color: '#80DEEA', weight: 10 },  // Cyan light\n            { color: '#E0F7FA', weight: 5 }    // Very pale cyan\n        ]\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 1.0,        // Baseline movement speed\n        amplitude: 1.0,    // Standard motion range\n        intensity: 1.0,    // Default force level\n        smoothness: 1.0,   // Natural motion flow\n        regularity: 1.0    // Consistent patterns\n    },\n    \n    // Typical gestures for this emotion\n    typicalGestures: [\n        'breathe',   // Calm breathing\n        'float',     // Gentle floating\n        'idle',      // Idle animation\n        'blink'      // Occasional blinks\n    ],\n    \n    // Transition hints\n    transitions: {\n        duration: 500,      // Standard transition duration\n        easing: 'easeInOut', // Balanced transition curve\n        priority: 0         // Baseline priority level\n    },\n    \n    // Audio/sound associations (optional)\n    audio: {\n        ambientSound: null,     // No specific ambient sound\n        transitionSound: null,  // No transition sound\n        gestureSound: null      // No gesture sound\n    },\n    \n    // Particle spawn patterns\n    particleSpawn: {\n        pattern: 'random',      // Random spawn positions\n        frequency: 'steady',    // Steady spawn rate\n        burstOnEntry: false,    // No burst when entering state\n        fadeOnExit: true        // Fade particles when leaving\n    },\n    \n    // Eye/core appearance\n    coreAppearance: {\n        pupilSize: 1.0,        // Standard pupil dilation\n        irisPattern: 'default', // Basic iris pattern\n        blinkRate: 'normal',    // Regular blink frequency\n        lookDirection: 'center' // Centered, neutral gaze\n    },\n    \n    /**\n     * Get core rendering parameters\n     * @param {Object} state - Current renderer state\n     * @returns {Object} Core rendering configuration\n     */\n    getCoreParams: function(state) {\n        return {\n            scaleX: 1.0,\n            scaleY: 1.0,\n            eyeOpenness: 1.0,\n            eyeExpression: 'neutral', // neutral, happy, sad, focused\n            pupilOffset: { x: 0, y: 0 }\n        };\n    },\n    \n    /**\n     * Optional: Custom core rendering\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\n     * @param {number} x - Center X\n     * @param {number} y - Center Y\n     * @param {number} radius - Core radius\n     * @returns {boolean} True if custom rendering was done\n     */\n    renderCore: function(ctx, x, y, radius) {\n        // Return false to use default rendering\n        return false;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Joy Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Joy emotional state - playful happiness\n * @author Emotive Engine Team\n * @module emotions/states/joy\n */\n\n/**\n * Joy emotion configuration\n * Playful happiness with popcorn popping particles\n */\nexport default {\n    name: 'joy',\n    emoji: '😊',\n    description: 'Playful happiness and celebration',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#FFEB3B',       // Bright yellow sunshine\n        glowIntensity: 1.6,         // Stronger cheerful glow\n        particleRate: 40,           // Abundant celebration particles\n        minParticles: 0,            // Can start from stillness\n        maxParticles: 40,           // Maximum joyful expression\n        particleBehavior: 'popcorn', // Spontaneous popping effect\n        breathRate: 1.5,            // Excited, happy breathing\n        breathDepth: 0.10,          // Moderate breath variation\n        coreJitter: false,          // Stable, confident happiness\n        particleColors: [\n            { color: '#FFEB3B', weight: 25 },  // Bright sunshine yellow\n            { color: '#FFC107', weight: 20 },  // Amber joy\n            { color: '#FFFF00', weight: 15 },  // Pure yellow burst\n            { color: '#FFD700', weight: 15 },  // Gold celebration\n            { color: '#FFF59D', weight: 10 },  // Pale yellow sparkle\n            { color: '#FF9800', weight: 10 },  // Orange warmth\n            { color: '#FFFDE7', weight: 5 }    // Light cream highlight\n        ]\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 1.8,        // Energetic, lively pace\n        amplitude: 1.9,    // Expansive, celebratory movements\n        intensity: 1.1,    // Enhanced joyful energy\n        smoothness: 1.0,   // Natural, flowing motion\n        regularity: 0.9,   // Playful, varied rhythm\n        addBounce: true    // Extra springiness effect\n    },\n    \n    // Typical gestures for joy\n    typicalGestures: [\n        'bounce',    // Happy bouncing\n        'spin',      // Joyful spinning\n        'wave',      // Excited waving\n        'expand',    // Expanding with joy\n        'shake',     // Excited shaking (gentle)\n        'float'      // Floating with happiness\n    ],\n    \n    // Transition hints\n    transitions: {\n        duration: 400,         // Swift mood elevation\n        easing: 'easeOutBack', // Bouncy, playful entrance\n        priority: 5,           // Elevated positive priority\n        burstOnEntry: true     // Celebratory particle burst\n    },\n    \n    // Audio/sound associations\n    audio: {\n        ambientSound: 'cheerful_hum',    // Cheerful background\n        transitionSound: 'pop',           // Pop sound on entry\n        gestureSound: 'giggle'            // Giggle on gestures\n    },\n    \n    // Particle spawn patterns\n    particleSpawn: {\n        pattern: 'fountain',     // Fountain-like spawn\n        frequency: 'burst',      // Burst spawning\n        burstOnEntry: true,      // Big burst on entry\n        fadeOnExit: false,       // Particles pop away\n        specialEffect: 'sparkle' // Sparkle effect\n    },\n    \n    // Eye/core appearance\n    coreAppearance: {\n        pupilSize: 1.2,          // Dilated with excitement\n        irisPattern: 'radiant',   // Radiant, sparkling iris\n        blinkRate: 'frequent',    // Happy, frequent blinking\n        lookDirection: 'up',      // Optimistic upward gaze\n        specialEffect: 'twinkle'  // Sparkling eye effect\n    },\n    \n    // Rhythm configuration - joy bounces to the beat\n    rhythm: {\n        enabled: true,\n        \n        // Particle emission celebrates on beat\n        particleEmission: {\n            syncMode: 'beat',\n            burstSize: 8,           // Big celebration bursts\n            offBeatRate: 0.6,       // Still happy between beats\n            popcornSync: true       // Popcorn pops on beat\n        },\n        \n        // Breathing syncs to happy tempo\n        breathSync: {\n            mode: 'beats',\n            beatsPerBreath: 4,     // One breath per bar\n            intensity: 1.2          // Deeper happy breaths\n        },\n        \n        // Glow pulses with joy\n        glowSync: {\n            intensityRange: [1.2, 1.8],\n            syncTo: 'beat',\n            attack: 0.05,           // Quick brightening\n            decay: 0.4              // Bouncy fade\n        },\n        \n        // Pattern-specific joy expressions\n        patternBehaviors: {\n            'waltz': {\n                // Elegant happy waltz\n                particleEmission: { burstSize: 5 },\n                breathSync: { beatsPerBreath: 3 }\n            },\n            'swing': {\n                // Jazzy playful joy\n                particleEmission: { \n                    syncMode: 'swing',\n                    burstSize: 6\n                },\n                glowSync: { curve: 'bounce' }\n            },\n            'dubstep': {\n                // Explosive joy on drops\n                particleEmission: {\n                    burstSize: 15,\n                    dropMultiplier: 3.0\n                }\n            },\n            'breakbeat': {\n                // Chaotic happy energy\n                particleEmission: {\n                    syncMode: 'random',\n                    burstRange: [3, 12]\n                }\n            }\n        }\n    },\n    \n    /**\n     * Get core rendering parameters for joy\n     */\n    getCoreParams: function(state) {\n        return {\n            scaleX: 1.0,\n            scaleY: 1.0,\n            eyeOpenness: 1.0,\n            eyeExpression: 'happy',  // ∪ shaped eyes\n            pupilOffset: { x: 0, y: -0.1 },  // Looking slightly up\n            sparkle: true  // Add sparkle effect\n        };\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Sadness Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Sadness emotional state - melancholic sorrow\n * @author Emotive Engine Team\n * @module emotions/states/sadness\n */\n\nexport default {\n    name: 'sadness',\n    emoji: '😢',\n    description: 'Deep melancholic sorrow',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#4169E1',       // Royal blue melancholy\n        glowIntensity: 0.65,        // Dimmer, more subdued glow\n        particleRate: 25,           // Steady tear-like emission\n        minParticles: 0,            // Can fade to emptiness\n        maxParticles: 25,           // Abundant sorrow display\n        particleBehavior: 'falling', // Tears falling downward\n        breathRate: 0.6,            // Slow, heavy breathing\n        breathDepth: 0.12,          // Deep, sighing breaths\n        coreJitter: false,          // Still, heavy core\n        particleColors: [\n            { color: '#4169E1', weight: 25 },  // Royal blue sorrow\n            { color: '#1E90FF', weight: 20 },  // Dodger blue tears\n            { color: '#6495ED', weight: 15 },  // Cornflower blue melancholy\n            { color: '#B0C4DE', weight: 15 },  // Light steel blue mist\n            { color: '#191970', weight: 10 },  // Midnight blue depth\n            { color: '#87CEEB', weight: 10 },  // Sky blue glimmer\n            { color: '#2F4F4F', weight: 5 }    // Dark slate gray shadow\n        ]\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 0.7,         // Slowed, weary pace\n        amplitude: 0.6,     // Diminished movement range\n        intensity: 0.8,     // Weakened emotional force\n        smoothness: 1.3,    // Smooth, flowing sorrow\n        regularity: 1.1,    // Slightly monotonous patterns\n        addGravity: true    // Downward, heavy feeling\n    },\n    \n    // Typical gestures for sadness\n    typicalGestures: [\n        'droop',\n        'sway',\n        'contract',\n        'drift',\n        'sink'\n    ],\n    \n    // Transition configuration\n    transitions: {\n        duration: 800,         // Gradual mood shift\n        easing: 'easeInOut',  // Smooth emotional transition\n        priority: 3           // Lower emotional priority\n    },\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Anger Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Anger emotional state - intense rage\n * @author Emotive Engine Team\n * @module emotions/states/anger\n */\n\n/**\n * Anger emotion configuration\n * Intense aggressive state with rapid, chaotic particles\n */\nexport default {\n    name: 'anger',\n    emoji: '😠',\n    description: 'Intense rage and aggression',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#DC143C',       // Crimson rage - more intense\n        glowIntensity: 1.8,         // Stronger, burning aura\n        particleRate: 20,           // More frequent particle generation for chaos\n        minParticles: 3,            // Maintain constant agitation\n        maxParticles: 10,           // More particles for intensity\n        particleBehavior: 'aggressive', // Erratic, forceful particle movement\n        breathRate: 2.2,            // Rapid, agitated breathing rhythm\n        breathDepth: 0.15,          // Deep, forceful breath cycles\n        coreJitter: true,           // Visual tremor from internal rage\n        particleColors: [\n            { color: '#DC143C', weight: 25 },  // Crimson rage\n            { color: '#FF0000', weight: 20 },  // Pure red fury\n            { color: '#B22222', weight: 15 },  // FireBrick intensity\n            { color: '#FF4500', weight: 15 },  // OrangeRed flames\n            { color: '#8B0000', weight: 10 },  // Dark red depth\n            { color: '#FF6347', weight: 10 },  // Tomato heat\n            { color: '#660000', weight: 5 }    // Nearly black ember\n        ]\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 1.5,        // Accelerated motion for urgency\n        amplitude: 1.4,    // Exaggerated movement range\n        intensity: 1.3,    // Heightened force and impact\n        smoothness: 0.3,   // Sharp, abrupt transitions\n        regularity: 0.7,   // Erratic, unpredictable patterns\n        addShake: true     // Tremor effect from rage\n    },\n    \n    // Typical gestures for anger\n    typicalGestures: [\n        'shake',     // Violent shaking\n        'vibrate',   // Angry vibration\n        'expand',    // Explosive expansion\n        'pulse',     // Angry pulsing\n        'flicker',   // Rage flickering\n        'strike'     // Strike motion\n    ],\n    \n    // Transition hints\n    transitions: {\n        duration: 300,          // Swift state change\n        easing: 'easeOutExpo',  // Explosive, sudden entrance\n        priority: 8,            // High priority emotional state\n        shakeOnEntry: true      // Trigger screen disturbance\n    },\n    \n    // Audio/sound associations\n    audio: {\n        ambientSound: 'rumble',      // Low rumbling\n        transitionSound: 'explosion', // Explosive sound\n        gestureSound: 'growl'         // Growling sounds\n    },\n    \n    // Particle spawn patterns\n    particleSpawn: {\n        pattern: 'explosive',    // Explosive spawn\n        frequency: 'chaotic',    // Chaotic frequency\n        burstOnEntry: true,      // Explosion on entry\n        fadeOnExit: false,       // Particles dissipate violently\n        specialEffect: 'flames'  // Flame-like effect\n    },\n    \n    // Eye/core appearance\n    coreAppearance: {\n        pupilSize: 0.7,           // Constricted for focused intensity\n        irisPattern: 'sharp',      // Angular, aggressive iris pattern\n        blinkRate: 'rare',        // Unwavering, intense gaze\n        lookDirection: 'forward',  // Direct, confrontational focus\n        specialEffect: 'flames',   // Fire-like eye effects\n        pulseRate: 'rapid'        // Quick, agitated pulsing\n    },\n    \n    // Special anger properties\n    special: {\n        screenShake: true,         // Environmental disturbance effect\n        particleTrails: 'fire',    // Incendiary particle trail style\n        glowPulse: true,          // Rhythmic aura fluctuation\n        temperatureEffect: 'hot'   // Warm spectrum color shifting\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Fear Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'fear',\n    emoji: '😨',\n    description: 'Anxious state with fleeing particles',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#8A2BE2',       // Dark violet (BlueViolet) - more ominous\n        glowIntensity: 0.9,         // Slightly stronger, pulsing glow\n        particleRate: 18,           // More rapid nervous emission\n        minParticles: 4,            // Constant anxious presence\n        maxParticles: 16,           // Scattered fearful display\n        particleBehavior: 'scattering', // Particles flee outward\n        breathRate: 2.5,            // Rapid, shallow breathing\n        breathDepth: 0.06,          // Short, panicked breaths\n        coreJitter: true,           // Trembling with anxiety\n        particleColors: [\n            { color: '#8A2BE2', weight: 25 },  // Dark violet base\n            { color: '#4B0082', weight: 20 },  // Indigo dread\n            { color: '#9400D3', weight: 15 },  // Dark violet panic\n            { color: '#6B46C1', weight: 15 },  // Deep purple anxiety\n            { color: '#9932CC', weight: 10 },  // Dark orchid fear\n            { color: '#E6E6FA', weight: 8 },   // Pale lavender flash\n            { color: '#301934', weight: 7 }    // Almost black shadow\n        ]\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 1.4,        // Quick, reactive movements\n        amplitude: 0.8,    // Restricted, defensive range\n        intensity: 1.2,    // Heightened fight-or-flight response\n        smoothness: 0.5,   // Jerky, startled transitions\n        regularity: 0.5,   // Unpredictable panic patterns\n        addJitter: true    // Nervous trembling overlay\n    },\n    \n    // Typical gestures for fear\n    typicalGestures: ['shake', 'vibrate', 'contract', 'flicker', 'retreat'],\n    \n    // Transition configuration\n    transitions: { \n        duration: 400,       // Quick fear response\n        easing: 'easeOut',  // Sudden onset\n        priority: 7         // High alert priority\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Surprise Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'surprise',\n    emoji: '😲',\n    description: 'Sudden shock with explosive particles',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#FFD700',       // Bright gold (shining surprise)\n        glowIntensity: 1.8,         // Very intense, sudden flash\n        particleRate: 30,           // Rapid burst emission\n        minParticles: 0,            // Can start from nothing\n        maxParticles: 15,           // Burst of shocked particles\n        particleBehavior: 'burst',  // Explosive outward motion\n        breathRate: 0.3,            // Gasping, held breath\n        breathDepth: 0.18,          // Large shocked inhale\n        coreJitter: false,          // Frozen in surprise\n        particleColors: [\n            { color: '#FFD700', weight: 25 },  // Gold burst\n            { color: '#FFA500', weight: 20 },  // Orange shock\n            { color: '#FFFF00', weight: 15 },  // Yellow flash\n            { color: '#FF6347', weight: 15 },  // Tomato red excitement\n            { color: '#FFE4B5', weight: 10 },  // Moccasin highlight\n            { color: '#FF4500', weight: 10 },  // OrangeRed pop\n            { color: '#FFFACD', weight: 5 }    // LemonChiffon sparkle\n        ]\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 1.6,         // Rapid, startled reactions\n        amplitude: 1.5,     // Large, exaggerated movements\n        intensity: 1.4,     // Strong shock force\n        smoothness: 0.7,    // Abrupt, jerky motions\n        regularity: 0.8,    // Erratic surprise patterns\n        addPop: true        // Popping, explosive effect\n    },\n    \n    // Typical gestures for surprise\n    typicalGestures: ['expand', 'bounce', 'flash', 'pulse', 'pop'],\n    \n    // Transition configuration\n    transitions: { \n        duration: 200,           // Instant shock response\n        easing: 'easeOutBack',  // Snappy, elastic reaction\n        priority: 6             // High interrupt priority\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Disgust Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'disgust',\n    emoji: '🤢',\n    description: 'Revulsion with repelling particles',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#9ACD32',       // Sickly yellow-green (YellowGreen)\n        glowIntensity: 1.0,         // Stronger, toxic glow\n        particleRate: 15,           // More particles for nauseating effect\n        minParticles: 5,            // Maintain visible repulsion\n        maxParticles: 12,           // Controlled rejection display\n        particleBehavior: 'repelling', // Particles flee from center\n        breathRate: 0.7,            // Slow, queasy breathing\n        breathDepth: 0.04,          // Shallow, uncomfortable breaths\n        coreJitter: false,          // Stable but uneasy core\n        particleColors: [\n            { color: '#9ACD32', weight: 25 },  // Yellow-green toxic\n            { color: '#ADFF2F', weight: 20 },  // Bright acid green\n            { color: '#7FFF00', weight: 15 },  // Chartreuse nausea\n            { color: '#BDB76B', weight: 15 },  // Dark khaki sick\n            { color: '#6B8E23', weight: 10 },  // Olive drab decay\n            { color: '#CCFF00', weight: 8 },   // Fluorescent bile\n            { color: '#556B2F', weight: 7 }    // Dark olive shadow\n        ]\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 0.9,        // Slightly slowed movements\n        amplitude: 0.7,    // Restricted, withdrawn motion\n        intensity: 0.9,    // Controlled repulsion force\n        smoothness: 0.8,   // Mostly smooth with discomfort\n        regularity: 1.0,   // Consistent rejection pattern\n        addRecoil: true    // Recoiling motion effect\n    },\n    \n    // Typical gestures for disgust\n    typicalGestures: ['contract', 'shake', 'recoil', 'wobble'],\n    \n    // Transition configuration\n    transitions: { \n        duration: 600,       // Moderate transition speed\n        easing: 'easeIn',   // Gradual onset of revulsion\n        priority: 4         // Mid-level priority state\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Love Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'love',\n    emoji: '💕',\n    description: 'Warm affection with orbiting particles',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#FF1493',       // Deep passionate pink (DeepPink)\n        glowIntensity: 1.8,         // Strong, radiant warmth\n        particleRate: 25,           // Generous particle flow\n        minParticles: 10,           // Constant loving presence\n        maxParticles: 18,           // Abundant affection display\n        particleBehavior: 'orbiting', // Particles orbit romantically\n        breathRate: 0.75,           // Slow, content breathing\n        breathDepth: 0.15,          // Deep, satisfied breaths\n        coreJitter: false,          // Stable, secure feeling\n        particleColors: [\n            { color: '#FF1493', weight: 30 },  // Deep passionate pink\n            { color: '#FF69B4', weight: 25 },  // Hot pink\n            { color: '#FF007F', weight: 15 },  // Rose red\n            { color: '#FFB6C1', weight: 10 },  // Light pink highlights\n            { color: '#FF45A0', weight: 10 },  // Vibrant magenta\n            { color: '#E91E63', weight: 5 },   // Material pink accent\n            { color: '#FFC0CB', weight: 5 }    // Soft pink glow\n        ]\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 0.9,         // Gentle, romantic pace\n        amplitude: 1.1,     // Slightly expanded movements\n        intensity: 1.2,     // Enhanced emotional depth\n        smoothness: 1.4,    // Extra smooth, flowing motion\n        regularity: 1.2,    // Consistent, rhythmic patterns\n        addWarmth: true     // Warm, inviting quality\n    },\n    \n    // Typical gestures for love\n    typicalGestures: ['pulse', 'sway', 'orbit', 'glow', 'breathe', 'float'],\n    \n    // Transition configuration\n    transitions: { \n        duration: 700,         // Gradual emotional shift\n        easing: 'easeInOut',  // Smooth, gentle transition\n        priority: 5           // Moderate emotional priority\n    },\n    \n    // Rhythm configuration - how love emotion responds to musical timing\n    rhythm: {\n        enabled: true,\n        \n        // Particle emission syncs to rhythm\n        particleEmission: {\n            syncMode: 'beat',        // Emit bursts on beat\n            burstSize: 3,            // Extra particles per beat\n            offBeatRate: 0.7         // Reduced emission between beats\n        },\n        \n        // Orbital motion rhythm\n        orbitalSync: {\n            speedMultiplier: {\n                onBeat: 1.2,         // Speed up on beat\n                offBeat: 0.9,        // Slow between beats\n                curve: 'ease'        // Smooth speed changes\n            },\n            radiusSync: {\n                enabled: true,\n                subdivision: 'quarter',  // Pulse radius on quarters\n                amount: 0.15            // 15% radius variation\n            }\n        },\n        \n        // Glow pulsing with rhythm\n        glowSync: {\n            intensityRange: [1.4, 2.0],  // Min/max glow intensity\n            syncTo: 'beat',              // Pulse on beats\n            attack: 0.1,                 // Quick brightening\n            decay: 0.6                   // Gentle fade\n        },\n        \n        // Breathing synced to bars\n        breathSync: {\n            mode: 'bars',\n            barsPerBreath: 2,    // One breath every 2 bars\n            intensity: 1.0        // Full sync strength\n        },\n        \n        // Pattern-specific overrides\n        patternBehaviors: {\n            'waltz': {\n                // 3/4 time creates romantic swaying\n                orbitalSync: { \n                    radiusSync: { subdivision: 'bar', amount: 0.25 }\n                },\n                particleEmission: { syncMode: 'bar', burstSize: 5 }\n            },\n            'swing': {\n                // Jazzy, playful love\n                orbitalSync: {\n                    speedMultiplier: { onBeat: 1.5, curve: 'bounce' }\n                }\n            }\n        },\n        \n        // Intensity modulation\n        intensityMapping: {\n            low: { particleRate: 0.6, glowIntensity: 0.8 },\n            medium: { particleRate: 1.0, glowIntensity: 1.0 },\n            high: { particleRate: 1.4, glowIntensity: 1.3 }\n        }\n    }\n};","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Excited Emotion\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n */\r\n\r\nexport default {\r\n    name: 'excited',\r\n    emoji: '🤩',\r\n    description: 'High energy with rapid particles',\r\n    \r\n    // Visual properties\r\n    visual: {\r\n        glowColor: '#FF6B35',       // Vibrant orange-red energy\r\n        glowIntensity: 1.5,         // Stronger energetic aura\r\n        particleRate: 25,           // Increased emission frequency (was 15)\r\n        minParticles: 8,            // More constant particles (was 5)\r\n        maxParticles: 30,           // More maximum particles (was 20)\r\n        particleBehavior: 'burst',  // Explosive particle behavior\r\n        breathRate: 2.0,            // Quick, excited breathing\r\n        breathDepth: 0.14,          // Deep, energized breaths\r\n        coreJitter: true,           // Vibrating with enthusiasm\r\n        particleColors: [\r\n            { color: '#FF6B35', weight: 25 },  // Vibrant orange energy\r\n            { color: '#FF1744', weight: 20 },  // Red accent excitement\r\n            { color: '#FFC107', weight: 15 },  // Amber sparkle\r\n            { color: '#FF9100', weight: 15 },  // Deep orange burst\r\n            { color: '#FFEB3B', weight: 10 },  // Yellow flash\r\n            { color: '#FF5722', weight: 10 },  // Deep orange-red\r\n            { color: '#FFF59D', weight: 5 }    // Pale yellow highlight\r\n        ]\r\n    },\r\n    \r\n    // Gesture modifiers\r\n    modifiers: {\r\n        speed: 1.4,         // Quickened, energetic pace\r\n        amplitude: 1.3,     // Expansive, enthusiastic movements\r\n        intensity: 1.3,     // Strong energetic force\r\n        smoothness: 0.8,    // Smooth with energetic bursts\r\n        regularity: 0.7,    // Spontaneous, varied patterns\r\n        addVibration: true  // Buzzing with excitement\r\n    },\r\n    \r\n    // Typical gestures for excitement\r\n    typicalGestures: ['bounce', 'spin', 'vibrate', 'expand', 'shake', 'pulse'],\r\n    \r\n    // Transition configuration\r\n    transitions: { \r\n        duration: 300,              // Quick state entry\r\n        easing: 'easeOutElastic',  // Bouncy, elastic entrance\r\n        priority: 6                // High-energy priority level\r\n    },\r\n    \r\n    // Rhythm configuration - excited syncs energetically to beat\r\n    rhythm: {\r\n        enabled: true,\r\n        \r\n        // Particle emission doubles on beat\r\n        particleEmission: {\r\n            syncMode: 'beat',\r\n            burstSize: 5,           // Big bursts on beat\r\n            offBeatRate: 0.5        // Calmer between beats\r\n        },\r\n        \r\n        // Core jitter syncs to subdivisions\r\n        jitterSync: {\r\n            subdivision: 'sixteenth',  // Rapid jitter on 16th notes\r\n            intensity: 0.8,           // Strong rhythm influence\r\n            onBeat: 1.5              // Extra jitter on beat\r\n        },\r\n        \r\n        // Glow pulses rapidly with beat\r\n        glowSync: {\r\n            intensityRange: [1.0, 1.8],\r\n            syncTo: 'eighth',         // Pulse on 8th notes\r\n            attack: 0.05,            // Very quick attack\r\n            decay: 0.2               // Quick decay\r\n        },\r\n        \r\n        // Different patterns create different excitement\r\n        patternBehaviors: {\r\n            'dubstep': {\r\n                // Heavy drops create explosion effects\r\n                particleEmission: { \r\n                    syncMode: 'beat',\r\n                    burstSize: 10,      // Huge bursts on drop\r\n                    dropMultiplier: 2   // Double on beat 3\r\n                }\r\n            },\r\n            'breakbeat': {\r\n                // Broken beats create chaotic energy\r\n                jitterSync: {\r\n                    subdivision: 'random',\r\n                    intensity: 1.0\r\n                }\r\n            }\r\n        }\r\n    }\r\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Resting Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'resting',\n    emoji: '😴',\n    description: 'Deep relaxation with slow drift',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#9370DB',       // Sleepy purple twilight\n        glowIntensity: 0.8,         // Dimmed, drowsy glow\n        particleRate: 10,           // Lazy particle generation\n        minParticles: 3,            // Minimal sleepy presence\n        maxParticles: 5,            // Few drifting particles\n        particleBehavior: 'resting', // Slow, floating behavior\n        breathRate: 0.8,            // Deep, slow breathing\n        breathDepth: 0.12,          // Pronounced rest breaths\n        coreJitter: false,          // Perfectly still core\n        particleColors: [\n            { color: '#9370DB', weight: 30 },  // Primary sleepy purple\n            { color: '#A591C4', weight: 20 },  // Soft lavender drift\n            { color: '#B366FF', weight: 20 },  // Dreamy violet accent\n            { color: '#B8A1E6', weight: 15 },  // Light drowsy highlights\n            { color: '#674D9B', weight: 15 }   // Deep sleep shadows\n        ]\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 0.5,         // Slowed, drowsy pace\n        amplitude: 0.4,     // Minimal movement range\n        intensity: 0.5,     // Reduced energy level\n        smoothness: 1.4,    // Extra smooth drifting\n        regularity: 0.9,    // Slightly irregular, natural rest\n        addWeight: true     // Heavy, weighted feeling\n    },\n    \n    // Typical gestures for resting\n    typicalGestures: ['breathe', 'drift', 'sway', 'float'],\n    \n    // Transition configuration\n    transitions: { \n        duration: 1000,         // Slow fade to rest\n        easing: 'easeInOut',   // Gentle transition\n        priority: 2            // Low priority state\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Euphoria Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'euphoria',\n    emoji: '🌟',\n    description: 'Radiant hope and new beginnings',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#FFB6C1',       // Light pink euphoric glow\n        glowIntensity: 2.0,         // Maximum transcendent radiance\n        particleRate: 35,           // Abundant particle emission\n        minParticles: 15,           // Abundant positive energy\n        maxParticles: 30,           // Maximum radiant display\n        particleBehavior: 'radiant', // Outward radiating particles\n        breathRate: 1.3,            // Elevated, joyful breathing\n        breathDepth: 0.25,          // Full, satisfied breaths\n        coreJitter: false,          // Stable, confident core\n        particleColors: [\n            { color: '#FFB6C1', weight: 20 },  // Light pink bliss\n            { color: '#FFD700', weight: 18 },  // Golden joy\n            { color: '#87CEEB', weight: 15 },  // Sky blue serenity\n            { color: '#DDA0DD', weight: 15 },  // Plum transcendence\n            { color: '#98FB98', weight: 12 },  // Pale green harmony\n            { color: '#FFA07A', weight: 10 },  // Light salmon warmth\n            { color: '#E6E6FA', weight: 8 },   // Lavender dream\n            { color: '#FFFFFF', weight: 2 }    // Pure white sparkle\n        ]\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 1.4,         // Energized, flowing pace\n        amplitude: 1.5,     // Expansive, reaching movements\n        intensity: 1.6,     // Powerful positive force\n        smoothness: 1.3,    // Extra fluid, graceful motion\n        regularity: 0.8,    // Natural variation in rhythm\n        addWarmth: true,    // Warm, inviting quality\n        addLift: true       // Upward, elevating tendency\n    },\n    \n    // Typical gestures for euphoria\n    typicalGestures: ['expand', 'radiate', 'pulse', 'glow', 'float', 'bloom'],\n    \n    // Transition configuration\n    transitions: { \n        duration: 600,           // Smooth emergence\n        easing: 'easeOutExpo',  // Explosive, radiant entrance\n        priority: 8             // High priority transcendent state\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Focused Emotion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'focused',\n    emoji: '🎯',\n    description: 'Intense concentration with directed flow',\n    \n    // Visual properties\n    visual: {\n        glowColor: '#00CED1',       // Sharp cyan concentration\n        glowIntensity: 1.2,         // Clear, defined aura\n        particleRate: 10,           // Steady, controlled emission\n        minParticles: 5,            // Consistent focus presence\n        maxParticles: 12,           // Controlled attention display\n        particleBehavior: 'directed', // Particles follow target\n        breathRate: 1.2,            // Steady, measured breathing\n        breathDepth: 0.08,          // Controlled, regular breaths\n        coreJitter: true,           // Minimal tracking adjustments\n        particleColors: [\n            { color: '#00CED1', weight: 30 },  // Primary focused cyan\n            { color: '#4A9FA0', weight: 20 },  // Muted concentration tone\n            { color: '#00FFFF', weight: 20 },  // Bright attention burst\n            { color: '#5FE5E7', weight: 15 },  // Light focus highlights\n            { color: '#006B6D', weight: 15 }   // Deep concentration base\n        ],\n        eyeOpenness: 0.7,           // Narrowed for concentration\n        microAdjustments: true      // Subtle tracking movements\n    },\n    \n    // Gesture modifiers\n    modifiers: {\n        speed: 1.0,         // Baseline, deliberate pace\n        amplitude: 0.9,     // Controlled movement range\n        intensity: 1.1,     // Enhanced focus strength\n        smoothness: 1.1,    // Precise, smooth tracking\n        regularity: 1.2,    // Consistent, predictable patterns\n        addPrecision: true  // Enhanced accuracy mode\n    },\n    \n    // Typical gestures for focus\n    typicalGestures: ['track', 'lock', 'scan', 'pulse', 'vibrate'],\n    \n    // Transition configuration\n    transitions: { \n        duration: 400,       // Moderate focus shift\n        easing: 'easeIn',   // Gradual concentration\n        priority: 5         // Mid-level attention priority\n    },\n    \n    // Core appearance parameters\n    getCoreParams: function(state) {\n        return {\n            scaleX: 1.1,              // Slightly widened awareness\n            scaleY: 0.7,              // Narrowed for concentration\n            eyeOpenness: 0.7,         // Focused gaze intensity\n            eyeExpression: 'focused', // Concentrated expression\n            pupilOffset: { x: 0, y: 0 }, // Centered attention\n            microAdjustments: true    // Small tracking movements\n        };\n    }\n};","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE\r\n *  └─○═╝                                                                             \r\n *                     ◐ ◑ ◒ ◓  STATE MACHINE CORE  ◓ ◒ ◑ ◐                     \r\n *                                                                                    \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Emotive State Machine - Emotional State & Transition Management\r\n * @author Emotive Engine Team\r\n * @version 2.0.0\r\n * @module EmotiveStateMachine\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                                   PURPOSE                                         \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ The BRAIN of the Emotive Engine. Manages emotional states, transitions,           \r\n * ║ undertones, and gesture queues. This is where emotions become behavior.           \r\n * ║ Works with emotionMap.js for visuals but defines the LOGIC and TIMING.           \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 🧠 CORE RESPONSIBILITIES                                                          \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • Emotional state management (current, target, transitions)                       \r\n * │ • Undertone layering (nervous + happy, tired + angry, etc.)                      \r\n * │ • Gesture queue processing (sequential animation management)                      \r\n * │ • Smooth property interpolation during transitions                                \r\n * │ • Event emission for state changes                                                \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ ⚠️  CRITICAL STATE PROPERTIES                                                     \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • emotion      : Current emotional state (must be valid emotion)                  \r\n * │ • undertone    : Optional modifier (null or valid undertone)                      \r\n * │ • gesture      : Currently playing gesture animation                              \r\n * │ • transitions  : Active transition data (progress, timing, easing)                \r\n * │ • gestureQueue : Pending gestures to play sequentially                            \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 🔄 TRANSITION SYSTEM                                                              \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • Smooth blending between emotional states                                        \r\n * │ • Configurable transition duration (default 500ms)                                \r\n * │ • Easing functions for natural motion                                             \r\n * │ • Property interpolation (colors, sizes, speeds)                                  \r\n * │ • Prevents jarring visual changes                                                 \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ ❌ DO NOT MODIFY WITHOUT UNDERSTANDING                                            \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ ✗ State validation logic    → Breaks error handling                              \r\n * │ ✗ Transition timing        → Causes visual glitches                              \r\n * │ ✗ Event emission order     → Breaks dependent systems                            \r\n * │ ✗ Property interpolation   → Creates animation artifacts                         \r\n * │ ✗ Queue processing         → Causes gesture conflicts                            \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                          ADDING NEW EMOTIONAL STATES                              \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ 1. Define visual properties in emotionMap.js                                      \r\n * ║ 2. Add state definition in initializeEmotionalStates()                            \r\n * ║ 3. Add validation to ErrorBoundary.js                                             \r\n * ║ 4. Test transitions FROM and TO the new state                                     \r\n * ║ 5. Verify particle behavior and performance                                       \r\n * ║ 6. Document any special transition rules                                          \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * ════════════════════════════════════════════════════════════════════════════════════\r\n */\r\n\r\nimport { interpolateHsl } from '../utils/colorUtils.js';\r\nimport { applyEasing, easeInOutCubic } from '../utils/easing.js';\r\nimport { hasEmotion, listEmotions } from './emotions/index.js';\r\n\r\nclass EmotiveStateMachine {\r\n    constructor(errorBoundary) {\r\n        this.errorBoundary = errorBoundary;\r\n        \r\n        // Current state\r\n        this.state = {\r\n            emotion: 'neutral',\r\n            undertone: null,\r\n            gesture: null,\r\n            gestureQueue: [],\r\n            speaking: false,\r\n            audioLevel: 0\r\n        };\r\n        \r\n        // Transition management\r\n        this.transitions = {\r\n            emotional: {\r\n                current: 'neutral',\r\n                target: null,\r\n                progress: 0,\r\n                duration: 500,\r\n                startTime: 0,\r\n                isActive: false\r\n            },\r\n            undertone: {\r\n                current: null,\r\n                target: null,\r\n                progress: 0,\r\n                duration: 300,  // Faster than emotion transitions\r\n                startTime: 0,\r\n                isActive: false,\r\n                currentWeight: 0,  // 0-1 weight of current undertone\r\n                targetWeight: 0    // 0-1 weight of target undertone\r\n            }\r\n        };\r\n        \r\n        // Cache for interpolation results\r\n        this.interpolationCache = {\r\n            lastUpdate: 0,\r\n            cacheInterval: 100, // Cache for 100ms\r\n            cachedProperties: null,\r\n            cachedRenderState: null\r\n        };\r\n        \r\n        // Initialize emotional state definitions\r\n        this.initializeEmotionalStates();\r\n        this.initializeUndertoneModifiers();\r\n    }\r\n\r\n    /**\r\n     * Initialize all 8 emotional states with their visual properties\r\n     */\r\n    initializeEmotionalStates() {\r\n        this.emotionalStates = {\r\n            neutral: {\r\n                primaryColor: '#B0B0B0',\r\n                glowIntensity: 0.7,\r\n                particleRate: 1,  // DECIMATED - minimal particles\r\n                minParticles: 3,  // Always have at least 3 particles for gestures to affect\r\n                maxParticles: 4,  // Max 4 particles\r\n                particleBehavior: 'ambient',\r\n                coreSize: 1.0,\r\n                breathRate: 1.0,\r\n                breathDepth: 0.1\r\n            },\r\n            joy: {\r\n                primaryColor: '#FFD700',\r\n                glowIntensity: 1.2,\r\n                particleRate: 2,           // More frequent popping\r\n                minParticles: 3,           // Always popping\r\n                maxParticles: 8,           // Can have many kernels popping\r\n                particleBehavior: 'popcorn', // Spontaneous popping effect\r\n                coreSize: 1.1,\r\n                breathRate: 1.3,\r\n                breathDepth: 0.15\r\n            },\r\n            sadness: {\r\n                primaryColor: '#4169E1',\r\n                glowIntensity: 0.6,\r\n                particleRate: 2,  // Halved from 3\r\n                minParticles: 1,  // At least 1\r\n                maxParticles: 3,  // Max 3 particles\r\n                particleBehavior: 'falling',\r\n                coreSize: 0.9,\r\n                breathRate: 0.7,\r\n                breathDepth: 0.08\r\n            },\r\n            anger: {\r\n                primaryColor: '#DC143C',\r\n                glowIntensity: 1.3,\r\n                particleRate: 1,  // ~30% chance per frame\r\n                minParticles: 3,  // Always show anger\r\n                maxParticles: 8,  // Can get intense\r\n                particleBehavior: 'aggressive',\r\n                coreSize: 1.2,\r\n                breathRate: 1.5,\r\n                breathDepth: 0.2\r\n            },\r\n            fear: {\r\n                primaryColor: '#8B008B',\r\n                glowIntensity: 0.8,\r\n                particleRate: 1,  // chance per frame\r\n                minParticles: 2,  // Always visible\r\n                maxParticles: 6,  // Moderate max\r\n                particleBehavior: 'scattering',\r\n                coreSize: 0.8,\r\n                breathRate: 1.8,\r\n                breathDepth: 0.12\r\n            },\r\n            surprise: {\r\n                primaryColor: '#FF8C00',\r\n                glowIntensity: 1.4,\r\n                particleRate: 1,\r\n                minParticles: 3,  // Burst effect\r\n                maxParticles: 10,  // Can burst big\r\n                particleBehavior: 'burst',\r\n                coreSize: 1.3,\r\n                breathRate: 2.0,\r\n                breathDepth: 0.25\r\n            },\r\n            disgust: {\r\n                primaryColor: '#9ACD32',\r\n                glowIntensity: 0.9,\r\n                particleRate: 2,\r\n                minParticles: 2,  // Always show disgust\r\n                maxParticles: 4,  // Limited particles\r\n                particleBehavior: 'repelling',\r\n                coreSize: 0.95,\r\n                breathRate: 0.8,\r\n                breathDepth: 0.06\r\n            },\r\n            love: {\r\n                primaryColor: '#FF69B4',\r\n                glowIntensity: 1.1,\r\n                particleRate: 1,  // Halved from 9\r\n                minParticles: 2,  // Always orbiting\r\n                maxParticles: 5,  // Gentle max\r\n                particleBehavior: 'orbiting',\r\n                coreSize: 1.05,\r\n                breathRate: 0.9,\r\n                breathDepth: 0.18\r\n            },\r\n            excited: {\r\n                primaryColor: '#FF00FF',  // Hot magenta\r\n                glowIntensity: 1.2,  // Bright glow for excitement\r\n                particleRate: 360,  // Double rate for more visible particles\r\n                minParticles: 480,  // Double particles for denser effect\r\n                maxParticles: 900,  // Double max particles\r\n                particleBehavior: 'fizzy',\r\n                coreSize: 0.85,  // Slightly smaller than neutral\r\n                breathRate: 1.5,  // Excited breathing\r\n                breathDepth: 0.08,  // Moderate breath\r\n                eyeOpenness: 1.0  // Wide eyes\r\n            },\r\n            resting: {\r\n                primaryColor: '#7C3AED',   // Soft purple for resting\r\n                glowIntensity: 0.8,\r\n                particleRate: 2,          // Moderate particles for visible effect\r\n                minParticles: 3,  // Always 3-5 visible\r\n                maxParticles: 5,  // Calm max\r\n                particleBehavior: 'resting',\r\n                coreSize: 1.0,\r\n                breathRate: 0.8,           // 12-16 breaths per minute (resting human)\r\n                breathDepth: 0.12          // Gentle, relaxed breathing\r\n            },\r\n            euphoria: {\r\n                primaryColor: '#FFD700',   // Golden sunrise\r\n                glowIntensity: 1.8,        // Radiant warm glow\r\n                particleRate: 3,           // Abundant like sunbeams\r\n                minParticles: 15,          // Always sparkling\r\n                maxParticles: 30,          // Maximum celebration\r\n                particleBehavior: 'radiant', // Radiating outward\r\n                coreSize: 1.15,            // Expanded with joy\r\n                breathRate: 1.3,           // Energized breathing\r\n                breathDepth: 0.25,         // Deep refreshing breaths\r\n            },\r\n            focused: {\r\n                primaryColor: '#00CED1',  // Bright cyan\r\n                glowIntensity: 1.2,\r\n                particleRate: 0.5,  // Frequent, like synapses\r\n                minParticles: 2,\r\n                maxParticles: 5,\r\n                particleBehavior: 'directed',  // Fast, straight paths\r\n                coreSize: 1.05,\r\n                breathRate: 1.2,  // Alert breathing\r\n                breathDepth: 0.08,\r\n                eyeOpenness: 0.7,  // Narrowed for concentration\r\n                microAdjustments: true  // Enable tiny shifts\r\n            },\r\n            suspicion: {\r\n                primaryColor: '#708090',  // Slate gray\r\n                glowIntensity: 0.9,\r\n                particleRate: 20,  // Higher rate for continuous particles\r\n                minParticles: 8,\r\n                maxParticles: 15,  // More particles for better visibility\r\n                particleBehavior: 'burst',  // Use burst like surprise but we'll modify it\r\n                coreSize: 1.0,\r\n                breathRate: 0.8,  // Controlled breathing\r\n                breathDepth: 0.05,  // Shallow, alert breathing\r\n                eyeOpenness: 0.5,  // Narrowed, skeptical eyes\r\n                eyeArc: -0.2  // Slight frown\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initialize undertone modifiers that affect base emotional properties\r\n     */\r\n    initializeUndertoneModifiers() {\r\n        this.undertoneModifiers = {\r\n            nervous: {\r\n                jitterAmount: 0.3,\r\n                breathRateMultiplier: 1.2,\r\n                glowIntensityMultiplier: 0.9,\r\n                particleRateMultiplier: 1.1\r\n            },\r\n            confident: {\r\n                coreSizeMultiplier: 1.1,\r\n                glowIntensityMultiplier: 1.2,\r\n                breathRateMultiplier: 0.9,\r\n                particleRateMultiplier: 1.0\r\n            },\r\n            tired: {\r\n                breathRateMultiplier: 0.7,\r\n                particleRateMultiplier: 0.5,\r\n                glowIntensityMultiplier: 0.8,\r\n                coreSizeMultiplier: 0.95\r\n            },\r\n            intense: {\r\n                amplificationFactor: 1.3\r\n            },\r\n            subdued: {\r\n                dampeningFactor: 0.7\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Sets the emotional state with optional undertone\r\n     * @param {string} emotion - The emotion to set\r\n     * @param {string|null} undertone - Optional undertone modifier\r\n     * @param {number} duration - Transition duration in milliseconds\r\n     * @returns {boolean} Success status\r\n     */\r\n    setEmotion(emotion, undertone = null, duration = 500) {\r\n        return this.errorBoundary.wrap(() => {\r\n            // Clear interpolation cache when emotion changes\r\n            this.interpolationCache.cachedProperties = null;\r\n            this.interpolationCache.cachedRenderState = null;\r\n            \r\n            // Validate emotion using modular system\r\n            if (!hasEmotion(emotion) && !this.emotionalStates.hasOwnProperty(emotion)) {\r\n                const validEmotions = [...Object.keys(this.emotionalStates), ...listEmotions()];\r\n                const uniqueEmotions = [...new Set(validEmotions)];\r\n                throw new Error(`Invalid emotion: ${emotion}. Valid emotions: ${uniqueEmotions.join(', ')}`);\r\n            }\r\n\r\n            // Validate undertone\r\n            if (undertone !== null && !this.undertoneModifiers.hasOwnProperty(undertone)) {\r\n                throw new Error(`Invalid undertone: ${undertone}. Valid undertones: ${Object.keys(this.undertoneModifiers).join(', ')}`);\r\n            }\r\n\r\n            // If already in this state, just update undertone\r\n            if (this.state.emotion === emotion && this.state.undertone === undertone) {\r\n                return true;\r\n            }\r\n\r\n            // Set up emotion transition if emotion is changing\r\n            if (this.state.emotion !== emotion) {\r\n                if (duration > 0) {\r\n                    this.transitions.emotional = {\r\n                        current: this.state.emotion,\r\n                        target: emotion,\r\n                        progress: 0,\r\n                        duration: Math.max(100, duration),\r\n                        startTime: performance.now(),\r\n                        isActive: true\r\n                    };\r\n                    \r\n                    // Reset simulated time for testing\r\n                    if (this._simulatedTime !== undefined) {\r\n                        this._simulatedTime = 0;\r\n                    }\r\n                } else {\r\n                    // Immediate transition\r\n                    this.transitions.emotional = {\r\n                        current: emotion,\r\n                        target: null,\r\n                        progress: 1,\r\n                        duration: 0,\r\n                        startTime: performance.now(),\r\n                        isActive: false\r\n                    };\r\n                }\r\n                this.state.emotion = emotion;\r\n            }\r\n            \r\n            // Set up undertone transition if undertone is changing\r\n            if (this.state.undertone !== undertone) {\r\n                this.transitions.undertone = {\r\n                    current: this.state.undertone,\r\n                    target: undertone,\r\n                    progress: 0,\r\n                    duration: 300,  // Always smooth undertone transitions\r\n                    startTime: performance.now(),\r\n                    isActive: true,\r\n                    currentWeight: this.state.undertone ? 1 : 0,\r\n                    targetWeight: undertone ? 1 : 0\r\n                };\r\n                this.state.undertone = undertone;\r\n            }\r\n\r\n            return true;\r\n        }, 'emotion-setting', false)();\r\n    }\r\n\r\n    /**\r\n     * Applies undertone modifiers to base emotional properties\r\n     * @param {Object} baseProperties - Base emotional properties\r\n     * @param {string|null} undertone - Undertone to apply\r\n     * @returns {Object} Modified properties\r\n     */\r\n    applyUndertone(baseProperties, undertone) {\r\n        if (!undertone || !this.undertoneModifiers.hasOwnProperty(undertone)) {\r\n            return { ...baseProperties };\r\n        }\r\n\r\n        const modifier = this.undertoneModifiers[undertone];\r\n        const modified = { ...baseProperties };\r\n\r\n        // Apply specific modifiers\r\n        if (modifier.glowIntensityMultiplier !== undefined) {\r\n            modified.glowIntensity *= modifier.glowIntensityMultiplier;\r\n        }\r\n        if (modifier.breathRateMultiplier !== undefined) {\r\n            modified.breathRate *= modifier.breathRateMultiplier;\r\n        }\r\n        if (modifier.particleRateMultiplier !== undefined) {\r\n            modified.particleRate = Math.round(modified.particleRate * modifier.particleRateMultiplier);\r\n        }\r\n        if (modifier.coreSizeMultiplier !== undefined) {\r\n            modified.coreSize *= modifier.coreSizeMultiplier;\r\n        }\r\n\r\n        // Apply amplification/dampening factors\r\n        if (modifier.amplificationFactor !== undefined) {\r\n            const factor = modifier.amplificationFactor;\r\n            modified.glowIntensity *= factor;\r\n            modified.breathRate *= factor;\r\n            modified.particleRate = Math.round(modified.particleRate * factor);\r\n            modified.coreSize *= factor;\r\n        }\r\n        if (modifier.dampeningFactor !== undefined) {\r\n            const factor = modifier.dampeningFactor;\r\n            modified.glowIntensity *= factor;\r\n            modified.breathRate *= factor;\r\n            modified.particleRate = Math.round(modified.particleRate * factor);\r\n            modified.coreSize *= factor;\r\n        }\r\n\r\n        // Add special properties\r\n        if (modifier.jitterAmount !== undefined) {\r\n            modified.jitterAmount = modifier.jitterAmount;\r\n        }\r\n\r\n        return modified;\r\n    }\r\n\r\n    /**\r\n     * Updates the state machine with delta time\r\n     * @param {number} deltaTime - Time since last update in milliseconds\r\n     */\r\n    update(deltaTime) {\r\n        this.errorBoundary.wrap(() => {\r\n            // Update emotional transition\r\n            if (this.transitions.emotional.isActive) {\r\n                this.updateEmotionalTransition(deltaTime);\r\n            }\r\n            \r\n            // Update undertone transition\r\n            if (this.transitions.undertone.isActive) {\r\n                this.updateUndertoneTransition(deltaTime);\r\n            }\r\n        }, 'state-machine-update')();\r\n    }\r\n\r\n    /**\r\n     * Updates undertone transition progress\r\n     * @param {number} deltaTime - Time since last update in milliseconds\r\n     */\r\n    updateUndertoneTransition(deltaTime) {\r\n        const transition = this.transitions.undertone;\r\n        \r\n        // Calculate elapsed time\r\n        const elapsed = performance.now() - transition.startTime;\r\n        const progress = Math.min(elapsed / transition.duration, 1);\r\n        \r\n        // Apply easing\r\n        const easedProgress = easeInOutCubic(progress);\r\n        \r\n        // Update weights for smooth transition\r\n        if (transition.current && transition.target) {\r\n            // Transitioning between two undertones\r\n            transition.currentWeight = 1 - easedProgress;\r\n            transition.targetWeight = easedProgress;\r\n        } else if (transition.current && !transition.target) {\r\n            // Fading out current undertone\r\n            transition.currentWeight = 1 - easedProgress;\r\n            transition.targetWeight = 0;\r\n        } else if (!transition.current && transition.target) {\r\n            // Fading in new undertone\r\n            transition.currentWeight = 0;\r\n            transition.targetWeight = easedProgress;\r\n        }\r\n        \r\n        transition.progress = progress;\r\n        \r\n        // Complete transition\r\n        if (progress >= 1) {\r\n            transition.isActive = false;\r\n            transition.current = transition.target;\r\n            transition.currentWeight = transition.target ? 1 : 0;\r\n            transition.targetWeight = 0;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Updates emotional state transition progress\r\n     * @param {number} deltaTime - Time since last update in milliseconds\r\n     */\r\n    updateEmotionalTransition(deltaTime) {\r\n        const transition = this.transitions.emotional;\r\n        \r\n        // Use either real elapsed time or simulated deltaTime for testing\r\n        let elapsed;\r\n        if (this._simulatedTime !== undefined) {\r\n            // For testing - use accumulated simulated time\r\n            this._simulatedTime += deltaTime;\r\n            elapsed = this._simulatedTime;\r\n        } else {\r\n            // For real usage - use actual elapsed time\r\n            elapsed = performance.now() - transition.startTime;\r\n        }\r\n        \r\n        // Calculate progress (0 to 1)\r\n        transition.progress = Math.min(1, elapsed / transition.duration);\r\n        \r\n        // Check if transition is complete\r\n        if (transition.progress >= 1) {\r\n            transition.isActive = false;\r\n            transition.current = transition.target;\r\n            transition.target = null;\r\n            transition.progress = 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current interpolated emotional properties\r\n     * @returns {Object} Current emotional properties with smooth transitions\r\n     */\r\n    getCurrentEmotionalProperties() {\r\n        return this.errorBoundary.wrap(() => {\r\n            const now = performance.now();\r\n            \r\n            // Use cached result if still valid\r\n            if (this.interpolationCache.cachedProperties && \r\n                (now - this.interpolationCache.lastUpdate) < this.interpolationCache.cacheInterval) {\r\n                return this.interpolationCache.cachedProperties;\r\n            }\r\n            \r\n            const transition = this.transitions.emotional;\r\n            let properties;\r\n\r\n            if (transition.isActive && transition.target) {\r\n                // Interpolate between current and target states\r\n                properties = this.interpolateEmotionalProperties(\r\n                    transition.current,\r\n                    transition.target,\r\n                    transition.progress\r\n                );\r\n            } else {\r\n                // Use current state properties - fallback to neutral if emotion not found\r\n                const emotionState = this.emotionalStates[this.state.emotion] || this.emotionalStates.neutral;\r\n                properties = { ...emotionState };\r\n            }\r\n\r\n            // Apply undertone modifiers\r\n            properties = this.applyUndertone(properties, this.state.undertone);\r\n            \r\n            // Cache the result\r\n            this.interpolationCache.cachedProperties = properties;\r\n            this.interpolationCache.lastUpdate = now;\r\n\r\n            return properties;\r\n        }, 'emotional-properties', () => this.emotionalStates.neutral)();\r\n    }\r\n\r\n    /**\r\n     * Interpolates between two emotional states\r\n     * @param {string} fromEmotion - Source emotion\r\n     * @param {string} toEmotion - Target emotion\r\n     * @param {number} progress - Interpolation progress (0-1)\r\n     * @returns {Object} Interpolated properties\r\n     */\r\n    interpolateEmotionalProperties(fromEmotion, toEmotion, progress) {\r\n        const fromProps = this.emotionalStates[fromEmotion] || this.emotionalStates.neutral;\r\n        const toProps = this.emotionalStates[toEmotion] || this.emotionalStates.neutral;\r\n        \r\n        // Apply easing to progress\r\n        const easedProgress = applyEasing(progress, 0, 1, 'easeOutCubic');\r\n\r\n        return {\r\n            // Interpolate color in HSL space for better transitions\r\n            primaryColor: interpolateHsl(fromProps.primaryColor, toProps.primaryColor, easedProgress),\r\n            \r\n            // Interpolate numeric properties\r\n            glowIntensity: fromProps.glowIntensity + (toProps.glowIntensity - fromProps.glowIntensity) * easedProgress,\r\n            particleRate: Math.round(fromProps.particleRate + (toProps.particleRate - fromProps.particleRate) * easedProgress),\r\n            coreSize: fromProps.coreSize + (toProps.coreSize - fromProps.coreSize) * easedProgress,\r\n            breathRate: fromProps.breathRate + (toProps.breathRate - fromProps.breathRate) * easedProgress,\r\n            breathDepth: fromProps.breathDepth + (toProps.breathDepth - fromProps.breathDepth) * easedProgress,\r\n            \r\n            // Use target behavior when transition is more than 50% complete\r\n            particleBehavior: easedProgress > 0.5 ? toProps.particleBehavior : fromProps.particleBehavior\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the current state for external inspection\r\n     * @returns {Object} Current state information\r\n     */\r\n    getCurrentState() {\r\n        return {\r\n            emotion: this.state.emotion,\r\n            undertone: this.state.undertone,\r\n            isTransitioning: this.transitions.emotional.isActive,\r\n            transitionProgress: this.transitions.emotional.progress,\r\n            properties: this.getCurrentEmotionalProperties()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Applies an undertone to the current emotional state\r\n     * @param {string|null} undertone - Undertone to apply\r\n     * @returns {boolean} Success status\r\n     */\r\n    applyUndertoneModifier(undertone) {\r\n        return this.errorBoundary.wrap(() => {\r\n            // Validate undertone\r\n            if (undertone !== null && !this.undertoneModifiers.hasOwnProperty(undertone)) {\r\n                throw new Error(`Invalid undertone: ${undertone}. Valid undertones: ${Object.keys(this.undertoneModifiers).join(', ')}`);\r\n            }\r\n\r\n            // Apply the undertone\r\n            this.state.undertone = undertone;\r\n            \r\n            return true;\r\n        }, 'undertone-application', false)();\r\n    }\r\n\r\n    /**\r\n     * Clears the current undertone and resets to base emotional state\r\n     */\r\n    clearUndertone() {\r\n        this.state.undertone = null;\r\n    }\r\n\r\n    /**\r\n     * Gets the raw undertone modifier data for a specific undertone\r\n     * @param {string} undertone - Undertone name\r\n     * @returns {Object|null} Undertone modifier data or null if invalid\r\n     */\r\n    getUndertoneModifier(undertone) {\r\n        return this.errorBoundary.wrap(() => {\r\n            // Try to get from renderer first (comprehensive modifiers)\r\n            if (this.renderer && this.renderer.undertoneModifiers && \r\n                this.renderer.undertoneModifiers[undertone]) {\r\n                // Return the full modifier from renderer\r\n                return { ...this.renderer.undertoneModifiers[undertone] };\r\n            }\r\n            \r\n            // Fallback to local modifiers\r\n            if (!undertone || !this.undertoneModifiers.hasOwnProperty(undertone)) {\r\n                return null;\r\n            }\r\n            // Ensure essential properties exist in fallback\r\n            const localMod = { ...this.undertoneModifiers[undertone] };\r\n            if (!localMod.glowRadiusMult) {\r\n                localMod.glowRadiusMult = 1.0; // Default value\r\n            }\r\n            return localMod;\r\n        }, 'undertone-retrieval', null)();\r\n    }\r\n    \r\n    /**\r\n     * Gets weighted undertone modifiers based on current transition state\r\n     * @returns {Object|null} Combined undertone modifiers with transition weights applied\r\n     */\r\n    getWeightedUndertoneModifiers() {\r\n        const transition = this.transitions.undertone;\r\n        \r\n        // If no transition is active, return current undertone modifiers directly\r\n        if (!transition.isActive) {\r\n            if (this.state.undertone) {\r\n                const mod = this.getUndertoneModifier(this.state.undertone);\r\n                if (mod) {\r\n                    // Return full modifier with weight of 1.0 (fully applied) and type\r\n                    return { ...mod, weight: 1.0, type: this.state.undertone };\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        \r\n        // During transition, return the target modifier with interpolated weight\r\n        if (transition.target) {\r\n            const targetMod = this.getUndertoneModifier(transition.target);\r\n            if (targetMod) {\r\n                // Return target modifier with transition weight and type\r\n                return { ...targetMod, weight: transition.targetWeight, type: transition.target };\r\n            }\r\n        }\r\n        \r\n        // Fading out - return current modifier with decreasing weight  \r\n        if (transition.current && transition.currentWeight > 0) {\r\n            const currentMod = this.getUndertoneModifier(transition.current);\r\n            if (currentMod) {\r\n                return { ...currentMod, weight: transition.currentWeight, type: transition.current };\r\n            }\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Resets the state machine to neutral emotion\r\n     * @param {number} duration - Transition duration in milliseconds\r\n     */\r\n    reset(duration = 500) {\r\n        this.setEmotion('neutral', null, duration);\r\n    }\r\n\r\n    /**\r\n     * Validates if an emotion is valid\r\n     * @param {string} emotion - Emotion to validate\r\n     * @returns {boolean} True if valid\r\n     */\r\n    isValidEmotion(emotion) {\r\n        return this.emotionalStates.hasOwnProperty(emotion);\r\n    }\r\n\r\n    /**\r\n     * Validates if an undertone is valid\r\n     * @param {string} undertone - Undertone to validate\r\n     * @returns {boolean} True if valid\r\n     */\r\n    isValidUndertone(undertone) {\r\n        return undertone === null || this.undertoneModifiers.hasOwnProperty(undertone);\r\n    }\r\n\r\n    /**\r\n     * Gets all available emotions\r\n     * @returns {Array} Array of emotion names\r\n     */\r\n    getAvailableEmotions() {\r\n        return Object.keys(this.emotionalStates);\r\n    }\r\n\r\n    /**\r\n     * Gets all available undertones\r\n     * @returns {Array} Array of undertone names\r\n     */\r\n    getAvailableUndertones() {\r\n        return Object.keys(this.undertoneModifiers);\r\n    }\r\n\r\n    /**\r\n     * Checks if a transition is currently active\r\n     * @returns {boolean} True if transitioning\r\n     */\r\n    isTransitioning() {\r\n        return this.transitions.emotional.isActive;\r\n    }\r\n\r\n    /**\r\n     * Gets the current transition progress\r\n     * @returns {number} Progress from 0 to 1, or 1 if not transitioning\r\n     */\r\n    getTransitionProgress() {\r\n        return this.transitions.emotional.isActive ? this.transitions.emotional.progress : 1;\r\n    }\r\n\r\n    /**\r\n     * Forces completion of current transition\r\n     */\r\n    completeTransition() {\r\n        if (this.transitions.emotional.isActive) {\r\n            this.transitions.emotional.progress = 1;\r\n            this.transitions.emotional.isActive = false;\r\n            this.transitions.emotional.current = this.transitions.emotional.target;\r\n            this.transitions.emotional.target = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets interpolated property value with easing\r\n     * @param {number} from - Start value\r\n     * @param {number} to - End value  \r\n     * @param {number} progress - Progress (0-1)\r\n     * @param {string} easingType - Easing function name\r\n     * @returns {number} Interpolated value\r\n     */\r\n    interpolateProperty(from, to, progress, easingType = 'easeOutCubic') {\r\n        return from + (to - from) * applyEasing(progress, 0, 1, easingType);\r\n    }\r\n\r\n    /**\r\n     * Enables simulated time for testing purposes\r\n     * @param {boolean} enabled - Whether to use simulated time\r\n     */\r\n    enableSimulatedTime(enabled = true) {\r\n        if (enabled) {\r\n            this._simulatedTime = 0;\r\n        } else {\r\n            delete this._simulatedTime;\r\n        }\r\n    }\r\n}\r\n\r\nexport default EmotiveStateMachine;","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Color Utilities\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Color selection and manipulation utilities for particles\r\n * @author Emotive Engine Team\r\n * @module particles/utils/colorUtils\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                                   PURPOSE                                         \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ Handles weighted color selection for particles. Each emotion has a palette of     \r\n * ║ colors with different weights (probabilities). This creates visual variety        \r\n * ║ while maintaining the emotional theme.                                            \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n */\r\n\r\n/**\r\n * Select a color from an array with optional weights\r\n * \r\n * EXAMPLE INPUT:\r\n * [\r\n *   { color: '#FF69B4', weight: 30 },  // 30% chance\r\n *   { color: '#FFB6C1', weight: 25 },  // 25% chance\r\n *   { color: '#FF1493', weight: 20 },  // 20% chance\r\n *   '#FFC0CB',                          // Remaining weight split evenly\r\n *   '#C71585'                           // between unweighted colors\r\n * ]\r\n * \r\n * @param {Array} colors - Array of color strings or {color, weight} objects\r\n * @returns {string} Selected hex color\r\n */\r\nexport function selectWeightedColor(colors) {\r\n    if (!colors || colors.length === 0) return '#FFFFFF';\r\n    \r\n    // Parse colors and weights\r\n    let totalExplicitWeight = 0;\r\n    let unweightedCount = 0;\r\n    const parsedColors = [];\r\n    \r\n    for (const item of colors) {\r\n        if (typeof item === 'string') {\r\n            // Simple string color - will get default weight\r\n            parsedColors.push({ color: item, weight: null });\r\n            unweightedCount++;\r\n        } else if (item && typeof item === 'object' && item.color) {\r\n            // Object with color and optional weight\r\n            parsedColors.push({ color: item.color, weight: item.weight || null });\r\n            if (item.weight) {\r\n                totalExplicitWeight += item.weight;\r\n            } else {\r\n                unweightedCount++;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Calculate weight for unweighted colors\r\n    // If weights total 75, and there are 2 unweighted colors, each gets 12.5\r\n    const remainingWeight = Math.max(0, 100 - totalExplicitWeight);\r\n    const defaultWeight = unweightedCount > 0 ? remainingWeight / unweightedCount : 0;\r\n    \r\n    // Build cumulative probability table for efficient selection\r\n    const probTable = [];\r\n    let cumulative = 0;\r\n    \r\n    for (const item of parsedColors) {\r\n        const weight = item.weight !== null ? item.weight : defaultWeight;\r\n        cumulative += weight;\r\n        probTable.push({ color: item.color, threshold: cumulative });\r\n    }\r\n    \r\n    // Select based on random value\r\n    const random = Math.random() * cumulative;\r\n    for (const entry of probTable) {\r\n        if (random <= entry.threshold) {\r\n            return entry.color;\r\n        }\r\n    }\r\n    \r\n    // Fallback to last color (shouldn't happen but safety first)\r\n    return parsedColors[parsedColors.length - 1].color;\r\n}\r\n\r\n/**\r\n * Convert hex color to RGB object\r\n * @param {string} hex - Hex color string (#RRGGBB)\r\n * @returns {Object} RGB values {r, g, b}\r\n */\r\nexport function hexToRgb(hex) {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16)\r\n    } : { r: 255, g: 255, b: 255 }; // Default to white\r\n}\r\n\r\n/**\r\n * Convert RGB values to hex string\r\n * @param {number} r - Red (0-255)\r\n * @param {number} g - Green (0-255)\r\n * @param {number} b - Blue (0-255)\r\n * @returns {string} Hex color string\r\n */\r\nexport function rgbToHex(r, g, b) {\r\n    return '#' + [r, g, b].map(x => {\r\n        const hex = x.toString(16);\r\n        return hex.length === 1 ? '0' + hex : hex;\r\n    }).join('');\r\n}\r\n\r\n/**\r\n * Blend two colors together\r\n * @param {string} color1 - First hex color\r\n * @param {string} color2 - Second hex color\r\n * @param {number} ratio - Blend ratio (0=color1, 1=color2)\r\n * @returns {string} Blended hex color\r\n */\r\nexport function blendColors(color1, color2, ratio) {\r\n    const rgb1 = hexToRgb(color1);\r\n    const rgb2 = hexToRgb(color2);\r\n    \r\n    const r = Math.round(rgb1.r + (rgb2.r - rgb1.r) * ratio);\r\n    const g = Math.round(rgb1.g + (rgb2.g - rgb1.g) * ratio);\r\n    const b = Math.round(rgb1.b + (rgb2.b - rgb1.b) * ratio);\r\n    \r\n    return rgbToHex(r, g, b);\r\n}\r\n\r\nexport default {\r\n    selectWeightedColor,\r\n    hexToRgb,\r\n    rgbToHex,\r\n    blendColors\r\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Ambient Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Gentle upward drift behavior for neutral emotional state\n * @author Emotive Engine Team\n * @module particles/behaviors/ambient\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a calm, peaceful atmosphere with particles gently drifting upward         \n * ║ like smoke or steam. This is the default behavior for neutral emotional states.   \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *        ↑  ↑  ↑\n *       ·  ·  ·    ← particles drift straight up\n *      ·  ·  ·  \n *     ·  ⭐  ·     ← orb center\n *      ·  ·  ·\n *       ·  ·  ·\n * \n * USED BY EMOTIONS:\n * - neutral (default calm state)\n * \n * RECIPE TO MODIFY:\n * - Increase upwardSpeed for faster rising (more energy)\n * - Decrease friction for longer-lasting momentum\n * - Add waviness for side-to-side motion (currently disabled)\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\n\n/**\n * Initialize ambient behavior for a particle\n * Sets up initial velocities and behavior-specific data\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeAmbient(particle) {\n    // Start with gentle upward movement\n    particle.vx = 0;  // NO horizontal drift\n    particle.vy = -0.04 - Math.random() * 0.02;  // Slower upward movement\n    particle.lifeDecay = 0.002;  // Even slower fade - particles last ~8 seconds\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    particle.behaviorData = {\n        // Languid upward drift\n        upwardSpeed: 0.0005,      // Very slow continuous upward drift\n        waviness: 0,              // NO side-to-side (set to 0.5-2 for wave motion)\n        friction: 0.998           // Even more gradual slowdown\n    };\n}\n\n/**\n * Update ambient behavior each frame\n * Applies gentle upward drift with air resistance\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (frame time)\n * @param {number} centerX - Orb center X (unused but kept for consistency)\n * @param {number} centerY - Orb center Y (unused but kept for consistency)\n */\nexport function updateAmbient(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // Apply friction to y velocity only (frame-rate independent)\n    // Use exponential decay: friction^dt where dt is normalized to 60fps\n    particle.vy *= Math.pow(data.friction, dt);\n    \n    // Add continuous upward drift\n    particle.vy -= data.upwardSpeed * dt;\n    \n    // NO horizontal movement or waviness (zen-like straight up)\n    particle.vx = 0;\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'ambient',\n    emoji: '☁️',\n    description: 'Gentle upward drift like smoke',\n    initialize: initializeAmbient,\n    update: updateAmbient\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Particle Physics Configuration\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Physics constants for particle behavior\n * @author Emotive Engine Team\n * @module particles/config/physics\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Core physics values that control how particles move and interact with the world.  \n * ║ Modify these with caution as they affect all particle behaviors globally.         \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n */\n\n// ┌─────────────────────────────────────────────────────────────────────────────────────\n// │ PHYSICS CONSTANTS - Core physics values (modify with caution)\n// └─────────────────────────────────────────────────────────────────────────────────────\nexport const PHYSICS = {\n    GRAVITY: 0.098,           // Downward acceleration (Earth-like)\n    AIR_RESISTANCE: 0.99,     // Velocity dampening per frame\n    BOUNCE_DAMPENING: 0.5,    // Energy lost on boundary collision\n    MIN_VELOCITY: 0.01,       // Velocity below this is set to 0\n    MAX_VELOCITY: 10,         // Speed limit to prevent runaway particles\n    BOUNDARY_MARGIN: 20,      // Pixels from canvas edge\n    \n    // Math constants\n    TWO_PI: Math.PI * 2,\n    HALF_PI: Math.PI / 2,\n    QUARTER_PI: Math.PI / 4\n};\n\n// ┌─────────────────────────────────────────────────────────────────────────────────────\n// │ LIFECYCLE CONSTANTS - Particle birth/death timing\n// └─────────────────────────────────────────────────────────────────────────────────────\nexport const LIFECYCLE = {\n    FADE_IN_PERCENT: 0.15,    // First 15% of life fades in\n    FADE_OUT_PERCENT: 0.30,   // Last 30% of life fades out\n    MIN_LIFESPAN: 50,         // Minimum frames before death\n    MAX_LIFESPAN: 500,        // Maximum frames before death\n    DEFAULT_DECAY: 0.01       // Standard life lost per frame\n};\n\nexport default { PHYSICS, LIFECYCLE };","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Orbiting Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Romantic orbiting behavior for love emotional state\n * @author Emotive Engine Team\n * @module particles/behaviors/orbiting\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a romantic atmosphere with particles orbiting the orb like fireflies      \n * ║ dancing at a valentine's day party. Features individual blinking and sparkles.    \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *        ✨     ✨\n *      💕  ╭───╮  💕    ← particles orbit & sparkle\n *    ✨   │  ⭐  │   ✨   ← orb center\n *      💕  ╰───╯  💕\n *        ✨     ✨\n * \n * USED BY EMOTIONS:\n * - love (romantic valentine vibes)\n * \n * RECIPE TO MODIFY:\n * - Increase angularVelocity for faster spinning\n * - Increase floatAmount for more vertical movement\n * - Adjust blinkSpeed for different firefly effects\n * - Increase baseRadius for wider orbits\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\nimport { PHYSICS } from '../config/physics.js';\n\n// Rhythm configuration for orbiting particles\nexport const rhythmConfig = {\n    enabled: true,\n    \n    // Orbital speed syncs to tempo\n    orbitSpeed: {\n        baseSync: 'tempo',       // Speed scales with BPM\n        beatAcceleration: 1.3,   // Speed up on beat\n        offBeatSpeed: 0.9        // Slow between beats\n    },\n    \n    // Radius pulses with rhythm\n    radiusPulse: {\n        subdivision: 'quarter',  // Pulse on quarter notes\n        amount: 0.1,            // 10% radius variation\n        curve: 'ease'           // Smooth pulsing\n    },\n    \n    // Twinkle/sparkle syncs to beat\n    twinkleSync: {\n        onBeat: true,           // Extra sparkles on beat\n        intensity: 2.0,         // Double sparkle on beat\n        probability: 0.3        // 30% chance per beat\n    },\n    \n    // Pattern-specific behaviors\n    patterns: {\n        'waltz': {\n            // Elegant 3/4 waltz orbiting\n            orbitSpeed: { beatAcceleration: 1.1 },\n            radiusPulse: { amount: 0.15 }\n        },\n        'swing': {\n            // Jazzy swing orbiting\n            orbitSpeed: { beatAcceleration: 1.5 },\n            twinkleSync: { intensity: 3.0 }\n        }\n    }\n};\n\n/**\n * Initialize orbiting behavior for a particle\n * Creates valentine fireflies with individual timing\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeOrbiting(particle) {\n    // Individual fade timing - each particle has its own lifespan\n    particle.lifeDecay = 0.001 + Math.random() * 0.002;  // Variable decay (0.001-0.003)\n    \n    // Use emotion colors if provided - glittery valentine palette\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    // Check if this is a lighter/sparkle color (light pinks)\n    particle.isSparkle = particle.color === '#FFE4E1' || \n                        particle.color === '#FFCCCB' || \n                        particle.color === '#FFC0CB';\n    \n    // Particles orbit at various distances for depth\n    const orbRadius = (particle.scaleFactor || 1) * 40; // Approximate orb size\n    const depthLayer = Math.random();\n    const baseRadius = orbRadius * (1.3 + depthLayer * 0.9); // 1.3x to 2.2x orb radius\n    \n    // Glitter firefly properties - each with unique timing\n    particle.blinkPhase = Math.random() * PHYSICS.TWO_PI; // Random starting phase\n    particle.blinkSpeed = 0.3 + Math.random() * 1.2; // Varied blink speeds (0.3-1.5)\n    particle.blinkIntensity = 0.6 + Math.random() * 0.4; // How bright the blink gets\n    \n    // Individual fade properties\n    particle.fadePhase = Math.random() * PHYSICS.TWO_PI; // Random fade starting phase\n    particle.fadeSpeed = 0.1 + Math.random() * 0.3; // Different fade speeds\n    particle.minOpacity = 0.2 + Math.random() * 0.2; // Min brightness varies (0.2-0.4)\n    particle.maxOpacity = 0.8 + Math.random() * 0.2; // Max brightness varies (0.8-1.0)\n    \n    // Sparkles have different properties\n    if (particle.isSparkle) {\n        particle.blinkSpeed *= 2; // Sparkles blink faster\n        particle.blinkIntensity = 1.0; // Full intensity sparkles\n        particle.minOpacity = 0; // Can fade to nothing\n        particle.maxOpacity = 1.0; // Can be fully bright\n    }\n    \n    particle.behaviorData = {\n        angle: Math.random() * PHYSICS.TWO_PI,\n        radius: baseRadius,\n        baseRadius: baseRadius,\n        angularVelocity: 0.0008 + Math.random() * 0.0017,  // Varied rotation speeds\n        swayAmount: 3 + Math.random() * 7,  // Gentle floating sway\n        swaySpeed: 0.2 + Math.random() * 0.5,  // Varied sway rhythm\n        floatOffset: Math.random() * PHYSICS.TWO_PI,  // Random vertical float phase\n        floatSpeed: 0.3 + Math.random() * 0.7,  // Varied vertical floating speed\n        floatAmount: 2 + Math.random() * 6,  // How much they float up/down\n        twinklePhase: Math.random() * PHYSICS.TWO_PI,  // Individual twinkle timing\n        twinkleSpeed: 2 + Math.random() * 3  // Fast twinkle for glitter effect\n    };\n}\n\n/**\n * Update orbiting behavior each frame\n * Creates romantic firefly dance with sparkles\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (frame time)\n * @param {number} centerX - Orb center X position\n * @param {number} centerY - Orb center Y position\n */\nexport function updateOrbiting(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n\n    // Slow romantic rotation around the orb\n    data.angle += data.angularVelocity * dt;\n\n    // Gentle swaying motion\n    const swayOffset = Math.sin(data.angle * data.swaySpeed) * data.swayAmount;\n\n    // Radius changes for breathing effect\n    const radiusPulse = Math.sin(data.angle * 1.5) * 6;\n\n    // Use data.radius if it exists (can be modified by gestures), otherwise use baseRadius\n    const currentRadius = (data.radius || data.baseRadius) + radiusPulse + swayOffset * 0.2;\n\n    // Calculate desired orbital position\n    const targetX = centerX + Math.cos(data.angle) * currentRadius;\n    const targetY = centerY + Math.sin(data.angle) * currentRadius;\n\n    // Add gentle vertical floating (like fireflies)\n    data.floatOffset += data.floatSpeed * dt * 0.001;\n    const verticalFloat = Math.sin(data.floatOffset) * data.floatAmount;\n\n    // Smoothly move towards target position instead of directly setting it\n    // This allows gestures to temporarily offset particles\n    const smoothingFactor = 0.1; // How quickly particles return to orbit\n    particle.vx = (targetX - particle.x) * smoothingFactor;\n    particle.vy = (targetY + verticalFloat - particle.y) * smoothingFactor;\n    \n    // Update individual fade phase\n    particle.fadePhase += particle.fadeSpeed * dt * 0.001;\n    \n    // Calculate individual particle fade (independent timing)\n    const fadeValue = Math.sin(particle.fadePhase) * 0.5 + 0.5; // 0 to 1\n    const fadeOpacity = particle.minOpacity + (particle.maxOpacity - particle.minOpacity) * fadeValue;\n    \n    // Firefly blinking effect\n    particle.blinkPhase += particle.blinkSpeed * dt * 0.002;\n    \n    // Create a complex glitter blink with multiple harmonics\n    let blinkValue;\n    if (particle.isSparkle) {\n        // Sparkles have sharp, dramatic twinkles\n        data.twinklePhase += data.twinkleSpeed * dt * 0.001;\n        const twinkle = Math.pow(Math.sin(data.twinklePhase), 16); // Sharp peaks\n        const shimmer = Math.sin(particle.blinkPhase * 5) * 0.2;\n        blinkValue = twinkle * 0.7 + shimmer + 0.1;\n    } else {\n        // Regular particles have smoother, firefly-like pulses\n        blinkValue = Math.sin(particle.blinkPhase) * 0.4 + \n                    Math.sin(particle.blinkPhase * 3) * 0.3 +\n                    Math.sin(particle.blinkPhase * 7) * 0.2 +\n                    Math.sin(particle.blinkPhase * 11) * 0.1; // Added harmonic\n    }\n    \n    // Map to 0-1 range with intensity control\n    const normalizedBlink = (blinkValue + 1) * 0.5; // Convert from -1,1 to 0,1\n    const blink = 0.2 + normalizedBlink * particle.blinkIntensity * 0.8;\n    \n    // Combine individual fade with blink effect\n    particle.opacity = particle.baseOpacity * fadeOpacity * blink;\n    \n    // Sparkles pulse size more dramatically\n    if (particle.isSparkle) {\n        particle.size = particle.baseSize * (0.5 + normalizedBlink * 1.0); // 50-150% size\n    } else {\n        particle.size = particle.baseSize * (0.8 + normalizedBlink * 0.3); // 80-110% size\n    }\n    \n    // Add subtle color shift for sparkles (shimmer effect)\n    if (particle.isSparkle) {\n        // Light pink sparkles can shift to white at peak brightness\n        if (normalizedBlink > 0.85) {\n            particle.tempColor = '#FFFFFF'; // Flash white at peak for extra sparkle\n        } else {\n            particle.tempColor = particle.color;\n        }\n    }\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'orbiting',\n    emoji: '💕',\n    description: 'Romantic firefly dance around the orb',\n    initialize: initializeOrbiting,\n    update: updateOrbiting\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Rising Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Buoyant upward movement for joyful states\n * @author Emotive Engine Team\n * @module particles/behaviors/rising\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a buoyant, uplifting atmosphere with particles rising like bubbles        \n * ║ or balloons. Slight horizontal drift adds organic movement.                       \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *      ↗  ↑  ↖\n *     ·  ·  ·    ← particles rise with drift\n *    ·  ·  ·  \n *   ·  ⭐  ·     ← orb center\n *    ·  ·  ·\n *     ·  ·  ·\n * \n * USED BY EMOTIONS:\n * - joy (subtle happiness)\n * - optimism\n * \n * RECIPE TO MODIFY:\n * - Increase buoyancy for faster rising (like helium balloons)\n * - Increase driftAmount for more side-to-side movement\n * - Decrease air resistance for longer-lasting momentum\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\n\n/**\n * Initialize rising behavior for a particle\n * Sets up buoyant upward movement with gentle drift\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeRising(particle) {\n    particle.vx = (Math.random() - 0.5) * 0.02;  // Even slower horizontal drift\n    particle.vy = -0.05 - Math.random() * 0.03;   // Much slower upward movement\n    particle.lifeDecay = 0.002;                   // Very slow decay\n    particle.baseOpacity = 0.7 + Math.random() * 0.3;  // More opaque (70-100%)\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    particle.behaviorData = {\n        buoyancy: 0.001,      // Even gentler upward force\n        driftAmount: 0.005    // Minimal drift\n    };\n}\n\n/**\n * Update rising behavior each frame\n * Applies buoyancy and gentle drift\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (frame time)\n * @param {number} centerX - Orb center X (unused)\n * @param {number} centerY - Orb center Y (unused)\n */\nexport function updateRising(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // Add buoyancy (upward force)\n    particle.vy -= data.buoyancy * dt;\n    \n    // Add horizontal drift\n    particle.vx += (Math.random() - 0.5) * data.driftAmount * dt;\n    \n    // Apply air resistance (frame-independent)\n    particle.vx *= Math.pow(0.995, dt);\n    particle.vy *= Math.pow(0.998, dt);\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'rising',\n    emoji: '🎈',\n    description: 'Buoyant upward movement like balloons',\n    initialize: initializeRising,\n    update: updateRising\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Falling Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Heavy downward drift for sad emotional states\n * @author Emotive Engine Team\n * @module particles/behaviors/falling\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a melancholic atmosphere with particles slowly falling like tears         \n * ║ or autumn leaves. Heavy, weighted movement conveys sadness.                       \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *     ·  ·  ·\n *    ·  ·  ·  \n *   ·  ⭐  ·     ← orb center\n *    ·  ·  ·\n *     ·  ·  ·    ← particles fall slowly\n *      ↓  ↓  ↓\n * \n * USED BY EMOTIONS:\n * - sadness (melancholy, grief)\n * - disappointment\n * - tired\n * \n * RECIPE TO MODIFY:\n * - Increase gravity for heavier falling (more weight)\n * - Decrease drag for faster falling (less air resistance)\n * - Add horizontal drift for leaf-like falling\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\n\n/**\n * Initialize falling behavior for a particle\n * Sets up slow, heavy downward movement\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeFalling(particle) {\n    particle.vx = (Math.random() - 0.5) * 0.03;   // MUCH slower horizontal drift\n    particle.vy = 0.05 + Math.random() * 0.05;    // MUCH slower falling\n    particle.lifeDecay = 0.002;                   // Very slow decay\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    particle.behaviorData = {\n        gravity: 0.002,       // Very gentle gravity\n        drag: 0.995           // High drag for slow fall\n    };\n}\n\n/**\n * Update falling behavior each frame\n * Applies gravity with air resistance\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (frame time)\n * @param {number} centerX - Orb center X (unused)\n * @param {number} centerY - Orb center Y (unused)\n */\nexport function updateFalling(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // Apply gravity\n    particle.vy += data.gravity * dt;\n    \n    // Apply drag (frame-independent)\n    particle.vx *= Math.pow(data.drag, dt);\n    particle.vy *= Math.pow(data.drag, dt);\n    \n    // Limit terminal velocity\n    if (particle.vy > 2) {\n        particle.vy = 2;\n    }\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'falling',\n    emoji: '💧',\n    description: 'Heavy downward drift like tears',\n    initialize: initializeFalling,\n    update: updateFalling\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Playground Configuration 🎮\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Safe values for experimentation and tweaking\n * @author Emotive Engine Team\n * @module particles/config/playground\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                            🎮 PLAYGROUND VALUES                                   \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ SAFE TO MODIFY! These values are designed for experimentation.                    \n * ║ Change them to create new visual effects and behaviors.                           \n * ║                                                                                    \n * ║ TIP: After changing values, refresh your browser to see the effects!              \n * ║ TIP: Set window.DEBUG_PARTICLES = true in console to visualize changes            \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n */\n\nexport const PLAYGROUND = {\n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ PARTICLE APPEARANCE - How particles look\n    // └─────────────────────────────────────────────────────────────────────────────────\n    particle: {\n        MIN_SIZE: 4,           // 🎯 Smallest particle (pixels) - Try: 2-10\n        MAX_SIZE: 10,          // 🎯 Largest particle (pixels) - Try: 5-20\n        GLOW_CHANCE: 0.33,     // 🎯 Chance of glowing (0=never, 1=always)\n        CELL_SHADE_CHANCE: 0.33, // 🎯 Chance of cartoon style (0=never, 1=always)\n        BASE_OPACITY: 1.0      // 🎯 Starting opacity (0=invisible, 1=solid)\n    },\n    \n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ SPARKLE & SHIMMER - Valentine firefly effects (love state)\n    // └─────────────────────────────────────────────────────────────────────────────────\n    sparkle: {\n        BLINK_SPEED_MIN: 0.3,  // 🎯 Slowest blink rate - Try: 0.1-1.0\n        BLINK_SPEED_MAX: 1.5,  // 🎯 Fastest blink rate - Try: 0.5-3.0\n        INTENSITY_MIN: 0.6,    // 🎯 Dimmest sparkle - Try: 0.3-0.8\n        INTENSITY_MAX: 1.0,    // 🎯 Brightest sparkle - Try: 0.8-1.2\n        SIZE_PULSE: 0.3        // 🎯 Size change during sparkle - Try: 0.1-0.5\n    },\n    \n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ POPCORN BEHAVIOR - Joy particles that pop!\n    // └─────────────────────────────────────────────────────────────────────────────────\n    popcorn: {\n        POP_DELAY_MIN: 100,    // 🎯 Fastest pop (ms) - Try: 50-500\n        POP_DELAY_MAX: 2000,   // 🎯 Slowest pop (ms) - Try: 1000-5000\n        POP_FORCE_MIN: 3,      // 🎯 Weakest pop - Try: 1-5\n        POP_FORCE_MAX: 8,      // 🎯 Strongest pop - Try: 5-15\n        BOUNCE_HEIGHT: 0.7     // 🎯 Bounce energy retained - Try: 0.3-0.9\n    },\n    \n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ EMOTION INTENSITIES - How dramatic each emotion appears\n    // └─────────────────────────────────────────────────────────────────────────────────\n    emotions: {\n        ANGER_SHAKE: 2.0,      // 🎯 Anger intensity - Try: 1.0-3.0\n        FEAR_JITTER: 1.5,      // 🎯 Fear nervousness - Try: 0.5-2.5\n        LOVE_SWAY: 1.2,        // 🎯 Love romance - Try: 0.8-2.0\n        JOY_BOUNCE: 1.8,       // 🎯 Joy energy - Try: 1.0-3.0\n        SADNESS_WEIGHT: 0.6    // 🎯 Sadness heaviness - Try: 0.3-0.8\n    }\n};\n\n/**\n * ┌─────────────────────────────────────────────────────────────────────────────────────\n * │ 📝 RECIPES FOR COMMON MODIFICATIONS\n * └─────────────────────────────────────────────────────────────────────────────────────\n * \n * MAKE PARTICLES MORE ENERGETIC:\n * - Increase JOY_BOUNCE to 2.5+\n * - Decrease POP_DELAY_MIN to 50\n * - Increase POP_FORCE_MAX to 12\n * \n * MAKE PARTICLES MORE ROMANTIC:\n * - Increase LOVE_SWAY to 1.8\n * - Increase BLINK_SPEED_MAX to 2.0\n * - Increase SIZE_PULSE to 0.5\n * \n * MAKE PARTICLES MORE DRAMATIC:\n * - Increase all emotion intensities by 50%\n * - Increase MAX_SIZE to 15\n * - Set GLOW_CHANCE to 0.7\n * \n * MAKE PARTICLES MORE SUBTLE:\n * - Decrease all emotion intensities by 50%\n * - Decrease MAX_SIZE to 6\n * - Set BASE_OPACITY to 0.7\n */\n\nexport default PLAYGROUND;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Popcorn Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Spontaneous popping with bounces for joyful celebration\n * @author Emotive Engine Team\n * @module particles/behaviors/popcorn\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a celebratory atmosphere with particles that wait, then POP! and bounce   \n * ║ around with gravity. Perfect for pure joy and celebration moments.                \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *     Stage 1: Wait      Stage 2: POP!       Stage 3: Bounce\n *         ·                  💥 ↗             ↘ \n *        ···                ↖ 💥 ↗              ↓\n *       ·⭐·                  💥                 🎊 ← bounce!\n *        ···                ↙ 💥 ↘              ↑\n *         ·                  💥 ↓               ↗\n * \n * USED BY EMOTIONS:\n * - joy (celebration, happiness, excitement)\n * \n * RECIPE TO MODIFY:\n * - Decrease popDelay for faster popping (more energetic)\n * - Increase popStrength for bigger pops\n * - Adjust gravity for different bounce physics\n * - Increase maxBounces for longer bouncing\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\nimport { PLAYGROUND } from '../config/playground.js';\n\n/**\n * Initialize popcorn behavior for a particle\n * Sets up kernel waiting to pop\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializePopcorn(particle) {\n    // Start with little to no movement (kernel waiting to pop)\n    particle.vx = (Math.random() - 0.5) * 0.1;\n    particle.vy = (Math.random() - 0.5) * 0.1;\n    // Faster, more varied decay for dynamic disappearing\n    particle.lifeDecay = 0.008 + Math.random() * 0.012; // Random between 0.008-0.020\n    \n    // Use emotion colors if provided, otherwise default popcorn colors\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    } else {\n        // Default popcorn colors (buttery whites and yellows)\n        const colors = ['#FFFFFF', '#FFFACD', '#FFF8DC', '#FFFFE0', '#FAFAD2'];\n        particle.color = selectWeightedColor(colors);\n    }\n    \n    // Vary sizes more dramatically - some big fluffy pieces, some small\n    particle.size = (Math.random() < 0.3) ? \n        (8 + Math.random() * 4) * particle.scaleFactor * particle.particleSizeMultiplier : // 30% big\n        (2 + Math.random() * 4) * particle.scaleFactor * particle.particleSizeMultiplier;  // 70% small\n    particle.baseSize = particle.size;\n    \n    // Less glow, more solid popcorn look\n    particle.hasGlow = Math.random() < 0.2; // Only 20% have glow\n    particle.glowSizeMultiplier = particle.hasGlow ? 1.2 : 0;\n    \n    particle.behaviorData = {\n        // Popcorn popping mechanics\n        popDelay: Math.random() * PLAYGROUND.popcorn.POP_DELAY_MAX,\n        hasPopped: false,\n        popStrength: PLAYGROUND.popcorn.POP_FORCE_MIN + \n                    Math.random() * (PLAYGROUND.popcorn.POP_FORCE_MAX - PLAYGROUND.popcorn.POP_FORCE_MIN),\n        \n        // Physics after popping\n        gravity: 0.098,                    // Gravity strength\n        bounceDamping: PLAYGROUND.popcorn.BOUNCE_HEIGHT,\n        bounceCount: 0,\n        maxBounces: 2 + Math.floor(Math.random() * 2), // 2-3 bounces\n        \n        // Visual flair\n        spinRate: (Math.random() - 0.5) * 10, // Rotation speed (for future use)\n        lifetime: 0                           // Track time since spawn\n    };\n}\n\n/**\n * Update popcorn behavior each frame\n * Handles waiting, popping, and bouncing phases\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (frame time)\n * @param {number} centerX - Orb center X position\n * @param {number} centerY - Orb center Y position\n */\nexport function updatePopcorn(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    data.lifetime += dt * 16.67; // Convert to milliseconds\n    \n    // Check if it's time to pop\n    if (!data.hasPopped && data.lifetime > data.popDelay) {\n        // POP! Sudden burst of velocity in all directions for celebration\n        data.hasPopped = true;\n        const popAngle = Math.random() * Math.PI * 2; // Full 360 degree spread\n        particle.vx = Math.cos(popAngle) * data.popStrength * 1.5; // Extra horizontal spread\n        particle.vy = Math.sin(popAngle) * data.popStrength - 0.3; // Slight upward bias for joy\n        \n        // Expand size when popping for dramatic effect\n        particle.size = particle.baseSize * 1.25;\n    }\n    \n    if (data.hasPopped) {\n        // Apply gravity\n        particle.vy += data.gravity * dt;\n        \n        // Check for ground bounce\n        const groundLevel = centerY + 100 * particle.scaleFactor; // Below the orb\n        if (particle.y > groundLevel && data.bounceCount < data.maxBounces) {\n            particle.y = groundLevel;\n            particle.vy = -Math.abs(particle.vy) * data.bounceDamping; // Bounce up with damping\n            particle.vx *= 0.9; // Reduce horizontal speed on bounce\n            data.bounceCount++;\n            \n            // Shrink slightly with each bounce\n            particle.size = particle.baseSize * (1.5 - data.bounceCount * 0.1);\n        }\n        \n        // Fade dramatically after final bounce\n        if (data.bounceCount >= data.maxBounces) {\n            particle.lifeDecay = 0.03 + Math.random() * 0.02; // Very fast fade\n            particle.size *= 0.95; // Also shrink rapidly\n        }\n        \n        // Dynamic fading based on velocity - slower particles fade faster\n        const speed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\n        if (speed < 0.5) {\n            particle.lifeDecay *= 1.5; // 50% faster fade when moving slowly\n        }\n    }\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'popcorn',\n    emoji: '🍿',\n    description: 'Spontaneous popping with gravity and bounces',\n    initialize: initializePopcorn,\n    update: updatePopcorn\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Burst Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Explosive expansion for surprise and suspicion states\n * @author Emotive Engine Team\n * @module particles/behaviors/burst\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates dramatic expansion effects. For surprise: fast burst then sudden stop.    \n * ║ For suspicion: controlled, watchful expansion. Particles shoot out from center.   \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *   Surprise:                  Suspicion:\n *       💥→                        •→\n *     ↗ 💥 ↘                    ↗ • ↘\n *   ← ⭐ →    STOP!          ← ⭐ →    (controlled)\n *     ↙ 💥 ↖                    ↙ • ↖\n *       💥←                        •←\n * \n * USED BY EMOTIONS:\n * - surprise (dramatic burst then stop)\n * - suspicion (controlled, watchful expansion)\n * \n * RECIPE TO MODIFY:\n * - Increase speed for more dramatic burst\n * - Adjust friction for different deceleration\n * - Change stopTime for surprise effect timing\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\nimport { PHYSICS } from '../config/physics.js';\n\n/**\n * Initialize burst behavior for a particle\n * Sets up explosive outward movement\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeBurst(particle) {\n    // Check emotion type for behavior variation\n    const isSuspicion = particle.emotion === 'suspicion';\n    const isSurprise = particle.emotion === 'surprise';\n    \n    // Random direction for burst\n    const angle = Math.random() * PHYSICS.TWO_PI;\n    \n    // Speed based on emotion\n    const speed = isSuspicion ? \n        (1.0 + Math.random() * 0.8) :      // Controlled burst for suspicion (1-1.8)\n        (isSurprise ? \n            (7.0 + Math.random() * 5.0) :  // Much faster burst for surprise (7-12)\n            (3.5 + Math.random() * 2.5));  // Normal burst for others (3.5-6)\n    \n    particle.vx = Math.cos(angle) * speed;\n    particle.vy = Math.sin(angle) * speed;\n    \n    // Lifespan based on emotion\n    particle.lifeDecay = isSuspicion ? \n        0.010 : \n        (isSurprise ? 0.006 + Math.random() * 0.008 : 0.015);\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    // Make suspicion particles more visible\n    if (isSuspicion) {\n        particle.size = (6 + Math.random() * 4) * \n                       (particle.scaleFactor || 1) * \n                       (particle.particleSizeMultiplier || 1);\n        particle.baseSize = particle.size;\n        particle.opacity = 1.0;  // Full opacity for visibility\n        particle.baseOpacity = particle.opacity;\n    }\n    \n    particle.behaviorData = {\n        isSuspicion,\n        isSurprise,\n        age: 0,\n        fadeStart: isSuspicion ? 0.3 : 0.2  // When to start fading\n    };\n}\n\n/**\n * Update burst behavior each frame\n * Handles explosive expansion with emotion-specific variations\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (frame time)\n * @param {number} centerX - Orb center X (unused)\n * @param {number} centerY - Orb center Y (unused)\n */\nexport function updateBurst(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // Surprise particles: burst out then STOP suddenly\n    if (data.isSurprise) {\n        // Track age for timing the stop\n        data.age += dt * 0.016; // Convert to seconds\n        \n        if (data.age < 0.15) {\n            // First 0.15 seconds: maintain high speed\n            const friction = 0.98;\n            particle.vx *= Math.pow(friction, dt);\n            particle.vy *= Math.pow(friction, dt);\n        } else if (data.age < 0.25) {\n            // 0.15-0.25 seconds: SUDDEN STOP!\n            const friction = 0.85; // Heavy braking\n            particle.vx *= Math.pow(friction, dt);\n            particle.vy *= Math.pow(friction, dt);\n        } else {\n            // After stop: float gently\n            const friction = 0.99;\n            particle.vx *= Math.pow(friction, dt);\n            particle.vy *= Math.pow(friction, dt);\n            // Tiny random drift\n            particle.vx += (Math.random() - 0.5) * 0.01 * dt;\n            particle.vy += (Math.random() - 0.5) * 0.01 * dt;\n        }\n    } else {\n        // Normal burst behavior for other emotions\n        const friction = data.isSuspicion ? 0.99 : 0.95;\n        particle.vx *= Math.pow(friction, dt);\n        particle.vy *= Math.pow(friction, dt);\n    }\n    \n    // For suspicion, add a subtle scanning motion\n    if (data.isSuspicion) {\n        // Add a very subtle side-to-side drift\n        const time = Date.now() * 0.001;\n        particle.vx += Math.sin(time * 2 + particle.id) * 0.01 * dt;\n    }\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'burst',\n    emoji: '💥',\n    description: 'Explosive expansion from center',\n    initialize: initializeBurst,\n    update: updateBurst\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Aggressive Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Sharp, chaotic movement for angry emotional states\n * @author Emotive Engine Team\n * @module particles/behaviors/aggressive\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates an intense, volatile atmosphere with particles moving erratically.        \n * ║ Sharp jitters and sudden bursts of movement convey anger and frustration.         \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *      ⚡→    ←⚡\n *        ↘  ↙       ← erratic, sharp movements\n *    ⚡← ⭐ →⚡      ← orb center (shaking)\n *        ↗  ↖\n *      ⚡←    →⚡\n * \n * USED BY EMOTIONS:\n * - anger (rage, fury)\n * - frustration\n * - irritation\n * \n * RECIPE TO MODIFY:\n * - Increase jitter for more chaotic movement\n * - Increase acceleration for more violent bursts\n * - Decrease speedDecay for longer-lasting energy\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\nimport { PHYSICS } from '../config/physics.js';\n\n/**\n * Initialize aggressive behavior for a particle\n * Sets up chaotic, sharp movement patterns\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeAggressive(particle) {\n    const angle = Math.random() * PHYSICS.TWO_PI;\n    const speed = 1.5 + Math.random() * 2;\n    particle.vx = Math.cos(angle) * speed;\n    particle.vy = Math.sin(angle) * speed;\n    particle.lifeDecay = 0.015;\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    particle.behaviorData = {\n        acceleration: 0.05,\n        jitter: 0.3,\n        speedDecay: 0.95\n    };\n}\n\n/**\n * Update aggressive behavior each frame\n * Applies jitter and random acceleration bursts\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (frame time)\n * @param {number} centerX - Orb center X (unused)\n * @param {number} centerY - Orb center Y (unused)\n */\nexport function updateAggressive(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // Add jitter to movement\n    particle.vx += (Math.random() - 0.5) * data.jitter * dt;\n    particle.vy += (Math.random() - 0.5) * data.jitter * dt;\n    \n    // Apply speed decay (frame-independent)\n    particle.vx *= Math.pow(data.speedDecay, dt);\n    particle.vy *= Math.pow(data.speedDecay, dt);\n    \n    // Occasionally add burst of acceleration\n    // Scale probability with frame time\n    if (Math.random() < Math.min(0.05 * dt, 0.5)) {\n        const angle = Math.random() * PHYSICS.TWO_PI;\n        particle.vx += Math.cos(angle) * data.acceleration;\n        particle.vy += Math.sin(angle) * data.acceleration;\n    }\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'aggressive',\n    emoji: '⚡',\n    description: 'Sharp, chaotic movement with violent bursts',\n    initialize: initializeAggressive,\n    update: updateAggressive\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Scattering Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Particles fleeing from center for fear states\n * @author Emotive Engine Team\n * @module particles/behaviors/scattering\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates an anxious atmosphere with particles frantically fleeing from the center. \n * ║ Conveys fear, panic, and the desire to escape.                                    \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *    ← · · · →\n *    ↖       ↗       ← particles flee outward\n *  · · ⭐ · ·       ← orb center (source of fear)\n *    ↙       ↘\n *    ← · · · →\n * \n * USED BY EMOTIONS:\n * - fear (panic, anxiety)\n * - startled\n * - nervous\n * \n * RECIPE TO MODIFY:\n * - Increase fleeSpeed for more frantic escape\n * - Increase panicFactor for more erratic fleeing\n * - Add jitter for nervous shaking while fleeing\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\nimport { PHYSICS } from '../config/physics.js';\n\n/**\n * Initialize scattering behavior for a particle\n * Sets up fleeing movement away from center\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeScattering(particle) {\n    // Will be set relative to center in update\n    particle.vx = 0;\n    particle.vy = 0;\n    particle.lifeDecay = 0.008;  // Live longer to spread further\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    particle.behaviorData = {\n        fleeSpeed: 2.0,     // Much faster fleeing\n        panicFactor: 1.2,   // More panicked movement\n        initialized: false\n    };\n}\n\n/**\n * Update scattering behavior each frame\n * Particles flee away from center with panic\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (frame time)\n * @param {number} centerX - Orb center X position\n * @param {number} centerY - Orb center Y position\n */\nexport function updateScattering(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // Initialize flee direction if not done\n    if (!data.initialized) {\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance > 0) {\n            particle.vx = (dx / distance) * data.fleeSpeed;\n            particle.vy = (dy / distance) * data.fleeSpeed;\n        } else {\n            // If at center, pick random direction\n            const angle = Math.random() * PHYSICS.TWO_PI;\n            particle.vx = Math.cos(angle) * data.fleeSpeed;\n            particle.vy = Math.sin(angle) * data.fleeSpeed;\n        }\n        data.initialized = true;\n    }\n    \n    // Continue fleeing with panic factor\n    const dx = particle.x - centerX;\n    const dy = particle.y - centerY;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    \n    if (distance > 0) {\n        // Add acceleration away from center\n        particle.vx += (dx / distance) * data.panicFactor * 0.01 * dt;\n        particle.vy += (dy / distance) * data.panicFactor * 0.01 * dt;\n    }\n    \n    // Add nervous jitter\n    particle.vx += (Math.random() - 0.5) * 0.1 * dt;\n    particle.vy += (Math.random() - 0.5) * 0.1 * dt;\n    \n    // Apply friction\n    particle.vx *= Math.pow(0.98, dt);\n    particle.vy *= Math.pow(0.98, dt);\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'scattering',\n    emoji: '😨',\n    description: 'Particles flee from center in panic',\n    initialize: initializeScattering,\n    update: updateScattering\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Repelling Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Particles pushed away from center for aversion states\n * @author Emotive Engine Team\n * @module particles/behaviors/repelling\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a space of rejection with particles being pushed away from the center,    \n * ║ maintaining a minimum distance. Conveys disgust, rejection, and boundaries.       \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *    ← - - - →\n *    ↖       ↗       ← particles pushed away\n *  - - (  ) - -      ← empty zone around center\n *    ↙       ↘       ← minimum distance maintained\n *    ← - - - →\n * \n * USED BY EMOTIONS:\n * - disgust (keeping things at bay)\n * - contempt\n * - aversion\n * \n * RECIPE TO MODIFY:\n * - Increase repelStrength for stronger push\n * - Increase minDistance for larger empty zone\n * - Adjust damping for smoother/rougher motion\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\n\n/**\n * Initialize repelling behavior for a particle\n * Sets up repulsion from center\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeRepelling(particle) {\n    particle.vx = 0;\n    particle.vy = 0;\n    particle.lifeDecay = 0.01; // Moderate life\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    particle.behaviorData = {\n        repelStrength: 0.8,      // How strongly to push away\n        minDistance: 50,         // Minimum distance from center\n        initialized: false       // Track if initial repel has been applied\n    };\n}\n\n/**\n * Update repelling behavior - particles maintain distance from center\n * \n * Used for: DISGUST emotion (keeping unpleasant things away)\n * Visual effect: Particles are pushed away from center and maintain a \n *                minimum distance, creating an empty zone\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (milliseconds since last frame, typically ~16.67 for 60fps)\n * @param {number} centerX - X coordinate of the orb's center (canvas center)\n * @param {number} centerY - Y coordinate of the orb's center (canvas center)\n */\nexport function updateRepelling(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // STEP 1: Calculate distance from center\n    // dx/dy = distance from center to particle (can be negative)\n    const dx = particle.x - centerX;\n    const dy = particle.y - centerY;\n    // dist = straight-line distance using Pythagorean theorem\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    \n    // STEP 2: Apply repelling force if too close to center\n    // This ensures particles maintain minimum distance\n    if (!data.initialized || distance < data.minDistance) {\n        if (distance > 0) {\n            // Calculate repel force (stronger when closer)\n            // Math.max(distance, 5) prevents division by very small numbers\n            const repelForce = data.repelStrength / Math.max(distance, 5);\n            \n            // Apply force in direction away from center\n            // dx/distance = unit vector component pointing away\n            // Multiply by dt for frame-rate independence\n            particle.vx += (dx / distance) * repelForce * dt;\n            particle.vy += (dy / distance) * repelForce * dt;\n        }\n        data.initialized = true;\n    }\n    \n    // STEP 3: Apply gentle damping to smooth motion\n    // This prevents infinite acceleration and creates natural deceleration\n    // Math.pow ensures frame-rate independence\n    particle.vx *= Math.pow(0.99, dt);\n    particle.vy *= Math.pow(0.99, dt);\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'repelling',\n    emoji: '🚫',\n    description: 'Particles pushed away from center, maintaining distance',\n    initialize: initializeRepelling,\n    update: updateRepelling\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Connecting Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Chaotic particles drawn to center for social connection states\n * @author Emotive Engine Team\n * @module particles/behaviors/connecting\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates an energetic social atmosphere with particles moving chaotically but       \n * ║ staying connected to the center. Like a lively party or bustling community.       \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *    ↗↘ ↖↙ ↗↘\n *   ↙ ↗ ↘ ↖ ↙       ← chaotic but connected\n *  ↘ ↖ ⭐ ↗ ↙       ← drawn to center\n *   ↗ ↙ ↖ ↘ ↗       ← higher energy than ambient\n *    ↙↖ ↗↘ ↙↖\n * \n * USED BY EMOTIONS:\n * - curiosity (social exploration)\n * - playfulness\n * - engagement\n * \n * RECIPE TO MODIFY:\n * - Increase attractionForce for stronger pull to center\n * - Increase chaosFactor for more erratic movement\n * - Decrease friction for more energetic motion\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\nimport { PHYSICS } from '../config/physics.js';\n\n/**\n * Initialize connecting behavior for a particle\n * Sets up chaotic but connected movement\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeConnecting(particle) {\n    // Original Emotive connecting: speed 2-7, higher chaos\n    const angle = Math.random() * PHYSICS.TWO_PI;\n    const speed = 2 + Math.random() * 5; // Faster than ambient\n    particle.vx = Math.cos(angle) * speed;\n    particle.vy = Math.sin(angle) * speed;\n    particle.lifeDecay = 0.012; // Shorter life for more dynamic feel\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    particle.behaviorData = {\n        // Higher attraction and chaos for connecting state\n        attractionForce: 0.008,  // Stronger pull (original)\n        chaosFactor: 1.0,        // Higher chaos (original)\n        friction: 0.95          // Less friction than ambient\n    };\n}\n\n/**\n * Update connecting behavior - chaotic movement with center attraction\n * \n * Used for: CURIOSITY/SOCIAL emotions (engaged, exploring, connecting)\n * Visual effect: Particles move chaotically but are drawn back to center,\n *                creating a bustling, connected atmosphere\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (milliseconds since last frame, typically ~16.67 for 60fps)\n * @param {number} centerX - X coordinate of the orb's center (canvas center)\n * @param {number} centerY - Y coordinate of the orb's center (canvas center)\n */\nexport function updateConnecting(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // STEP 1: Apply friction to slow particles gradually\n    // This prevents infinite acceleration\n    // Math.pow ensures frame-rate independence\n    particle.vx *= Math.pow(data.friction, dt);\n    particle.vy *= Math.pow(data.friction, dt);\n    \n    // STEP 2: Apply attraction force towards center\n    // (centerX - this.x) gives direction vector to center\n    // Multiplied by attractionForce to control strength\n    const attractX = (centerX - particle.x) * data.attractionForce;\n    const attractY = (centerY - particle.y) * data.attractionForce;\n    \n    // STEP 3: Add chaos for erratic movement\n    // (Math.random() - 0.5) gives random value between -0.5 and 0.5\n    // Multiplied by chaosFactor for intensity\n    const chaosX = (Math.random() - 0.5) * data.chaosFactor;\n    const chaosY = (Math.random() - 0.5) * data.chaosFactor;\n    \n    // STEP 4: Combine forces\n    // Attraction keeps particles connected to center\n    // Chaos makes movement unpredictable and lively\n    particle.vx += attractX + chaosX;\n    particle.vy += attractY + chaosY;\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'connecting',\n    emoji: '🔗',\n    description: 'Chaotic movement with center attraction for social states',\n    initialize: initializeConnecting,\n    update: updateConnecting\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Resting Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Ultra-slow movement for deeply relaxed states\n * @author Emotive Engine Team\n * @module particles/behaviors/resting\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates an atmosphere of deep calm and rest. Particles barely move, creating      \n * ║ a meditative, peaceful environment. Like watching dust motes in sunlight.         \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *        ·\n *       · ·         ← barely moving\n *      · · ·        ← vertical drift only\n *     · ⭐ ·        ← no horizontal motion\n *      · · ·        \n *       · ·         \n *        ·\n * \n * USED BY EMOTIONS:\n * - sleepy (deep rest)\n * - meditative\n * - tranquil\n * \n * RECIPE TO MODIFY:\n * - Decrease upwardSpeed for even slower movement\n * - Increase lifeDecay for shorter-lived particles\n * - Add tiny horizontal drift for slight variation\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\n\n/**\n * Initialize resting behavior for a particle\n * Sets up minimal movement\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeResting(particle) {\n    particle.vx = 0;  // NO horizontal movement\n    particle.vy = -0.01;  // Tiniest upward drift\n    particle.lifeDecay = 0.001;  // Very slow fade - particles last 10+ seconds\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    particle.behaviorData = {\n        upwardSpeed: 0.00002,  // Barely perceptible upward drift\n        friction: 0.999       // Almost no friction (preserve any motion)\n    };\n}\n\n/**\n * Update resting behavior - ultra-slow vertical drift\n * \n * Used for: SLEEPY/MEDITATIVE emotions (deep rest, tranquility)\n * Visual effect: Particles drift upward so slowly they appear almost still,\n *                creating a deeply peaceful atmosphere\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (milliseconds since last frame, typically ~16.67 for 60fps)\n * @param {number} centerX - X coordinate of the orb's center (unused)\n * @param {number} centerY - Y coordinate of the orb's center (unused)\n */\nexport function updateResting(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // STEP 1: Apply friction to vertical velocity only\n    // This creates a very gentle deceleration\n    // Math.pow ensures frame-rate independence\n    particle.vy *= Math.pow(data.friction, dt);\n    \n    // STEP 2: Add tiny continuous upward drift\n    // Negative value because canvas Y increases downward\n    // Multiplied by dt for frame-rate independence\n    particle.vy -= data.upwardSpeed * dt;\n    \n    // STEP 3: Enforce NO horizontal movement\n    // This creates the characteristic vertical-only drift\n    // Essential for the peaceful, non-chaotic feel\n    particle.vx = 0;\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'resting',\n    emoji: '😴',\n    description: 'Ultra-slow vertical drift for deep rest states',\n    initialize: initializeResting,\n    update: updateResting\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Radiant Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Particles radiating outward like sun rays for euphoric states\n * @author Emotive Engine Team\n * @module particles/behaviors/radiant\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a euphoric atmosphere with particles bursting outward like sunbeams,      \n * ║ with shimmering and twinkling effects. Perfect for moments of pure joy and hope.  \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *        ☀️\n *    ✨  ↗  ✨       ← particles radiate outward\n *  ✨ ↖ ⭐ ↗ ✨     ← orb center (like the sun)\n *    ✨  ↘  ✨       ← with shimmer effect\n *        ☀️\n * \n * USED BY EMOTIONS:\n * - euphoria (first day of spring, sunrise vibes)\n * - elation\n * - triumph\n * \n * RECIPE TO MODIFY:\n * - Increase radialSpeed for faster radiation\n * - Increase shimmerSpeed for faster twinkling\n * - Adjust friction for longer/shorter rays\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\nimport { PHYSICS } from '../config/physics.js';\n\n/**\n * Initialize radiant behavior for a particle\n * Sets up sunburst radiation pattern\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeRadiant(particle) {\n    // Particles burst outward from center like sunbeams\n    const angle = Math.random() * PHYSICS.TWO_PI;\n    const speed = 0.8 + Math.random() * 0.4; // Moderate to fast speed\n    particle.vx = Math.cos(angle) * speed;\n    particle.vy = Math.sin(angle) * speed;\n    particle.lifeDecay = 0.006; // Moderate life - last ~8-10 seconds\n    \n    // Use emotion colors if provided, otherwise default sunrise colors\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    } else {\n        // Default golden sunrise colors\n        const colors = ['#FFD700', '#FFB347', '#FFA500', '#FF69B4'];\n        particle.color = selectWeightedColor(colors);\n    }\n    \n    // More particles have glow for radiant effect\n    particle.hasGlow = Math.random() < 0.7; // 70% chance of glow\n    particle.glowSizeMultiplier = particle.hasGlow ? (1.5 + Math.random() * 0.5) : 0;\n    \n    particle.behaviorData = {\n        // Continuous outward radiation\n        radialSpeed: 0.02,        // Constant outward acceleration\n        shimmer: Math.random() * PHYSICS.TWO_PI, // Initial shimmer phase\n        shimmerSpeed: 0.1,        // Shimmer oscillation speed\n        friction: 0.99            // Very light friction for long rays\n    };\n}\n\n/**\n * Update radiant behavior - particles radiate outward like sun rays\n * \n * Used for: EUPHORIA emotion (first day of spring, sunrise vibes)\n * Visual effect: Particles burst outward from center like sunbeams, with a \n *                shimmering/twinkling effect as they travel\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (milliseconds since last frame, typically ~16.67 for 60fps)\n * @param {number} centerX - X coordinate of the orb's center (canvas center)\n * @param {number} centerY - Y coordinate of the orb's center (canvas center)\n */\nexport function updateRadiant(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // STEP 1: Calculate this particle's direction from the orb center\n    // dx/dy = distance from center to particle (can be negative)\n    const dx = particle.x - centerX;\n    const dy = particle.y - centerY;\n    // dist = straight-line distance using Pythagorean theorem\n    const dist = Math.sqrt(dx * dx + dy * dy);\n    \n    // STEP 2: Push particle outward from center (like sun rays)\n    if (dist > 0) {\n        // Convert dx/dy into a unit vector (length = 1) pointing away from center\n        // This gives us pure direction without magnitude\n        const dirX = dx / dist;\n        const dirY = dy / dist;\n        \n        // Add velocity in the outward direction\n        // radialSpeed controls how fast particles shoot outward\n        // Multiply by dt to make movement frame-rate independent\n        particle.vx += dirX * data.radialSpeed * dt;\n        particle.vy += dirY * data.radialSpeed * dt;\n    }\n    \n    // STEP 3: Create shimmering effect (particles twinkle as they radiate)\n    // Increment shimmer phase over time (shimmerSpeed controls twinkle rate)\n    data.shimmer += data.shimmerSpeed * dt;\n    // Create sine wave oscillation (-1 to 1)\n    const shimmerEffect = Math.sin(data.shimmer);\n    // Make particle size pulse: baseSize ± 20%\n    particle.size = particle.baseSize * (1 + shimmerEffect * 0.2);\n    // Make particle opacity pulse: baseOpacity ± 30%\n    particle.opacity = particle.baseOpacity * (1 + shimmerEffect * 0.3);\n    \n    // STEP 4: Apply friction to slow particles over time\n    // This prevents infinite acceleration and creates natural deceleration\n    particle.vx *= Math.pow(data.friction, dt);\n    particle.vy *= Math.pow(data.friction, dt);\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'radiant',\n    emoji: '☀️',\n    description: 'Particles radiate outward like sunbeams',\n    initialize: initializeRadiant,\n    update: updateRadiant\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Ascending Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Slow, steady upward float for zen and meditative states\n * @author Emotive Engine Team\n * @module particles/behaviors/ascending\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a zen atmosphere with particles rising like incense smoke. Slow, steady,  \n * ║ and ethereal movement that gradually fades as particles ascend.                   \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *        ↑\n *       ~~~        ← gentle wave motion\n *        ↑\n *       ~~~        ← like incense smoke\n *        ↑\n *      ⭐⭐⭐      ← orb center\n *        \n * \n * USED BY EMOTIONS:\n * - zen (deep meditation)\n * - contemplative\n * - spiritual\n * \n * RECIPE TO MODIFY:\n * - Decrease ascensionSpeed for slower rise\n * - Increase waveFactor for more horizontal drift\n * - Adjust fadeStartDistance to control when fade begins\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\n\n/**\n * Initialize ascending behavior for a particle\n * Sets up slow, steady upward movement\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeAscending(particle) {\n    // Very slow, steady upward movement\n    particle.vx = (Math.random() - 0.5) * 0.02;  // Minimal horizontal drift\n    particle.vy = -0.03 - Math.random() * 0.02;  // Slow upward movement (0.03-0.05)\n    particle.lifeDecay = 0.0008;  // Very long-lived particles (30+ seconds)\n    \n    // Larger, more ethereal particles for zen\n    particle.size = (6 + Math.random() * 6) * \n        (particle.scaleFactor || 1) * \n        (particle.particleSizeMultiplier || 1) * \n        1.33;  // 1.33x larger for zen (reduced from 2x)\n    particle.baseSize = particle.size;\n    particle.baseOpacity = 0.2 + Math.random() * 0.2;  // Very translucent (20-40%)\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    particle.behaviorData = {\n        // Continuous gentle upward drift\n        ascensionSpeed: 0.0003,      // Very gentle continuous upward\n        waveFactor: 0.5,             // Subtle horizontal wave motion\n        waveFrequency: 0.001,        // Very slow wave oscillation\n        friction: 0.998,             // Almost no slowdown\n        fadeStartDistance: 100       // Start fading after rising 100px\n    };\n}\n\n/**\n * Update ascending behavior - slow upward float like incense\n * \n * Used for: ZEN/CONTEMPLATIVE emotions (meditation, spirituality)\n * Visual effect: Particles rise slowly and steadily with subtle wave motion,\n *                gradually fading as they ascend like incense smoke\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (milliseconds since last frame, typically ~16.67 for 60fps)\n * @param {number} centerX - X coordinate of the orb's center (unused)\n * @param {number} centerY - Y coordinate of the orb's center (unused)\n */\nexport function updateAscending(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // Validate data exists\n    if (!data) {\n        initializeAscending(particle);\n        return;\n    }\n    \n    // STEP 1: Apply friction to velocities\n    // Very light friction to maintain smooth motion\n    // Math.pow ensures frame-rate independence\n    particle.vx *= Math.pow(data.friction, dt);\n    particle.vy *= Math.pow(data.friction, dt);\n    \n    // STEP 2: Add continuous upward ascension\n    // Negative because canvas Y increases downward\n    // Multiplied by dt for frame-rate independence\n    particle.vy -= data.ascensionSpeed * dt;\n    \n    // STEP 3: Add subtle wave motion for organic feel\n    // Creates the characteristic incense smoke waviness\n    // Age gives us time-based oscillation\n    const waveOffset = Math.sin(particle.age * data.waveFrequency * 1000) * data.waveFactor;\n    particle.vx += waveOffset * 0.001 * dt;\n    \n    // STEP 4: Track initial Y position for fade calculation\n    if (particle.initialY === undefined) {\n        particle.initialY = particle.y;\n    }\n    \n    // STEP 5: Calculate distance traveled upward\n    const distanceTraveled = particle.initialY - particle.y;\n    \n    // STEP 6: Start fading after traveling fadeStartDistance pixels\n    // This creates the incense smoke dissipation effect\n    if (distanceTraveled > data.fadeStartDistance) {\n        const fadeProgress = (distanceTraveled - data.fadeStartDistance) / 100;\n        const fadeFactor = Math.max(0, 1 - fadeProgress);\n        particle.baseOpacity *= 0.995;  // Gradual fade\n        \n        // Accelerate life decay as particle fades\n        if (fadeFactor < 0.5) {\n            particle.lifeDecay *= 1.02;\n        }\n    }\n    \n    // STEP 7: Dampen excessive horizontal movement\n    // Keeps the ascension primarily vertical\n    if (Math.abs(particle.vx) > 0.05) {\n        particle.vx *= Math.pow(0.95, dt);\n    }\n    \n    // STEP 8: Cap upward velocity for consistency\n    // Prevents particles from accelerating too much\n    if (particle.vy < -0.1) {\n        particle.vy = -0.1;\n    }\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'ascending',\n    emoji: '🧘',\n    description: 'Slow steady upward float like incense smoke',\n    initialize: initializeAscending,\n    update: updateAscending\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Erratic Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Nervous, jittery movement for anxious states\n * @author Emotive Engine Team\n * @module particles/behaviors/erratic\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a nervous, unstable atmosphere with particles jittering and changing       \n * ║ direction unpredictably. Conveys anxiety, nervousness, and instability.           \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *    ↗↙↖  ↘↗\n *   ↙ ↗↘  ↖↙       ← unpredictable changes\n *  ↘↖ ⭐ ↗↙        ← jittery movement\n *   ↗ ↙↖  ↘↗       ← nervous energy\n *    ↙↗↘  ↖↙\n * \n * USED BY EMOTIONS:\n * - nervous (anxiety, jitters)\n * - unstable\n * - agitated\n * \n * RECIPE TO MODIFY:\n * - Increase jitterStrength for more shaking\n * - Increase directionChangeRate for more frequent changes\n * - Increase speedVariation for more erratic speed changes\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\nimport { PHYSICS } from '../config/physics.js';\n\n/**\n * Initialize erratic behavior for a particle\n * Sets up nervous, jittery movement\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeErratic(particle) {\n    // Random, chaotic initial direction\n    const angle = Math.random() * PHYSICS.TWO_PI;\n    const speed = 0.1 + Math.random() * 0.15;\n    particle.vx = Math.cos(angle) * speed;\n    particle.vy = Math.sin(angle) * speed;\n    particle.lifeDecay = 0.004;  // Shorter lived due to nervous energy\n    \n    particle.size = (2 + Math.random() * 4) * \n        (particle.scaleFactor || 1) * \n        (particle.particleSizeMultiplier || 1);  // Varied sizes scaled\n    particle.baseSize = particle.size;\n    particle.baseOpacity = 0.4 + Math.random() * 0.3;  // More visible\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    particle.behaviorData = {\n        jitterStrength: 0.02,        // Random direction changes\n        directionChangeRate: 0.1,    // How often to change direction\n        speedVariation: 0.3,         // Speed changes randomly\n        spinRate: 0.05 + Math.random() * 0.1  // Particles spin\n    };\n}\n\n/**\n * Update erratic behavior - nervous, jittery movement\n * \n * Used for: NERVOUS/ANXIOUS emotions (anxiety, instability, agitation)\n * Visual effect: Particles jitter nervously, changing direction and speed\n *                unpredictably, creating an unstable atmosphere\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (milliseconds since last frame, typically ~16.67 for 60fps)\n * @param {number} centerX - X coordinate of the orb's center (unused)\n * @param {number} centerY - Y coordinate of the orb's center (unused)\n */\nexport function updateErratic(particle, dt) {\n    const data = particle.behaviorData;\n    \n    // STEP 1: Add constant jitter to movement\n    // Creates the nervous shaking effect\n    // (Math.random() - 0.5) gives values between -0.5 and 0.5\n    // Multiplied by jitterStrength and dt for controlled chaos\n    particle.vx += (Math.random() - 0.5) * data.jitterStrength * dt;\n    particle.vy += (Math.random() - 0.5) * data.jitterStrength * dt;\n    \n    // STEP 2: Randomly change direction occasionally\n    // Creates unpredictable movement patterns\n    // Math.min ensures probability doesn't exceed reasonable bounds\n    if (Math.random() < Math.min(data.directionChangeRate * dt, 0.5)) {\n        // Pick new random direction\n        const newAngle = Math.random() * PHYSICS.TWO_PI;\n        const currentSpeed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\n        \n        // Apply new direction while maintaining similar speed\n        particle.vx = Math.cos(newAngle) * currentSpeed;\n        particle.vy = Math.sin(newAngle) * currentSpeed;\n    }\n    \n    // STEP 3: Vary the speed randomly\n    // Creates erratic acceleration/deceleration\n    const speedMultiplier = 1 + (Math.random() - 0.5) * data.speedVariation * dt;\n    particle.vx *= speedMultiplier;\n    particle.vy *= speedMultiplier;\n    \n    // STEP 4: Apply spin to particle size\n    // Makes particles appear to rotate/vibrate\n    const spinPhase = particle.age * data.spinRate * 1000;\n    particle.size = particle.baseSize * (1 + Math.sin(spinPhase) * 0.2);\n    \n    // STEP 5: Fluctuate opacity nervously\n    // Creates a flickering effect\n    particle.opacity = particle.baseOpacity * (0.8 + Math.random() * 0.4);\n    \n    // STEP 6: Apply damping to prevent infinite acceleration\n    // Keeps movement bounded\n    particle.vx *= Math.pow(0.98, dt);\n    particle.vy *= Math.pow(0.98, dt);\n    \n    // STEP 7: Cap maximum velocity\n    // Prevents particles from moving too fast\n    const speed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);\n    if (speed > 0.5) {\n        particle.vx = (particle.vx / speed) * 0.5;\n        particle.vy = (particle.vy / speed) * 0.5;\n    }\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'erratic',\n    emoji: '😰',\n    description: 'Nervous jittery movement for anxious states',\n    initialize: initializeErratic,\n    update: updateErratic\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Cautious Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Slow, careful movement with pauses for suspicious states\n * @author Emotive Engine Team\n * @module particles/behaviors/cautious\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a watchful, suspicious atmosphere with particles moving slowly and         \n * ║ pausing frequently, as if carefully observing. Like being on guard.               \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *    · → · STOP\n *   STOP ← ·        ← move, then pause\n *    · ⭐ ·         ← watching center\n *   · STOP →        ← pause, then move\n *    STOP · ← ·\n * \n * USED BY EMOTIONS:\n * - suspicion (watchful, guarded)\n * - uncertainty\n * - wariness\n * \n * RECIPE TO MODIFY:\n * - Increase pauseDuration for longer stops\n * - Decrease moveDuration for shorter movements\n * - Adjust watchRadius to control patrol area\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\nimport { PHYSICS } from '../config/physics.js';\n\n/**\n * Initialize cautious behavior for a particle\n * Sets up slow, deliberate movement patterns\n * \n * @param {Particle} particle - The particle to initialize\n */\nexport function initializeCautious(particle) {\n    // Particles move very slowly and deliberately\n    const angle = Math.random() * PHYSICS.TWO_PI;\n    const speed = 0.02 + Math.random() * 0.03; // Very slow: 0.02-0.05 units/frame\n    particle.vx = Math.cos(angle) * speed;\n    particle.vy = Math.sin(angle) * speed;\n    particle.lifeDecay = 0.001;  // Very long-lived for visibility\n    particle.life = 1.0;  // Ensure full life\n    \n    particle.size = (4 + Math.random() * 4) * \n        (particle.scaleFactor || 1) * \n        (particle.particleSizeMultiplier || 1);\n    particle.baseSize = particle.size;\n    particle.baseOpacity = 0.8 + Math.random() * 0.2;  // Very visible (80-100%)\n    particle.opacity = particle.baseOpacity;\n    \n    // Use emotion colors if provided\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\n        particle.color = selectWeightedColor(particle.emotionColors);\n    }\n    \n    particle.behaviorData = {\n        pauseTimer: Math.random() * 2,      // Start with random pause offset\n        pauseDuration: 0.5 + Math.random() * 0.5,  // Pause for 0.5-1s\n        moveDuration: 1 + Math.random() * 0.5,     // Move for 1-1.5s\n        isMoving: Math.random() > 0.5,             // Randomly start moving or paused\n        moveTimer: 0,\n        originalVx: particle.vx,\n        originalVy: particle.vy,\n        watchRadius: 50 + Math.random() * 30       // Stay within 50-80 units of core\n    };\n}\n\n/**\n * Update cautious behavior - slow movement with frequent pauses\n * \n * Used for: SUSPICION/UNCERTAINTY emotions (watchful, guarded, wary)\n * Visual effect: Particles move slowly and deliberately, pausing frequently\n *                as if carefully observing their surroundings\n * \n * @param {Particle} particle - The particle to update\n * @param {number} dt - Delta time (milliseconds since last frame, typically ~16.67 for 60fps)\n * @param {number} centerX - X coordinate of the orb's center\n * @param {number} centerY - Y coordinate of the orb's center\n */\nexport function updateCautious(particle, dt, centerX, centerY) {\n    const data = particle.behaviorData;\n    \n    // STEP 1: Update movement timer\n    // Tracks how long we've been in current state (moving or paused)\n    data.moveTimer += dt;\n    \n    // STEP 2: Switch between moving and pausing states\n    if (data.isMoving) {\n        // Currently moving - check if time to pause\n        if (data.moveTimer > data.moveDuration) {\n            data.isMoving = false;\n            data.moveTimer = 0;\n            // Stop movement during pause (watchful stillness)\n            particle.vx = 0;\n            particle.vy = 0;\n        } else {\n            // Continue moving at cautious speed\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n        }\n    } else {\n        // Currently paused - check if time to move\n        if (data.moveTimer > data.pauseDuration) {\n            data.isMoving = true;\n            data.moveTimer = 0;\n            // Pick a new careful direction\n            const angle = Math.random() * PHYSICS.TWO_PI;\n            const speed = 0.02 + Math.random() * 0.03;\n            particle.vx = Math.cos(angle) * speed;\n            particle.vy = Math.sin(angle) * speed;\n            // Store for next movement phase\n            data.originalVx = particle.vx;\n            data.originalVy = particle.vy;\n        }\n    }\n    \n    // STEP 3: Keep particles within watch radius of core\n    // They're suspicious, so they don't stray too far\n    const dx = particle.x - centerX;\n    const dy = particle.y - centerY;\n    const dist = Math.sqrt(dx * dx + dy * dy);\n    \n    if (dist > data.watchRadius) {\n        // Pull back towards core slowly (maintaining caution)\n        const pullStrength = 0.02;\n        particle.vx -= (dx / dist) * pullStrength * dt;\n        particle.vy -= (dy / dist) * pullStrength * dt;\n    }\n    \n    // STEP 4: Apply very light damping\n    // Keeps movement controlled and deliberate\n    particle.vx *= Math.pow(0.995, dt);\n    particle.vy *= Math.pow(0.995, dt);\n    \n    // STEP 5: Subtle opacity flicker during pauses\n    // Creates a watchful \"blinking\" effect\n    if (!data.isMoving) {\n        particle.opacity = particle.baseOpacity * (0.9 + Math.sin(particle.age * 5) * 0.1);\n    } else {\n        particle.opacity = particle.baseOpacity;\n    }\n}\n\n// Export behavior definition for registry\nexport default {\n    name: 'cautious',\n    emoji: '🤨',\n    description: 'Slow careful movement with watchful pauses',\n    initialize: initializeCautious,\n    update: updateCautious\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Surveillance Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Searchlight scanning behavior for suspicious/paranoid states\n * @author Emotive Engine Team\n * @module particles/behaviors/surveillance\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║ CONCEPT                                                                           \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Particles act like searchlights or surveillance cameras, slowly scanning back     \n * ║ and forth in arcs, pausing at edges, occasionally darting to new positions.       \n * ║ Creates a paranoid, watchful atmosphere with deliberate, searching movements.     \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n * \n * BEHAVIOR PATTERN:\n * • Slow horizontal scanning arcs (like searchlights)\n * • Pause at scan extremes (checking corners)\n * • Occasional quick darts to new positions (alert response)\n * • Some particles patrol perimeter (edge surveillance)\n * • Random freezing in place (listening/watching)\n * \n * ┌──────────────────────────────────────────────────────────────────────────────────┐\n * │  VISUAL: Searchlight Scanning                                                    │\n * │                                                                                   │\n * │     ←─────────────→  (slow scan)                                                │\n * │    •               •                                                             │\n * │                                                                                   │\n * │   pause...     ...pause                                                         │\n * │                                                                                   │\n * │     DART! ──→ • (quick repositioning)                                          │\n * └──────────────────────────────────────────────────────────────────────────────────┘\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\n\nexport default {\n    name: 'surveillance',\n    emoji: '👁️',\n    description: 'Searchlight scanning with paranoid watchfulness',\n    \n    /**\n     * Initialize particle state for surveillance behavior\n     */\n    initialize: function(particle, config) {\n        // Set particle color from emotion palette\n        if (particle.emotionColors && particle.emotionColors.length > 0) {\n            particle.color = selectWeightedColor(particle.emotionColors);\n        }\n        \n        particle.behaviorState = {\n            // Scanning properties\n            scanAngle: Math.random() * Math.PI - Math.PI/2,  // Current scan angle\n            scanDirection: Math.random() < 0.5 ? 1 : -1,      // Scan direction\n            scanSpeed: 0.3 + Math.random() * 0.2,             // Individual scan rate\n            scanRange: Math.PI/3 + Math.random() * Math.PI/4, // Scan arc size\n            scanCenter: Math.random() * Math.PI * 2,          // Center of scan arc\n            pauseTimer: 0,                                     // Pause at edges\n            pauseDuration: 500 + Math.random() * 500,         // How long to pause\n            \n            // Movement states\n            mode: 'scanning',  // 'scanning', 'darting', 'frozen', 'patrolling'\n            modeTimer: 0,\n            nextModeChange: 2000 + Math.random() * 3000,\n            \n            // Dart properties\n            dartTarget: { x: 0, y: 0 },\n            dartSpeed: 0,\n            \n            // Patrol properties\n            patrolRadius: 150 + Math.random() * 100,\n            patrolAngle: Math.random() * Math.PI * 2,\n            \n            // Threat response\n            alertLevel: 0,\n            lastPosition: { x: particle.x, y: particle.y }\n        };\n        \n        // Assign roles: 70% scanners, 20% patrollers, 10% watchers\n        const role = Math.random();\n        if (role < 0.7) {\n            particle.behaviorState.primaryRole = 'scanner';\n        } else if (role < 0.9) {\n            particle.behaviorState.primaryRole = 'patroller';\n            particle.behaviorState.mode = 'patrolling';\n        } else {\n            particle.behaviorState.primaryRole = 'watcher';\n            particle.behaviorState.mode = 'frozen';\n        }\n    },\n    \n    /**\n     * Update particle physics for surveillance behavior\n     */\n    update: function(particle, dt, config) {\n        const state = particle.behaviorState;\n        if (!state) return;\n        \n        // Update mode timer\n        state.modeTimer += dt * 16;\n        \n        // Check for mode changes\n        if (state.modeTimer > state.nextModeChange) {\n            this.changeMode(particle, state);\n            state.modeTimer = 0;\n            state.nextModeChange = 2000 + Math.random() * 4000;\n        }\n        \n        // Update based on current mode\n        switch(state.mode) {\n            case 'scanning':\n                this.updateScanning(particle, dt, state, config);\n                break;\n            case 'darting':\n                this.updateDarting(particle, dt, state, config);\n                break;\n            case 'frozen':\n                this.updateFrozen(particle, dt, state, config);\n                break;\n            case 'patrolling':\n                this.updatePatrolling(particle, dt, state, config);\n                break;\n        }\n        \n        // Apply slight downward drift for weight\n        particle.vy += 0.05 * dt;\n        \n        // Update position\n        particle.x += particle.vx * dt;\n        particle.y += particle.vy * dt;\n        \n        // Store last position\n        state.lastPosition.x = particle.x;\n        state.lastPosition.y = particle.y;\n    },\n    \n    /**\n     * Scanning mode - slow searchlight sweeps\n     */\n    updateScanning: function(particle, dt, state, config) {\n        // Update scan angle\n        if (state.pauseTimer > 0) {\n            // Pausing at edge of scan\n            state.pauseTimer -= dt * 16;\n            particle.vx *= 0.9;  // Slow down during pause\n            particle.vy *= 0.9;\n        } else {\n            // Active scanning\n            state.scanAngle += state.scanDirection * state.scanSpeed * dt * 0.02;\n            \n            // Check scan limits and pause at edges\n            if (Math.abs(state.scanAngle) > state.scanRange / 2) {\n                state.scanDirection *= -1;\n                state.pauseTimer = state.pauseDuration;\n                state.scanAngle = Math.sign(state.scanAngle) * state.scanRange / 2;\n            }\n        }\n        \n        // Apply scanning motion\n        const actualAngle = state.scanCenter + state.scanAngle;\n        const speed = 0.8 + state.alertLevel * 0.5;\n        particle.vx = Math.cos(actualAngle) * speed;\n        particle.vy = Math.sin(actualAngle) * speed * 0.3;  // Less vertical movement\n    },\n    \n    /**\n     * Darting mode - quick repositioning\n     */\n    updateDarting: function(particle, dt, state, config) {\n        const dx = state.dartTarget.x - particle.x;\n        const dy = state.dartTarget.y - particle.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance > 5) {\n            // Move toward dart target quickly\n            particle.vx = (dx / distance) * state.dartSpeed;\n            particle.vy = (dy / distance) * state.dartSpeed;\n        } else {\n            // Reached target, switch back to scanning\n            state.mode = 'scanning';\n            state.modeTimer = 0;\n        }\n    },\n    \n    /**\n     * Frozen mode - watchful stillness\n     */\n    updateFrozen: function(particle, dt, state, config) {\n        // Almost no movement, just tiny vibrations\n        particle.vx *= 0.95;\n        particle.vy *= 0.95;\n        \n        // Occasional tiny twitch\n        if (Math.random() < 0.01) {\n            particle.vx += (Math.random() - 0.5) * 0.5;\n            particle.vy += (Math.random() - 0.5) * 0.5;\n        }\n    },\n    \n    /**\n     * Patrolling mode - edge surveillance\n     */\n    updatePatrolling: function(particle, dt, state, config) {\n        // Patrol in a circle around the edge\n        state.patrolAngle += 0.01 * dt;\n        \n        const targetX = Math.cos(state.patrolAngle) * state.patrolRadius;\n        const targetY = Math.sin(state.patrolAngle) * state.patrolRadius;\n        \n        // Move toward patrol position\n        const dx = targetX - particle.x;\n        const dy = targetY - particle.y;\n        \n        particle.vx = dx * 0.02;\n        particle.vy = dy * 0.02;\n    },\n    \n    /**\n     * Change behavior mode\n     */\n    changeMode: function(particle, state) {\n        const rand = Math.random();\n        \n        // Mode transition probabilities based on role\n        if (state.primaryRole === 'scanner') {\n            if (rand < 0.1) {\n                // Dart to new position\n                state.mode = 'darting';\n                state.dartTarget = {\n                    x: (Math.random() - 0.5) * 200,\n                    y: (Math.random() - 0.5) * 200\n                };\n                state.dartSpeed = 3 + Math.random() * 2;\n            } else if (rand < 0.2) {\n                // Freeze and watch\n                state.mode = 'frozen';\n            } else {\n                // Continue scanning\n                state.mode = 'scanning';\n            }\n        } else if (state.primaryRole === 'patroller') {\n            if (rand < 0.1) {\n                state.mode = 'frozen';\n            } else {\n                state.mode = 'patrolling';\n            }\n        } else {\n            // Watcher role\n            if (rand < 0.3) {\n                state.mode = 'scanning';\n            } else {\n                state.mode = 'frozen';\n            }\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Glitchy Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Digital glitch behavior with stuttering orbits and corruption\n * @author Emotive Engine Team\n * @module particles/behaviors/glitchy\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║ CONCEPT                                                                           \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Particles orbit like in love state but with digital glitches, stutters, and      \n * ║ corruption artifacts. Creates a captivating dubstep-like visual rhythm.           \n * ║ Combines smooth orbiting with sudden position jumps and digital artifacts.        \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n * \n * BEHAVIOR PATTERN:\n * • Base orbiting motion (like love state)\n * • Random position jumps (teleportation glitches)\n * • Stuttering/freezing (frame drops)\n * • Trail duplication (ghosting artifacts)\n * • RGB channel separation\n * • Digital noise bursts\n * \n * ┌──────────────────────────────────────────────────────────────────────────────────┐\n * │  VISUAL: Glitched Orbiting                                                       │\n * │                                                                                   │\n * │       ░░▒▒▓▓█  ←─ Digital trail                                                 │\n * │     •  ┊  •                                                                      │\n * │   •┊  ⚡  ┊•  ←─ Glitch jump                                                    │\n * │     •  ┊  •                                                                      │\n * │       ░░▒▒▓▓█                                                                    │\n * └──────────────────────────────────────────────────────────────────────────────────┘\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\n\nexport default {\n    name: 'glitchy',\n    emoji: '⚡',\n    description: 'Digital glitch with stuttering orbits and corruption',\n    \n    // Rhythm configuration for glitchy behavior\n    rhythm: {\n        enabled: true,\n        \n        // Glitch events sync to rhythm\n        glitchTiming: {\n            mode: 'subdivision',     // Glitch on subdivisions\n            subdivision: 'sixteenth', // 16th notes for rapid glitches\n            probability: 0.3,        // 30% chance on each 16th\n            intensityOnBeat: 2.0,    // Stronger glitches on beat\n            intensityOffBeat: 0.5    // Weaker between beats\n        },\n        \n        // Stutter/freeze timing\n        stutterSync: {\n            mode: 'pattern',         // Based on rhythm pattern\n            patterns: {\n                'dubstep': {\n                    freezeOnDrop: true,  // Freeze on the drop (beat 3)\n                    dropDuration: 100    // Freeze for 100ms\n                },\n                'breakbeat': {\n                    randomFreeze: 0.1,   // 10% chance per beat\n                    duration: 50         // Short 50ms freezes\n                }\n            }\n        },\n        \n        // Orbital speed modulation\n        orbitRhythm: {\n            baseSpeed: 'tempo',      // Speed scales with BPM\n            wobbleSync: 'eighth',    // Wobble on 8th notes\n            beatAcceleration: 1.5,   // Speed boost on beat\n            barReset: true           // Reset orbit angle each bar\n        },\n        \n        // RGB split effect rhythm\n        rgbSync: {\n            enabled: true,\n            amount: 'intensity',     // Split based on musical intensity\n            direction: 'beat',        // Change split direction on beat\n            maxSplit: 10             // Maximum pixel split\n        },\n        \n        // Digital noise bursts\n        noiseRhythm: {\n            trigger: 'accent',       // Noise on accented beats\n            duration: 50,            // 50ms noise bursts\n            intensity: 'drop'        // Scale with drop intensity\n        }\n    },\n    \n    /**\n     * Initialize particle state for glitchy behavior\n     */\n    initialize: function(particle, config, centerX, centerY) {\n        // Set particle color from emotion palette\n        if (particle.emotionColors && particle.emotionColors.length > 0) {\n            particle.color = selectWeightedColor(particle.emotionColors);\n        }\n        \n        particle.behaviorState = {\n            // Orbital properties (tighter orbit to stay centered)\n            orbitAngle: Math.random() * Math.PI * 2,\n            orbitRadius: 30 + Math.random() * 40,  // Reduced from 40-120 to 30-70\n            orbitSpeed: 0.01 + Math.random() * 0.02,\n            \n            // Glitch properties\n            glitchTimer: 0,\n            nextGlitch: Math.random() * 500 + 100,\n            isGlitching: false,\n            glitchDuration: 0,\n            glitchOffset: { x: 0, y: 0 },\n            \n            // Stutter properties\n            stutterTimer: 0,\n            nextStutter: Math.random() * 200 + 50,\n            isFrozen: false,\n            frozenPosition: { x: 0, y: 0 },\n            frozenVelocity: { x: 0, y: 0 },\n            \n            // Trail ghost properties\n            hasGhost: Math.random() < 0.3,\n            ghostOffset: Math.random() * 20 + 10,\n            ghostAngle: Math.random() * Math.PI * 2,\n            \n            // RGB separation\n            rgbSplit: Math.random() < 0.4,\n            rgbPhase: Math.random() * Math.PI * 2,\n            \n            // Digital noise\n            noiseLevel: 0,\n            noiseBurst: false,\n            \n            // Dubstep rhythm sync\n            beatPhase: Math.random() * Math.PI * 2,\n            beatFrequency: 0.05 + Math.random() * 0.03,\n            dropIntensity: 0\n        };\n        \n        // Special properties for glitch\n        particle.lifeDecay = 0.0015; // Slower decay for trails\n        particle.hasGlow = Math.random() < 0.5; // More glow for digital effect\n        if (particle.hasGlow) {\n            particle.glowSizeMultiplier = 2.0 + Math.random(); // Bigger glows\n        }\n    },\n    \n    /**\n     * Update particle physics for glitchy behavior\n     */\n    update: function(particle, dt, centerX, centerY) {\n        const state = particle.behaviorState;\n        if (!state) return;\n        \n        // centerX and centerY are passed correctly from updateBehavior\n        // No need for fallbacks - they should always be provided\n        \n        // Update timers\n        state.glitchTimer += dt * 16;\n        state.stutterTimer += dt * 16;\n        \n        // Check for stutter/freeze\n        if (state.stutterTimer > state.nextStutter) {\n            if (!state.isFrozen) {\n                // Start freeze\n                state.isFrozen = true;\n                state.frozenPosition = { x: particle.x, y: particle.y };\n                state.frozenVelocity = { x: particle.vx, y: particle.vy };\n                state.stutterTimer = 0;\n                state.nextStutter = 20 + Math.random() * 40; // Short freeze\n            } else {\n                // End freeze\n                state.isFrozen = false;\n                state.stutterTimer = 0;\n                state.nextStutter = 100 + Math.random() * 300;\n                \n                // Sometimes jump on unfreeze (smaller jumps to stay centered)\n                if (Math.random() < 0.3) {\n                    particle.x += (Math.random() - 0.5) * 20;  // Reduced from 50\n                    particle.y += (Math.random() - 0.5) * 20;  // Reduced from 50\n                }\n            }\n        }\n        \n        // Check for glitch events\n        if (state.glitchTimer > state.nextGlitch && !state.isGlitching) {\n            state.isGlitching = true;\n            state.glitchDuration = 50 + Math.random() * 100;\n            state.glitchOffset = {\n                x: (Math.random() - 0.5) * 30,  // Reduced from 100 to keep particles closer\n                y: (Math.random() - 0.5) * 30   // Reduced from 100 to keep particles closer\n            };\n            state.glitchTimer = 0;\n            \n            // Change color during glitch\n            if (Math.random() < 0.5 && particle.emotionColors) {\n                particle.color = selectWeightedColor(particle.emotionColors);\n            }\n        }\n        \n        // End glitch\n        if (state.isGlitching && state.glitchTimer > state.glitchDuration) {\n            state.isGlitching = false;\n            state.glitchTimer = 0;\n            state.nextGlitch = 200 + Math.random() * 800;\n            state.glitchOffset = { x: 0, y: 0 };\n        }\n        \n        // Update beat phase for dubstep rhythm\n        state.beatPhase += state.beatFrequency * dt;\n        const beatIntensity = Math.sin(state.beatPhase) * 0.5 + 0.5;\n        \n        // Calculate drop intensity (periodic bass drops)\n        const dropCycle = state.beatPhase % (Math.PI * 4);\n        if (dropCycle < Math.PI * 0.5) {\n            state.dropIntensity = Math.min(1, state.dropIntensity + dt * 0.1);\n        } else {\n            state.dropIntensity = Math.max(0, state.dropIntensity - dt * 0.05);\n        }\n        \n        if (!state.isFrozen) {\n            // Update orbital position with beat modulation\n            state.orbitAngle += state.orbitSpeed * dt * (1 + beatIntensity * 0.5);\n            \n            // Add drop wobble\n            const wobbleRadius = state.orbitRadius * (1 + state.dropIntensity * 0.3 * Math.sin(state.beatPhase * 4));\n            \n            // Calculate target position relative to center\n            let targetX = centerX + Math.cos(state.orbitAngle) * wobbleRadius;\n            let targetY = centerY + Math.sin(state.orbitAngle) * wobbleRadius * 0.6; // Elliptical\n            \n            // Apply glitch offset (smaller random factor to stay closer)\n            if (state.isGlitching) {\n                targetX += state.glitchOffset.x * Math.random() * 0.5;  // Reduced effect\n                targetY += state.glitchOffset.y * Math.random() * 0.5;  // Reduced effect\n            }\n            \n            // RGB split effect\n            if (state.rgbSplit) {\n                const splitAmount = 3 * (1 + state.dropIntensity);\n                targetX += Math.sin(state.rgbPhase) * splitAmount;\n                targetY += Math.cos(state.rgbPhase) * splitAmount;\n                state.rgbPhase += 0.1 * dt;\n            }\n            \n            // Digital noise bursts on drops (smaller to stay centered)\n            if (state.dropIntensity > 0.8 && Math.random() < 0.1) {\n                targetX += (Math.random() - 0.5) * 10;  // Reduced from 20\n                targetY += (Math.random() - 0.5) * 10;  // Reduced from 20\n            }\n            \n            // Stronger pull to center to prevent wandering\n            const smoothing = state.isGlitching ? 0.05 : 0.08;  // Increased from 0.02/0.05\n            particle.vx = (targetX - particle.x) * smoothing;\n            particle.vy = (targetY - particle.y) * smoothing;\n            \n            // Add jitter based on beat\n            particle.vx += (Math.random() - 0.5) * beatIntensity * 2;\n            particle.vy += (Math.random() - 0.5) * beatIntensity * 2;\n            \n        } else {\n            // Frozen - vibrate in place\n            particle.vx = (Math.random() - 0.5) * 0.5;\n            particle.vy = (Math.random() - 0.5) * 0.5;\n        }\n        \n        // Apply velocity\n        particle.x += particle.vx * dt;\n        particle.y += particle.vy * dt;\n        \n        // Flicker opacity for digital effect\n        if (Math.random() < 0.02) {\n            particle.opacity = 0.1 + Math.random() * 0.9;\n        }\n        \n        // Size pulsing with beat\n        particle.size = particle.baseSize * (1 + beatIntensity * 0.3 + state.dropIntensity * 0.5);\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Directed Particle Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Directed behavior - particles move in focused, straight paths\n * @author Emotive Engine Team\n * @module particles/behaviors/directed\n */\n\n/**\n * DIRECTED BEHAVIOR - FOCUSED STRAIGHT PATHS\n * Used by: focused emotion\n * \n * Particles move in deliberate, straight lines toward a target or direction,\n * representing intense concentration and focus.\n */\nexport default {\n    name: 'directed',\n    emoji: '🎯',\n    description: 'Focused, straight-line movement toward target',\n    \n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ CONFIGURATION\n    // └─────────────────────────────────────────────────────────────────────────────────\n    config: {\n        speed: 3.0,              // Fast movement\n        acceleration: 0.15,      // Quick acceleration\n        focusStrength: 0.8,      // Strong pull toward target\n        randomness: 0.1,         // Minimal deviation\n        edgeBuffer: 50           // Buffer from canvas edges\n    },\n    \n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ INITIALIZATION\n    // └─────────────────────────────────────────────────────────────────────────────────\n    initialize(particle, centerX, centerY, canvasWidth, canvasHeight) {\n        // Set initial direction toward center\n        const dx = centerX - particle.x;\n        const dy = centerY - particle.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance > 0) {\n            particle.vx = (dx / distance) * this.config.speed;\n            particle.vy = (dy / distance) * this.config.speed;\n        } else {\n            // Random initial direction if at center\n            const angle = Math.random() * Math.PI * 2;\n            particle.vx = Math.cos(angle) * this.config.speed;\n            particle.vy = Math.sin(angle) * this.config.speed;\n        }\n        \n        // Store target position\n        particle.targetX = centerX;\n        particle.targetY = centerY;\n        particle.directedPhase = 0;\n    },\n    \n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ UPDATE LOOP\n    // └─────────────────────────────────────────────────────────────────────────────────\n    update(particle, dt, centerX, centerY, canvasWidth, canvasHeight) {\n        // Update phase for variation\n        particle.directedPhase += dt * 0.05;\n        \n        // Calculate direction to target\n        const dx = particle.targetX - particle.x;\n        const dy = particle.targetY - particle.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance > 10) {\n            // Move toward target with focus strength\n            const targetVx = (dx / distance) * this.config.speed;\n            const targetVy = (dy / distance) * this.config.speed;\n            \n            // Apply acceleration toward target velocity\n            particle.vx += (targetVx - particle.vx) * this.config.acceleration * dt;\n            particle.vy += (targetVy - particle.vy) * this.config.acceleration * dt;\n            \n            // Add minimal randomness for organic feel\n            particle.vx += (Math.random() - 0.5) * this.config.randomness;\n            particle.vy += (Math.random() - 0.5) * this.config.randomness;\n        } else {\n            // Near target, pick new target\n            const angle = Math.random() * Math.PI * 2;\n            const radius = 100 + Math.random() * 200;\n            particle.targetX = centerX + Math.cos(angle) * radius;\n            particle.targetY = centerY + Math.sin(angle) * radius;\n            \n            // Keep within canvas bounds\n            particle.targetX = Math.max(this.config.edgeBuffer, \n                              Math.min(canvasWidth - this.config.edgeBuffer, particle.targetX));\n            particle.targetY = Math.max(this.config.edgeBuffer, \n                              Math.min(canvasHeight - this.config.edgeBuffer, particle.targetY));\n        }\n        \n        // Apply velocity\n        particle.x += particle.vx * dt;\n        particle.y += particle.vy * dt;\n        \n        // Edge bouncing with dampening\n        if (particle.x <= 0 || particle.x >= canvasWidth) {\n            particle.vx *= -0.8;\n            particle.x = Math.max(0, Math.min(canvasWidth, particle.x));\n            // Pick new target after bounce\n            particle.targetX = centerX + (Math.random() - 0.5) * 300;\n        }\n        if (particle.y <= 0 || particle.y >= canvasHeight) {\n            particle.vy *= -0.8;\n            particle.y = Math.max(0, Math.min(canvasHeight, particle.y));\n            // Pick new target after bounce\n            particle.targetY = centerY + (Math.random() - 0.5) * 300;\n        }\n    },\n    \n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ VISUAL CHARACTERISTICS\n    // └─────────────────────────────────────────────────────────────────────────────────\n    visuals: {\n        trailLength: 'medium',      // Medium trail for motion clarity\n        opacity: 0.9,               // High opacity for focus\n        sizeMultiplier: 1.0,        // Standard size\n        blurAmount: 0.2             // Sharp, focused appearance\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Fizzy Particle Behavior\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Fizzy behavior - bubbly, effervescent particle movement\n * @author Emotive Engine Team\n * @module particles/behaviors/fizzy\n */\n\n/**\n * FIZZY BEHAVIOR - BUBBLY EFFERVESCENCE\n * Used by: excited emotion\n * \n * Particles bubble upward with random pops and fizz, like carbonation in soda.\n * Creates an energetic, celebratory atmosphere.\n */\nexport default {\n    name: 'fizzy',\n    emoji: '🫧',\n    description: 'Bubbly, effervescent movement like carbonation',\n    \n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ CONFIGURATION\n    // └─────────────────────────────────────────────────────────────────────────────────\n    config: {\n        baseRiseSpeed: 2.5,      // Base upward velocity\n        wobbleAmplitude: 30,     // Horizontal wobble range\n        wobbleFrequency: 0.15,   // Wobble oscillation speed\n        popChance: 0.002,        // Chance to \"pop\" per frame\n        popForce: 8,             // Force of pop burst\n        fizziness: 0.3,          // Random velocity variation\n        gravity: -0.05           // Slight upward bias\n    },\n    \n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ INITIALIZATION\n    // └─────────────────────────────────────────────────────────────────────────────────\n    initialize(particle, centerX, centerY, canvasWidth, canvasHeight) {\n        // Start with upward velocity\n        particle.vx = (Math.random() - 0.5) * 2;\n        particle.vy = -this.config.baseRiseSpeed - Math.random() * 2;\n        \n        // Fizzy properties\n        particle.wobblePhase = Math.random() * Math.PI * 2;\n        particle.wobbleSpeed = this.config.wobbleFrequency * (0.8 + Math.random() * 0.4);\n        particle.bubbleSize = 0.5 + Math.random() * 0.5;\n        particle.popTimer = 0;\n        particle.isFizzing = true;\n    },\n    \n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ UPDATE LOOP\n    // └─────────────────────────────────────────────────────────────────────────────────\n    update(particle, dt, centerX, centerY, canvasWidth, canvasHeight) {\n        // Update wobble phase\n        particle.wobblePhase += particle.wobbleSpeed * dt;\n        \n        // Apply wobble to horizontal movement\n        const wobble = Math.sin(particle.wobblePhase) * this.config.wobbleAmplitude;\n        particle.vx = wobble * 0.05 + (Math.random() - 0.5) * this.config.fizziness;\n        \n        // Apply upward force with variation\n        particle.vy += this.config.gravity * dt;\n        particle.vy += (Math.random() - 0.5) * this.config.fizziness;\n        \n        // Random \"pop\" events\n        if (Math.random() < this.config.popChance) {\n            // Pop! Send particle in random direction\n            const popAngle = Math.random() * Math.PI * 2;\n            particle.vx = Math.cos(popAngle) * this.config.popForce;\n            particle.vy = Math.sin(popAngle) * this.config.popForce * 0.7; // Slightly favor horizontal\n            particle.popTimer = 1; // Visual feedback timer\n            \n            // Resize on pop\n            particle.bubbleSize = 0.3 + Math.random() * 0.7;\n        }\n        \n        // Decay pop effect\n        if (particle.popTimer > 0) {\n            particle.popTimer -= dt * 0.05;\n            // Slow down after pop\n            particle.vx *= 0.95;\n            particle.vy *= 0.95;\n        }\n        \n        // Apply velocity\n        particle.x += particle.vx * dt;\n        particle.y += particle.vy * dt;\n        \n        // Wrap around vertically (bubbles rise and restart)\n        if (particle.y < -50) {\n            particle.y = canvasHeight + 50;\n            particle.x = centerX + (Math.random() - 0.5) * 300;\n            particle.vy = -this.config.baseRiseSpeed - Math.random() * 2;\n            particle.bubbleSize = 0.5 + Math.random() * 0.5;\n        }\n        \n        // Horizontal bounds with soft bounce\n        if (particle.x <= 0 || particle.x >= canvasWidth) {\n            particle.vx *= -0.5;\n            particle.x = Math.max(0, Math.min(canvasWidth, particle.x));\n        }\n        \n        // Bottom boundary (bubbles can spawn from bottom)\n        if (particle.y > canvasHeight + 50) {\n            particle.y = canvasHeight;\n            particle.vy = -this.config.baseRiseSpeed * 1.5;\n        }\n        \n        // Update size based on bubble properties\n        particle.size = particle.baseSize * particle.bubbleSize * \n                       (1 + Math.sin(particle.wobblePhase * 2) * 0.1);\n    },\n    \n    // ┌─────────────────────────────────────────────────────────────────────────────────\n    // │ VISUAL CHARACTERISTICS\n    // └─────────────────────────────────────────────────────────────────────────────────\n    visuals: {\n        trailLength: 'short',       // Short trails for bubbly feel\n        opacity: 0.6,               // Semi-transparent like bubbles\n        sizeMultiplier: 1.2,        // Slightly larger for bubble effect\n        blurAmount: 0.5,            // Soft, bubble-like appearance\n        sparkle: true               // Occasional sparkle effect\n    }\n};","/**\r\n * Calm Particle Behavior\r\n * Particles drift peacefully with minimal, smooth movement\r\n */\r\n\r\nimport { selectWeightedColor } from '../utils/colorUtils.js';\r\n\r\n// Behavior configuration\r\nconst config = {\r\n    baseSpeed: 0.08,           // Very slow base movement\r\n    driftSpeed: 0.02,          // Minimal drift speed\r\n    fadeSpeed: 0.0008,         // Very slow fade\r\n    sizeChange: 0.0002,        // Minimal size variation\r\n    swayAmplitude: 3,          // Gentle horizontal sway\r\n    floatAmplitude: 2,         // Minimal vertical float\r\n    rotationSpeed: 0.0001,     // Barely perceptible rotation\r\n    minOpacity: 0.15,          // Minimum visibility\r\n    maxOpacity: 0.35,          // Maximum visibility (subtle)\r\n    breathingPeriod: 8000,     // 8 second breathing cycle\r\n    connectionDistance: 0,      // No connections between particles\r\n    centerAttraction: 0.00005  // Very slight pull to center\r\n};\r\n\r\n/**\r\n * Initialize a particle with calm properties\r\n * @param {Object} particle - The particle to initialize\r\n */\r\nexport function initializeCalm(particle) {\r\n    // Start with faster initial burst movement\r\n    particle.vx = (Math.random() - 0.5) * 0.5;  // Increased 5x from 0.1\r\n    particle.vy = (Math.random() - 0.5) * 0.5;  // Increased 5x from 0.1\r\n    particle.lifeDecay = 0.003;  // Moderate fade (particles last ~5-6 seconds)\r\n\r\n    // Use emotion colors if provided\r\n    if (particle.emotionColors && particle.emotionColors.length > 0) {\r\n        particle.color = selectWeightedColor(particle.emotionColors);\r\n    }\r\n\r\n    // Calm-specific behavior data\r\n    particle.behaviorData = {\r\n        orbitAngle: Math.random() * Math.PI * 2,  // Starting angle around center\r\n        orbitRadius: 40 + Math.random() * 60,      // Distance from center (40-100 pixels)\r\n        orbitSpeed: 0.0008 + Math.random() * 0.0006, // Faster orbit speed (4x)\r\n        floatOffset: Math.random() * Math.PI * 2,\r\n        breathingOffset: Math.random() * Math.PI * 2,\r\n        lifetime: 0\r\n    };\r\n}\r\n\r\n/**\r\n * Update calm behavior each frame\r\n * @param {Object} particle - The particle to update\r\n * @param {number} dt - Delta time\r\n * @param {number} centerX - Orb center X\r\n * @param {number} centerY - Orb center Y\r\n */\r\nexport function updateCalm(particle, dt, centerX, centerY) {\r\n    const data = particle.behaviorData;\r\n    if (!data) return;\r\n\r\n    data.lifetime += dt;\r\n\r\n    // Breathing effect (very subtle size change)\r\n    const breathPhase = (data.lifetime + data.breathingOffset * config.breathingPeriod) / config.breathingPeriod;\r\n    const breathIntensity = Math.sin(breathPhase * Math.PI * 2) * 0.5 + 0.5;\r\n\r\n    // Apply subtle size pulsing\r\n    particle.size = particle.baseSize * (0.95 + breathIntensity * 0.05);\r\n\r\n    // Slow orbital movement around the mascot\r\n    data.orbitAngle += data.orbitSpeed * dt;\r\n\r\n    // Vary the orbit radius slightly over time for organic movement\r\n    const radiusVariation = Math.sin(data.lifetime * 0.0001 + data.floatOffset) * 10;\r\n    const currentRadius = data.orbitRadius + radiusVariation;\r\n\r\n    // Calculate target position in orbit\r\n    const targetX = centerX + Math.cos(data.orbitAngle) * currentRadius;\r\n    const targetY = centerY + Math.sin(data.orbitAngle) * currentRadius;\r\n\r\n    // Add vertical floating motion\r\n    const floatY = Math.sin(data.lifetime * 0.0003 + data.breathingOffset) * 15;\r\n\r\n    // Smoothly move toward orbital position\r\n    const dx = targetX - particle.x;\r\n    const dy = (targetY + floatY) - particle.y;\r\n\r\n    // Faster movement toward target position\r\n    particle.vx = dx * 0.03;  // Faster following (3x)\r\n    particle.vy = dy * 0.03;  // Faster following (3x)\r\n\r\n    // Add more random drift for organic feel\r\n    particle.vx += (Math.random() - 0.5) * 0.02;  // More drift\r\n    particle.vy += (Math.random() - 0.5) * 0.02;  // More drift\r\n\r\n    // Apply very light friction\r\n    particle.vx *= 0.98;\r\n    particle.vy *= 0.98;\r\n}\r\n\r\n// Export behavior definition for registry\r\nexport default {\r\n    name: 'zen',\r\n    emoji: '☯️',\r\n    description: 'Peaceful orbital movement like a hovering aura',\r\n    initialize: initializeCalm,\r\n    update: updateCalm\r\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Plugin Behavior Adapter\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Adapter for plugin-defined particle behaviors\n * @author Emotive Engine Team\n * @module particles/behaviors/plugin-adapter\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Bridges the gap between the plugin system and modular particle behaviors.         \n * ║ Allows plugins to register custom particle behaviors that integrate seamlessly    \n * ║ with the modular particle system.                                                 \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n */\n\nimport { selectWeightedColor } from '../utils/colorUtils.js';\n\n// Registry for plugin-defined behaviors\nconst pluginBehaviors = new Map();\n\n/**\n * Register a custom particle behavior from a plugin\n * @param {string} name - Unique name for the behavior\n * @param {Object} behaviorDef - Behavior definition object\n * @returns {boolean} Success status\n */\nexport function registerPluginBehavior(name, behaviorDef) {\n    if (pluginBehaviors.has(name)) {\n    }\n    \n    // Validate behavior definition\n    if (!behaviorDef.initialize || typeof behaviorDef.initialize !== 'function') {\n        return false;\n    }\n    \n    if (!behaviorDef.update || typeof behaviorDef.update !== 'function') {\n        return false;\n    }\n    \n    // Store the behavior\n    pluginBehaviors.set(name, {\n        name,\n        emoji: behaviorDef.emoji || '🔌',\n        description: behaviorDef.description || `Plugin behavior: ${name}`,\n        initialize: behaviorDef.initialize,\n        update: behaviorDef.update,\n        isPlugin: true\n    });\n    \n    return true;\n}\n\n/**\n * Unregister a plugin behavior\n * @param {string} name - Name of the behavior to remove\n * @returns {boolean} Success status\n */\nexport function unregisterPluginBehavior(name) {\n    if (pluginBehaviors.has(name)) {\n        pluginBehaviors.delete(name);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Get a plugin behavior by name\n * @param {string} name - Name of the behavior\n * @returns {Object|null} Behavior definition or null\n */\nexport function getPluginBehavior(name) {\n    return pluginBehaviors.get(name) || null;\n}\n\n/**\n * Get all registered plugin behaviors\n * @returns {Array} Array of behavior names\n */\nexport function getAllPluginBehaviors() {\n    return Array.from(pluginBehaviors.keys());\n}\n\n/**\n * Create a behavior wrapper for legacy plugin particle effects\n * Converts old-style particle definitions to modular behavior format\n * @param {Object} legacyBehavior - Legacy behavior configuration\n * @returns {Object} Modular behavior definition\n */\nexport function createLegacyAdapter(legacyBehavior) {\n    return {\n        name: legacyBehavior.name || 'legacy',\n        emoji: '🔄',\n        description: legacyBehavior.description || 'Legacy plugin behavior',\n        \n        initialize: function(particle) {\n            // Apply legacy configuration\n            if (legacyBehavior.size) {\n                particle.size = typeof legacyBehavior.size === 'object' ?\n                    legacyBehavior.size.min + Math.random() * (legacyBehavior.size.max - legacyBehavior.size.min) :\n                    legacyBehavior.size;\n                particle.baseSize = particle.size;\n            }\n            \n            if (legacyBehavior.speed) {\n                const speed = typeof legacyBehavior.speed === 'object' ?\n                    legacyBehavior.speed.min + Math.random() * (legacyBehavior.speed.max - legacyBehavior.speed.min) :\n                    legacyBehavior.speed;\n                const angle = Math.random() * Math.PI * 2;\n                particle.vx = Math.cos(angle) * speed;\n                particle.vy = Math.sin(angle) * speed;\n            }\n            \n            if (legacyBehavior.lifespan) {\n                const lifespan = typeof legacyBehavior.lifespan === 'object' ?\n                    legacyBehavior.lifespan.min + Math.random() * (legacyBehavior.lifespan.max - legacyBehavior.lifespan.min) :\n                    legacyBehavior.lifespan;\n                particle.lifeDecay = 1000 / lifespan; // Convert ms to decay rate\n            }\n            \n            if (legacyBehavior.color) {\n                particle.color = Array.isArray(legacyBehavior.color) ?\n                    selectWeightedColor(legacyBehavior.color) :\n                    legacyBehavior.color;\n            }\n            \n            if (legacyBehavior.opacity) {\n                particle.life = typeof legacyBehavior.opacity === 'object' ?\n                    legacyBehavior.opacity.min + Math.random() * (legacyBehavior.opacity.max - legacyBehavior.opacity.min) :\n                    legacyBehavior.opacity;\n            }\n            \n            // Store legacy-specific data\n            particle.behaviorData = {\n                movementType: legacyBehavior.movementType || 'linear',\n                turbulence: legacyBehavior.turbulence || 0,\n                drift: legacyBehavior.drift || 0,\n                acceleration: legacyBehavior.acceleration || 0,\n                ...legacyBehavior.customData\n            };\n        },\n        \n        update: function(particle, dt, centerX, centerY) {\n            const data = particle.behaviorData;\n            \n            // Apply movement based on type\n            switch (data.movementType) {\n                case 'wander':\n                    // Random wandering\n                    particle.vx += (Math.random() - 0.5) * data.turbulence * dt;\n                    particle.vy += (Math.random() - 0.5) * data.turbulence * dt;\n                    break;\n                    \n                case 'fall':\n                    // Falling with drift\n                    particle.vy += 0.1 * dt; // Gravity\n                    particle.vx += (Math.random() - 0.5) * data.drift * dt;\n                    break;\n                    \n                case 'rain':\n                    // Digital rain effect\n                    particle.vy += data.acceleration * dt;\n                    break;\n                    \n                case 'orbit':\n                    // Orbital motion\n                    const dx = particle.x - centerX;\n                    const dy = particle.y - centerY;\n                    const dist = Math.sqrt(dx * dx + dy * dy);\n                    if (dist > 0) {\n                        const angle = Math.atan2(dy, dx) + 0.02 * dt;\n                        particle.x = centerX + Math.cos(angle) * dist;\n                        particle.y = centerY + Math.sin(angle) * dist;\n                    }\n                    break;\n                    \n                case 'linear':\n                default:\n                    // Simple linear motion (already handled by velocity)\n                    break;\n            }\n            \n            // Call custom update if provided\n            if (legacyBehavior.customUpdate) {\n                legacyBehavior.customUpdate(particle, dt, centerX, centerY);\n            }\n        }\n    };\n}\n\n// Export adapter functions for plugin system integration\nexport default {\n    registerPluginBehavior,\n    unregisterPluginBehavior,\n    getPluginBehavior,\n    getAllPluginBehaviors,\n    createLegacyAdapter\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE v4.0 - Behavior Registry\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Central registry for all particle behaviors with plugin support\n * @author Emotive Engine Team\n * @version 4.0.0\n * @module particles/behaviors\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Control center for particle behaviors with plugin adapter integration.            \n * ║ • Each behavior defines unique particle physics and movement patterns             \n * ║ • Core behaviors loaded synchronously at startup                                  \n * ║ • Plugin behaviors registered dynamically via adapter                             \n * ║ • Value-agnostic design for easy physics tuning                                   \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n */\n\n// ┌─────────────────────────────────────────────────────────────────────────────────────\n// │ IMPORT ALL BEHAVIORS\n// └─────────────────────────────────────────────────────────────────────────────────────\nimport ambient from './ambient.js';\nimport orbiting from './orbiting.js';\nimport rising from './rising.js';\nimport falling from './falling.js';\nimport popcorn from './popcorn.js';\nimport burst from './burst.js';\nimport aggressive from './aggressive.js';\nimport scattering from './scattering.js';\nimport repelling from './repelling.js';\nimport connecting from './connecting.js';\nimport resting from './resting.js';\nimport radiant from './radiant.js';\nimport ascending from './ascending.js';\nimport erratic from './erratic.js';\nimport cautious from './cautious.js';\nimport surveillance from './surveillance.js';\nimport glitchy from './glitchy.js';\nimport directed from './directed.js';\nimport fizzy from './fizzy.js';\nimport zen from './zen.js';\nimport pluginAdapter from './plugin-adapter.js';\n\n// ┌─────────────────────────────────────────────────────────────────────────────────────\n// │ BEHAVIOR COLLECTION\n// └─────────────────────────────────────────────────────────────────────────────────────\nconst BEHAVIORS = [\n    ambient,\n    directed,\n    fizzy,\n    orbiting,\n    rising,\n    falling,\n    popcorn,\n    burst,\n    aggressive,\n    scattering,\n    repelling,\n    connecting,\n    resting,\n    radiant,\n    ascending,\n    erratic,\n    cautious,\n    surveillance,\n    glitchy,\n    zen\n];\n\n// ┌─────────────────────────────────────────────────────────────────────────────────────\n// │ BEHAVIOR REGISTRY - Fast lookup by name\n// └─────────────────────────────────────────────────────────────────────────────────────\nexport const BEHAVIOR_REGISTRY = {};\n\n// Build the registry from the behaviors array - SYNCHRONOUSLY\nBEHAVIORS.forEach(behavior => {\n    BEHAVIOR_REGISTRY[behavior.name] = behavior;\n});\n\n/**\n * Get a behavior by name (checks both core and plugin behaviors)\n * @param {string} name - Behavior name (e.g., 'ambient', 'orbiting')\n * @returns {Object|null} Behavior object or null if not found\n */\nexport function getBehavior(name) {\n    // Check core behaviors first\n    if (BEHAVIOR_REGISTRY[name]) {\n        return BEHAVIOR_REGISTRY[name];\n    }\n    // Check plugin behaviors\n    const pluginBehavior = pluginAdapter.getPluginBehavior(name);\n    if (pluginBehavior) {\n        return pluginBehavior;\n    }\n    return null;\n}\n\n/**\n * Initialize a particle with a specific behavior\n * @param {Particle} particle - The particle to initialize\n * @param {string} behaviorName - Name of the behavior to apply\n * @returns {boolean} True if behavior was found and applied\n */\nexport function initializeBehavior(particle, behaviorName) {\n    const behavior = getBehavior(behaviorName);\n    if (behavior && behavior.initialize) {\n        behavior.initialize(particle);\n        return true;\n    }\n    // Fallback to ambient if behavior not found\n    if (behaviorName !== 'ambient') {\n        return initializeBehavior(particle, 'ambient');\n    }\n    return false;\n}\n\n/**\n * Update a particle's behavior\n * @param {Particle} particle - The particle to update\n * @param {string} behaviorName - Name of the behavior\n * @param {number} dt - Delta time\n * @param {number} centerX - Orb center X\n * @param {number} centerY - Orb center Y\n * @returns {boolean} True if behavior was found and updated\n */\nexport function updateBehavior(particle, behaviorName, dt, centerX, centerY) {\n    const behavior = getBehavior(behaviorName);\n    if (behavior && behavior.update) {\n        behavior.update(particle, dt, centerX, centerY);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Get list of all available behaviors (core and plugin)\n * @returns {Array} Array of behavior names and descriptions\n */\nexport function listBehaviors() {\n    // Get core behaviors\n    const coreBehaviors = Object.values(BEHAVIOR_REGISTRY).map(behavior => ({\n        name: behavior.name,\n        emoji: behavior.emoji || '🎯',\n        description: behavior.description || 'No description',\n        type: 'core'\n    }));\n    \n    // Get plugin behaviors\n    const pluginBehaviorNames = pluginAdapter.getAllPluginBehaviors();\n    const pluginBehaviors = pluginBehaviorNames.map(name => {\n        const behavior = pluginAdapter.getPluginBehavior(name);\n        return {\n            name: behavior.name,\n            emoji: behavior.emoji || '🔌',\n            description: behavior.description || 'Plugin behavior',\n            type: 'plugin'\n        };\n    });\n    \n    return [...coreBehaviors, ...pluginBehaviors];\n}\n\n// ┌─────────────────────────────────────────────────────────────────────────────────────\n// │ DEBUG UTILITIES\n// └─────────────────────────────────────────────────────────────────────────────────────\nif (typeof window !== 'undefined' && window.DEBUG_PARTICLES) {\n    window.ParticleBehaviors = {\n        registry: BEHAVIOR_REGISTRY,\n        list: listBehaviors,\n        get: getBehavior\n    };\n}\n\n// Export plugin adapter for external use\nexport { pluginAdapter };\n\n// Export everything\nexport default {\n    BEHAVIOR_REGISTRY,\n    getBehavior,\n    initializeBehavior,\n    updateBehavior,\n    listBehaviors,\n    pluginAdapter\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE v4.0 - Gesture Plugin Adapter\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Bridge between plugin system and gesture registry\n * @author Emotive Engine Team\n * @version 4.0.0\n * @module gestures/plugin-adapter\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Adapter for dynamic gesture registration from plugins.                            \n * ║ • Maintains separate registry for plugin gestures                                 \n * ║ • Validates gesture definitions for required apply() function                     \n * ║ • Provides legacy format conversion for older plugins                             \n * ║ • Enables runtime registration and unregistration                                 \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n */\n\n/**\n * Plugin gesture registry\n */\nconst pluginGestures = new Map();\n\n/**\n * Register a plugin gesture\n * @param {string} name - Gesture name\n * @param {Object} gestureDef - Gesture definition object\n */\nexport function registerPluginGesture(name, gestureDef) {\n    // Ensure gesture has required properties\n    if (!gestureDef.apply && !gestureDef.type) {\n        return false;\n    }\n    \n    // Add name if not present\n    if (!gestureDef.name) {\n        gestureDef.name = name;\n    }\n    \n    // Set default type if not specified\n    if (!gestureDef.type) {\n        gestureDef.type = 'blending';\n    }\n    \n    pluginGestures.set(name, gestureDef);\n    \n    if (typeof window !== 'undefined' && window.DEBUG_GESTURES) {\n    }\n    \n    return true;\n}\n\n/**\n * Unregister a plugin gesture\n * @param {string} name - Gesture name to remove\n */\nexport function unregisterPluginGesture(name) {\n    if (pluginGestures.has(name)) {\n        pluginGestures.delete(name);\n        \n        if (typeof window !== 'undefined' && window.DEBUG_GESTURES) {\n        }\n        \n        return true;\n    }\n    return false;\n}\n\n/**\n * Get a plugin gesture by name\n * @param {string} name - Gesture name\n * @returns {Object|null} Gesture object or null if not found\n */\nexport function getPluginGesture(name) {\n    return pluginGestures.get(name) || null;\n}\n\n/**\n * Get all plugin gesture names\n * @returns {Array<string>} Array of gesture names\n */\nexport function getAllPluginGestures() {\n    return Array.from(pluginGestures.keys());\n}\n\n/**\n * Clear all plugin gestures\n */\nexport function clearPluginGestures() {\n    pluginGestures.clear();\n}\n\n/**\n * Convert legacy plugin gesture format to new format\n * @param {Object} legacyGesture - Old format gesture\n * @returns {Object} New format gesture\n */\nexport function createLegacyAdapter(legacyGesture) {\n    return {\n        name: legacyGesture.name || 'unknown',\n        type: legacyGesture.type || 'blending',\n        emoji: legacyGesture.emoji || '🔌',\n        description: legacyGesture.description || 'Plugin gesture',\n        config: legacyGesture.config || {},\n        \n        apply: function(particle, progress, motion, dt, centerX, centerY) {\n            // Adapt old plugin format to new format\n            if (legacyGesture.animate) {\n                // Old plugins might use 'animate' instead of 'apply'\n                legacyGesture.animate(particle, progress, motion, dt, centerX, centerY);\n            } else if (legacyGesture.apply) {\n                legacyGesture.apply(particle, progress, motion, dt, centerX, centerY);\n            }\n        },\n        \n        cleanup: legacyGesture.cleanup || function(particle) {\n            // Default cleanup\n            if (particle.gestureData && particle.gestureData[this.name]) {\n                delete particle.gestureData[this.name];\n            }\n        }\n    };\n}\n\n// Export adapter interface\nexport default {\n    registerPluginGesture,\n    unregisterPluginGesture,\n    getPluginGesture,\n    getAllPluginGestures,\n    clearPluginGestures,\n    createLegacyAdapter\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Bounce Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Bounce gesture - vertical oscillation motion\n * @author Emotive Engine Team\n * @module gestures/motions/bounce\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a bouncing motion with particles oscillating vertically.                  \n * ║ This is a BLENDING gesture that adds to existing particle motion.                 \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *        ↑\n *       ⭐      <- peak\n *      ↗ ↘\n *     ↗   ↘\n *    ⭐     ⭐   <- midpoint\n *   ↗       ↘\n *  ↗         ↘\n * ⭐           ⭐ <- trough\n * \n * USED BY:\n * - Joy emotions (playful bouncing)\n * - Excited states (energetic movement)\n * - Celebration gestures\n */\n\n/**\n * Bounce gesture configuration and implementation\n */\nexport default {\n    name: 'bounce',\n    emoji: '⬆️',\n    type: 'blending', // Adds to existing motion\n    description: 'Vertical oscillation with smooth easing',\n    \n    // Default configuration\n    config: {\n        duration: 800,      // Legacy fallback\n        musicalDuration: { musical: true, beats: 2 }, // 2 beats\n        amplitude: 30,      // Bounce height range\n        frequency: 2,       // Number of oscillations\n        axis: 'vertical',   // Movement axis: 'vertical' or 'horizontal'\n        damping: true,      // Enable amplitude reduction over time\n        easing: 'sine',     // Animation curve type\n        strength: 0.6,      // Overall motion intensity\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'bounce',\n            axis: 'vertical',   // Oscillation direction\n            strength: 0.6,      // Particle bounce strength\n            frequency: 2        // Particle oscillation count\n        }\n    },\n    \n    // Rhythm configuration - bounce syncs perfectly to beat\n    rhythm: {\n        enabled: true,\n        syncMode: 'beat',  // Each bounce lands on a beat\n        timingSync: 'nextBeat',     // Start on next beat\n        interruptible: true,         // Can interrupt mid-bounce\n        priority: 3,                 // Lower priority\n        blendable: true,             // Can blend with other effects\n        crossfadePoint: 'anyBeat',   // Can transition out on any beat\n        \n        // Bounce height syncs to beat intensity\n        amplitudeSync: {\n            onBeat: 1.8,      // Higher bounce on beat\n            offBeat: 0.6,     // Lower between beats\n            curve: 'bounce'   // Natural bounce curve\n        },\n        \n        // Frequency can sync to tempo\n        frequencySync: {\n            mode: 'tempo',    // Bounces per beat scale with BPM\n            multiplier: 1.0   // 1 bounce per beat\n        },\n        \n        // Duration syncs to musical time\n        durationSync: {\n            mode: 'beats',    // Duration in beats\n            beats: 4          // Bounce for 4 beats (1 bar in 4/4)\n        },\n        \n        // Accent response for stronger downbeats\n        accentResponse: {\n            enabled: true,\n            multiplier: 1.5   // 50% higher on accented beats\n        },\n        \n        // Pattern-specific bouncing styles\n        patternOverrides: {\n            'waltz': {\n                // 3/4 time creates elegant triple bounce\n                frequencySync: { multiplier: 0.75 },\n                durationSync: { beats: 3 }\n            },\n            'swing': {\n                // Jazzy swing bounce with syncopation\n                amplitudeSync: { onBeat: 2.0, offBeat: 0.4, curve: 'ease' }\n            },\n            'dubstep': {\n                // Heavy drop on beat 3\n                amplitudeSync: { \n                    onBeat: 1.5,\n                    dropBeat: 3.0,  // Massive bounce on the drop\n                    curve: 'pulse'\n                }\n            },\n            'breakbeat': {\n                // Chaotic broken rhythm bouncing\n                frequencySync: { multiplier: 1.5 },\n                amplitudeSync: { onBeat: 2.2, offBeat: 0.3 }\n            }\n        }\n    },\n    \n    /**\n     * Initialize gesture data for a particle\n     * Called once when gesture starts\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     */\n    initialize: function(particle, motion) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        particle.gestureData.bounce = {\n            startY: particle.y,\n            startX: particle.x,\n            startVx: particle.vx,\n            startVy: particle.vy,\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply bounce motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.bounce?.initialized) {\n            this.initialize(particle, motion);\n        }\n        \n        const config = { ...this.config, ...motion };\n        const strength = config.strength || this.config.strength || 1.0;\n        \n        // Apply easing\n        const easeProgress = this.easeInOutCubic(progress);\n        \n        // Calculate oscillation\n        let frequency = config.frequency;\n        const phase = motion.phase || 0;\n        \n        // Apply rhythm modulation if present\n        let amplitude = config.amplitude * strength * particle.scaleFactor;\n        if (motion.rhythmModulation) {\n            amplitude *= (motion.rhythmModulation.amplitudeMultiplier || 1);\n            amplitude *= (motion.rhythmModulation.accentMultiplier || 1);\n            // Frequency modulation for tempo sync\n            if (motion.rhythmModulation.frequencyMultiplier) {\n                frequency *= motion.rhythmModulation.frequencyMultiplier;\n            }\n        }\n        \n        const oscillation = Math.sin((easeProgress + phase) * Math.PI * 2 * frequency);\n        if (config.damping && progress > 0.7) {\n            // Reduce amplitude toward end of animation\n            const dampProgress = (progress - 0.7) / 0.3;\n            amplitude *= (1 - dampProgress * 0.8);\n        }\n        \n        // Apply motion based on axis\n        if (config.axis === 'vertical') {\n            particle.vy += oscillation * amplitude * 0.01 * dt;\n            \n            // Dampen horizontal movement slightly for stability\n            if (progress > 0.9) {\n                particle.vx *= 0.98;\n            }\n        } else if (config.axis === 'horizontal') {\n            particle.vx += oscillation * amplitude * 0.01 * dt;\n            \n            // Dampen vertical movement slightly for stability\n            if (progress > 0.9) {\n                particle.vy *= 0.98;\n            }\n        }\n        \n        // Smooth ending - gradually reduce velocity modifications\n        if (progress > 0.9) {\n            const endFactor = 1 - ((progress - 0.9) * 10);\n            particle.vx = particle.vx * (0.95 + endFactor * 0.05);\n            particle.vy = particle.vy * (0.95 + endFactor * 0.05);\n        }\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.bounce) {\n            delete particle.gestureData.bounce;\n        }\n    },\n    \n    /**\n     * Easing function for smooth animation\n     * @param {number} t - Progress (0-1)\n     * @returns {number} Eased value\n     */\n    easeInOutCubic: function(t) {\n        return t < 0.5 \n            ? 4 * t * t * t \n            : 1 - Math.pow(-2 * t + 2, 3) / 2;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Pulse Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Pulse gesture - radial expansion and contraction\n * @author Emotive Engine Team\n * @module gestures/motions/pulse\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a breathing/heartbeat effect with particles expanding and contracting      \n * ║ radially from the center. This is a BLENDING gesture that modifies positions.     \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *     Expand          Contract         Expand\n *    ← · · · →         → ⭐ ←         ← · · · →\n *    ↖ · · ↗           ↘ ↓ ↙           ↖ · · ↗\n *    · · ⭐ · ·   →    · ⭐ ·     →   · · ⭐ · ·\n *    ↙ · · ↘           ↗ ↑ ↖           ↙ · · ↘\n *    ← · · · →         → ⭐ ←         ← · · · →\n * \n * USED BY:\n * - Love emotions (heartbeat rhythm)\n * - Breathing/calm states\n * - Emphasis gestures\n */\n\n/**\n * Pulse gesture configuration and implementation\n */\nexport default {\n    name: 'pulse',\n    emoji: '💗',\n    type: 'blending', // Adds to existing motion\n    description: 'Radial expansion and contraction from center',\n    \n    // Default configuration\n    config: {\n        duration: 600,      // Animation duration\n        amplitude: 30,      // Expansion distance\n        frequency: 1,       // Number of pulses\n        holdPeak: 0.1,      // Peak expansion hold time\n        easing: 'sine',     // Animation curve type\n        scaleAmount: 0.2,   // Orb scale variation\n        glowAmount: 0.3,    // Orb glow intensity change\n        strength: 0.15,     // Particle motion strength\n        direction: 'outward', // Radial direction\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'pulse',\n            strength: 0.15,\n            direction: 'outward',\n            frequency: 1\n        }\n    },\n    \n    // Rhythm configuration - pulse as heartbeat synced to music\n    rhythm: {\n        enabled: true,\n        syncMode: 'beat',  // Heartbeat on every beat\n        \n        // Pulse strength syncs to beat\n        amplitudeSync: {\n            onBeat: 1.6,      // Strong expansion on beat\n            offBeat: 0.8,     // Gentle contraction off beat\n            curve: 'pulse'    // Sharp attack, gradual release\n        },\n        \n        // Frequency locks to tempo\n        frequencySync: {\n            mode: 'locked',   // One pulse per beat\n            subdivision: 'quarter'  // Pulse on quarter notes\n        },\n        \n        // Duration in musical time\n        durationSync: {\n            mode: 'beats',\n            beats: 1          // One pulse per beat\n        },\n        \n        // Stronger pulse on downbeats\n        accentResponse: {\n            enabled: true,\n            multiplier: 2.0   // Double strength on accent\n        },\n        \n        // Pattern-specific pulse styles\n        patternOverrides: {\n            'waltz': {\n                // Elegant 3/4 heartbeat\n                amplitudeSync: { onBeat: 2.0, offBeat: 0.5 },\n                durationSync: { beats: 3 }\n            },\n            'swing': {\n                // Syncopated jazz pulse\n                amplitudeSync: { onBeat: 1.8, offBeat: 0.6, curve: 'ease' },\n                frequencySync: { subdivision: 'swing' }\n            },\n            'dubstep': {\n                // Deep bass pulse on drop\n                amplitudeSync: {\n                    onBeat: 1.2,\n                    dropBeat: 4.0,  // Massive pulse on beat 3\n                    curve: 'pulse'\n                }\n            },\n            'breakbeat': {\n                // Erratic heartbeat\n                frequencySync: { mode: 'random', range: [0.5, 2.0] },\n                amplitudeSync: { onBeat: 2.5, offBeat: 0.3 }\n            }\n        }\n    },\n    \n    /**\n     * Initialize gesture data for a particle\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        // Calculate initial distance and angle from center\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        const angle = Math.atan2(dy, dx);\n        \n        particle.gestureData.pulse = {\n            baseDistance: distance,\n            angle: angle,\n            startX: particle.x,\n            startY: particle.y,\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply pulse motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.pulse?.initialized) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.pulse;\n        const config = { ...this.config, ...motion };\n        const strength = motion.strength || 1.0;\n        \n        // Apply easing\n        const easeProgress = this.easeInOutSine(progress);\n        \n        // Calculate pulse with optional peak hold\n        let pulseValue;\n        let frequency = config.frequency;\n        let amplitude = config.amplitude;\n        \n        // Apply rhythm modulation if present\n        if (motion.rhythmModulation) {\n            amplitude *= (motion.rhythmModulation.amplitudeMultiplier || 1);\n            amplitude *= (motion.rhythmModulation.accentMultiplier || 1);\n            if (motion.rhythmModulation.frequencyMultiplier) {\n                frequency *= motion.rhythmModulation.frequencyMultiplier;\n            }\n        }\n        \n        const rawPulse = (easeProgress * frequency * 2) % 2;\n        \n        if (config.holdPeak > 0 && rawPulse > (1 - config.holdPeak) && rawPulse < (1 + config.holdPeak)) {\n            // Hold at peak\n            pulseValue = 1;\n        } else {\n            // Normal sine wave\n            pulseValue = Math.sin(easeProgress * Math.PI * 2 * frequency);\n        }\n        \n        // Calculate expansion amount\n        const expansion = pulseValue * amplitude * strength * particle.scaleFactor;\n        \n        // Calculate target position\n        const targetDistance = data.baseDistance + expansion;\n        const targetX = centerX + Math.cos(data.angle) * targetDistance;\n        const targetY = centerY + Math.sin(data.angle) * targetDistance;\n        \n        // Smoothly move toward target\n        const moveSpeed = 0.15 * dt;\n        particle.vx += (targetX - particle.x) * moveSpeed * 0.1;\n        particle.vy += (targetY - particle.y) * moveSpeed * 0.1;\n        \n        // Fade effect at the end\n        if (progress > 0.9) {\n            const fadeFactor = 1 - ((progress - 0.9) * 10);\n            particle.vx *= (0.9 + fadeFactor * 0.1);\n            particle.vy *= (0.9 + fadeFactor * 0.1);\n        }\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.pulse) {\n            delete particle.gestureData.pulse;\n        }\n    },\n    \n    /**\n     * Sine easing for smooth breathing motion\n     * @param {number} t - Progress (0-1)\n     * @returns {number} Eased value\n     */\n    easeInOutSine: function(t) {\n        return -(Math.cos(Math.PI * t) - 1) / 2;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Shake Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Shake gesture - random jitter motion\n * @author Emotive Engine Team\n * @module gestures/motions/shake\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a shaking/vibrating effect with random jitter. Perfect for expressing     \n * ║ nervousness, excitement, or impact effects. This is a BLENDING gesture.           \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *     Frame 1        Frame 2        Frame 3\n *        ⭐      →    ⭐       →      ⭐\n *       ↙↗↘↖         ↖↘↗↙          ↗↖↙↘\n *    (random)      (random)       (random)\n * \n * USED BY:\n * - Nervous/anxious states\n * - Anger (trembling with rage)\n * - Cold/shivering effects\n * - Impact reactions\n */\n\n/**\n * Shake gesture configuration and implementation\n */\nexport default {\n    name: 'shake',\n    emoji: '🫨',\n    type: 'blending', // Adds to existing motion\n    description: 'Random jitter movement for vibration effects',\n    \n    // Default configuration\n    config: {\n        duration: 400,      // Animation duration\n        amplitude: 15,      // Shake movement range\n        frequency: 15,      // Oscillation speed\n        decay: 0.9,         // Intensity reduction over time\n        smoothing: 0.1,     // Motion smoothness factor\n        axes: 'both',       // Affected axes: 'both', 'horizontal', 'vertical'\n        easing: 'linear',   // Animation curve type\n        strength: 3.0,      // Overall shake intensity\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'shake',\n            strength: 3.0,      // Particle shake strength\n            frequency: 15,      // Particle oscillation rate\n            decay: false        // Maintain consistent intensity\n        }\n    },\n    \n    // Rhythm configuration - shake intensifies with tempo\n    rhythm: {\n        enabled: true,\n        syncMode: 'subdivision',  // Shake on subdivisions\n        \n        // Shake intensity modulation\n        amplitudeSync: {\n            subdivision: 'sixteenth',  // Shake on 16th notes\n            onBeat: 2.5,              // Violent shake on beat\n            offBeat: 0.7,             // Gentler between beats\n            curve: 'pulse'            // Sharp attack\n        },\n        \n        // Frequency scales with tempo\n        frequencySync: {\n            mode: 'tempo',\n            baseFrequency: 15,        // Base at 120 BPM\n            scaling: 'linear'         // Linear scaling with BPM\n        },\n        \n        // Duration in musical time\n        durationSync: {\n            mode: 'beats',\n            beats: 2                  // Shake for 2 beats\n        },\n        \n        // Pattern-specific shake styles\n        patternOverrides: {\n            'breakbeat': {\n                // Chaotic broken shake\n                amplitudeSync: { onBeat: 3.0, offBeat: 0.2 },\n                frequencySync: { mode: 'random', range: [8, 20] }\n            },\n            'dubstep': {\n                // Bass wobble shake\n                amplitudeSync: {\n                    subdivision: 'eighth',\n                    onBeat: 4.0,\n                    dropBeat: 6.0,  // Massive shake on drop\n                    curve: 'pulse'\n                }\n            },\n            'swing': {\n                // Jazzy shimmy shake\n                amplitudeSync: { onBeat: 1.8, offBeat: 1.0, curve: 'ease' }\n            }\n        }\n    },\n    \n    /**\n     * Initialize gesture data for a particle\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     */\n    initialize: function(particle, motion) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        particle.gestureData.shake = {\n            originalX: particle.x,  // Store original position\n            originalY: particle.y,  // Store original position\n            randomAngle: Math.random() * Math.PI * 2, // Random shake direction per particle\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply shake motion to particle\n     * Creates synchronized vibration effect matching orb shake\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.shake?.initialized) {\n            this.initialize(particle, motion);\n        }\n        \n        const data = particle.gestureData.shake;\n        const config = { ...this.config, ...motion };\n        const strength = config.strength || this.config.strength || 1.0;\n        \n        // Apply rhythm modulation if present\n        let amplitude = config.amplitude;\n        let frequency = config.frequency;\n        if (motion.rhythmModulation) {\n            amplitude *= (motion.rhythmModulation.amplitudeMultiplier || 1);\n            amplitude *= (motion.rhythmModulation.accentMultiplier || 1);\n            if (motion.rhythmModulation.frequencyMultiplier) {\n                frequency *= motion.rhythmModulation.frequencyMultiplier;\n            }\n        }\n        \n        // Match orb shake logic for synchronized movement\n        // Apply decay if enabled to reduce intensity over time\n        const decay = config.decay ? (1 - progress) : 1;\n        const shake = Math.sin(progress * Math.PI * frequency) * amplitude * decay * strength * particle.scaleFactor;\n        \n        // Calculate directional offset using particle's random angle\n        const offsetX = shake * Math.cos(data.randomAngle);\n        const offsetY = shake * Math.sin(data.randomAngle);\n        \n        // Set particle position directly for perfect synchronization\n        // Particles shake in unison with the orb\n        particle.x = data.originalX + offsetX;\n        particle.y = data.originalY + offsetY;\n    },\n    \n    /**\n     * Generate pseudo-random number from seed\n     * @param {number} seed - Seed value\n     * @returns {number} Pseudo-random value between 0 and 1\n     */\n    pseudoRandom: function(seed) {\n        const x = Math.sin(seed) * 10000;\n        return x - Math.floor(x);\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.shake) {\n            // Restore original position\n            particle.x = particle.gestureData.shake.originalX;\n            particle.y = particle.gestureData.shake.originalY;\n            delete particle.gestureData.shake;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Nod Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Nod gesture - vertical agreement motion\n * @author Emotive Engine Team\n * @module gestures/motions/nod\n */\n\nexport default {\n    name: 'nod',\n    emoji: '🙂',\n    type: 'blending',\n    description: 'Vertical nodding motion',\n    \n    // Default configuration\n    config: {\n        duration: 500,      // Animation duration\n        amplitude: 15,      // Vertical movement range\n        frequency: 2,       // Number of nod cycles\n        easing: 'sine',     // Animation curve type\n        strength: 0.4,      // Overall motion intensity\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'bounce',\n            axis: 'vertical',   // Movement direction\n            strength: 0.4,      // Particle nod strength\n            frequency: 2,       // Particle nod count\n            phase: 0           // Synchronization with orb\n        }\n    },\n    \n    // Rhythm configuration - nod as agreement to the beat\n    rhythm: {\n        enabled: true,\n        syncMode: 'beat',\n        timingSync: 'nextBeat',     // Wait for next beat to start\n        interruptible: false,        // Must complete the nod\n        priority: 5,                 // Medium priority\n        blendable: false,            // Don't blend with other motions\n        minDuration: 'halfBar',      // Minimum time before interrupt\n        \n        // Nod frequency locks to beat\n        frequencySync: {\n            mode: 'subdivision',\n            subdivision: 'half',  // Nod on half notes\n            multiplier: 1.0\n        },\n        \n        // Amplitude stronger on downbeats\n        amplitudeSync: {\n            onBeat: 1.4,\n            offBeat: 0.8,\n            curve: 'ease'\n        },\n        \n        // Duration in beats\n        durationSync: {\n            mode: 'beats',\n            beats: 2  // Nod for 2 beats\n        },\n        \n        // Pattern-specific nodding\n        patternOverrides: {\n            'waltz': {\n                // Graceful 3/4 nod\n                frequencySync: { subdivision: 'quarter' },\n                amplitudeSync: { onBeat: 1.6, curve: 'ease' }\n            },\n            'swing': {\n                // Jazzy syncopated nod\n                amplitudeSync: { onBeat: 1.5, offBeat: 0.9 }\n            },\n            'dubstep': {\n                // Heavy head-bang on drop\n                amplitudeSync: {\n                    onBeat: 1.2,\n                    dropBeat: 3.0,\n                    curve: 'pulse'\n                }\n            }\n        }\n    },\n    \n    initialize: function(particle, motion) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        particle.gestureData.nod = {\n            startY: particle.y,\n            initialized: true\n        };\n    },\n    \n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        if (!particle.gestureData?.nod?.initialized) {\n            this.initialize(particle, motion);\n        }\n        \n        const config = { ...this.config, ...motion };\n        const strength = config.strength || this.config.strength || 1.0;\n        let frequency = config.frequency;\n        let amplitude = config.amplitude;\n        \n        // Apply rhythm modulation if present\n        if (motion.rhythmModulation) {\n            amplitude *= (motion.rhythmModulation.amplitudeMultiplier || 1);\n            amplitude *= (motion.rhythmModulation.accentMultiplier || 1);\n            if (motion.rhythmModulation.frequencyMultiplier) {\n                frequency *= motion.rhythmModulation.frequencyMultiplier;\n            }\n        }\n        \n        const oscillation = Math.sin(progress * Math.PI * 2 * frequency);\n        amplitude = amplitude * strength * particle.scaleFactor;\n        \n        // Apply vertical nodding motion\n        particle.vy += oscillation * amplitude * 0.01 * dt;\n        \n        // Dampen at the end\n        if (progress > 0.9) {\n            particle.vy *= 0.95;\n        }\n    },\n    \n    cleanup: function(particle) {\n        if (particle.gestureData?.nod) {\n            delete particle.gestureData.nod;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Vibrate Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Vibrate gesture - high frequency micro-shake\n * @author Emotive Engine Team\n * @module gestures/motions/vibrate\n */\n\nexport default {\n    name: 'vibrate',\n    emoji: '📳',\n    type: 'blending',\n    description: 'High frequency vibration',\n    \n    // Default configuration\n    config: {\n        duration: 500,      // Animation duration\n        frequency: 20,      // Vibration frequency\n        amplitude: 8,       // Vibration amplitude\n        easing: 'linear',   // Animation curve type\n        strength: 2.0,      // Overall motion intensity\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'shake',\n            strength: 2.0,\n            frequency: 20,\n            amplitude: 8\n        }\n    },\n    \n    // Rhythm configuration - vibrate as tremolo effect\n    rhythm: {\n        enabled: true,\n        syncMode: 'subdivision',\n        \n        // Vibration frequency syncs to tempo\n        frequencySync: {\n            subdivision: 'thirty-second',  // Very fast subdivisions\n            baseFrequency: 20,\n            tempoScaling: true  // Scale with BPM\n        },\n        \n        // Amplitude pulses with beat\n        amplitudeSync: {\n            onBeat: 1.5,\n            offBeat: 0.8,\n            curve: 'pulse'\n        },\n        \n        // Duration in musical time\n        durationSync: {\n            mode: 'beats',\n            beats: 1  // Vibrate for 1 beat\n        },\n        \n        // Pattern-specific vibration\n        patternOverrides: {\n            'dubstep': {\n                // Bass wobble vibration\n                frequencySync: { subdivision: 'sixteenth' },\n                amplitudeSync: { onBeat: 2.0, dropBeat: 3.0 }\n            },\n            'breakbeat': {\n                // Chaotic vibration\n                frequencySync: { mode: 'random', range: [15, 30] }\n            }\n        }\n    },\n    \n    initialize: function(particle, motion) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        particle.gestureData.vibrate = {\n            timer: 0,\n            seed: Math.random() * 1000,\n            initialized: true\n        };\n    },\n    \n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        if (!particle.gestureData?.vibrate?.initialized) {\n            this.initialize(particle, motion);\n        }\n        \n        const data = particle.gestureData.vibrate;\n        const config = { ...this.config, ...motion };\n        const strength = config.strength || this.config.strength || 1.0;\n        \n        // Apply rhythm modulation if present\n        let amplitude = config.amplitude;\n        let frequency = config.frequency;\n        if (motion.rhythmModulation) {\n            amplitude *= (motion.rhythmModulation.amplitudeMultiplier || 1);\n            amplitude *= (motion.rhythmModulation.accentMultiplier || 1);\n            if (motion.rhythmModulation.frequencyMultiplier) {\n                frequency *= motion.rhythmModulation.frequencyMultiplier;\n            }\n        }\n        \n        // Update timer\n        data.timer += dt * frequency;\n        \n        // High frequency vibration\n        const vibrateX = (Math.random() - 0.5) * amplitude * strength;\n        const vibrateY = (Math.random() - 0.5) * amplitude * strength;\n        \n        // Apply rapid vibration movements\n        particle.vx += vibrateX * 0.5 * dt;\n        particle.vy += vibrateY * 0.5 * dt;\n        \n        // Apply damping for control\n        particle.vx *= 0.9;\n        particle.vy *= 0.9;\n        \n        // Fade out at the end\n        if (progress > 0.8) {\n            const fadeFactor = 1 - ((progress - 0.8) * 5);\n            particle.vx *= fadeFactor;\n            particle.vy *= fadeFactor;\n        }\n    },\n    \n    cleanup: function(particle) {\n        if (particle.gestureData?.vibrate) {\n            delete particle.gestureData.vibrate;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Orbit Gesture Motion\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview 3D orbital motion where particles circle around the orb\n * @author Emotive Engine Team\n * @module gestures/motions/orbit\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a mesmerizing 3D orbit effect where particles circle around the orb,      \n * ║ dynamically transitioning between foreground and background layers using the      \n * ║ z-coordinate system. Like planets orbiting a star or a hula-hoop in motion.       \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM (Top View):\n *     · → · → ·\n *   ↓           ↑\n *   ·    ⭐    ·   ← particles orbit around center\n *   ↑           ↓  \n *     · ← · ← ·\n * \n * VISUAL DIAGRAM (Side View):\n *   front  ·····   back\n *         /     \\\n *        ·   ⭐  ·  ← z-coordinate changes as particles orbit\n *         \\     /\n *   back   ·····   front\n */\n\n/**\n * Apply orbital motion to a particle\n * Particles orbit around the center with dynamic z-depth changes\n * \n * @param {Object} particle - The particle to animate\n * @param {Object} gestureData - Persistent data for this particle's gesture\n * @param {Object} config - Gesture configuration\n * @param {number} progress - Gesture progress (0-1)\n * @param {number} strength - Gesture strength multiplier\n * @param {number} centerX - Orb center X\n * @param {number} centerY - Orb center Y\n */\nexport function applyOrbit(particle, gestureData, config, progress, strength, centerX, centerY) {\n    // Initialize gesture data if needed\n    if (!gestureData.initialized) {\n        // Store original position and velocity\n        gestureData.originalX = particle.x;\n        gestureData.originalY = particle.y;\n        gestureData.originalZ = particle.z || 0;\n        gestureData.originalVx = particle.vx || 0;\n        gestureData.originalVy = particle.vy || 0;\n        \n        // Calculate initial angle and radius from center\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        gestureData.radius = Math.sqrt(dx * dx + dy * dy);\n        \n        // Ensure minimum radius to prevent clustering at center\n        if (gestureData.radius < 50) {\n            gestureData.radius = 50 + Math.random() * 100;\n        }\n        \n        gestureData.initialAngle = Math.atan2(dy, dx);\n        \n        // Random orbit parameters for variety\n        gestureData.orbitSpeed = config.speed * (0.8 + Math.random() * 0.4); // Speed variation\n        gestureData.orbitTilt = Math.random() * 0.3; // Slight tilt for realism\n        \n        gestureData.initialized = true;\n    }\n    \n    // Apply rhythm modulation if present\n    let rotations = config.rotations;\n    let radiusPulseAmount = 0.05;\n    if (config.rhythmModulation) {\n        if (config.rhythmModulation.speedMultiplier) {\n            gestureData.orbitSpeed *= config.rhythmModulation.speedMultiplier;\n        }\n        if (config.rhythmModulation.rotationMultiplier) {\n            rotations *= config.rhythmModulation.rotationMultiplier;\n        }\n        if (config.rhythmModulation.radiusPulse) {\n            radiusPulseAmount = config.rhythmModulation.radiusPulse;\n        }\n    }\n    \n    // Smooth entry/exit transitions\n    let transitionFactor = 1.0;\n    let velocityTransition = 1.0;\n    \n    if (progress < 0.15) {\n        // Smooth entry (first 15%)\n        transitionFactor = progress / 0.15;\n        transitionFactor = transitionFactor * transitionFactor * (3 - 2 * transitionFactor); // Smooth step\n        velocityTransition = transitionFactor;\n    } else if (progress > 0.85) {\n        // Smooth exit (last 15%)\n        transitionFactor = (1 - progress) / 0.15;\n        transitionFactor = transitionFactor * transitionFactor * (3 - 2 * transitionFactor); // Smooth step\n        velocityTransition = transitionFactor;\n    }\n    \n    // Calculate current angle based on progress with smooth acceleration\n    const angle = gestureData.initialAngle + (progress * Math.PI * 2 * rotations * transitionFactor);\n    \n    // Calculate orbital radius (can pulse slightly) with transition\n    const radiusPulse = 1 + Math.sin(progress * Math.PI * 4) * radiusPulseAmount * transitionFactor;\n    const currentRadius = gestureData.radius * strength * radiusPulse * transitionFactor;\n    \n    // Calculate new position in orbit\n    const targetX = centerX + Math.cos(angle) * currentRadius;\n    const targetY = centerY + Math.sin(angle) * currentRadius;\n    \n    // CRITICAL: Update z-coordinate for 3D effect with smooth transition\n    // Particles in front (positive z) when at top of orbit, behind (negative z) at bottom\n    const zAngle = angle * config.zRotations; // Can rotate in z-plane at different rate\n    particle.z = Math.sin(zAngle) * 0.8 * transitionFactor + gestureData.originalZ * (1 - transitionFactor);\n    \n    // During entry, smoothly transition from original position\n    if (progress < 0.15) {\n        const entryLerp = transitionFactor * 0.3; // Slower entry\n        particle.x = gestureData.originalX + (targetX - gestureData.originalX) * entryLerp;\n        particle.y = gestureData.originalY + (targetY - gestureData.originalY) * entryLerp;\n        \n        // Smooth velocity transition\n        const orbitalVx = -Math.sin(angle) * currentRadius * gestureData.orbitSpeed;\n        const orbitalVy = Math.cos(angle) * currentRadius * gestureData.orbitSpeed;\n        particle.vx = gestureData.originalVx + (orbitalVx - gestureData.originalVx) * velocityTransition;\n        particle.vy = gestureData.originalVy + (orbitalVy - gestureData.originalVy) * velocityTransition;\n    } \n    // During exit, smoothly return to original\n    else if (progress > 0.85) {\n        particle.x = targetX + (gestureData.originalX - targetX) * (1 - transitionFactor);\n        particle.y = targetY + (gestureData.originalY - targetY) * (1 - transitionFactor);\n        \n        // Smooth velocity transition back\n        const orbitalVx = -Math.sin(angle) * currentRadius * gestureData.orbitSpeed;\n        const orbitalVy = Math.cos(angle) * currentRadius * gestureData.orbitSpeed;\n        particle.vx = orbitalVx * velocityTransition + gestureData.originalVx * (1 - velocityTransition);\n        particle.vy = orbitalVy * velocityTransition + gestureData.originalVy * (1 - velocityTransition);\n    }\n    // Normal orbit\n    else {\n        // Add vertical oscillation for hula-hoop effect if enabled\n        if (config.verticalOscillation > 0) {\n            const verticalOffset = Math.sin(angle * 2) * config.verticalOscillation * strength;\n            particle.y = targetY + verticalOffset;\n            particle.x = targetX;\n        } else {\n            // Smooth interpolation to target position\n            const lerpFactor = config.smoothness || 0.1;\n            particle.x += (targetX - particle.x) * lerpFactor;\n            particle.y += (targetY - particle.y) * lerpFactor;\n        }\n        \n        // Set orbital velocity\n        particle.vx = -Math.sin(angle) * currentRadius * gestureData.orbitSpeed;\n        particle.vy = Math.cos(angle) * currentRadius * gestureData.orbitSpeed;\n    }\n    \n    // Apply centripetal acContinceleration effect (particles speed up when closer)\n    if (config.centripetal) {\n        const speed = 1 + (1 - Math.abs(particle.z)) * 0.3; // Speed varies with z-position\n        const speedAngle = gestureData.initialAngle + (progress * Math.PI * 2 * config.rotations * speed);\n        particle.x = centerX + Math.cos(speedAngle) * currentRadius;\n        particle.y = centerY + Math.sin(speedAngle) * currentRadius;\n    }\n}\n\n// Export gesture configuration\nexport default {\n    name: 'orbit',\n    emoji: '🪐',\n    description: '3D orbital motion around center',\n    type: 'override', // Takes full control of particle position\n    \n    // Default configuration\n    config: {\n        speed: 1.0,              // Base orbital speed\n        rotations: 1,            // Number of full rotations per gesture\n        zRotations: 1,           // Z-plane rotation ratio (1 = same as xy, 2 = twice as fast)\n        smoothness: 0.15,        // Position interpolation factor\n        verticalOscillation: 0,  // Hula-hoop vertical movement (0 = flat orbit)\n        centripetal: false,      // Enable speed variation based on position\n    },\n    \n    // Rhythm configuration - orbital motion syncs to musical cycles\n    rhythm: {\n        enabled: true,\n        syncMode: 'bar',  // Complete orbit per bar\n        \n        // Orbital speed syncs to tempo\n        speedSync: {\n            mode: 'tempo',\n            baseSpeed: 1.0,\n            scaling: 'linear'  // Speed scales with BPM\n        },\n        \n        // Rotations per musical period\n        rotationSync: {\n            mode: 'bars',\n            rotationsPerBar: 1,  // One full orbit per bar\n            zSync: true  // Z-rotation also syncs\n        },\n        \n        // Radius pulses with beat\n        radiusSync: {\n            subdivision: 'quarter',\n            pulsAmount: 0.1,  // 10% radius variation\n            curve: 'ease'\n        },\n        \n        // Pattern-specific orbital styles\n        patternOverrides: {\n            'waltz': {\n                // Elegant 3-step orbit\n                rotationSync: { rotationsPerBar: 0.75 },\n                radiusSync: { pulsAmount: 0.15 }\n            },\n            'swing': {\n                // Jazzy elliptical orbit\n                speedSync: { mode: 'swing', ratio: 0.67 },\n                verticalOscillation: 0.2\n            },\n            'dubstep': {\n                // Wobbling orbit with drops\n                radiusSync: { \n                    subdivision: 'eighth',\n                    pulsAmount: 0.3,\n                    dropMultiplier: 2.0\n                }\n            },\n            'breakbeat': {\n                // Chaotic orbital patterns\n                speedSync: { mode: 'random', range: [0.5, 2.0] },\n                centripetal: true\n            }\n        }\n    },\n    \n    // Apply function\n    apply: applyOrbit,\n    \n    // Supported emotions (great for mystical/energetic states)\n    emotions: ['zen', 'love', 'excited', 'surprise'],\n    \n    // Gesture-specific features\n    features: {\n        uses3D: true,           // Uses z-coordinate system\n        smooth: true,           // Smooth continuous motion\n        looping: true,          // Natural looping animation\n        dramatic: true          // Visually impressive effect\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Twitch Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Paranoid twitching motion for suspicious/nervous states\n * @author Emotive Engine Team\n * @module gestures/motions/twitch\n * \n * GESTURE TYPE:\n * type: 'blending' - Adds to existing particle motion\n * \n * VISUAL EFFECT:\n * Random, sudden jerky movements that blend with existing behavior.\n * Creates a nervous, paranoid feeling with unpredictable micro-movements.\n */\n\nexport default {\n    name: 'twitch',\n    emoji: '⚡',\n    type: 'blending',\n    description: 'Nervous, paranoid twitching',\n    \n    // Default configuration\n    config: {\n        intensity: 8,           // Twitch strength\n        frequency: 0.08,        // Chance of twitching per frame\n        duration: 100,          // How long each twitch lasts (ms)\n        recovery: 200,          // Recovery time between twitches\n        maxOffset: 15,          // Maximum twitch distance\n        sharpness: 0.9         // How sudden the movements are\n    },\n    \n    // Rhythm configuration - twitch syncs to nervous subdivisions\n    rhythm: {\n        enabled: true,\n        syncMode: 'subdivision',\n        \n        // Twitch probability increases on beat\n        probabilitySync: {\n            subdivision: 'sixteenth',\n            onBeat: 0.3,        // 30% chance on beat\n            offBeat: 0.05,      // 5% chance off beat\n            accentBoost: 2.0    // Double on accents\n        },\n        \n        // Intensity follows rhythm\n        intensitySync: {\n            onBeat: 2.0,\n            offBeat: 0.8,\n            curve: 'pulse'      // Sharp, sudden\n        },\n        \n        // Pattern-specific twitching\n        patternOverrides: {\n            'breakbeat': {\n                // Erratic broken twitches\n                probabilitySync: { onBeat: 0.5, offBeat: 0.1 },\n                intensitySync: { onBeat: 3.0, offBeat: 0.5 }\n            },\n            'dubstep': {\n                // Heavy twitch on drop\n                intensitySync: {\n                    onBeat: 1.5,\n                    dropBeat: 5.0,\n                    curve: 'pulse'\n                }\n            }\n        }\n    },\n    \n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize twitch data if needed\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        if (!particle.gestureData.twitch) {\n            particle.gestureData.twitch = {\n                twitchOffset: { x: 0, y: 0 },\n                targetOffset: { x: 0, y: 0 },\n                isTwitching: false,\n                twitchTimer: 0,\n                cooldownTimer: 0,\n                lastTwitch: 0\n            };\n        }\n        \n        const data = particle.gestureData.twitch;\n        const config = this.config;\n        let intensity = motion.intensity || config.intensity;\n        let frequency = config.frequency;\n        \n        // Apply rhythm modulation if present\n        if (motion.rhythmModulation) {\n            intensity *= (motion.rhythmModulation.amplitudeMultiplier || 1);\n            intensity *= (motion.rhythmModulation.accentMultiplier || 1);\n            if (motion.rhythmModulation.probabilityMultiplier) {\n                frequency *= motion.rhythmModulation.probabilityMultiplier;\n            }\n        }\n        \n        // Update timers\n        const currentTime = Date.now();\n        \n        // Check for new twitch\n        if (!data.isTwitching && data.cooldownTimer <= 0) {\n            if (Math.random() < (motion.frequency || config.frequency)) {\n                // Start a new twitch\n                data.isTwitching = true;\n                data.twitchTimer = config.duration;\n                data.cooldownTimer = config.recovery;\n                \n                // Random twitch direction and distance\n                const angle = Math.random() * Math.PI * 2;\n                const distance = (config.maxOffset * 0.5) + Math.random() * (config.maxOffset * 0.5);\n                \n                data.targetOffset = {\n                    x: Math.cos(angle) * distance * intensity / 8,\n                    y: Math.sin(angle) * distance * intensity / 8\n                };\n                \n                data.lastTwitch = currentTime;\n            }\n        }\n        \n        // Update cooldown\n        if (data.cooldownTimer > 0) {\n            data.cooldownTimer -= dt * 16;\n        }\n        \n        // Apply twitch motion\n        if (data.isTwitching) {\n            data.twitchTimer -= dt * 16;\n            \n            if (data.twitchTimer > 0) {\n                // Sharp movement toward target\n                const sharpness = config.sharpness;\n                data.twitchOffset.x += (data.targetOffset.x - data.twitchOffset.x) * sharpness;\n                data.twitchOffset.y += (data.targetOffset.y - data.twitchOffset.y) * sharpness;\n            } else {\n                // Twitch complete, start returning\n                data.isTwitching = false;\n            }\n        } else {\n            // Return to normal position\n            data.twitchOffset.x *= 0.85;\n            data.twitchOffset.y *= 0.85;\n        }\n        \n        // Apply the twitch offset to velocity (blending mode)\n        particle.vx += data.twitchOffset.x * dt * 0.5;\n        particle.vy += data.twitchOffset.y * dt * 0.5;\n        \n        // Add micro-jitter for constant nervousness\n        if (Math.random() < 0.1) {\n            particle.vx += (Math.random() - 0.5) * intensity * 0.3;\n            particle.vy += (Math.random() - 0.5) * intensity * 0.3;\n        }\n    },\n    \n    cleanup: function(particle) {\n        if (particle.gestureData?.twitch) {\n            delete particle.gestureData.twitch;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Sway Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'sway',\n    type: 'blending',\n    emoji: '🌊',\n    description: 'Gentle side-to-side swaying motion',\n    \n    config: {\n        duration: 2000,\n        amplitude: 20,\n        frequency: 1,\n        strength: 0.5\n    },\n    \n    // Rhythm configuration - sway naturally follows the beat\n    rhythm: {\n        enabled: true,\n        syncMode: 'bar',  // Sway completes one cycle per bar\n        \n        // Amplitude increases on downbeats\n        amplitudeSync: {\n            onBeat: 1.2,\n            offBeat: 0.9,\n            curve: 'ease'  // Smooth transitions\n        },\n        \n        // Duration syncs to bars for natural rhythm\n        durationSync: {\n            mode: 'bars',\n            bars: 1  // One full sway per bar\n        },\n        \n        // Pattern-specific swaying\n        patternOverrides: {\n            'waltz': {\n                // 3/4 time creates elegant waltz sway\n                durationSync: { bars: 1 },\n                amplitudeSync: { onBeat: 1.5, curve: 'ease' }\n            },\n            'swing': {\n                // Jazzy swing sway\n                amplitudeSync: { onBeat: 1.3, offBeat: 0.7, curve: 'bounce' }\n            }\n        }\n    },\n    \n    /**\n     * Apply sway motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        const config = { ...this.config, ...motion };\n        const amplitude = config.amplitude || this.config.amplitude;\n        const frequency = config.frequency || this.config.frequency;\n        const strength = config.strength || this.config.strength;\n        \n        // Smooth side-to-side motion\n        const sway = Math.sin(progress * Math.PI * 2 * frequency) * amplitude;\n        \n        // Apply horizontal sway\n        particle.vx += sway * 0.01 * dt * strength;\n        \n        // Slight vertical drift for natural feel\n        particle.vy += Math.cos(progress * Math.PI * 4) * 0.5 * dt * strength;\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        // No cleanup needed for sway\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Float Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'float',\n    type: 'blending',\n    emoji: '🎈',\n    description: 'Gentle floating upward motion',\n    \n    config: {\n        duration: 2000,\n        amplitude: 80,  // Increased for more visible effect\n        wobbleAmount: 20,  // More wobble\n        strength: 1.0  // Full strength\n    },\n    \n    // Rhythm configuration - defines how this gesture responds to musical timing\n    rhythm: {\n        enabled: true,\n        syncMode: 'beat',  // 'beat', 'bar', 'continuous', or 'none'\n        \n        // How amplitude changes with beat\n        amplitudeSync: {\n            onBeat: 1.5,      // Multiply amplitude on beat\n            offBeat: 0.8,     // Reduce amplitude off beat\n            curve: 'bounce'   // Animation curve: 'linear', 'ease', 'bounce', 'pulse'\n        },\n        \n        // How wobble syncs to subdivisions\n        wobbleSync: {\n            subdivision: 'eighth',  // Sync to 8th notes\n            intensity: 0.7          // How much rhythm affects wobble\n        },\n        \n        // Duration can sync to musical time\n        durationSync: {\n            mode: 'bars',     // Duration in bars instead of milliseconds\n            bars: 2           // Float for 2 bars\n        },\n        \n        // Response to musical accents\n        accentResponse: {\n            enabled: true,\n            multiplier: 1.3   // Boost effect on accented beats\n        },\n        \n        // Optional: Different behavior for different patterns\n        patternOverrides: {\n            'waltz': {\n                wobbleSync: { subdivision: 'quarter', intensity: 0.9 }\n            },\n            'dubstep': {\n                amplitudeSync: { onBeat: 2.0, curve: 'pulse' }\n            }\n        }\n    },\n    \n    /**\n     * Apply float motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Store original values on first frame\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        if (!particle.gestureData.float) {\n            particle.gestureData.float = {\n                originalSize: particle.size,\n                originalOpacity: particle.opacity || 1\n            };\n        }\n        \n        const config = { ...this.config, ...motion };\n        let amplitude = config.amplitude || this.config.amplitude;\n        let wobbleAmount = config.wobbleAmount || this.config.wobbleAmount;\n        const strength = config.strength || this.config.strength;\n        \n        // Apply rhythm modulation if present (passed from GestureMotion.js)\n        if (motion.rhythmModulation) {\n            amplitude *= (motion.rhythmModulation.amplitudeMultiplier || 1);\n            amplitude *= (motion.rhythmModulation.accentMultiplier || 1);\n            wobbleAmount *= (motion.rhythmModulation.wobbleMultiplier || 1);\n        }\n        \n        // Upward floating with slight wobble\n        const wobble = Math.sin(progress * Math.PI * 4) * wobbleAmount;\n        \n        // Apply upward force and wobble\n        particle.vy -= amplitude * 0.01 * dt * strength * (1 - progress * 0.5);\n        particle.vx += wobble * 0.01 * dt * strength;\n        \n        // Slight size variation for depth effect\n        particle.size = particle.baseSize * (1 + progress * 0.1);\n        \n        // Fade slightly as it floats up\n        particle.opacity = 1 - progress * 0.3;\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        // Reset to original values\n        if (particle.gestureData?.float) {\n            particle.opacity = particle.gestureData.float.originalOpacity;\n            particle.size = particle.gestureData.float.originalSize;\n            delete particle.gestureData.float;\n        } else {\n            // Fallback if no data stored\n            particle.opacity = 1;\n            particle.size = particle.baseSize;\n        }\n        \n        // Dampen velocity to help particle settle\n        particle.vx *= 0.5;\n        particle.vy *= 0.5;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Jitter Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'jitter',\n    type: 'blending',\n    emoji: '🫨',\n    description: 'Nervous jittery movement',\n    \n    config: {\n        duration: 1000,\n        intensity: 15,  // Increased for more visible jitter\n        frequency: 30,  // Higher frequency\n        strength: 1.0  // Full strength\n    },\n    \n    // Rhythm configuration - jitter intensifies on beat\n    rhythm: {\n        enabled: true,\n        syncMode: 'beat',\n        \n        // Jitter intensity syncs to beat\n        amplitudeSync: {\n            onBeat: 2.0,      // Double jitter on beat\n            offBeat: 0.5,     // Calmer between beats\n            curve: 'pulse'    // Sharp attack\n        },\n        \n        // Different patterns create different nervousness\n        patternOverrides: {\n            'breakbeat': {\n                // Chaotic jitter for breakbeat\n                amplitudeSync: { onBeat: 3.0, offBeat: 0.3 }\n            },\n            'dubstep': {\n                // Freeze then explode\n                amplitudeSync: { onBeat: 5.0, offBeat: 0.1, curve: 'pulse' }\n            }\n        }\n    },\n    \n    /**\n     * Apply jitter motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Store original values on first frame\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        if (!particle.gestureData.jitter) {\n            particle.gestureData.jitter = {\n                originalSize: particle.size\n            };\n        }\n        \n        const config = { ...this.config, ...motion };\n        let intensity = config.intensity || this.config.intensity;\n        const strength = config.strength || this.config.strength;\n        \n        // Apply rhythm modulation if present\n        if (motion.rhythmModulation) {\n            intensity *= (motion.rhythmModulation.amplitudeMultiplier || 1);\n            intensity *= (motion.rhythmModulation.accentMultiplier || 1);\n        }\n        \n        // Random jitter in both directions\n        const jitterX = (Math.random() - 0.5) * intensity * strength;\n        const jitterY = (Math.random() - 0.5) * intensity * strength;\n        \n        // Apply jitter with decreasing intensity over time\n        const fadeOut = 1 - progress * 0.5;\n        particle.vx += jitterX * 0.1 * dt * fadeOut;\n        particle.vy += jitterY * 0.1 * dt * fadeOut;\n        \n        // Slight size variation for nervous effect\n        particle.size = particle.baseSize * (1 + (Math.random() - 0.5) * 0.1);\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        // Reset to original values\n        if (particle.gestureData?.jitter) {\n            particle.size = particle.gestureData.jitter.originalSize;\n            delete particle.gestureData.jitter;\n        } else {\n            particle.size = particle.baseSize;\n        }\n        \n        // Dampen velocity to help particle settle\n        particle.vx *= 0.7;\n        particle.vy *= 0.7;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Spin Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Spin gesture - orbital rotation around center\n * @author Emotive Engine Team\n * @module gestures/transforms/spin\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a spinning vortex effect with particles orbiting around the center.       \n * ║ This is an OVERRIDE gesture that completely replaces particle motion.             \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *        ↻ Clockwise rotation\n *      · → ·\n *     ↓     ↑\n *    · ← ⭐ → ·\n *     ↑     ↓  \n *      · ← ·\n * \n * USED BY:\n * - Dizzy/confused states\n * - Celebration spins\n * - Whirlwind effects\n * - Portal/vortex animations\n */\n\n/**\n * Spin gesture configuration and implementation\n */\nexport default {\n    name: 'spin',\n    emoji: '🌀',\n    type: 'override', // Completely replaces motion\n    description: 'Orbital rotation around center point',\n    \n    // Default configuration\n    config: {\n        duration: 600,          // Legacy fallback\n        musicalDuration: { musical: true, beats: 1 }, // 1 beat (quarter note)\n        rotations: 1,           // Number of full rotations\n        direction: 'random',    // 'clockwise', 'counter-clockwise', or 'random'\n        radiusMultiplier: 1.0,  // Orbital radius multiplier\n        spiralOut: false,       // Spiral outward while spinning\n        accelerate: true,       // Speed up then slow down\n        maintainDistance: true, // Keep relative distance from center\n        scaleAmount: 0.1,       // Scale change during spin\n        easing: 'linear',       // Animation curve type\n        strength: 0.7,          // Particle motion strength\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'spin',\n            strength: 0.7,\n            rotations: 1,\n            radius: 1.0\n        }\n    },\n    \n    // Rhythm configuration - spin as a dance move\n    rhythm: {\n        enabled: true,\n        syncMode: 'bar',\n        \n        // Rotations sync to musical time\n        rotationSync: {\n            mode: 'bars',\n            rotationsPerBar: 1,  // One spin per bar\n            accelerateOnBeat: true  // Speed up on downbeats\n        },\n        \n        // Radius changes with beat\n        radiusSync: {\n            subdivision: 'quarter',\n            expandOnBeat: 1.2,\n            contractOffBeat: 0.9,\n            curve: 'bounce'\n        },\n        \n        // Duration in musical time\n        durationSync: {\n            mode: 'beats',\n            beats: 4  // Spin for 4 beats (1 bar)\n        },\n        \n        // Pattern-specific spins\n        patternOverrides: {\n            'waltz': {\n                // Elegant waltz spin\n                rotationSync: { rotationsPerBar: 0.75 },\n                radiusSync: { curve: 'ease' }\n            },\n            'swing': {\n                // Jazzy swing spin\n                rotationSync: { accelerateOnBeat: false },\n                direction: 'alternating'  // Change direction each bar\n            },\n            'dubstep': {\n                // Aggressive spin with wobble\n                radiusSync: {\n                    subdivision: 'eighth',\n                    expandOnBeat: 1.5,\n                    dropMultiplier: 2.0\n                },\n                spiralOut: true\n            },\n            'breakbeat': {\n                // Chaotic spin patterns\n                rotationSync: { mode: 'random', range: [0.5, 2] },\n                direction: 'random'\n            }\n        }\n    },\n    \n    /**\n     * Initialize gesture data for a particle\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        // Calculate starting position relative to center\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        \n        // Determine spin direction\n        let direction = motion.direction || this.config.direction;\n        if (direction === 'random') {\n            direction = Math.random() < 0.5 ? 'clockwise' : 'counter-clockwise';\n        }\n        \n        particle.gestureData.spin = {\n            startAngle: Math.atan2(dy, dx),\n            startRadius: Math.sqrt(dx * dx + dy * dy) || 30, // Min radius if at center\n            originalX: particle.x,\n            originalY: particle.y,\n            originalVx: particle.vx,\n            originalVy: particle.vy,\n            direction: direction, // Store chosen direction\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply spin motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.spin?.initialized) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.spin;\n        const config = { ...this.config, ...motion };\n        const strength = motion.strength || 1.0;\n        \n        // Apply rhythm modulation if present\n        let rotations = config.rotations;\n        let radiusMultiplier = config.radiusMultiplier;\n        if (motion.rhythmModulation) {\n            if (motion.rhythmModulation.rotationMultiplier) {\n                rotations *= motion.rhythmModulation.rotationMultiplier;\n            }\n            if (motion.rhythmModulation.radiusMultiplier) {\n                radiusMultiplier *= motion.rhythmModulation.radiusMultiplier;\n            }\n        }\n        \n        // Apply acceleration curve if enabled\n        let speedProgress = progress;\n        if (config.accelerate) {\n            // Speed up for first half, slow down for second half\n            if (progress < 0.5) {\n                speedProgress = this.easeInQuad(progress * 2) * 0.5;\n            } else {\n                speedProgress = 0.5 + this.easeOutQuad((progress - 0.5) * 2) * 0.5;\n            }\n        }\n        \n        // Calculate rotation angle using stored direction\n        const rotationAmount = rotations * Math.PI * 2 * strength;\n        const direction = data.direction === 'counter-clockwise' ? -1 : 1;\n        const currentAngle = data.startAngle + (rotationAmount * speedProgress * direction);\n        \n        // Calculate radius (with optional spiral)\n        let currentRadius = data.startRadius;\n        if (config.spiralOut) {\n            currentRadius *= (1 + progress * 0.5); // Expand outward during spin\n        }\n        if (radiusMultiplier !== 1) {\n            // Apply radius multiplier with smooth curve\n            const radiusCurve = Math.sin(progress * Math.PI); // Peak at middle\n            currentRadius *= (1 + (radiusMultiplier - 1) * radiusCurve);\n        }\n        \n        // Calculate target position\n        const targetX = centerX + Math.cos(currentAngle) * currentRadius;\n        const targetY = centerY + Math.sin(currentAngle) * currentRadius;\n        \n        // For override gesture, directly set position with smooth interpolation\n        const moveSpeed = 0.25; // Adjust for smoothness\n        particle.x += (targetX - particle.x) * moveSpeed;\n        particle.y += (targetY - particle.y) * moveSpeed;\n        \n        // Set velocity to match movement (for trail effects)\n        particle.vx = (targetX - particle.x) * 0.5;\n        particle.vy = (targetY - particle.y) * 0.5;\n        \n        // Smooth ending - return to original velocities\n        if (progress > 0.9) {\n            const endFactor = (1 - progress) * 10;\n            particle.vx = particle.vx * endFactor + data.originalVx * (1 - endFactor);\n            particle.vy = particle.vy * endFactor + data.originalVy * (1 - endFactor);\n        }\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.spin) {\n            // Restore original velocities\n            const data = particle.gestureData.spin;\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n            delete particle.gestureData.spin;\n        }\n    },\n    \n    /**\n     * Easing function for acceleration\n     * @param {number} t - Progress (0-1)\n     * @returns {number} Eased value\n     */\n    easeInQuad: function(t) {\n        return t * t;\n    },\n    \n    /**\n     * Easing function for deceleration\n     * @param {number} t - Progress (0-1)\n     * @returns {number} Eased value\n     */\n    easeOutQuad: function(t) {\n        return t * (2 - t);\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Jump Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Jump gesture - squash, leap, and land animation\n * @author Emotive Engine Team\n * @module gestures/transforms/jump\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a classic jump animation with squash & stretch principles. Particles       \n * ║ compress before jumping, stretch during flight, and squash on landing.            \n * ║ This is an OVERRIDE gesture that completely controls particle motion.             \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *    Phase 1: Squash    Phase 2: Jump      Phase 3: Land\n *         ⭐              ↗ ⭐ ↘              ⭐\n *         ___            /     \\             ___\n *     (compressed)     (stretched)       (squashed)\n * \n * USED BY:\n * - Joy/excitement expressions\n * - Surprise reactions\n * - Celebration animations\n * - Playful interactions\n */\n\n/**\n * Jump gesture configuration and implementation\n */\nexport default {\n    name: 'jump',\n    emoji: '🦘',\n    type: 'override', // Completely replaces motion\n    description: 'Squash, leap, and land with classic animation principles',\n    \n    // Default configuration\n    config: {\n        duration: 800,         // Animation duration\n        jumpHeight: 60,        // Maximum vertical leap distance\n        squashAmount: 0.8,     // Compression ratio during squash\n        stretchAmount: 1.2,    // Extension ratio during stretch\n        anticipation: 0.2,     // Pre-jump preparation duration ratio\n        hangTime: 0.1,         // Pause duration at jump peak\n        landingImpact: true,   // Enable landing squash effect\n        driftOutward: true,    // Particles spread during jump\n        easing: 'quad',        // Animation curve type\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'jump',\n            strength: 0.9,         // Jump motion intensity\n            jumpHeight: 60,        // Particle jump height\n            squash: 0.8,          // Particle compression amount\n            stretch: 1.2          // Particle extension amount\n        }\n    },\n    \n    // Rhythm configuration - jump lands on beat\n    rhythm: {\n        enabled: true,\n        syncMode: 'beat',  // Jump timing syncs to beat\n        \n        // Jump phases sync to rhythm\n        phaseSync: {\n            anticipation: 'eighth',    // Squash on 8th note before beat\n            jump: 'beat',              // Launch on the beat\n            landing: 'sixteenth'       // Land on 16th after beat\n        },\n        \n        // Jump height modulation\n        heightSync: {\n            onBeat: 1.5,              // Higher jumps on strong beats\n            offBeat: 0.8,             // Lower jumps on weak beats\n            accent: 2.0,              // Extra high on accented beats\n            curve: 'exponential'      // Sharp takeoff\n        },\n        \n        // Squash and stretch intensity\n        deformationSync: {\n            squashOnBeat: 0.6,        // More squash on beat\n            stretchOnBeat: 1.4,       // More stretch on beat\n            timing: 'anticipatory'    // Deform before beat hits\n        },\n        \n        // Hang time varies with tempo\n        hangTimeSync: {\n            mode: 'tempo',\n            baseDuration: 0.1,        // Base hang at 120 BPM\n            scaling: 'inverse'        // Slower tempo = longer hang\n        },\n        \n        // Musical dynamics\n        dynamics: {\n            forte: { jumpHeight: 80, stretch: 1.3 },   // Big jumps on loud\n            piano: { jumpHeight: 30, stretch: 1.1 }    // Small hops on soft\n        }\n    },\n    \n    /**\n     * Initialize gesture data for a particle\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        particle.gestureData.jump = {\n            startX: particle.x,\n            startY: particle.y,\n            startSize: particle.size,\n            originalVx: particle.vx,\n            originalVy: particle.vy,\n            driftDirection: (particle.x - centerX) * 0.1, // Drift away from center\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply jump motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.jump?.initialized) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.jump;\n        const config = { ...this.config, ...motion };\n        const strength = motion.strength || 1.0;\n        \n        const jumpHeight = config.jumpHeight * strength * particle.scaleFactor;\n        const squash = config.squashAmount;\n        const stretch = config.stretchAmount;\n        \n        // Define phase breakpoints\n        const anticipationEnd = config.anticipation;\n        const jumpEnd = 1 - config.anticipation * 0.5; // Leave time for landing\n        \n        if (progress < anticipationEnd) {\n            // PHASE 1: Anticipation (squash down)\n            const squashProgress = progress / anticipationEnd;\n            const easedSquash = this.easeOutQuad(squashProgress);\n            \n            // Squash size\n            particle.size = data.startSize * (1 - (1 - squash) * easedSquash);\n            \n            // Slightly lower position (crouch)\n            particle.y = data.startY + easedSquash * 5 * particle.scaleFactor;\n            \n            // Stop horizontal movement during anticipation\n            particle.vx = 0;\n            particle.vy = 0;\n            \n        } else if (progress < jumpEnd) {\n            // PHASE 2: Jump (arc motion with stretch)\n            const jumpProgress = (progress - anticipationEnd) / (jumpEnd - anticipationEnd);\n            \n            // Use sine curve for smooth arc\n            let jumpCurve = Math.sin(jumpProgress * Math.PI);\n            \n            // Add hang time at peak\n            if (config.hangTime > 0 && jumpProgress > 0.4 && jumpProgress < 0.6) {\n                const hangProgress = (jumpProgress - 0.4) / 0.2;\n                const hangCurve = this.easeInOutCubic(hangProgress);\n                jumpCurve = 0.95 + hangCurve * 0.05; // Flatten at peak\n            }\n            \n            // Vertical position\n            particle.y = data.startY - jumpCurve * jumpHeight;\n            \n            // Horizontal drift if enabled\n            if (config.driftOutward) {\n                particle.x = data.startX + jumpCurve * data.driftDirection;\n            }\n            \n            // Stretch/squash based on velocity\n            if (jumpProgress < 0.5) {\n                // Going up - stretch\n                const stretchProgress = jumpProgress * 2;\n                particle.size = data.startSize * (squash + (stretch - squash) * stretchProgress);\n            } else {\n                // Coming down - return to normal then squash slightly\n                const fallProgress = (jumpProgress - 0.5) * 2;\n                particle.size = data.startSize * (stretch - (stretch - 1) * fallProgress * 0.8);\n            }\n            \n            // Set velocity for motion blur/trails\n            particle.vx = data.driftDirection * 0.5;\n            particle.vy = -Math.cos(jumpProgress * Math.PI) * jumpHeight * 0.1;\n            \n        } else {\n            // PHASE 3: Landing (impact squash)\n            const landProgress = (progress - jumpEnd) / (1 - jumpEnd);\n            const easedLand = this.easeOutBounce(landProgress);\n            \n            // Return to ground with bounce\n            particle.y = data.startY;\n            \n            if (config.landingImpact) {\n                // Landing squash effect\n                if (landProgress < 0.3) {\n                    const impactProgress = landProgress / 0.3;\n                    particle.size = data.startSize * (1 - (1 - squash * 0.8) * (1 - impactProgress));\n                } else {\n                    // Recover from squash\n                    const recoverProgress = (landProgress - 0.3) / 0.7;\n                    particle.size = data.startSize * (squash * 0.8 + (1 - squash * 0.8) * recoverProgress);\n                }\n            } else {\n                // Simple size recovery\n                particle.size = data.startSize * (squash + (1 - squash) * easedLand);\n            }\n            \n            // Gradually stop motion\n            particle.vx = data.originalVx * easedLand;\n            particle.vy = data.originalVy * easedLand;\n        }\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.jump) {\n            const data = particle.gestureData.jump;\n            // Restore original properties\n            particle.size = data.startSize;\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n            delete particle.gestureData.jump;\n        }\n    },\n    \n    /**\n     * Easing functions\n     */\n    easeOutQuad: function(t) {\n        return t * (2 - t);\n    },\n    \n    easeInOutCubic: function(t) {\n        return t < 0.5 \n            ? 4 * t * t * t \n            : 1 - Math.pow(-2 * t + 2, 3) / 2;\n    },\n    \n    easeOutBounce: function(t) {\n        const n1 = 7.5625;\n        const d1 = 2.75;\n        \n        if (t < 1 / d1) {\n            return n1 * t * t;\n        } else if (t < 2 / d1) {\n            return n1 * (t -= 1.5 / d1) * t + 0.75;\n        } else if (t < 2.5 / d1) {\n            return n1 * (t -= 2.25 / d1) * t + 0.9375;\n        } else {\n            return n1 * (t -= 2.625 / d1) * t + 0.984375;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Morph Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Morph gesture - form geometric patterns\n * @author Emotive Engine Team\n * @module gestures/transforms/morph\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Transforms the particle cloud into geometric shapes like circles, stars,          \n * ║ hearts, or other patterns. This is an OVERRIDE gesture that moves particles       \n * ║ to specific positions to form recognizable shapes.                                \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *    Random Cloud      →      Star Pattern      →      Heart Pattern\n *      · · ·                    ★                         ♥♥\n *     · · · ·          →      ·   ·           →         ♥   ♥\n *      · · ·                ·   ★   ·                  ♥     ♥\n *                             ·   ·                      ♥   ♥\n *                               ★                          ♥\n * \n * USED BY:\n * - Love emotions (heart shape)\n * - Magic/special effects (star patterns)\n * - Achievement celebrations (trophy/medal shapes)\n * - Transitions between states\n */\n\n/**\n * Morph gesture configuration and implementation\n */\nexport default {\n    name: 'morph',\n    emoji: '✨',\n    type: 'override', // Completely replaces motion\n    description: 'Form geometric patterns and shapes',\n    \n    // Default configuration\n    config: {\n        // Musical duration - morph over 2 beats\n        musicalDuration: {\n            musical: true,\n            beats: 2,          // Default to half a bar\n            minBeats: 1,       // Minimum quarter note\n            maxBeats: 8        // Maximum 2 bars\n        },\n        \n        // Musical phases of the morph\n        phases: [\n            { name: 'gather', beats: 0.25 },    // Particles gather\n            { name: 'form', beats: 0.75 },      // Form the shape\n            { name: 'hold', beats: 0.5 },       // Hold the shape\n            { name: 'dissolve', beats: 0.5 }    // Dissolve back\n        ],\n        \n        morphType: 'fluid',     // Type of morph animation\n        pattern: 'star',        // Shape to morph into\n        points: 5,              // Number of points (for star/polygon)\n        innerRadius: 0.4,       // Inner radius ratio (for star)\n        size: 80,               // Base size of the pattern\n        amplitude: 20,          // Motion amplitude\n        rotation: 0,            // Rotation angle in degrees\n        smooth: true,           // Smooth movement to positions\n        randomizeOrder: false,  // Randomize which particles go where\n        easing: 'sine',         // Animation curve type\n        strength: 1.2,          // Formation strength\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'morph',\n            pattern: 'star',\n            strength: 1.2,\n            smooth: true,\n            points: 5\n        }\n    },\n    \n    // Rhythm configuration - morphs on musical phrases\n    rhythm: {\n        enabled: true,\n        syncMode: 'phrase',  // Morph on musical phrases\n        \n        // Pattern changes with musical structure\n        patternSync: {\n            verse: 'circle',          // Simple shape for verse\n            chorus: 'star',           // Complex shape for chorus\n            bridge: 'heart',          // Special shape for bridge\n            drop: 'explosion'         // Dramatic for drops\n        },\n        \n        // Morph timing syncs to measures\n        timingSync: {\n            formationBeat: 1,         // Start forming on beat 1\n            holdBeats: 2,             // Hold shape for 2 beats\n            dissolveBeat: 4,          // Dissolve on beat 4\n            curve: 'anticipatory'     // Ease into formation\n        },\n        \n        // Size pulses with rhythm\n        sizeSync: {\n            onBeat: 1.2,              // Expand on beat\n            offBeat: 0.95,            // Contract off beat\n            subdivision: 'quarter',    // Pulse every quarter note\n            curve: 'elastic'          // Bouncy expansion\n        },\n        \n        // Rotation syncs to bars\n        rotationSync: {\n            mode: 'continuous',       // Continuous rotation\n            degreesPerBar: 90,        // Rotate 90° per bar\n            direction: 'clockwise'    // Rotation direction\n        },\n        \n        // Musical dynamics affect complexity\n        dynamics: {\n            forte: { points: 8, size: 100 },    // Complex shapes when loud\n            piano: { points: 3, size: 60 }      // Simple shapes when soft\n        }\n    },\n    \n    /**\n     * Initialize gesture data for a particle\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     * @param {EmotiveMascot} mascot - The mascot instance for core morphing\n     */\n    initialize: function(particle, motion, centerX, centerY, mascot) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        const config = { ...this.config, ...motion };\n        \n        // Store original position\n        const startX = particle.x;\n        const startY = particle.y;\n        \n        // Calculate angle from center for position assignment\n        const angle = Math.atan2(particle.y - centerY, particle.x - centerX);\n        \n        // Random rotation direction for the pattern\n        const rotationDirection = Math.random() < 0.5 ? 1 : -1;\n        \n        // Calculate target position based on pattern\n        let targetX, targetY;\n        const size = config.size * particle.scaleFactor;\n        const rotation = ((config.rotation || 0) * Math.PI / 180) * rotationDirection;\n        \n        switch (config.pattern) {\n            case 'star':\n                targetX = centerX;\n                targetY = centerY;\n                this.calculateStarPosition(particle, angle, size, config.points, config.innerRadius, rotation, centerX, centerY);\n                break;\n                \n            case 'heart':\n                this.calculateHeartPosition(particle, angle, size, rotation, centerX, centerY);\n                break;\n                \n            case 'square':\n                this.calculateSquarePosition(particle, angle, size, rotation, centerX, centerY);\n                break;\n                \n            case 'triangle':\n                this.calculateTrianglePosition(particle, angle, size, rotation, centerX, centerY);\n                break;\n                \n            case 'circle':\n            default:\n                // Simple circle pattern\n                const targetRadius = size;\n                targetX = centerX + Math.cos(angle + rotation) * targetRadius;\n                targetY = centerY + Math.sin(angle + rotation) * targetRadius;\n                break;\n        }\n        \n        particle.gestureData.morph = {\n            startX: startX,\n            startY: startY,\n            targetX: particle.gestureData.morphTargetX || targetX,\n            targetY: particle.gestureData.morphTargetY || targetY,\n            originalVx: particle.vx,\n            originalVy: particle.vy,\n            rotationDirection: rotationDirection, // Store random rotation direction\n            initialized: true\n        };\n    },\n    \n    /**\n     * Calculate star pattern position\n     */\n    calculateStarPosition: function(particle, angle, size, points, innerRadius, rotation, centerX, centerY) {\n        const armAngle = (Math.PI * 2) / points;\n        const nearestArm = Math.round(angle / armAngle) * armAngle;\n        const armIndex = Math.round(angle / armAngle) % points;\n        const isOuter = Math.random() > 0.5; // Distribute between inner and outer points\n        \n        let radius;\n        let targetAngle;\n        \n        if (isOuter) {\n            // Outer point of star\n            radius = size;\n            targetAngle = armIndex * armAngle + rotation;\n        } else {\n            // Inner point of star (between arms)\n            radius = size * innerRadius;\n            targetAngle = armIndex * armAngle + armAngle * 0.5 + rotation;\n        }\n        \n        particle.gestureData.morphTargetX = centerX + Math.cos(targetAngle) * radius;\n        particle.gestureData.morphTargetY = centerY + Math.sin(targetAngle) * radius;\n    },\n    \n    /**\n     * Calculate heart pattern position\n     */\n    calculateHeartPosition: function(particle, angle, size, rotation, centerX, centerY) {\n        // Map angle to heart curve parameter\n        const t = (angle + Math.PI) / (Math.PI * 2);\n        \n        // Heart parametric equations\n        const scale = size * 0.05;\n        let x = 16 * Math.pow(Math.sin(t * Math.PI * 2), 3);\n        let y = -(13 * Math.cos(t * Math.PI * 2) - 5 * Math.cos(2 * t * Math.PI * 2) - \n                  2 * Math.cos(3 * t * Math.PI * 2) - Math.cos(4 * t * Math.PI * 2));\n        \n        // Scale and rotate\n        const cosR = Math.cos(rotation);\n        const sinR = Math.sin(rotation);\n        const rotX = x * cosR - y * sinR;\n        const rotY = x * sinR + y * cosR;\n        \n        particle.gestureData.morphTargetX = centerX + rotX * scale;\n        particle.gestureData.morphTargetY = centerY + rotY * scale;\n    },\n    \n    /**\n     * Calculate square pattern position\n     */\n    calculateSquarePosition: function(particle, angle, size, rotation, centerX, centerY) {\n        // Determine which edge the particle should go to\n        const rotatedAngle = angle + rotation;\n        const normalizedAngle = ((rotatedAngle % (Math.PI * 2)) + Math.PI * 2) % (Math.PI * 2);\n        \n        let x, y;\n        const halfSize = size;\n        \n        // Map to square edges\n        if (normalizedAngle < Math.PI / 4 || normalizedAngle >= 7 * Math.PI / 4) {\n            // Right edge\n            x = halfSize;\n            y = halfSize * Math.tan(normalizedAngle);\n        } else if (normalizedAngle < 3 * Math.PI / 4) {\n            // Top edge\n            x = halfSize / Math.tan(normalizedAngle);\n            y = halfSize;\n        } else if (normalizedAngle < 5 * Math.PI / 4) {\n            // Left edge\n            x = -halfSize;\n            y = -halfSize * Math.tan(normalizedAngle);\n        } else {\n            // Bottom edge\n            x = -halfSize / Math.tan(normalizedAngle);\n            y = -halfSize;\n        }\n        \n        // Apply rotation\n        const cosR = Math.cos(rotation);\n        const sinR = Math.sin(rotation);\n        const rotX = x * cosR - y * sinR;\n        const rotY = x * sinR + y * cosR;\n        \n        particle.gestureData.morphTargetX = centerX + rotX;\n        particle.gestureData.morphTargetY = centerY + rotY;\n    },\n    \n    /**\n     * Calculate triangle pattern position\n     */\n    calculateTrianglePosition: function(particle, angle, size, rotation, centerX, centerY) {\n        // Three vertices of equilateral triangle\n        const vertices = [\n            { x: 0, y: -size },                    // Top\n            { x: -size * 0.866, y: size * 0.5 },   // Bottom left\n            { x: size * 0.866, y: size * 0.5 }     // Bottom right\n        ];\n        \n        // Determine which edge the particle should go to\n        const edgeIndex = Math.floor(((angle + Math.PI) / (Math.PI * 2)) * 3) % 3;\n        const nextIndex = (edgeIndex + 1) % 3;\n        \n        // Position along the edge\n        const edgeProgress = Math.random();\n        const x = vertices[edgeIndex].x + (vertices[nextIndex].x - vertices[edgeIndex].x) * edgeProgress;\n        const y = vertices[edgeIndex].y + (vertices[nextIndex].y - vertices[edgeIndex].y) * edgeProgress;\n        \n        // Apply rotation\n        const cosR = Math.cos(rotation);\n        const sinR = Math.sin(rotation);\n        const rotX = x * cosR - y * sinR;\n        const rotY = x * sinR + y * cosR;\n        \n        particle.gestureData.morphTargetX = centerX + rotX;\n        particle.gestureData.morphTargetY = centerY + rotY;\n    },\n    \n    /**\n     * Apply morph motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.morph?.initialized) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.morph;\n        const config = { ...this.config, ...motion };\n        \n        // Calculate eased progress\n        let morphProgress = progress;\n        \n        // Add hold time at the shape\n        if (config.holdTime > 0) {\n            const holdStart = 0.5 - config.holdTime / 2;\n            const holdEnd = 0.5 + config.holdTime / 2;\n            \n            if (progress < holdStart) {\n                morphProgress = progress / holdStart * 0.5;\n            } else if (progress < holdEnd) {\n                morphProgress = 0.5; // Hold at shape\n            } else {\n                morphProgress = 0.5 + (progress - holdEnd) / (1 - holdEnd) * 0.5;\n            }\n        }\n        \n        const easeProgress = this.easeInOutCubic(morphProgress);\n        \n        // Calculate interpolated position\n        let targetX, targetY;\n        \n        if (morphProgress <= 0.5) {\n            // Moving to shape\n            const moveProgress = morphProgress * 2;\n            targetX = data.startX + (data.targetX - data.startX) * this.easeOutQuad(moveProgress);\n            targetY = data.startY + (data.targetY - data.startY) * this.easeOutQuad(moveProgress);\n        } else {\n            // Returning from shape\n            const returnProgress = (morphProgress - 0.5) * 2;\n            targetX = data.targetX + (data.startX - data.targetX) * this.easeInQuad(returnProgress);\n            targetY = data.targetY + (data.startY - data.targetY) * this.easeInQuad(returnProgress);\n        }\n        \n        // Apply position\n        if (config.smooth) {\n            // Smooth movement\n            const moveSpeed = 0.2;\n            particle.x += (targetX - particle.x) * moveSpeed;\n            particle.y += (targetY - particle.y) * moveSpeed;\n        } else {\n            // Direct positioning\n            particle.x = targetX;\n            particle.y = targetY;\n        }\n        \n        // Set velocity for trails\n        particle.vx = (targetX - particle.x) * 0.5;\n        particle.vy = (targetY - particle.y) * 0.5;\n        \n        // Restore original velocities at the end\n        if (progress > 0.9) {\n            const blendFactor = (1 - progress) * 10;\n            particle.vx = particle.vx * blendFactor + data.originalVx * (1 - blendFactor);\n            particle.vy = particle.vy * blendFactor + data.originalVy * (1 - blendFactor);\n        }\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.morph) {\n            const data = particle.gestureData.morph;\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n            delete particle.gestureData.morph;\n            delete particle.gestureData.morphTargetX;\n            delete particle.gestureData.morphTargetY;\n        }\n    },\n    \n    /**\n     * Easing functions\n     */\n    easeInOutCubic: function(t) {\n        return t < 0.5 \n            ? 4 * t * t * t \n            : 1 - Math.pow(-2 * t + 2, 3) / 2;\n    },\n    \n    easeOutQuad: function(t) {\n        return t * (2 - t);\n    },\n    \n    easeInQuad: function(t) {\n        return t * t;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Stretch Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Stretch gesture - scale particles along axes\n * @author Emotive Engine Team\n * @module gestures/transforms/stretch\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Stretches or squashes the particle cloud along X and Y axes independently.        \n * ║ This is an OVERRIDE gesture that directly controls particle positions to          \n * ║ create elastic deformation effects.                                               \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *    Normal          Stretch X         Stretch Y        Squash\n *      ⭐             ← ⭐ →             ↑               ___\n *     ·⭐·           · · ⭐ · ·          ⭐              ·⭐·\n *      ⭐                                ·               ‾‾‾\n *                                        ·\n *                                        ↓\n * \n * USED BY:\n * - Elastic animations\n * - Impact effects (squash on hit)\n * - Breathing/pulsing variations\n * - Transition effects\n */\n\n/**\n * Stretch gesture configuration and implementation\n */\nexport default {\n    name: 'stretch',\n    emoji: '↔️',\n    type: 'override', // Completely replaces motion\n    description: 'Scale particles along X and Y axes',\n    \n    // Default configuration\n    config: {\n        duration: 2000,        // Animation duration\n        scaleX: 1.3,           // Horizontal scale factor\n        scaleY: 0.9,           // Vertical scale factor\n        alternate: false,      // Alternate between X and Y stretch\n        elastic: true,         // Add elastic overshoot\n        overshoot: 0.1,        // Elastic overshoot amount\n        frequency: 1,          // Number of stretches\n        easing: 'sine',        // Animation curve type\n        strength: 1.0,         // Motion strength\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'stretch',\n            scaleX: 1.8,       // Particle horizontal scale\n            scaleY: 0.6,       // Particle vertical scale\n            strength: 1.0\n        },\n        centerBased: true,     // Scale from center vs. origin\n        preserveArea: false    // Keep total area constant\n    },\n    \n    // Rhythm configuration - stretch pulses with rhythm\n    rhythm: {\n        enabled: true,\n        syncMode: 'beat',  // Stretch on beats\n        \n        // Scale modulation with rhythm\n        scaleSync: {\n            onBeat: { x: 1.5, y: 0.7 },     // Stretch wide on beat\n            offBeat: { x: 0.8, y: 1.3 },     // Stretch tall off beat\n            subdivision: 'eighth',            // Change every 8th note\n            curve: 'elastic'                 // Bouncy stretch\n        },\n        \n        // Alternation pattern\n        alternateSync: {\n            pattern: 'XYXY',                 // X stretch, Y stretch pattern\n            beatsPerChange: 1,               // Change axis each beat\n            overlap: 0.1                      // Slight overlap in transitions\n        },\n        \n        // Elastic overshoot on accents\n        overshootSync: {\n            normal: 0.1,                     // Standard overshoot\n            accent: 0.3,                     // Big overshoot on accent\n            downbeat: 0.2,                   // Medium on downbeat\n            curve: 'spring'                  // Spring-like motion\n        },\n        \n        // Area preservation modes\n        preservationSync: {\n            verse: true,                     // Maintain area in verse\n            chorus: false,                   // Free deformation in chorus\n            bridge: true                     // Back to preservation\n        },\n        \n        // Musical dynamics\n        dynamics: {\n            forte: { scaleX: 2.0, scaleY: 0.5, overshoot: 0.4 },\n            piano: { scaleX: 1.1, scaleY: 0.95, overshoot: 0.05 }\n        }\n    },\n    \n    /**\n     * Initialize gesture data for a particle\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        // Calculate offset from center\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        \n        particle.gestureData.stretch = {\n            offsetX: dx,\n            offsetY: dy,\n            startX: particle.x,\n            startY: particle.y,\n            originalVx: particle.vx,\n            originalVy: particle.vy,\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply stretch motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.stretch?.initialized) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.stretch;\n        const config = { ...this.config, ...motion };\n        const strength = motion.strength || 1.0;\n        \n        // Calculate scale factors\n        let scaleX = config.scaleX;\n        let scaleY = config.scaleY;\n        \n        // Apply area preservation if enabled\n        if (config.preserveArea && scaleX !== 1 && scaleY !== 1) {\n            // Adjust scales to maintain area\n            const targetArea = scaleX * scaleY;\n            const factor = Math.sqrt(1 / targetArea);\n            scaleX *= factor;\n            scaleY *= factor;\n        }\n        \n        // Handle alternating stretch\n        if (config.alternate) {\n            // First half: stretch X\n            // Second half: stretch Y\n            if (progress < 0.5) {\n                const altProgress = progress * 2;\n                scaleX = 1 + (scaleX - 1) * this.getElasticProgress(altProgress, config);\n                scaleY = 1 + (1 / scaleX - 1) * (config.preserveArea ? 1 : 0); // Area compensation\n            } else {\n                const altProgress = (progress - 0.5) * 2;\n                scaleX = scaleX + (1 - scaleX) * this.getElasticProgress(altProgress, config);\n                scaleY = 1 + (scaleY - 1) * this.getElasticProgress(altProgress, config);\n            }\n        } else {\n            // Apply both scales simultaneously\n            const easeProgress = this.getElasticProgress(progress, config);\n            scaleX = 1 + (scaleX - 1) * easeProgress * strength;\n            scaleY = 1 + (scaleY - 1) * easeProgress * strength;\n        }\n        \n        // Calculate target position\n        let targetX, targetY;\n        \n        if (config.centerBased) {\n            // Scale from center point\n            targetX = centerX + data.offsetX * scaleX;\n            targetY = centerY + data.offsetY * scaleY;\n        } else {\n            // Scale from original position\n            targetX = data.startX * scaleX;\n            targetY = data.startY * scaleY;\n        }\n        \n        // Apply position\n        particle.x = targetX;\n        particle.y = targetY;\n        \n        // Set velocity based on stretch direction\n        particle.vx = data.offsetX * (scaleX - 1) * strength * 0.1;\n        particle.vy = data.offsetY * (scaleY - 1) * strength * 0.1;\n        \n        // Smooth ending\n        if (progress > 0.9) {\n            const endFactor = (1 - progress) * 10;\n            particle.vx = particle.vx * endFactor + data.originalVx * (1 - endFactor);\n            particle.vy = particle.vy * endFactor + data.originalVy * (1 - endFactor);\n        }\n    },\n    \n    /**\n     * Calculate progress with optional elastic overshoot\n     * @param {number} progress - Raw progress (0-1)\n     * @param {Object} config - Configuration with elastic settings\n     * @returns {number} Modified progress value\n     */\n    getElasticProgress: function(progress, config) {\n        if (!config.elastic) {\n            return this.easeInOutCubic(progress);\n        }\n        \n        // Elastic easing with overshoot\n        if (progress === 0) return 0;\n        if (progress === 1) return 1;\n        \n        const overshoot = config.overshoot || 0.1;\n        const p = 0.3;\n        const s = p / 4;\n        \n        if (progress < 0.5) {\n            // Ease in with slight pull back\n            const t = progress * 2;\n            return 0.5 * this.easeInElastic(t, overshoot);\n        } else {\n            // Ease out with overshoot\n            const t = (progress - 0.5) * 2;\n            return 0.5 + 0.5 * this.easeOutElastic(t, overshoot);\n        }\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.stretch) {\n            const data = particle.gestureData.stretch;\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n            delete particle.gestureData.stretch;\n        }\n    },\n    \n    /**\n     * Easing functions\n     */\n    easeInOutCubic: function(t) {\n        return t < 0.5 \n            ? 4 * t * t * t \n            : 1 - Math.pow(-2 * t + 2, 3) / 2;\n    },\n    \n    easeInElastic: function(t, overshoot) {\n        if (t === 0) return 0;\n        if (t === 1) return 1;\n        const p = 0.3;\n        const s = p / 4;\n        return -(Math.pow(2, 10 * (t - 1)) * Math.sin((t - 1 - s) * (2 * Math.PI) / p)) * (1 + overshoot);\n    },\n    \n    easeOutElastic: function(t, overshoot) {\n        if (t === 0) return 0;\n        if (t === 1) return 1;\n        const p = 0.3;\n        const s = p / 4;\n        return Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) * (1 + overshoot) + 1;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Tilt Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Tilt gesture - particles gather and sway together\n * @author Emotive Engine Team\n * @module gestures/transforms/tilt\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a cohesive tilting motion where particles first gather toward the center, \n * ║ then tilt and sway as a unified group. Perfect for curious or questioning         \n * ║ expressions, like a head tilt.                                                    \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *    Phase 1: Gather    Phase 2: Tilt Left    Phase 3: Tilt Right\n *      · · ·               ↖ ⭐                    ⭐ ↗\n *     · · · ·      →      ↖ ⭐ ⭐        →      ⭐ ⭐ ↗\n *      · · ·               ↖ ⭐                    ⭐ ↗\n *    (scattered)         (tilted left)         (tilted right)\n * \n * USED BY:\n * - Curiosity/questioning states\n * - Contemplation animations\n * - Playful head-tilt effects\n * - Character personality expressions\n */\n\n/**\n * Tilt gesture configuration and implementation\n */\nexport default {\n    name: 'tilt',\n    emoji: '🤔',\n    type: 'override', // Completely replaces motion\n    description: 'Gather particles then tilt as unified group',\n    \n    // Default configuration\n    config: {\n        duration: 500,         // Animation duration\n        gatherPhase: 0.2,      // Gathering phase ratio\n        tiltAngle: 45,         // Maximum tilt angle in degrees\n        swayAmount: 80,        // Horizontal sway distance\n        liftAmount: 60,        // Vertical lift distance during tilt\n        frequency: 3,          // Number of tilt cycles\n        homeRadius: 20,        // Gathering radius from center\n        easing: 'sine',        // Animation curve type\n        strength: 2.5,         // Overall motion intensity\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'tilt',\n            strength: 2.5,\n            frequency: 3,\n            swayAmount: 80,\n            liftAmount: 60\n        },\n        smoothness: 0.25       // Movement smoothing factor\n    },\n    \n    // Rhythm configuration - tilts sync to swing rhythm\n    rhythm: {\n        enabled: true,\n        syncMode: 'swing',  // Tilt with swing feel\n        \n        // Tilt angle syncs to beat pattern\n        angleSync: {\n            onBeat: 45,                      // Full tilt on beat\n            offBeat: -30,                    // Counter-tilt off beat\n            swing: 15,                       // Extra tilt on swing beats\n            subdivision: 'triplet',          // Triplet feel for smooth sway\n            curve: 'ease-in-out'            // Smooth tilt transitions\n        },\n        \n        // Gathering phase timing\n        gatherSync: {\n            beatsBefore: 0.5,                // Gather half beat before tilt\n            releaseAfter: 0.25,              // Release quarter beat after\n            intensity: 'dynamic'             // Gather speed varies with tempo\n        },\n        \n        // Sway amount modulation\n        swaySync: {\n            verse: 60,                       // Gentle sway in verse\n            chorus: 100,                     // Big sway in chorus\n            bridge: 80,                      // Medium in bridge\n            syncopated: true                 // Off-beat emphasis\n        },\n        \n        // Lift coordination\n        liftSync: {\n            upOnTilt: true,                  // Lift when tilting\n            heightOnAccent: 80,              // Higher lift on accents\n            normalHeight: 40,                // Standard lift height\n            curve: 'bounce'                  // Bouncy lift motion\n        },\n        \n        // Musical expression\n        dynamics: {\n            forte: { tiltAngle: 60, swayAmount: 120, frequency: 4 },\n            piano: { tiltAngle: 20, swayAmount: 40, frequency: 2 }\n        }\n    },\n    \n    /**\n     * Initialize gesture data for a particle\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        // Calculate initial position and angle\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        const angle = Math.atan2(dy, dx);\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        // Assign a role for variation (some particles lag slightly)\n        const role = Math.random();\n        \n        // Calculate home position (where particle gathers to)\n        const config = { ...this.config, ...motion };\n        const homeRadius = (config.homeRadius + Math.random() * 20) * particle.scaleFactor;\n        \n        particle.gestureData.tilt = {\n            startX: particle.x,\n            startY: particle.y,\n            originalVx: particle.vx,\n            originalVy: particle.vy,\n            angle: angle,\n            distance: distance,\n            homeRadius: homeRadius,\n            homeX: centerX + Math.cos(angle) * homeRadius,\n            homeY: centerY + Math.sin(angle) * homeRadius,\n            role: role, // Variation factor for timing and smoothness\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply tilt motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.tilt?.initialized) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.tilt;\n        const config = { ...this.config, ...motion };\n        const strength = motion.strength || 1.0;\n        \n        let targetX, targetY;\n        \n        if (progress < config.gatherPhase) {\n            // PHASE 1: Gather toward center\n            const gatherProgress = progress / config.gatherPhase;\n            const easedGather = this.easeInOutCubic(gatherProgress);\n            \n            // Interpolate from start to home position\n            targetX = data.startX + (data.homeX - data.startX) * easedGather;\n            targetY = data.startY + (data.homeY - data.startY) * easedGather;\n            \n            // Apply gathering motion\n            const speed = 0.6;  // Gathering speed factor\n            particle.x += (targetX - particle.x) * speed;\n            particle.y += (targetY - particle.y) * speed;\n            \n        } else {\n            // PHASE 2: Tilting motion\n            const tiltPhase = (progress - config.gatherPhase) / (1 - config.gatherPhase);\n            const t = tiltPhase * Math.PI * config.frequency;\n            const tiltProgress = Math.sin(t);\n            \n            // Convert tilt angle to radians\n            const maxTiltRad = (config.tiltAngle * Math.PI / 180) * strength;\n            \n            // Calculate sway angle (oscillates left and right)\n            const swayAngle = data.angle + (tiltProgress * maxTiltRad);\n            \n            // Add lift effect (particles rise slightly during tilt)\n            const liftAmount = Math.abs(tiltProgress) * config.liftAmount * particle.scaleFactor;\n            const currentRadius = data.homeRadius + liftAmount;\n            \n            // Calculate target position with tilt\n            targetX = centerX + Math.cos(swayAngle) * currentRadius;\n            targetY = centerY + Math.sin(swayAngle) * currentRadius - liftAmount * 0.3; // Add upward bias\n            \n            // Apply role-based variation (some particles lag)\n            const smoothness = config.smoothness + data.role * 0.1;\n            \n            // Smooth movement to target\n            particle.x += (targetX - particle.x) * smoothness;\n            particle.y += (targetY - particle.y) * smoothness;\n            \n            // Add subtle rotation feel with velocity\n            const tangentX = -Math.sin(swayAngle);\n            const tangentY = Math.cos(swayAngle);\n            particle.vx = tangentX * tiltProgress * 2;\n            particle.vy = tangentY * tiltProgress * 2;\n        }\n        \n        // Store current velocity for trails\n        if (progress < config.gatherPhase) {\n            particle.vx = (targetX - particle.x) * 0.25;\n            particle.vy = (targetY - particle.y) * 0.25;\n        }\n        \n        // Smooth ending - return to original velocities\n        if (progress > 0.9) {\n            const endFactor = (1 - progress) * 10;\n            const returnX = data.startX + (particle.x - data.startX) * endFactor;\n            const returnY = data.startY + (particle.y - data.startY) * endFactor;\n            \n            particle.x = returnX;\n            particle.y = returnY;\n            particle.vx = particle.vx * endFactor + data.originalVx * (1 - endFactor);\n            particle.vy = particle.vy * endFactor + data.originalVy * (1 - endFactor);\n        }\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.tilt) {\n            const data = particle.gestureData.tilt;\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n            delete particle.gestureData.tilt;\n        }\n    },\n    \n    /**\n     * Easing function for smooth animation\n     * @param {number} t - Progress (0-1)\n     * @returns {number} Eased value\n     */\n    easeInOutCubic: function(t) {\n        return t < 0.5 \n            ? 4 * t * t * t \n            : 1 - Math.pow(-2 * t + 2, 3) / 2;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Orbital Gesture with 3D Depth\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview 3D orbital gesture - particles orbit with dynamic z-depth changes\n * @author Emotive Engine Team\n * @module gestures/transforms/orbital\n * \n * GESTURE TYPE:\n * type: 'override' - Takes complete control of particle motion\n * \n * ACCEPTABLE TYPES:\n * - 'blending' : Adds motion to existing particle behavior (used in motions/)\n * - 'override' : Replaces particle motion completely (used in transforms/)\n * - 'effect'   : Visual effects without changing position (used in effects/)\n * \n * VISUAL EFFECT:\n * Particles orbit around the center while transitioning between foreground and\n * background layers, creating a true 3D effect where particles pass behind and\n * in front of the orb.\n */\n\nexport default {\n    name: 'orbital',\n    emoji: '🪐',\n    type: 'override',\n    description: 'Orbital motion around center',\n    \n    // Default configuration\n    config: {\n        speed: 0.02,              // Orbital rotation speed\n        maintainRadius: true,     // Keep constant orbit radius\n        elliptical: false,        // Use circular orbit\n        use3D: true,              // Enable z-coordinate animation\n        zPhaseOffset: 0,          // Phase offset for z-oscillation\n        verticalOscillation: 0,   // Vertical movement for hula-hoop effect\n        duration: 3000,           // Animation duration\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'orbital',\n            strength: 1.0\n        }\n    },\n    \n    // Rhythm configuration - orbital paths sync to harmony\n    rhythm: {\n        enabled: true,\n        syncMode: 'harmonic',  // Orbit follows harmonic intervals\n        \n        // Speed based on harmonic ratios\n        speedSync: {\n            tonic: 0.02,              // Base orbit speed\n            fifth: 0.03,              // 3:2 ratio (perfect fifth)\n            octave: 0.04,             // 2:1 ratio (octave)\n            third: 0.025,             // 5:4 ratio (major third)\n            curve: 'smooth'           // Smooth transitions\n        },\n        \n        // Orbital layers by pitch\n        radiusSync: {\n            bass: 150,                // Outer orbit for low notes\n            mid: 100,                 // Middle orbit for mids\n            treble: 50,               // Inner orbit for highs\n            scaling: 'logarithmic'    // Natural pitch scaling\n        },\n        \n        // 3D depth syncs to chord progression\n        depthSync: {\n            major: { z: 1.0, phase: 0 },        // Front-facing for major\n            minor: { z: -1.0, phase: Math.PI }, // Back-facing for minor\n            diminished: { z: 0.5, phase: Math.PI/2 }, // Side angle\n            augmented: { z: 0.8, phase: -Math.PI/2 }  // Other side\n        },\n        \n        // Phase relationships\n        phaseSync: {\n            mode: 'harmonic',         // Particles phase-lock harmonically\n            intervals: [1, 1.5, 2],   // Unison, fifth, octave\n            drift: 0.05               // Slight phase drift for organic feel\n        },\n        \n        // Musical dynamics\n        dynamics: {\n            forte: { speed: 0.04, maintainRadius: false }, // Chaotic orbits\n            piano: { speed: 0.01, maintainRadius: true }   // Stable orbits\n        }\n    },\n    \n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        const calculatedRadius = Math.sqrt(dx * dx + dy * dy);\n        \n        // Random direction for orbit\n        const direction = Math.random() < 0.5 ? 1 : -1;\n        \n        // Set minimum radius to prevent center clustering - 3x larger spread\n        const MIN_RADIUS = 100;\n        const radius = Math.max(calculatedRadius, MIN_RADIUS + Math.random() * 180); // At least 180-360 pixels\n        \n        particle.gestureData.orbital = {\n            radius: radius,\n            targetRadius: radius, // Store target for smooth transitions\n            angle: calculatedRadius < 5 ? Math.random() * Math.PI * 2 : Math.atan2(dy, dx), // Random angle if at center\n            originalVx: particle.vx,\n            originalVy: particle.vy,\n            originalZ: particle.z || 0,  // Store original z-coordinate\n            zPhase: Math.random() * Math.PI * 2,  // Random phase for variety\n            direction: direction  // Random orbit direction\n        };\n    },\n    \n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        if (!particle.gestureData?.orbital) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.orbital;\n        const speed = (motion.speed || this.config.speed) * (motion.strength || 1);\n        \n        // Update angle with direction (dt is already normalized to 60fps)\n        data.angle += speed * dt * data.direction;\n        \n        // Use the stored radius (which has minimum enforced)\n        let radius = data.radius;\n        \n        if (!motion.maintainRadius) {\n            // Allow radius to vary slightly for organic motion\n            radius = data.radius * (1 + Math.sin(progress * Math.PI * 2) * 0.1);\n        }\n        \n        particle.x = centerX + Math.cos(data.angle) * radius;\n        particle.y = centerY + Math.sin(data.angle) * radius;\n        \n        // 3D DEPTH: Animate z-coordinate for particles passing behind/in front\n        if (motion.use3D !== false) {  // Default to true\n            // Z oscillates as particle orbits, creating 3D effect\n            // When angle is 0/2π (right side), z is positive (front)\n            // When angle is π (left side), z is negative (back)\n            const zAngle = data.angle + data.zPhase + (motion.zPhaseOffset || 0);\n            particle.z = Math.sin(zAngle) * 0.8; // Z-depth range for layering\n            \n            // Add vertical oscillation for hula-hoop effect\n            if (motion.verticalOscillation) {\n                const verticalOffset = Math.cos(zAngle) * motion.verticalOscillation * radius * 0.1;\n                particle.y += verticalOffset;\n            }\n        }\n        \n        // Set velocity to match motion\n        particle.vx = -Math.sin(data.angle) * radius * speed;\n        particle.vy = Math.cos(data.angle) * radius * speed;\n        \n        // Restore original velocity at end\n        if (progress > 0.9) {\n            const blendFactor = (1 - progress) * 10;\n            particle.vx = particle.vx * blendFactor + data.originalVx * (1 - blendFactor);\n            particle.vy = particle.vy * blendFactor + data.originalVy * (1 - blendFactor);\n        }\n    },\n    \n    cleanup: function(particle) {\n        if (particle.gestureData?.orbital) {\n            const data = particle.gestureData.orbital;\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n            particle.z = data.originalZ;  // Restore original z-coordinate\n            delete particle.gestureData.orbital;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Hula-Hoop Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Hula-hoop variation of orbital with vertical oscillation\n * @author Emotive Engine Team\n * @module gestures/transforms/hula\n * \n * VISUAL EFFECT:\n * Like a hula-hoop spinning around the orb - particles orbit horizontally while\n * oscillating vertically, creating a tilted ring effect with 3D depth.\n */\n\nexport default {\n    name: 'hula',\n    emoji: '🌀',\n    type: 'override',\n    description: 'Hula-hoop motion with vertical waves',\n    \n    // Default configuration\n    config: {\n        speed: 0.015,             // Rotation speed\n        maintainRadius: false,     // Allow radius variation for organic feel\n        elliptical: true,          // Elliptical orbit shape\n        use3D: true,               // Enable 3D depth effect\n        zPhaseOffset: Math.PI / 4, // Ring tilt angle\n        verticalOscillation: 0.3,  // Vertical wave amount\n        wobbleAmount: 0.15,        // Ring wobble intensity\n        duration: 2500,            // Animation duration\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'hula',\n            strength: 1.0,\n            verticalOscillation: 0.3\n        }\n    },\n    \n    // Rhythm configuration - hula syncs to groove\n    rhythm: {\n        enabled: true,\n        syncMode: 'bar',  // Full rotation per bar\n        \n        // Speed syncs to tempo for consistent rotation\n        speedSync: {\n            mode: 'tempo',\n            baseSpeed: 0.015,      // Base speed at 120 BPM\n            scaling: 'proportional' // Speed scales with BPM\n        },\n        \n        // Wobble syncs to beat for rhythmic variation\n        wobbleSync: {\n            onBeat: 0.25,          // More wobble on beat\n            offBeat: 0.1,          // Less wobble off beat\n            curve: 'sine'          // Smooth transitions\n        },\n        \n        // Vertical oscillation creates wave patterns\n        verticalSync: {\n            subdivision: 'quarter', // Wave every quarter note\n            amplitude: 0.4,        // Wave height on beat\n            phase: 'sequential'    // Waves follow rotation\n        },\n        \n        // Musical expression\n        dynamics: {\n            forte: { wobbleAmount: 0.3, speed: 1.2 },  // Wilder on loud\n            piano: { wobbleAmount: 0.05, speed: 0.8 }  // Gentler on soft\n        }\n    },\n    \n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        const calculatedRadius = Math.sqrt(dx * dx + dy * dy);\n        \n        // Random direction for hula-hoop\n        const direction = Math.random() < 0.5 ? 1 : -1;\n        \n        // Set minimum radius to prevent center clustering - 3x larger spread\n        const MIN_RADIUS = 100; // Slightly larger for hula effect\n        const radius = Math.max(calculatedRadius, MIN_RADIUS + Math.random() * 180); // At least 210-390 pixels\n        \n        particle.gestureData.hula = {\n            radius: radius,\n            angle: calculatedRadius < 5 ? Math.random() * Math.PI * 2 : Math.atan2(dy, dx), // Random angle if at center\n            originalVx: particle.vx,\n            originalVy: particle.vy,\n            originalZ: particle.z || 0,\n            zPhase: Math.random() * Math.PI * 2,\n            wobblePhase: Math.random() * Math.PI * 2,\n            direction: direction  // Random hula direction\n        };\n    },\n    \n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        if (!particle.gestureData?.hula) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.hula;\n        const speed = (motion.speed || this.config.speed) * (motion.strength || 1);\n        \n        // Smooth entry/exit transitions\n        let transitionFactor = 1.0;\n        if (progress < 0.1) {\n            // Smooth entry (first 10%)\n            transitionFactor = progress / 0.1;\n            transitionFactor = Math.sin(transitionFactor * Math.PI * 0.5); // Smooth ease-in\n        } else if (progress > 0.9) {\n            // Smooth exit (last 10%)\n            transitionFactor = (1 - progress) / 0.1;\n            transitionFactor = Math.sin(transitionFactor * Math.PI * 0.5); // Smooth ease-out\n        }\n        \n        // Update angle with direction (dt is already normalized to 60fps)\n        data.angle += speed * dt * data.direction * transitionFactor;\n        \n        // Wobble effect - the hoop wobbles as it spins\n        const wobble = Math.sin(data.angle * 2 + data.wobblePhase) * (motion.wobbleAmount || this.config.wobbleAmount) * transitionFactor;\n        \n        // Calculate elliptical radius with wobble and transition\n        let radiusX = data.radius * (1 + wobble) * transitionFactor;\n        let radiusY = data.radius * (0.7 + wobble) * transitionFactor; // Elliptical shape factor\n        \n        // Smoothly transition from original position to orbit position\n        const targetX = centerX + Math.cos(data.angle) * radiusX;\n        const targetY = centerY + Math.sin(data.angle) * radiusY;\n        \n        if (progress < 0.1) {\n            // During entry, lerp from original position\n            const dx = particle.x - centerX;\n            const dy = particle.y - centerY;\n            const currentRadius = Math.sqrt(dx * dx + dy * dy);\n            if (currentRadius < 50) {\n                // If particle is at center, move it out smoothly\n                particle.x = centerX + Math.cos(data.angle) * radiusX;\n                particle.y = centerY + Math.sin(data.angle) * radiusY;\n            } else {\n                particle.x = particle.x + (targetX - particle.x) * transitionFactor * 0.5;\n                particle.y = particle.y + (targetY - particle.y) * transitionFactor * 0.5;\n            }\n        } else {\n            particle.x = targetX;\n            particle.y = targetY;\n        }\n        \n        // 3D DEPTH with strong vertical oscillation\n        const zAngle = data.angle + data.zPhase + (motion.zPhaseOffset || this.config.zPhaseOffset);\n        \n        // Z-coordinate for depth (behind/in front) with transition\n        particle.z = Math.sin(zAngle) * 0.9 * transitionFactor;\n        \n        // Vertical oscillation synchronized with z-depth\n        const verticalAmount = motion.verticalOscillation || this.config.verticalOscillation;\n        const verticalOffset = Math.cos(zAngle * 2) * verticalAmount * data.radius * 0.2 * transitionFactor;\n        particle.y += verticalOffset;\n        \n        // Tilt effect - particles higher when in front, lower when behind\n        const tiltOffset = particle.z * data.radius * 0.1;\n        particle.y -= tiltOffset;\n        \n        // Set velocity to match motion with smooth transitions\n        const targetVx = -Math.sin(data.angle) * radiusX * speed;\n        const targetVy = Math.cos(data.angle) * radiusY * speed;\n        \n        if (progress < 0.1) {\n            // Smooth velocity transition during entry\n            particle.vx = data.originalVx + (targetVx - data.originalVx) * transitionFactor;\n            particle.vy = data.originalVy + (targetVy - data.originalVy) * transitionFactor;\n        } else if (progress > 0.9) {\n            // Smooth velocity transition during exit\n            particle.vx = targetVx * transitionFactor + data.originalVx * (1 - transitionFactor);\n            particle.vy = targetVy * transitionFactor + data.originalVy * (1 - transitionFactor);\n            particle.z = particle.z * transitionFactor + data.originalZ * (1 - transitionFactor);\n        } else {\n            particle.vx = targetVx;\n            particle.vy = targetVy;\n        }\n    },\n    \n    cleanup: function(particle) {\n        if (particle.gestureData?.hula) {\n            const data = particle.gestureData.hula;\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n            particle.z = data.originalZ;\n            delete particle.gestureData.hula;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Scan Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Searchlight scanning gesture for suspicious states\n * @author Emotive Engine Team\n * @module gestures/transforms/scan\n * \n * GESTURE TYPE:\n * type: 'override' - Takes complete control of particle motion\n * \n * VISUAL EFFECT:\n * Particles sweep back and forth in a searchlight pattern, pausing at edges\n * to simulate surveillance scanning or paranoid checking behavior.\n */\n\nexport default {\n    name: 'scan',\n    emoji: '🔍',\n    type: 'override',\n    description: 'Searchlight scanning motion',\n    \n    // Default configuration\n    config: {\n        scanSpeed: 0.008,         // Slow, deliberate scanning\n        scanWidth: 120,           // Width of scan arc in pixels\n        pauseDuration: 300,       // Pause at edges in ms\n        scanHeight: 40,           // Vertical variation\n        layers: 3,                // Number of scan layers\n        duration: 3000            // Total animation duration\n    },\n    \n    // Rhythm configuration - scanning syncs to measures\n    rhythm: {\n        enabled: true,\n        syncMode: 'measure',  // Scan sweeps align with measures\n        \n        // Scan timing to musical structure\n        sweepSync: {\n            beatsPerSweep: 4,         // One sweep per measure\n            pauseOnDownbeat: true,    // Pause at measure start\n            reverseOnBar: true,       // Change direction each bar\n            curve: 'linear'           // Steady scan motion\n        },\n        \n        // Layer activation by dynamics\n        layerSync: {\n            quiet: 1,                 // Single layer when quiet\n            moderate: 2,              // Two layers at medium\n            loud: 3,                  // All layers when loud\n            stagger: 'sequential'     // Layers activate in order\n        },\n        \n        // Pause duration on beats\n        pauseSync: {\n            onBeat: 500,              // Longer pause on beat\n            offBeat: 100,             // Quick pause off beat\n            accent: 800,              // Extra pause on accent\n            subdivision: 'quarter'    // Check every quarter note\n        },\n        \n        // Width modulation\n        widthSync: {\n            verse: 80,                // Narrow scan in verse\n            chorus: 140,              // Wide scan in chorus\n            bridge: 100,              // Medium in bridge\n            transition: 'smooth'      // Smooth width changes\n        },\n        \n        // Musical tension mapping\n        dynamics: {\n            forte: { scanSpeed: 0.012, layers: 4 },    // Frantic scanning\n            piano: { scanSpeed: 0.004, layers: 1 }     // Slow, single beam\n        }\n    },\n    \n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        // Assign particles to different scan layers\n        const layer = Math.floor(Math.random() * this.config.layers);\n        \n        particle.gestureData.scan = {\n            layer: layer,\n            phase: Math.random() * Math.PI * 2,  // Random starting phase\n            direction: Math.random() < 0.5 ? 1 : -1,  // Start direction\n            pauseTimer: 0,\n            isPaused: false,\n            originalX: particle.x,\n            originalY: particle.y,\n            originalVx: particle.vx,\n            originalVy: particle.vy,\n            scanOffset: (Math.random() - 0.5) * 20,  // Individual variation\n            verticalOffset: layer * 30 - 30,  // Layer separation\n            initialized: true,\n            startTime: Date.now()\n        };\n    },\n    \n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        if (!particle.gestureData?.scan) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.scan;\n        const speed = motion.scanSpeed || this.config.scanSpeed;\n        const width = motion.scanWidth || this.config.scanWidth;\n        const pauseDuration = motion.pauseDuration || this.config.pauseDuration;\n        \n        // Handle pause at edges\n        if (data.isPaused) {\n            data.pauseTimer -= dt * 16;\n            if (data.pauseTimer <= 0) {\n                data.isPaused = false;\n                data.direction *= -1;  // Reverse direction after pause\n            }\n        } else {\n            // Update scan phase\n            data.phase += speed * data.direction * dt;\n            \n            // Check for edge reached\n            const scanPosition = Math.sin(data.phase);\n            if (Math.abs(scanPosition) > 0.95) {\n                data.isPaused = true;\n                data.pauseTimer = pauseDuration;\n            }\n        }\n        \n        // Calculate position\n        const scanX = Math.sin(data.phase) * width;\n        const scanY = Math.cos(data.phase * 0.5) * (this.config.scanHeight / 2);\n        \n        // Smooth entry transition (first 15% of animation)\n        let transitionFactor = 1.0;\n        if (progress < 0.15) {\n            transitionFactor = progress / 0.15;\n            transitionFactor = transitionFactor * transitionFactor; // Ease in\n        }\n        // Smooth exit transition (last 15% of animation)\n        else if (progress > 0.85) {\n            transitionFactor = (1 - progress) / 0.15;\n            transitionFactor = transitionFactor * transitionFactor; // Ease out\n        }\n        \n        // Apply layer-specific positioning with smooth transitions\n        const targetX = centerX + scanX + data.scanOffset;\n        const targetY = centerY + scanY + data.verticalOffset;\n        \n        particle.x = data.originalX + (targetX - data.originalX) * transitionFactor;\n        particle.y = data.originalY + (targetY - data.originalY) * transitionFactor;\n        \n        // Slow down during pauses for more realistic scanning\n        if (data.isPaused) {\n            particle.vx *= 0.85;\n            particle.vy *= 0.85;\n        } else {\n            // Set velocity based on scan motion\n            particle.vx = -Math.cos(data.phase) * width * speed * 60;\n            particle.vy = -Math.sin(data.phase * 0.5) * this.config.scanHeight * speed * 30;\n        }\n        \n        // Add slight jitter for realism\n        if (Math.random() < 0.02) {\n            particle.vx += (Math.random() - 0.5) * 2;\n            particle.vy += (Math.random() - 0.5) * 2;\n        }\n    },\n    \n    cleanup: function(particle) {\n        if (particle.gestureData?.scan) {\n            const data = particle.gestureData.scan;\n            // Restore original velocities for smooth exit\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n            delete particle.gestureData.scan;\n        }\n    }\n};","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Twist Gesture\r\n *  └─○═╝\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Twist gesture - alternating rotational dance motion\r\n * @author Emotive Engine Team\r\n * @module gestures/transforms/twist\r\n *\r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                                   PURPOSE\r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ Creates a twisting dance motion with alternating rotation and contraction.\r\n * ║ This is an OVERRIDE gesture that replaces existing particle motion.\r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * VISUAL DIAGRAM:\r\n *     ↻ ⭐ ↺      <- twist left/right\r\n *    ╱     ╲\r\n *   ⭐       ⭐    <- particles contract\r\n *    ╲     ╱\r\n *     ↺ ⭐ ↻      <- twist opposite\r\n *\r\n * USED BY:\r\n * - Dance gestures\r\n * - Playful emotions\r\n * - Music synchronization\r\n */\r\n\r\n/**\r\n * Twist gesture configuration and implementation\r\n */\r\nexport default {\r\n    name: 'twist',\r\n    emoji: '🌀',\r\n    type: 'override', // Replaces existing motion\r\n    description: 'Twisting dance motion with alternating rotation',\r\n\r\n    // Default configuration\r\n    config: {\r\n        duration: 1200,      // Animation duration\r\n        rotationAngle: 45,   // Max rotation angle in degrees\r\n        contractionFactor: 0.8, // How much to contract during twist\r\n        twistFrequency: 2,   // Number of twist cycles\r\n        easing: 'smooth',    // Animation curve type\r\n        strength: 0.8,       // Overall motion intensity\r\n        // Particle motion configuration\r\n        particleMotion: {\r\n            type: 'twist',\r\n            rotationAngle: 45,\r\n            contractionFactor: 0.8,\r\n            twistFrequency: 2\r\n        }\r\n    },\r\n\r\n    // Rhythm configuration - twist syncs to beat\r\n    rhythm: {\r\n        enabled: true,\r\n        syncMode: 'beat',\r\n        timingSync: 'nextBeat',\r\n        interruptible: true,\r\n        priority: 4,\r\n        blendable: false,  // Override gesture, no blending\r\n        crossfadePoint: 'anyBeat',\r\n\r\n        // Twist intensity syncs to beat\r\n        amplitudeSync: {\r\n            onBeat: 1.5,      // Stronger twist on beat\r\n            offBeat: 0.7,     // Lighter between beats\r\n            curve: 'elastic'  // Bouncy twist motion\r\n        },\r\n\r\n        // Pattern-specific twisting styles\r\n        patternOverrides: {\r\n            'funk': {\r\n                // Funky twist with more rotation\r\n                rotationAngle: 60,\r\n                contractionFactor: 0.7\r\n            },\r\n            'disco': {\r\n                // Classic disco twist\r\n                twistFrequency: 3,\r\n                rotationAngle: 50\r\n            },\r\n            'latin': {\r\n                // Latin-style hip twist\r\n                rotationAngle: 35,\r\n                contractionFactor: 0.85,\r\n                twistFrequency: 2.5\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Initialize gesture data for a particle\r\n     */\r\n    initialize: function(particle, motion) {\r\n        if (!particle.gestureData) {\r\n            particle.gestureData = {};\r\n        }\r\n\r\n        particle.gestureData.twist = {\r\n            startX: particle.x,\r\n            startY: particle.y,\r\n            startAngle: Math.atan2(particle.y - motion.centerY, particle.x - motion.centerX),\r\n            startDistance: Math.sqrt(\r\n                Math.pow(particle.x - motion.centerX, 2) +\r\n                Math.pow(particle.y - motion.centerY, 2)\r\n            ),\r\n            initialized: true\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Apply twist motion to particle\r\n     * @param {Particle} particle - The particle to animate\r\n     * @param {number} progress - Gesture progress (0-1)\r\n     * @param {Object} motion - Gesture configuration\r\n     * @param {number} dt - Delta time\r\n     * @param {number} centerX - Orb center X\r\n     * @param {number} centerY - Orb center Y\r\n     */\r\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\r\n        // Initialize on first frame\r\n        if (!particle.gestureData?.twist?.initialized) {\r\n            this.initialize(particle, { ...motion, centerX, centerY });\r\n        }\r\n\r\n        const config = { ...this.config, ...motion };\r\n        const data = particle.gestureData.twist;\r\n        const strength = config.strength || this.config.strength || 1.0;\r\n\r\n        // Calculate twist oscillation\r\n        const twistProgress = progress * config.twistFrequency * Math.PI * 2;\r\n        const twistAmount = Math.sin(twistProgress) * strength;\r\n\r\n        // Apply rhythm modulation if present\r\n        let rotationAngle = config.rotationAngle;\r\n        let contractionFactor = config.contractionFactor;\r\n\r\n        if (motion.rhythmModulation) {\r\n            rotationAngle *= (motion.rhythmModulation.amplitudeMultiplier || 1);\r\n            contractionFactor = 1 - ((1 - contractionFactor) * (motion.rhythmModulation.amplitudeMultiplier || 1));\r\n        }\r\n\r\n        // Convert rotation to radians\r\n        const rotationRad = (rotationAngle * Math.PI / 180) * twistAmount;\r\n\r\n        // Calculate contraction (pull particles closer during twist)\r\n        const currentContraction = 1 - ((1 - contractionFactor) * Math.abs(twistAmount));\r\n\r\n        // Apply twist transformation\r\n        const newAngle = data.startAngle + rotationRad;\r\n        const newDistance = data.startDistance * currentContraction;\r\n\r\n        // Calculate new position\r\n        const targetX = centerX + Math.cos(newAngle) * newDistance;\r\n        const targetY = centerY + Math.sin(newAngle) * newDistance;\r\n\r\n        // Smoothly move to target position\r\n        const moveStrength = 0.15 * strength;\r\n        particle.x += (targetX - particle.x) * moveStrength;\r\n        particle.y += (targetY - particle.y) * moveStrength;\r\n\r\n        // Add some velocity for fluid motion\r\n        particle.vx = (targetX - particle.x) * 0.05;\r\n        particle.vy = (targetY - particle.y) * 0.05;\r\n\r\n        // Add slight vertical bounce for more dynamic feel\r\n        const bounceAmount = Math.sin(progress * Math.PI * 4) * 5 * strength;\r\n        particle.y += bounceAmount * 0.1;\r\n\r\n        // Smooth ending\r\n        if (progress > 0.9) {\r\n            const endFactor = 1 - ((progress - 0.9) * 10);\r\n            particle.vx *= endFactor;\r\n            particle.vy *= endFactor;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Clean up gesture data when complete\r\n     */\r\n    cleanup: function(particle) {\r\n        if (particle.gestureData?.twist) {\r\n            delete particle.gestureData.twist;\r\n        }\r\n    }\r\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Wave Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Wave gesture - infinity pattern flow\n * @author Emotive Engine Team\n * @module gestures/effects/wave\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a flowing wave motion with particles moving in an infinity (∞) pattern.   \n * ║ This is an OVERRIDE gesture that creates smooth, hypnotic figure-8 movements.     \n * ║ Particles phase in and out for a dreamlike effect.                                \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *        ∞ Infinity Pattern\n *      ↗ → ↘     ↙ ← ↖\n *     ⭐     ⭐ ⭐     ⭐\n *      ↖ ← ↙     ↘ → ↗\n *         (continuous flow)\n * \n * USED BY:\n * - Hypnotic/mesmerizing effects\n * - Dreamy transitions\n * - Magical gestures\n * - Flow states\n */\n\n/**\n * Wave gesture configuration and implementation\n */\nexport default {\n    name: 'wave',\n    emoji: '🌊',\n    type: 'override', // Completely replaces motion\n    description: 'Infinity pattern flow with phasing',\n    \n    // Default configuration\n    config: {\n        // Musical duration - wave flows for exactly 1 bar\n        musicalDuration: {\n            musical: true,\n            bars: 1,           // Default to 1 bar of wave motion\n            minBeats: 4,       // Minimum 1 bar\n            maxBeats: 16       // Maximum 4 bars\n        },\n        \n        // Musical phases of the wave gesture\n        phases: [\n            { name: 'gather', beats: 0.5 },     // Particles gather\n            { name: 'rise', beats: 0.5 },       // Begin rising motion\n            { name: 'waveLeft', beats: 1 },     // Wave to the left\n            { name: 'waveRight', beats: 1 },    // Wave to the right\n            { name: 'settle', beats: 1 }        // Settle back to center\n        ],\n        \n        amplitude: 40,         // Infinity pattern width\n        frequency: 1,          // Complete cycle count\n        phaseShift: 0.3,       // Particle timing offset\n        liftHeight: 20,        // Vertical movement range\n        fadeInOut: true,       // Enable opacity transitions\n        smoothness: 0.1,       // Motion fluidity factor\n        easing: 'sine',        // Animation curve type\n        strength: 1.0,         // Overall effect intensity\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'wave',\n            strength: 1.0,     // Wave motion strength\n            amplitude: 50      // Pattern size\n        }\n    },\n    \n    // Rhythm configuration - flowing wave patterns synchronized to musical waves and phrases\n    rhythm: {\n        enabled: true,\n        syncMode: 'wave',    // Flow with musical wave patterns and melodic contours\n        \n        // Amplitude responds to musical dynamics and melodic range\n        amplitudeSync: {\n            onWave: 65,           // Large waves during musical waves\n            onStatic: 25,         // Small waves during static sections\n            curve: 'flowing'      // Smooth, continuous transitions\n        },\n        \n        // Frequency matches musical phrase rhythm\n        frequencySync: {\n            mode: 'phrase',\n            slow: 0.7,            // Slower waves for slow phrases\n            fast: 1.8,            // Faster waves for quick phrases\n            curve: 'melodic'      // Follows melodic contour\n        },\n        \n        // Duration automatically syncs to bars via musicalDuration config\n        durationSync: {\n            mode: 'bars',         // Uses bars from musicalDuration\n            adaptToPhrase: true,  // Extend to complete musical phrases\n            sustain: true         // Maintain wave through phrase\n        },\n        \n        // Phase shift creates ensemble wave effects\n        phaseSync: {\n            enabled: true,\n            multiplier: 0.5,      // Moderate phase variation\n            type: 'ensemble'      // Creates group wave patterns\n        },\n        \n        // Response to melodic contour\n        melodicResponse: {\n            enabled: true,\n            multiplier: 1.4,      // Wave amplitude follows melody\n            type: 'amplitude'     // Affects wave size\n        },\n        \n        // Style variations for different music types\n        patternOverrides: {\n            'ambient': {\n                // Slow, hypnotic waves\n                amplitudeSync: { onWave: 80, onStatic: 40, curve: 'hypnotic' },\n                frequencySync: { slow: 0.5, fast: 1.2 },\n                durationSync: { minBeats: 16, maxBeats: 64 }\n            },\n            'ocean': {\n                // Natural, oceanic wave patterns\n                amplitudeSync: { onWave: 90, onStatic: 20, curve: 'natural' },\n                phaseSync: { multiplier: 0.8 },\n                melodicResponse: { multiplier: 1.8 }\n            },\n            'electronic': {\n                // Precise, digital wave forms\n                amplitudeSync: { onWave: 70, onStatic: 30, curve: 'digital' },\n                frequencySync: { slow: 0.8, fast: 2.5, curve: 'precise' }\n            },\n            'orchestral': {\n                // Rich, complex wave interactions\n                amplitudeSync: { onWave: 75, onStatic: 35 },\n                phaseSync: { multiplier: 0.7 },\n                melodicResponse: { multiplier: 2.0 }\n            }\n        },\n        \n        // Musical dynamics\n        dynamics: {\n            forte: {\n                // Powerful, sweeping waves\n                amplitudeSync: { \n                    onWave: { multiplier: 1.8 },\n                    onStatic: { multiplier: 1.4 }\n                },\n                frequencySync: { multiplier: 1.3 },\n                melodicResponse: { multiplier: 2.2 }\n            },\n            piano: {\n                // Gentle, subtle waves\n                amplitudeSync: { \n                    onWave: { multiplier: 0.6 },\n                    onStatic: { multiplier: 0.4 }\n                },\n                frequencySync: { multiplier: 0.7 },\n                melodicResponse: { multiplier: 1.1 }\n            }\n        }\n    },\n    \n    /**\n     * Initialize gesture data for a particle\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        // Calculate initial position relative to center\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        const angle = Math.atan2(dy, dx);\n        const radius = Math.sqrt(dx * dx + dy * dy);\n        \n        // Random direction for wave motion\n        const direction = Math.random() < 0.5 ? 1 : -1;\n        \n        particle.gestureData.wave = {\n            startX: particle.x,\n            startY: particle.y,\n            originalVx: particle.vx,\n            originalVy: particle.vy,\n            baseOpacity: particle.opacity || particle.life || 1,\n            angle: angle,\n            radius: radius,\n            offset: Math.random() * Math.PI * 2, // Random phase offset\n            role: Math.random(), // 0-1 for variation\n            direction: direction, // Random wave direction\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply wave motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.wave?.initialized) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.wave;\n        const config = { ...this.config, ...motion };\n        const strength = motion.strength || 1.0;\n        \n        // Apply easing to progress\n        const easeProgress = this.easeInOutSine(progress);\n        \n        // Add phase shift based on particle role (creates wave effect)\n        const phaseShift = data.role * config.phaseShift;\n        const adjustedPhase = Math.max(0, easeProgress - phaseShift);\n        \n        // Calculate infinity pattern (lemniscate) with direction\n        const t = adjustedPhase * Math.PI * 2 * config.frequency * data.direction + data.offset;\n        \n        // Scale amplitude based on distance from center\n        const radiusFactor = 0.5 + (data.radius / 100) * 0.5;\n        const amplitude = config.amplitude * radiusFactor * strength * particle.scaleFactor;\n        \n        // Infinity pattern equations\n        const infinityX = Math.sin(t) * amplitude;\n        const infinityY = Math.sin(t * 2) * amplitude * 0.3; // Smaller vertical component\n        \n        // Add vertical lift effect\n        const lift = -Math.abs(Math.sin(easeProgress * Math.PI)) * config.liftHeight * particle.scaleFactor;\n        \n        // Calculate target position\n        const targetX = centerX + infinityX;\n        const targetY = centerY + infinityY + lift;\n        \n        // Smooth movement with role-based variation\n        const smoothness = config.smoothness + data.role * 0.12;\n        \n        // Apply position with smoothing\n        particle.x += (targetX - particle.x) * smoothness;\n        particle.y += (targetY - particle.y) * smoothness;\n        \n        // Set velocity for trails\n        particle.vx = (targetX - particle.x) * 0.3;\n        particle.vy = (targetY - particle.y) * 0.3;\n        \n        // Apply fade effect if enabled\n        if (config.fadeInOut) {\n            let fadeFactor;\n            \n            if (adjustedPhase < 0.1) {\n                // Fade in\n                fadeFactor = adjustedPhase / 0.1;\n            } else if (adjustedPhase > 0.9) {\n                // Fade out\n                fadeFactor = (1 - adjustedPhase) / 0.1;\n            } else {\n                // Full opacity with sine variation\n                fadeFactor = 0.5 + Math.sin(adjustedPhase * Math.PI) * 0.5;\n            }\n            \n            particle.opacity = data.baseOpacity * (0.3 + fadeFactor * 0.7);\n            \n            // Update life for particles that use it instead of opacity\n            if (particle.life !== undefined) {\n                particle.life = particle.opacity;\n            }\n        }\n        \n        // Smooth ending\n        if (progress >= 0.95) {\n            const endFactor = (1 - progress) * 20;\n            particle.vx = particle.vx * endFactor + data.originalVx * (1 - endFactor);\n            particle.vy = particle.vy * endFactor + data.originalVy * (1 - endFactor);\n            \n            // Restore opacity\n            if (config.fadeInOut) {\n                particle.opacity = data.baseOpacity * endFactor;\n                if (particle.life !== undefined) {\n                    particle.life = particle.opacity;\n                }\n            }\n        }\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.wave) {\n            const data = particle.gestureData.wave;\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n            particle.opacity = data.baseOpacity;\n            if (particle.life !== undefined) {\n                particle.life = data.baseOpacity;\n            }\n            delete particle.gestureData.wave;\n        }\n    },\n    \n    /**\n     * Sine easing for smooth wave motion\n     * @param {number} t - Progress (0-1)\n     * @returns {number} Eased value\n     */\n    easeInOutSine: function(t) {\n        return -(Math.cos(Math.PI * t) - 1) / 2;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Drift Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Drift gesture - controlled floating motion\n * @author Emotive Engine Team\n * @module gestures/effects/drift\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a dreamy drifting effect where particles float outward then return home.  \n * ║ This is an OVERRIDE gesture with smooth, controlled movement and fading effects.  \n * ║ Perfect for transitions, sleepy states, or ethereal moments.                      \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *    Start         Drift Out        Hold         Return\n *      ⭐           · · ⭐           · · ·          ⭐\n *     ⭐⭐    →    · ⭐ · ⭐    →   · · · ·    →   ⭐⭐\n *      ⭐           ⭐ · ·           · · ·          ⭐\n *   (grouped)     (spread)        (faded)      (regrouped)\n * \n * USED BY:\n * - Sleepy/drowsy states\n * - Dreamy transitions\n * - Dispersal effects\n * - Meditation/calm states\n */\n\n/**\n * Drift gesture configuration and implementation\n */\nexport default {\n    name: 'drift',\n    emoji: '☁️',\n    type: 'override', // Completely replaces motion\n    description: 'Controlled floating with fade effects',\n    \n    // Default configuration\n    config: {\n        duration: 800,         // Animation duration\n        distance: 50,          // Maximum drift distance\n        angle: 45,             // Primary drift direction\n        returnToOrigin: true,  // Return to starting position\n        fadeOut: false,        // Apply fade effect during drift (disabled to prevent disappearing)\n        holdTime: 0.2,         // Pause duration at drift peak\n        turbulence: 0.1,       // Random movement variation amount\n        angleSpread: 45,       // Directional spread range\n        smoothness: 0.08,      // Movement fluidity factor\n        easing: 'ease',        // Animation curve type\n        strength: 1.0,         // Overall drift intensity\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'drift',\n            strength: 1.0,     // Drift motion strength\n            distance: 60       // Maximum drift distance\n        }\n    },\n    \n    // Rhythm configuration - ethereal drift following ambient musical textures\n    rhythm: {\n        enabled: true,\n        syncMode: 'ambient',  // Sync to ambient musical textures\n        \n        // Distance varies with musical dynamics\n        distanceSync: {\n            quiet: 30,            // Small drift in quiet sections\n            loud: 80,             // Large drift in loud sections\n            crescendo: 'expand',  // Expand drift on crescendos\n            diminuendo: 'contract' // Contract drift on diminuendos\n        },\n        \n        // Angle follows harmonic progression\n        angleSync: {\n            major: 45,            // Upward drift in major keys\n            minor: 225,           // Downward drift in minor keys\n            modulation: 'smooth', // Smooth angle changes\n            cadence: 'return'     // Return to center on cadences\n        },\n        \n        // Hold time syncs to phrase length\n        holdSync: {\n            shortPhrase: 0.1,     // Brief hold for short phrases\n            longPhrase: 0.4,      // Extended hold for long phrases\n            fermata: 'sustain'    // Sustain hold on fermatas\n        },\n        \n        // Gentle accent response\n        accentResponse: {\n            enabled: true,\n            multiplier: 1.3,      // Subtle drift increase on accents\n            type: 'distance'      // Accent affects drift distance\n        },\n        \n        // Pattern-specific drift styles\n        patternOverrides: {\n            'ambient': {\n                // Slow, ethereal drifting\n                distanceSync: { quiet: 40, loud: 100 },\n                holdSync: { shortPhrase: 0.3, longPhrase: 0.6 }\n            },\n            'classical': {\n                // Elegant, controlled drifting\n                angleSync: { major: 30, minor: 210 },\n                distanceSync: { quiet: 25, loud: 60 }\n            },\n            'jazz': {\n                // Syncopated, unpredictable drifting\n                angleSync: { \n                    major: 60, \n                    minor: 240,\n                    swing: true,\n                    syncopated: true\n                }\n            },\n            'new_age': {\n                // Meditative, flowing drift\n                distanceSync: { quiet: 35, loud: 70 },\n                holdSync: { shortPhrase: 0.4, longPhrase: 0.8 },\n                angleSync: { modulation: 'gradual' }\n            }\n        },\n        \n        // Musical dynamics variations\n        dynamics: {\n            forte: {\n                // Expansive, bold drifting\n                distanceSync: { \n                    quiet: { multiplier: 1.5 },\n                    loud: { multiplier: 1.8 }\n                },\n                holdSync: { multiplier: 1.2 },\n                accentResponse: { multiplier: 1.6 }\n            },\n            piano: {\n                // Delicate, subtle drifting\n                distanceSync: { \n                    quiet: { multiplier: 0.6 },\n                    loud: { multiplier: 0.8 }\n                },\n                holdSync: { multiplier: 0.8 },\n                accentResponse: { multiplier: 1.1 }\n            }\n        }\n    },\n    \n    /**\n     * Initialize gesture data for a particle\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        // Calculate drift direction\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        let driftAngle = Math.atan2(dy, dx);\n        \n        // Add some spread to the drift angle\n        const config = { ...this.config, ...motion };\n        const spreadRad = (config.angleSpread * Math.PI / 180);\n        const angleOffset = (Math.random() - 0.5) * spreadRad;\n        driftAngle += angleOffset;\n        \n        // Determine home position (closer to center)\n        const homeRadius = 30 + Math.random() * 30;\n        \n        particle.gestureData.drift = {\n            startX: particle.x,\n            startY: particle.y,\n            originalVx: particle.vx,\n            originalVy: particle.vy,\n            baseOpacity: particle.opacity || particle.life || 1,\n            driftAngle: driftAngle,\n            angleOffset: angleOffset,\n            homeRadius: homeRadius * particle.scaleFactor,\n            homeX: centerX + Math.cos(driftAngle) * homeRadius,\n            homeY: centerY + Math.sin(driftAngle) * homeRadius,\n            role: Math.random(), // 0-1 for timing variation\n            turbulencePhase: Math.random() * Math.PI * 2,\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply drift motion to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.drift?.initialized) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.drift;\n        const config = { ...this.config, ...motion };\n        const strength = motion.strength || 1.0;\n        \n        // Apply easing\n        const easeProgress = this.easeInOutCubic(progress);\n        \n        // Add role-based phase shift for staggered movement\n        const adjustedPhase = Math.max(0, easeProgress - data.role * 0.1);\n        \n        let targetX, targetY;\n        let currentRadius;\n        \n        // Determine phase of drift\n        if (!config.returnToOrigin) {\n            // Simple outward drift\n            const driftProgress = adjustedPhase;\n            currentRadius = data.homeRadius + driftProgress * config.distance * strength * particle.scaleFactor;\n            \n        } else if (adjustedPhase < 0.4) {\n            // Phase 1: Move to home position\n            const homeProgress = adjustedPhase / 0.4;\n            const easedHome = this.easeOutQuad(homeProgress);\n            targetX = data.startX + (data.homeX - data.startX) * easedHome;\n            targetY = data.startY + (data.homeY - data.startY) * easedHome;\n            \n        } else if (adjustedPhase < 0.6 + config.holdTime) {\n            // Phase 2: Drift outward\n            const driftPhase = (adjustedPhase - 0.4) / (0.2 + config.holdTime);\n            currentRadius = data.homeRadius + \n                Math.sin(driftPhase * Math.PI * 0.5) * config.distance * strength * particle.scaleFactor;\n            \n        } else {\n            // Phase 3: Return to origin\n            const returnPhase = (adjustedPhase - 0.6 - config.holdTime) / (0.4 - config.holdTime);\n            currentRadius = data.homeRadius + \n                Math.cos(returnPhase * Math.PI * 0.5) * config.distance * strength * particle.scaleFactor;\n        }\n        \n        // Calculate position with turbulence\n        if (currentRadius !== undefined) {\n            // Add turbulence\n            data.turbulencePhase += config.turbulence * dt;\n            const turbulenceX = Math.sin(data.turbulencePhase) * config.turbulence * 10;\n            const turbulenceY = Math.cos(data.turbulencePhase * 1.3) * config.turbulence * 10;\n            \n            const angle = data.driftAngle + data.angleOffset;\n            targetX = centerX + Math.cos(angle) * currentRadius + turbulenceX;\n            targetY = centerY + Math.sin(angle) * currentRadius + turbulenceY;\n        }\n        \n        // Smooth movement with role variation\n        const smoothness = config.smoothness + data.role * 0.08;\n        particle.x += (targetX - particle.x) * smoothness;\n        particle.y += (targetY - particle.y) * smoothness;\n        \n        // Set velocity for trails\n        particle.vx = (targetX - particle.x) * 0.25;\n        particle.vy = (targetY - particle.y) * 0.25;\n        \n        // Apply fade effect\n        if (config.fadeOut) {\n            let fadeFactor;\n            \n            if (progress < 0.25) {\n                // Fade in\n                fadeFactor = 0.3 + (progress / 0.25) * 0.7;\n            } else if (progress < 0.75) {\n                // Main phase with sine variation\n                fadeFactor = 0.7 + Math.sin((progress - 0.25) * Math.PI / 0.5) * 0.3;\n            } else {\n                // Fade back\n                fadeFactor = (1 - progress) * 4;\n            }\n            \n            particle.opacity = data.baseOpacity * fadeFactor;\n            if (particle.life !== undefined) {\n                particle.life = particle.opacity;\n            }\n        }\n        \n        // Clean ending\n        if (progress >= 0.99) {\n            particle.vx = data.originalVx * 0.1;\n            particle.vy = data.originalVy * 0.1;\n            \n            if (config.fadeOut) {\n                particle.opacity = data.baseOpacity;\n                if (particle.life !== undefined) {\n                    particle.life = data.baseOpacity;\n                }\n            }\n        }\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.drift) {\n            const data = particle.gestureData.drift;\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n            particle.opacity = data.baseOpacity;\n            if (particle.life !== undefined) {\n                particle.life = data.baseOpacity;\n            }\n            delete particle.gestureData.drift;\n        }\n    },\n    \n    /**\n     * Easing functions\n     */\n    easeInOutCubic: function(t) {\n        return t < 0.5 \n            ? 4 * t * t * t \n            : 1 - Math.pow(-2 * t + 2, 3) / 2;\n    },\n    \n    easeOutQuad: function(t) {\n        return t * (2 - t);\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Flicker Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Flicker gesture - opacity and motion variation\n * @author Emotive Engine Team\n * @module gestures/effects/flicker\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a flickering effect with rapid opacity changes and subtle motion jitter.  \n * ║ This is a BLENDING gesture that adds visual instability, perfect for glitches,   \n * ║ electrical effects, or nervous energy.                                            \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *    Frame 1      Frame 2      Frame 3      Frame 4\n *      ⭐          ·⭐·         ⭐⭐⭐         ·⭐\n *    (100%)       (30%)        (120%)        (50%)\n *    normal       dimmed       bright        partial\n * \n * USED BY:\n * - Glitch/digital effects\n * - Electrical sparks\n * - Nervous/unstable states\n * - Teleportation effects\n * - Broken/malfunctioning states\n */\n\n/**\n * Flicker gesture configuration and implementation\n */\nexport default {\n    name: 'flicker',\n    emoji: '⚡',\n    type: 'blending', // Adds to existing motion\n    description: 'Rapid opacity changes with motion jitter',\n    \n    // Default configuration\n    config: {\n        duration: 800,         // Animation duration\n        flickerRate: 15,       // Flicker speed\n        frequency: 6,          // Flicker count\n        minOpacity: 0.3,       // Minimum visibility\n        maxOpacity: 1.0,       // Maximum visibility\n        jitterAmount: 2,       // Position wobble range\n        colorShift: false,     // Enable hue variation\n        strobe: false,         // Regular vs random pattern\n        pulseMode: false,      // Smooth vs sharp transitions\n        groupFlicker: 0.3,     // Group synchronization probability\n        easing: 'linear',      // Animation curve type\n        strength: 0.7,         // Overall effect intensity\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'flicker',\n            strength: 0.7,     // Particle flicker strength\n            frequency: 6       // Particle flicker rate\n        }\n    },\n    \n    // Rhythm configuration - flicker syncs to subdivisions\n    rhythm: {\n        enabled: true,\n        syncMode: 'subdivision',  // Flicker on subdivisions\n        \n        // Flicker rate syncs to tempo\n        rateSync: {\n            subdivision: 'sixteenth',  // Flicker on 16th notes\n            onBeat: 30,               // Rapid flicker on beat\n            offBeat: 10,              // Slower between beats\n            triplet: 20,              // Medium on triplets\n            curve: 'step'             // Instant changes\n        },\n        \n        // Opacity patterns with rhythm\n        opacitySync: {\n            pattern: 'HLMH',          // High-Low-Medium-High\n            subdivision: 'eighth',     // Pattern rate\n            onAccent: 0.1,           // Nearly off on accent (dramatic)\n            regular: 0.5              // Medium normally\n        },\n        \n        // Jitter amount varies\n        jitterSync: {\n            onBeat: 5,                // Big jitter on beat\n            offBeat: 1,               // Minimal between\n            accent: 10,               // Extreme on accent\n            curve: 'random'           // Chaotic motion\n        },\n        \n        // Strobe modes\n        strobeSync: {\n            verse: false,             // No strobe in verse\n            chorus: true,             // Strobe in chorus\n            drop: 'intense',          // Intense strobe on drop\n            pattern: 'XOXO'          // Strobe pattern\n        },\n        \n        // Musical dynamics\n        dynamics: {\n            forte: { flickerRate: 25, jitterAmount: 5, minOpacity: 0.1 },\n            piano: { flickerRate: 8, jitterAmount: 1, minOpacity: 0.5 }\n        }\n    },\n    \n    /**\n     * Initialize gesture data for a particle\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     */\n    initialize: function(particle, motion) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        const config = { ...this.config, ...motion };\n        \n        // Determine if this particle is part of a synchronized group\n        const isGrouped = Math.random() < config.groupFlicker;\n        \n        particle.gestureData.flicker = {\n            baseOpacity: particle.opacity || particle.life || 1,\n            baseColor: particle.color,\n            baseX: particle.x,\n            baseY: particle.y,\n            flickerTimer: 0,\n            lastFlicker: 0,\n            flickerState: true,\n            isGrouped: isGrouped,\n            groupId: isGrouped ? Math.floor(Math.random() * 3) : -1, // Assign to flicker group\n            phase: Math.random() * Math.PI * 2,  // Random phase offset\n            colorHue: 0,\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply flicker effect to particle\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.flicker?.initialized) {\n            this.initialize(particle, motion);\n        }\n        \n        const data = particle.gestureData.flicker;\n        const config = { ...this.config, ...motion };\n        const strength = motion.strength || 1.0;\n        \n        // Update flicker timer\n        data.flickerTimer += dt * config.flickerRate;\n        \n        // Calculate opacity based on mode\n        let opacityMultiplier;\n        \n        if (config.strobe) {\n            // Strobe pattern - regular on/off\n            const strobePhase = (data.flickerTimer + data.phase) % 1;\n            opacityMultiplier = strobePhase < 0.5 ? 1 : config.minOpacity;\n            \n        } else if (config.pulseMode) {\n            // Smooth pulsing\n            const pulsePhase = data.flickerTimer + data.phase;\n            opacityMultiplier = config.minOpacity + \n                (config.maxOpacity - config.minOpacity) * (Math.sin(pulsePhase) * 0.5 + 0.5);\n            \n        } else {\n            // Random flicker\n            if (data.flickerTimer - data.lastFlicker > 1) {\n                data.lastFlicker = data.flickerTimer;\n                \n                // Group flicker logic\n                if (data.isGrouped) {\n                    // Flicker based on group timing\n                    const groupPhase = Math.floor(data.flickerTimer) % 3;\n                    data.flickerState = groupPhase === data.groupId;\n                } else {\n                    // Individual random flicker\n                    data.flickerState = Math.random() > 0.3;\n                }\n            }\n            \n            // Calculate target opacity\n            const targetOpacity = data.flickerState ? \n                config.maxOpacity : \n                config.minOpacity + Math.random() * 0.3;\n            \n            // Smooth transition for less harsh flicker\n            const currentOpacity = particle.opacity / data.baseOpacity;\n            opacityMultiplier = currentOpacity + (targetOpacity - currentOpacity) * 0.3;\n        }\n        \n        // Apply opacity with strength\n        const finalOpacity = data.baseOpacity * (1 + (opacityMultiplier - 1) * strength);\n        particle.opacity = Math.max(0, Math.min(1, finalOpacity)); // Clamp to 0-1\n        \n        // Update life if used instead of opacity\n        if (particle.life !== undefined) {\n            particle.life = particle.opacity;\n        }\n        \n        // Apply position jitter\n        if (config.jitterAmount > 0 && opacityMultiplier > config.minOpacity) {\n            const jitter = config.jitterAmount * strength * particle.scaleFactor;\n            const jitterX = (Math.random() - 0.5) * jitter * opacityMultiplier;\n            const jitterY = (Math.random() - 0.5) * jitter * opacityMultiplier;\n            \n            particle.vx += jitterX * 0.1 * dt;\n            particle.vy += jitterY * 0.1 * dt;\n        }\n        \n        // Apply color shift if enabled\n        if (config.colorShift && particle.color) {\n            data.colorHue += 0.01 * dt;\n            const hueShift = Math.sin(data.colorHue) * 30; // ±30 degree hue shift\n            particle.color = this.shiftHue(data.baseColor, hueShift * strength);\n        }\n        \n        // Smooth fade in/out at gesture boundaries\n        let fadeFactor = 1;\n        if (progress < 0.1) {\n            fadeFactor = progress / 0.1;  // Fade in\n        } else if (progress > 0.9) {\n            fadeFactor = (1 - progress) / 0.1;  // Fade out\n        }\n        \n        particle.opacity *= fadeFactor;\n        if (particle.life !== undefined) {\n            particle.life = particle.opacity;\n        }\n        \n        // Dampen velocity slightly for stability\n        if (progress > 0.8) {\n            particle.vx *= 0.95;\n            particle.vy *= 0.95;\n        }\n    },\n    \n    /**\n     * Shift the hue of a color\n     * @param {string} color - Hex color string\n     * @param {number} degrees - Degrees to shift hue\n     * @returns {string} New hex color\n     */\n    shiftHue: function(color, degrees) {\n        // Simple hue shift implementation\n        // In production, use a proper color library\n        if (!color || !color.startsWith('#')) return color;\n        \n        // Convert hex to RGB\n        const hex = color.slice(1);\n        const r = parseInt(hex.substr(0, 2), 16) / 255;\n        const g = parseInt(hex.substr(2, 2), 16) / 255;\n        const b = parseInt(hex.substr(4, 2), 16) / 255;\n        \n        // Simple hue rotation (approximate)\n        const hueRad = degrees * Math.PI / 180;\n        const cos = Math.cos(hueRad);\n        const sin = Math.sin(hueRad);\n        \n        // Rotate around luminance axis (simplified)\n        const newR = r * cos - g * sin;\n        const newG = r * sin + g * cos;\n        const newB = b;\n        \n        // Convert back to hex\n        const toHex = (n) => {\n            const val = Math.max(0, Math.min(255, Math.round(n * 255)));\n            return val.toString(16).padStart(2, '0');\n        };\n        \n        return '#' + toHex(newR) + toHex(newG) + toHex(newB);\n    },\n    \n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.flicker) {\n            const data = particle.gestureData.flicker;\n            particle.opacity = data.baseOpacity;\n            particle.color = data.baseColor;\n            if (particle.life !== undefined) {\n                particle.life = data.baseOpacity;\n            }\n            delete particle.gestureData.flicker;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Burst Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Burst gesture - explosive outward motion\n * @author Emotive Engine Team\n * @module gestures/effects/burst\n */\n\nexport default {\n    name: 'burst',\n    emoji: '💥',\n    type: 'blending',\n    description: 'Explosive outward burst from center',\n    \n    // Default configuration\n    config: {\n        decay: 0.5,      // Force reduction over time\n        strength: 2.0    // Initial explosion intensity\n    },\n    \n    // Rhythm configuration - explosive bursts on strong beats\n    rhythm: {\n        enabled: true,\n        syncMode: 'beat',  // Burst on strong beats and accents\n        \n        // Strength syncs to beat intensity\n        strengthSync: {\n            onBeat: 3.5,          // Powerful burst on beats\n            offBeat: 1.0,         // Gentle burst off-beat\n            curve: 'explosion'    // Sharp attack, rapid decay\n        },\n        \n        // Decay rate responds to tempo\n        decaySync: {\n            mode: 'tempo',\n            fast: 0.8,            // Quick decay for fast songs\n            slow: 0.3,            // Slow decay for slow songs\n            curve: 'exponential'\n        },\n        \n        // Duration matches beat timing\n        durationSync: {\n            mode: 'beats',\n            beats: 0.5,           // Half-beat burst duration\n            sustain: false        // No sustain, pure burst\n        },\n        \n        // Strong response to accents\n        accentResponse: {\n            enabled: true,\n            multiplier: 2.5,      // Massive burst on accents\n            type: 'strength'      // Accent affects burst power\n        },\n        \n        // Pattern-specific burst styles\n        patternOverrides: {\n            'rock': {\n                // Heavy, aggressive bursts\n                strengthSync: { onBeat: 4.0, offBeat: 1.5 },\n                decaySync: { fast: 0.6, slow: 0.4 }\n            },\n            'electronic': {\n                // Sharp, precise bursts\n                strengthSync: { onBeat: 3.8, offBeat: 0.8, curve: 'sharp' },\n                decaySync: { fast: 0.9, slow: 0.7 }\n            },\n            'jazz': {\n                // Syncopated, varied bursts\n                strengthSync: { \n                    onBeat: 2.8, \n                    offBeat: 1.8,  // Strong off-beat emphasis\n                    swing: true \n                },\n                decaySync: { fast: 0.5, slow: 0.2 }\n            },\n            'orchestral': {\n                // Dynamic, expressive bursts\n                strengthSync: { onBeat: 3.2, offBeat: 0.5 },\n                accentResponse: { multiplier: 3.0 }  // Very responsive to dynamics\n            }\n        },\n        \n        // Musical dynamics variations\n        dynamics: {\n            forte: {\n                // Explosive, powerful bursts\n                strengthSync: { \n                    onBeat: { multiplier: 2.0 },\n                    offBeat: { multiplier: 1.5 }\n                },\n                decaySync: { multiplier: 0.7 },  // Slower decay for impact\n                accentResponse: { multiplier: 3.5 }\n            },\n            piano: {\n                // Subtle, gentle bursts\n                strengthSync: { \n                    onBeat: { multiplier: 0.6 },\n                    offBeat: { multiplier: 0.3 }\n                },\n                decaySync: { multiplier: 1.3 },  // Faster decay for gentleness\n                accentResponse: { multiplier: 1.8 }\n            }\n        }\n    },\n    \n    /**\n     * Apply explosive burst motion to particle\n     * Pushes particles radially outward with decaying force\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Calculate force decay over gesture duration\n        const decay = motion.decay || this.config.decay;\n        const strength = (motion.strength || this.config.strength) * (1 - progress * decay);\n        \n        // Calculate direction from center to particle\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        // Apply outward force if particle isn't at center\n        if (distance > 1) {\n            // Normalize direction and apply explosive force\n            particle.vx += (dx / distance) * strength * 2 * dt;\n            particle.vy += (dy / distance) * strength * 2 * dt;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Directional Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Directional gesture - move particles in specific direction\n * @author Emotive Engine Team\n * @module gestures/effects/directional\n */\n\nexport default {\n    name: 'directional',\n    emoji: '➡️',\n    type: 'blending',\n    description: 'Move particles in a specific direction',\n    \n    // Default configuration\n    config: {\n        angle: 0,                // Movement direction in degrees\n        returnToOrigin: false,   // Whether particles return to start\n        strength: 1.0           // Force intensity\n    },\n    \n    // Rhythm configuration - directional movement following musical flow\n    rhythm: {\n        enabled: true,\n        syncMode: 'flow',  // Follow musical flow and direction\n        \n        // Direction changes with musical progression\n        angleSync: {\n            verse: 0,             // Right movement in verses\n            chorus: 90,           // Upward movement in choruses  \n            bridge: 180,          // Left movement in bridges\n            outro: 270,           // Downward movement in outros\n            transition: 'smooth'  // Smooth direction changes\n        },\n        \n        // Strength pulses with rhythm\n        strengthSync: {\n            onBeat: 1.8,          // Strong push on beats\n            offBeat: 0.6,         // Gentle drift off-beat\n            curve: 'wave'         // Wave-like motion curve\n        },\n        \n        // Return motion syncs to musical sections\n        returnSync: {\n            enabled: true,\n            onSectionChange: true, // Return on section changes\n            duration: 'transition', // Use transition timing\n            strength: 1.2\n        },\n        \n        // Accent response affects direction\n        accentResponse: {\n            enabled: true,\n            multiplier: 2.0,      // Sharp directional push on accents\n            type: 'strength'      // Accent affects movement force\n        },\n        \n        // Pattern-specific directional styles\n        patternOverrides: {\n            'march': {\n                // Military-style directional movement\n                angleSync: { verse: 0, chorus: 0 }, // Always forward\n                strengthSync: { onBeat: 2.5, offBeat: 1.0 }\n            },\n            'waltz': {\n                // Flowing, circular directional movement\n                angleSync: { \n                    verse: 45, \n                    chorus: 135,\n                    bridge: 225,\n                    outro: 315,\n                    transition: 'circular'\n                }\n            },\n            'swing': {\n                // Syncopated directional swaying\n                strengthSync: { \n                    onBeat: 1.6, \n                    offBeat: 1.4,  // Strong off-beat emphasis\n                    swing: true \n                }\n            },\n            'electronic': {\n                // Sharp, precise directional cuts\n                angleSync: { transition: 'instant' },\n                strengthSync: { onBeat: 2.2, offBeat: 0.4, curve: 'sharp' }\n            }\n        },\n        \n        // Musical dynamics variations\n        dynamics: {\n            forte: {\n                // Powerful, decisive direction changes\n                strengthSync: { \n                    onBeat: { multiplier: 1.6 },\n                    offBeat: { multiplier: 1.2 }\n                },\n                angleSync: { transition: 'sharp' },\n                accentResponse: { multiplier: 2.5 }\n            },\n            piano: {\n                // Gentle, subtle directional drift\n                strengthSync: { \n                    onBeat: { multiplier: 0.7 },\n                    offBeat: { multiplier: 0.8 }\n                },\n                angleSync: { transition: 'gradual' },\n                accentResponse: { multiplier: 1.4 }\n            }\n        }\n    },\n    \n    /**\n     * Initialize directional movement data\n     * Stores particle's starting position for return motion\n     */\n    initialize: function(particle) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        particle.gestureData.directional = {\n            initialX: particle.x,\n            initialY: particle.y\n        };\n    },\n    \n    /**\n     * Apply directional force to particle\n     * Pushes particles in specified direction with optional return\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        if (!particle.gestureData?.directional) {\n            this.initialize(particle);\n        }\n        \n        // Convert angle to radians for calculation\n        const angle = (motion.angle || this.config.angle) * Math.PI / 180;\n        const strength = motion.strength || this.config.strength;\n        \n        // Apply directional force\n        particle.vx += Math.cos(angle) * strength * 0.3 * dt;\n        particle.vy += Math.sin(angle) * strength * 0.3 * dt;\n        \n        // Optional return motion in second half of gesture\n        if (motion.returnToOrigin && progress > 0.5) {\n            const returnProgress = (progress - 0.5) * 2;\n            const data = particle.gestureData.directional;\n            // Calculate return force toward initial position\n            const dx = data.initialX - particle.x;\n            const dy = data.initialY - particle.y;\n            particle.vx += dx * returnProgress * 0.02 * dt;\n            particle.vy += dy * returnProgress * 0.02 * dt;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Settle Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Settle gesture - gradually reduce velocity\n * @author Emotive Engine Team\n * @module gestures/effects/settle\n */\n\nexport default {\n    name: 'settle',\n    emoji: '🍃',\n    type: 'blending',\n    description: 'Gradually settle particles to rest',\n    \n    // Default configuration\n    config: {\n        damping: 0.02,     // Velocity reduction rate\n        threshold: 0.01    // Minimum velocity before stop\n    },\n    \n    // Rhythm configuration - gradual settling synchronized to musical resolution\n    rhythm: {\n        enabled: true,\n        syncMode: 'resolution', // Settle during chord resolutions and phrase endings\n        \n        // Damping rate responds to musical tension/release\n        dampingSync: {\n            onResolution: 0.035,    // Faster settling on resolution\n            onTension: 0.015,       // Slower settling during tension\n            curve: 'gradual'        // Smooth, natural decay\n        },\n        \n        // Threshold adapts to dynamic level\n        thresholdSync: {\n            mode: 'dynamics',\n            forte: 0.02,            // Higher threshold for loud music\n            piano: 0.005,           // Lower threshold for quiet music\n            curve: 'exponential'\n        },\n        \n        // Duration follows musical phrase structure\n        durationSync: {\n            mode: 'phrase',\n            minBeats: 2,            // Minimum 2-beat settling\n            maxBeats: 12,           // Maximum phrase-length settling\n            sustain: true           // Maintain settling through resolution\n        },\n        \n        // Response to cadential movements\n        cadenceResponse: {\n            enabled: true,\n            multiplier: 1.6,        // Enhanced settling on cadences\n            type: 'damping'         // Affects settling rate\n        },\n        \n        // Style variations for different music types\n        patternOverrides: {\n            'ambient': {\n                // Slow, atmospheric settling\n                dampingSync: { onResolution: 0.025, onTension: 0.008, curve: 'atmospheric' },\n                durationSync: { minBeats: 8, maxBeats: 32 }\n            },\n            'jazz': {\n                // Smooth settling with swing feel\n                dampingSync: { onResolution: 0.040, onTension: 0.020 },\n                cadenceResponse: { multiplier: 1.8 }\n            },\n            'classical': {\n                // Expressive settling following harmonic rhythm\n                dampingSync: { onResolution: 0.045, onTension: 0.012, curve: 'expressive' },\n                cadenceResponse: { multiplier: 2.0 }\n            },\n            'minimalist': {\n                // Very gradual, meditative settling\n                dampingSync: { onResolution: 0.020, onTension: 0.005 },\n                durationSync: { minBeats: 16, maxBeats: 64 }\n            }\n        },\n        \n        // Musical dynamics\n        dynamics: {\n            forte: {\n                // Decisive, clear settling\n                dampingSync: { \n                    onResolution: { multiplier: 1.4 },\n                    onTension: { multiplier: 0.8 }\n                },\n                thresholdSync: { multiplier: 2.0 },\n                cadenceResponse: { multiplier: 2.2 }\n            },\n            piano: {\n                // Gentle, soft settling\n                dampingSync: { \n                    onResolution: { multiplier: 0.7 },\n                    onTension: { multiplier: 1.2 }\n                },\n                thresholdSync: { multiplier: 0.5 },\n                cadenceResponse: { multiplier: 1.3 }\n            }\n        }\n    },\n    \n    /**\n     * Apply settling effect to particle\n     * Gradually reduces velocity until particles come to rest\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        const damping = motion.damping || this.config.damping;\n        const threshold = motion.threshold || this.config.threshold;\n        \n        // Apply exponential velocity damping\n        particle.vx *= Math.max(0, 1 - damping * dt * 60);\n        particle.vy *= Math.max(0, 1 - damping * dt * 60);\n        \n        // Stop completely when velocity falls below threshold\n        if (Math.abs(particle.vx) < threshold) particle.vx = 0;\n        if (Math.abs(particle.vy) < threshold) particle.vy = 0;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Breathe Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Breathe gesture - inhale/exhale particle motion\n * @author Emotive Engine Team\n * @module gestures/effects/breathe\n */\n\nexport default {\n    name: 'breathe',\n    emoji: '🫁',\n    type: 'blending',\n    description: 'Breathing rhythm with inhale and exhale',\n    \n    // Default configuration\n    config: {\n        // Musical duration - one full breath per bar\n        musicalDuration: {\n            musical: true,\n            bars: 1,           // Default to 1 bar breathing cycle\n            minBeats: 2,       // Minimum half bar\n            maxBeats: 16       // Maximum 4 bars for slow breathing\n        },\n        \n        // Musical phases of breathing\n        phases: [\n            { name: 'inhale', beats: 1.5 },     // Inhale phase\n            { name: 'hold_in', beats: 0.5 },    // Hold at peak\n            { name: 'exhale', beats: 1.5 },     // Exhale phase\n            { name: 'hold_out', beats: 0.5 }    // Hold at rest\n        ],\n        \n        inhaleRadius: 1.5,     // Maximum expansion distance\n        exhaleRadius: 0.3,     // Minimum contraction distance\n        breathRate: 0.3,       // Breathing rhythm speed\n        spiralStrength: 0.002, // Subtle spiral motion intensity\n        scaleAmount: 0.25,     // Core size variation amount\n        glowAmount: 0.4,       // Glow intensity variation\n        frequency: 1,          // Number of breath cycles\n        easing: 'sine',        // Smooth, natural curve type\n        strength: 0.8,         // Overall motion influence\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'breathe',\n            strength: 0.8,         // Particle response strength\n            inhaleRadius: 1.5,     // Particle expansion limit\n            exhaleRadius: 0.3      // Particle contraction limit\n        }\n    },\n    \n    // Rhythm configuration - breathing synced to musical phrases\n    rhythm: {\n        enabled: true,\n        syncMode: 'phrase',  // Long breathing cycles across musical phrases\n        \n        // Breath rate syncs to musical tempo\n        breathRateSync: {\n            mode: 'tempo',\n            bpm: 'auto',          // Match song tempo\n            subdivision: 'whole', // Full breaths on whole notes\n            curve: 'sine'         // Natural breathing curve\n        },\n        \n        // Inhale/exhale expansion syncs to dynamics\n        radiusSync: {\n            inhale: {\n                onUpbeat: 1.8,    // Deeper inhale on upbeats\n                onDownbeat: 1.4,  // Standard inhale on downbeats\n                curve: 'ease-in'\n            },\n            exhale: {\n                onUpbeat: 0.2,    // Complete exhale on upbeats\n                onDownbeat: 0.4,  // Gentle exhale on downbeats\n                curve: 'ease-out'\n            }\n        },\n        \n        // Duration matches musical phrasing\n        durationSync: {\n            mode: 'phrases',\n            phrases: 2,           // Breathe across 2 musical phrases\n            hold: 'fermata'       // Hold breath on fermatas\n        },\n        \n        // Respond to musical accents\n        accentResponse: {\n            enabled: true,\n            multiplier: 1.5,      // Deeper breath on accents\n            type: 'expansion'     // Accent affects radius expansion\n        },\n        \n        // Pattern-specific breathing styles\n        patternOverrides: {\n            'ballad': {\n                // Slow, deep breathing for emotional ballads\n                breathRateSync: { subdivision: 'double-whole' },\n                radiusSync: { \n                    inhale: { onUpbeat: 2.2, onDownbeat: 1.8 },\n                    exhale: { onUpbeat: 0.1, onDownbeat: 0.2 }\n                }\n            },\n            'uptempo': {\n                // Quick, energetic breathing\n                breathRateSync: { subdivision: 'half' },\n                radiusSync: { \n                    inhale: { onUpbeat: 1.4, onDownbeat: 1.2 },\n                    exhale: { onUpbeat: 0.3, onDownbeat: 0.4 }\n                }\n            },\n            'ambient': {\n                // Ethereal, floating breathing\n                breathRateSync: { subdivision: 'whole', curve: 'ease' },\n                radiusSync: { \n                    inhale: { onUpbeat: 1.6, onDownbeat: 1.6 },\n                    exhale: { onUpbeat: 0.2, onDownbeat: 0.2 }\n                }\n            }\n        },\n        \n        // Musical dynamics variations\n        dynamics: {\n            forte: {\n                // Powerful, deep breathing\n                radiusSync: { \n                    inhale: { multiplier: 1.8 },\n                    exhale: { multiplier: 0.5 }\n                },\n                spiralStrength: 0.004,  // More spiral motion\n                scaleAmount: 0.4\n            },\n            piano: {\n                // Gentle, subtle breathing\n                radiusSync: { \n                    inhale: { multiplier: 1.2 },\n                    exhale: { multiplier: 0.8 }\n                },\n                spiralStrength: 0.001,  // Minimal spiral\n                scaleAmount: 0.1\n            }\n        }\n    },\n    \n    /**\n     * Initialize breathing data for a particle\n     * Stores particle's starting position and relationship to center\n     */\n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        // Calculate particle's position relative to orb center\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        \n        particle.gestureData.breathe = {\n            startX: particle.x,                        // Original X position\n            startY: particle.y,                        // Original Y position\n            angle: Math.atan2(dy, dx),                // Direction from center\n            baseRadius: Math.sqrt(dx * dx + dy * dy), // Distance from center\n            phaseOffset: Math.random() * 0.2 - 0.1    // Slight timing variation for organic feel\n        };\n    },\n    \n    /**\n     * Apply breathing motion to particle\n     * Creates expansion/contraction movement synchronized with breath rhythm\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize particle data if needed\n        if (!particle.gestureData?.breathe) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.breathe;\n        const config = { ...this.config, ...motion };\n        \n        // Calculate breath phase - creates smooth sine wave between exhale and inhale\n        // Result oscillates smoothly between 0 (exhale) and 1 (inhale)\n        const breathPhase = (Math.sin(progress * Math.PI * 2 * config.breathRate) + 1) / 2;\n        \n        // Define breathing boundaries relative to orb size\n        // Scale boundaries based on particle's size factor for consistent appearance\n        const referenceRadius = 100 * (particle.scaleFactor || 1);\n        const inhaleRadius = config.inhaleRadius * referenceRadius;\n        const exhaleRadius = config.exhaleRadius * referenceRadius;\n        \n        // Interpolate target position between exhale and inhale boundaries\n        const targetRadius = exhaleRadius + (inhaleRadius - exhaleRadius) * breathPhase;\n        \n        // Calculate particle's current distance from center\n        const currentDx = particle.x - centerX;\n        const currentDy = particle.y - centerY;\n        const currentRadius = Math.sqrt(currentDx * currentDx + currentDy * currentDy);\n        \n        // Calculate radial movement needed to reach target breathing position\n        const radiusDiff = targetRadius - currentRadius;\n        const moveStrength = (motion.strength || 0.8) * 0.05 * dt;\n        \n        // Apply radial motion (move in/out from center)\n        if (currentRadius > 0) {\n            // Normalize direction and apply movement\n            const moveX = (currentDx / currentRadius) * radiusDiff * moveStrength;\n            const moveY = (currentDy / currentRadius) * radiusDiff * moveStrength;\n            \n            particle.vx += moveX;\n            particle.vy += moveY;\n            \n            // Add organic spiral motion for more natural breathing feel\n            // Creates slight circular drift during expansion/contraction\n            const spiralStrength = config.spiralStrength * dt * (motion.strength || 1);\n            const tangentX = -currentDy / currentRadius;  // Perpendicular to radial direction\n            const tangentY = currentDx / currentRadius;\n            \n            // Spiral motion stronger during inhale, creating expanding spiral\n            particle.vx += tangentX * spiralStrength * breathPhase;\n            particle.vy += tangentY * spiralStrength * breathPhase;\n        }\n        \n        // Apply velocity damping for smooth, controlled motion\n        // Prevents particles from overshooting or oscillating\n        particle.vx *= 0.98;\n        particle.vy *= 0.98;\n    },\n    \n    /**\n     * Clean up breathing data when gesture completes\n     * Removes stored data to free memory\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.breathe) {\n            delete particle.gestureData.breathe;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Expand Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Expand gesture - particles move outward from center\n * @author Emotive Engine Team\n * @module gestures/effects/expand\n */\n\nexport default {\n    name: 'expand',\n    emoji: '💫',\n    type: 'blending',\n    description: 'Radial expansion from center',\n    \n    // Default configuration\n    config: {\n        duration: 600,        // Gesture duration\n        scaleAmount: 3.0,     // Core scale expansion amount\n        scaleTarget: 3.0,     // Target expansion distance ratio\n        glowAmount: 0.5,      // Glow intensity increase\n        easing: 'back',       // Overshoot animation curve\n        strength: 3.0,        // Outward push force intensity\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'pulse',\n            strength: 3.0,        // Particle push strength\n            direction: 'outward', // Movement away from center\n            persist: true         // Maintain expanded position\n        }\n    },\n    \n    // Rhythm configuration - expansive growth synced to musical crescendos\n    rhythm: {\n        enabled: true,\n        syncMode: 'crescendo',  // Expand during musical crescendos\n        \n        // Expansion strength follows dynamics\n        strengthSync: {\n            pianissimo: 1.5,      // Gentle expansion in quiet sections\n            fortissimo: 5.0,      // Massive expansion in loud sections\n            crescendo: 'build',   // Gradual build during crescendos\n            sforzando: 'burst'    // Sudden expansion on sforzandos\n        },\n        \n        // Scale target responds to musical intensity\n        scaleTargetSync: {\n            verse: 2.0,           // Moderate expansion in verses\n            chorus: 4.5,          // Large expansion in choruses\n            climax: 6.0,          // Maximum expansion at climax\n            curve: 'exponential'  // Exponential growth curve\n        },\n        \n        // Duration matches musical phrasing\n        durationSync: {\n            mode: 'phrases',\n            build: 1.2,           // Extended duration during builds\n            release: 0.8,         // Quick expansion on releases\n            sustain: 'hold'       // Hold expansion during sustains\n        },\n        \n        // Strong accent response\n        accentResponse: {\n            enabled: true,\n            multiplier: 2.8,      // Massive expansion on accents\n            type: 'strength'      // Accent affects expansion force\n        },\n        \n        // Pattern-specific expansion styles\n        patternOverrides: {\n            'orchestral': {\n                // Epic, cinematic expansion\n                strengthSync: { \n                    pianissimo: 2.0, \n                    fortissimo: 6.5,\n                    crescendo: 'dramatic'\n                },\n                scaleTargetSync: { climax: 8.0 }\n            },\n            'rock': {\n                // Aggressive, powerful expansion\n                strengthSync: { \n                    pianissimo: 1.8, \n                    fortissimo: 5.5,\n                    curve: 'power'\n                },\n                accentResponse: { multiplier: 3.2 }\n            },\n            'ambient': {\n                // Gentle, organic expansion\n                strengthSync: { \n                    pianissimo: 1.2, \n                    fortissimo: 3.5,\n                    crescendo: 'organic'\n                },\n                durationSync: { build: 1.8, release: 1.2 }\n            },\n            'electronic': {\n                // Sharp, controlled expansion\n                strengthSync: { \n                    pianissimo: 1.6, \n                    fortissimo: 4.8,\n                    curve: 'digital'\n                },\n                scaleTargetSync: { curve: 'linear' }\n            }\n        },\n        \n        // Musical dynamics variations\n        dynamics: {\n            forte: {\n                // Powerful, overwhelming expansion\n                strengthSync: { \n                    pianissimo: { multiplier: 1.4 },\n                    fortissimo: { multiplier: 1.8 }\n                },\n                scaleTargetSync: { multiplier: 1.6 },\n                accentResponse: { multiplier: 3.5 }\n            },\n            piano: {\n                // Delicate, controlled expansion\n                strengthSync: { \n                    pianissimo: { multiplier: 0.8 },\n                    fortissimo: { multiplier: 1.2 }\n                },\n                scaleTargetSync: { multiplier: 0.7 },\n                accentResponse: { multiplier: 2.0 }\n            }\n        }\n    },\n    \n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        particle.gestureData.expand = {\n            startX: particle.x,\n            startY: particle.y,\n            angle: Math.atan2(dy, dx),\n            baseRadius: Math.sqrt(dx * dx + dy * dy),\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply expansion motion to particle\n     * Pushes particles outward from center with explosive force\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        if (!particle.gestureData?.expand?.initialized) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.expand;\n        const config = { ...this.config, ...motion };\n        const strength = config.strength || 1.0;\n        \n        // Calculate expansion amount based on progress\n        const expandFactor = 1 + (config.scaleTarget - 1) * progress * strength;\n        const targetRadius = data.baseRadius * expandFactor;\n        \n        // Calculate target position farther from center\n        const targetX = centerX + Math.cos(data.angle) * targetRadius;\n        const targetY = centerY + Math.sin(data.angle) * targetRadius;\n        \n        // Apply strong outward push forces\n        const dx = targetX - particle.x;\n        const dy = targetY - particle.y;\n        particle.vx += dx * 0.8 * dt;  // Strong explosive push\n        particle.vy += dy * 0.8 * dt;  // Strong explosive push\n        \n        // Apply velocity damping for controlled motion\n        particle.vx *= 0.95;\n        particle.vy *= 0.95;\n    },\n    \n    cleanup: function(particle) {\n        if (particle.gestureData?.expand) {\n            delete particle.gestureData.expand;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Contract Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Contract gesture - particles move inward toward center\n * @author Emotive Engine Team\n * @module gestures/effects/contract\n */\n\nexport default {\n    name: 'contract',\n    emoji: '🌀',\n    type: 'blending',\n    description: 'Radial contraction toward center',\n    \n    // Default configuration\n    config: {\n        duration: 600,        // Gesture duration\n        scaleAmount: 0.2,     // Core scale reduction amount\n        scaleTarget: 0.2,     // Target contraction distance ratio\n        glowAmount: -0.2,     // Glow intensity reduction\n        easing: 'cubic',      // Smooth acceleration curve\n        strength: 2.5,        // Inward pull force intensity\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'pulse',\n            strength: 2.5,        // Particle pull strength\n            direction: 'inward',  // Movement toward center\n            persist: true         // Effect continues after gesture\n        }\n    },\n    \n    // Rhythm configuration - magnetic contraction synced to musical tension\n    rhythm: {\n        enabled: true,\n        syncMode: 'tension',  // Contract during musical tension builds\n        \n        // Contraction strength responds to musical intensity\n        strengthSync: {\n            onTension: 4.0,       // Strong pull during tension\n            onRelease: 1.5,       // Gentle pull during release\n            curve: 'magnetic'     // Smooth magnetic pull curve\n        },\n        \n        // Scale target changes with dynamics\n        scaleTargetSync: {\n            forte: 0.1,           // Tight contraction for loud sections\n            piano: 0.4,           // Gentle contraction for soft sections\n            crescendo: 'gradual', // Gradual tightening on crescendos\n            diminuendo: 'ease'    // Easy relaxation on diminuendos\n        },\n        \n        // Duration responds to phrase length\n        durationSync: {\n            mode: 'phrases',\n            shortPhrase: 0.8,     // Quick contraction for short phrases  \n            longPhrase: 1.5,      // Extended contraction for long phrases\n            hold: 'sustain'       // Maintain contraction during holds\n        },\n        \n        // Strong accent response\n        accentResponse: {\n            enabled: true,\n            multiplier: 2.2,      // Sharp contraction on accents\n            type: 'strength'      // Accent affects pull force\n        },\n        \n        // Pattern-specific contraction styles\n        patternOverrides: {\n            'classical': {\n                // Elegant, controlled contraction\n                strengthSync: { onTension: 3.5, onRelease: 1.8 },\n                scaleTargetSync: { forte: 0.15, piano: 0.35 }\n            },\n            'metal': {\n                // Aggressive, tight contraction\n                strengthSync: { onTension: 5.0, onRelease: 2.0, curve: 'sharp' },\n                scaleTargetSync: { forte: 0.05, piano: 0.25 }\n            },\n            'ambient': {\n                // Slow, atmospheric contraction\n                strengthSync: { onTension: 2.8, onRelease: 1.2, curve: 'ease' },\n                durationSync: { shortPhrase: 1.2, longPhrase: 2.0 }\n            },\n            'trap': {\n                // Sudden, rhythmic contraction on drops\n                strengthSync: { \n                    onTension: 4.5, \n                    onRelease: 1.0,\n                    dropBeat: 6.0   // Massive contraction on trap drops\n                },\n                scaleTargetSync: { forte: 0.08, piano: 0.3 }\n            }\n        },\n        \n        // Musical dynamics variations\n        dynamics: {\n            forte: {\n                // Powerful, crushing contraction\n                strengthSync: { \n                    onTension: { multiplier: 1.8 },\n                    onRelease: { multiplier: 1.4 }\n                },\n                scaleTargetSync: { multiplier: 0.6 },  // Tighter contraction\n                accentResponse: { multiplier: 2.8 }\n            },\n            piano: {\n                // Gentle, subtle contraction\n                strengthSync: { \n                    onTension: { multiplier: 0.7 },\n                    onRelease: { multiplier: 0.8 }\n                },\n                scaleTargetSync: { multiplier: 1.4 },  // Looser contraction\n                accentResponse: { multiplier: 1.6 }\n            }\n        }\n    },\n    \n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        const dx = particle.x - centerX;\n        const dy = particle.y - centerY;\n        particle.gestureData.contract = {\n            startX: particle.x,\n            startY: particle.y,\n            angle: Math.atan2(dy, dx),\n            baseRadius: Math.sqrt(dx * dx + dy * dy),\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply contraction motion to particle\n     * Pulls particles toward center with magnetic-like force\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        if (!particle.gestureData?.contract?.initialized) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n        \n        const data = particle.gestureData.contract;\n        const config = { ...this.config, ...motion };\n        const strength = config.strength || 1.0;\n        \n        // Calculate contraction amount based on progress\n        const contractFactor = 1 - (1 - config.scaleTarget) * progress * strength;\n        const targetRadius = data.baseRadius * contractFactor;\n        \n        // Calculate target position closer to center\n        const targetX = centerX + Math.cos(data.angle) * targetRadius;\n        const targetY = centerY + Math.sin(data.angle) * targetRadius;\n        \n        // Apply strong inward pull forces\n        const dx = targetX - particle.x;\n        const dy = targetY - particle.y;\n        particle.vx += dx * 0.5 * dt;  // Strong magnetic pull\n        particle.vy += dy * 0.5 * dt;  // Strong magnetic pull\n        \n        // Apply velocity damping for controlled motion\n        particle.vx *= 0.95;\n        particle.vy *= 0.95;\n    },\n    \n    cleanup: function(particle) {\n        if (particle.gestureData?.contract) {\n            delete particle.gestureData.contract;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Flash Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Flash gesture - bright burst effect\n * @author Emotive Engine Team\n * @module gestures/effects/flash\n */\n\nexport default {\n    name: 'flash',\n    emoji: '⚡',\n    type: 'blending',\n    description: 'Bright flash burst effect',\n    \n    // Default configuration\n    config: {\n        duration: 400,       // Animation duration\n        glowAmount: 2.5,     // Overall brightness increase\n        glowPeak: 3.0,       // Maximum intensity level\n        scalePeak: 1.1,      // Size expansion at peak\n        easing: 'cubic',     // Animation curve type\n        strength: 1.0,       // Effect intensity\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'burst',\n            strength: 1.0,   // Burst force intensity\n            decay: 0.3       // Force reduction rate\n        }\n    },\n    \n    // Rhythm configuration - flash on beats and accents\n    rhythm: {\n        enabled: true,\n        syncMode: 'beat',  // Flash on beats\n        timingSync: 'immediate',    // Flash immediately (for impact)\n        interruptible: true,         // Can interrupt\n        priority: 8,                 // High priority\n        blendable: true,             // Can layer over other effects\n        \n        // Flash intensity syncs to beat strength\n        intensitySync: {\n            onBeat: 3.5,              // Bright flash on beat\n            offBeat: 1.0,             // Dim between beats\n            accent: 5.0,              // Blinding on accent\n            subdivision: 'quarter',    // Flash every quarter note\n            curve: 'exponential'      // Sharp flash attack\n        },\n        \n        // Duration varies with tempo\n        durationSync: {\n            mode: 'tempo',\n            baseDuration: 400,        // Base at 120 BPM\n            scaling: 'inverse'        // Faster tempo = shorter flash\n        },\n        \n        // Scale pulse with flash\n        scaleSync: {\n            onBeat: 1.2,              // Expand on beat\n            offBeat: 1.0,             // Normal size off beat\n            accent: 1.4,              // Big expansion on accent\n            curve: 'elastic'          // Bouncy scale\n        },\n        \n        // Strobe patterns\n        strobeSync: {\n            enabled: false,           // Enable for strobe effect\n            pattern: 'XXOX',          // X=flash, O=dark\n            subdivision: 'sixteenth'  // Strobe rate\n        },\n        \n        // Musical dynamics\n        dynamics: {\n            forte: { glowPeak: 4.0, scalePeak: 1.3, duration: 300 },\n            piano: { glowPeak: 2.0, scalePeak: 1.05, duration: 500 }\n        }\n    },\n    \n    initialize: function(particle, motion) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        particle.gestureData.flash = {\n            originalOpacity: particle.opacity,\n            originalSize: particle.size,\n            initialized: true\n        };\n    },\n    \n    /**\n     * Apply flash effect to particle\n     * Creates bright burst with size expansion and outward motion\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        if (!particle.gestureData?.flash?.initialized) {\n            this.initialize(particle, motion);\n        }\n        \n        const data = particle.gestureData.flash;\n        const config = { ...this.config, ...motion };\n        const strength = config.strength || 1.0;\n        \n        // Calculate flash intensity curve\n        let flashIntensity;\n        if (progress < 0.3) {\n            // Quick rise to peak brightness\n            flashIntensity = (progress / 0.3) * config.glowPeak;\n        } else {\n            // Gradual fade from peak\n            flashIntensity = config.glowPeak * (1 - (progress - 0.3) / 0.7);\n        }\n        \n        // Apply brightness and size changes\n        particle.opacity = Math.min(1, data.originalOpacity * (1 + flashIntensity * strength));\n        particle.size = data.originalSize * (1 + (config.scalePeak - 1) * flashIntensity * strength * 0.1);\n        \n        // Initial burst motion - particles briefly explode outward\n        if (progress < 0.2) {\n            const burstStrength = (1 - progress / 0.2) * strength;\n            const angle = Math.atan2(particle.y - centerY, particle.x - centerX);\n            particle.vx += Math.cos(angle) * burstStrength * 2 * dt;\n            particle.vy += Math.sin(angle) * burstStrength * 2 * dt;\n        }\n\n        // Apply velocity decay for natural deceleration\n        particle.vx *= (1 - config.particleMotion.decay * 0.1);\n        particle.vy *= (1 - config.particleMotion.decay * 0.1);\n    },\n    \n    cleanup: function(particle) {\n        if (particle.gestureData?.flash) {\n            particle.opacity = particle.gestureData.flash.originalOpacity;\n            particle.size = particle.gestureData.flash.originalSize;\n            delete particle.gestureData.flash;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Glow Gesture\n *  └─○═╝\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Glow gesture - based on pulse but focused on luminosity without movement\n * @author Emotive Engine Team\n * @module gestures/effects/glow\n *\n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE\n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Creates a pure luminous glow effect without particle movement.\n * ║ This is a BLENDING gesture that only modifies brightness/glow.\n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * VISUAL DIAGRAM:\n *      Dim            Bright           Dim\n *    · · · ·         ✨ ✨ ✨         · · · ·\n *    · · ⭐ · ·   →  ✨ 🌟 ✨    →   · · ⭐ · ·\n *    · · · ·         ✨ ✨ ✨         · · · ·\n *\n * USED BY:\n * - Emphasis effects\n * - Magic/mystical states\n * - Energy charging\n */\n\n/**\n * Glow gesture configuration and implementation\n */\nexport default {\n    name: 'glow',\n    emoji: '✨',\n    type: 'blending', // Adds to existing motion\n    description: 'Pure luminous glow without movement',\n\n    // Default configuration\n    config: {\n        duration: 1500,      // Animation duration (longer than pulse for sustained glow)\n        amplitude: 0,        // NO expansion distance (removed from pulse)\n        frequency: 1,        // Number of glow pulses\n        holdPeak: 0.3,       // Peak glow hold time (longer for sustained effect)\n        easing: 'sine',      // Animation curve type\n        scaleAmount: 0.1,    // Very subtle orb scale variation (reduced from pulse)\n        glowAmount: 0.8,     // Strong orb glow intensity change (increased from pulse)\n        strength: 0,         // NO particle motion strength (removed from pulse)\n        direction: 'none',   // No movement direction\n        // Particle motion configuration for AnimationController\n        particleMotion: {\n            type: 'glow',\n            strength: 0,     // No particle movement\n            direction: 'none',\n            frequency: 1\n        }\n    },\n\n    // Rhythm configuration - glow pulses with musical phrases\n    rhythm: {\n        enabled: true,\n        syncMode: 'phrase',  // Glow on musical phrases\n\n        // Glow strength syncs to dynamics\n        amplitudeSync: {\n            onBeat: 2.0,      // Strong glow on beat\n            offBeat: 1.2,     // Sustained glow off beat\n            curve: 'smooth'   // Smooth transitions\n        },\n\n        // Frequency locks to phrase length\n        frequencySync: {\n            mode: 'phrase',\n            subdivision: 'bar'\n        },\n\n        // Duration in musical time\n        durationSync: {\n            mode: 'bars',\n            bars: 2           // Glow over 2 bars\n        },\n\n        // Stronger glow on accents\n        accentResponse: {\n            enabled: true,\n            multiplier: 2.5   // Bright glow on accent\n        },\n\n        // Pattern-specific glow styles\n        patternOverrides: {\n            'ambient': {\n                // Ethereal sustained glow\n                amplitudeSync: { onBeat: 2.5, offBeat: 1.8 },\n                durationSync: { bars: 4 }\n            },\n            'electronic': {\n                // Pulsing neon glow\n                amplitudeSync: { onBeat: 3.0, offBeat: 0.5, curve: 'sharp' },\n                frequencySync: { subdivision: 'quarter' }\n            }\n        }\n    },\n\n    /**\n     * Initialize gesture data for a particle\n     * @param {Particle} particle - The particle to initialize\n     * @param {Object} motion - Gesture motion configuration\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    initialize: function(particle, motion, centerX, centerY) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n\n        // Store initial state (no position data needed for glow)\n        particle.gestureData.glow = {\n            startOpacity: particle.opacity,\n            startGlow: particle.glowSizeMultiplier || 0,\n            initialized: true\n        };\n    },\n\n    /**\n     * Apply glow effect to particle (no motion, just luminosity)\n     * @param {Particle} particle - The particle to animate\n     * @param {number} progress - Gesture progress (0-1)\n     * @param {Object} motion - Gesture configuration\n     * @param {number} dt - Delta time\n     * @param {number} centerX - Orb center X\n     * @param {number} centerY - Orb center Y\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize on first frame\n        if (!particle.gestureData?.glow?.initialized) {\n            this.initialize(particle, motion, centerX, centerY);\n        }\n\n        const data = particle.gestureData.glow;\n        const config = { ...this.config, ...motion };\n\n        // Apply easing\n        const easeProgress = this.easeInOutSine(progress);\n\n        // Calculate glow pulse with peak hold\n        let glowValue;\n        let frequency = config.frequency;\n        let glowAmount = config.glowAmount;\n\n        // Apply rhythm modulation if present\n        if (motion.rhythmModulation) {\n            glowAmount *= (motion.rhythmModulation.amplitudeMultiplier || 1);\n            glowAmount *= (motion.rhythmModulation.accentMultiplier || 1);\n            if (motion.rhythmModulation.frequencyMultiplier) {\n                frequency *= motion.rhythmModulation.frequencyMultiplier;\n            }\n        }\n\n        const rawPulse = (easeProgress * frequency * 2) % 2;\n\n        if (config.holdPeak > 0 && rawPulse > (1 - config.holdPeak) && rawPulse < (1 + config.holdPeak)) {\n            // Hold at peak glow\n            glowValue = 1;\n        } else {\n            // Normal sine wave for glow\n            glowValue = Math.sin(easeProgress * Math.PI * 2 * frequency);\n        }\n\n        // NO PARTICLE MOVEMENT - just glow effects\n        // Unlike pulse, we don't calculate target positions or apply velocity\n\n        // Apply glow fade effect at the end\n        let glowMultiplier = 1;\n        if (progress > 0.9) {\n            const fadeFactor = 1 - ((progress - 0.9) * 10);\n            glowMultiplier = (0.5 + fadeFactor * 0.5);\n        }\n\n        // Modify particle glow properties (if your system supports it)\n        // This is where the actual glow effect happens\n        // Note: The actual visual implementation depends on your renderer\n        // Set glow intensity directly, don't multiply to prevent accumulation\n        particle.glowIntensity = 1 + glowValue * glowAmount * glowMultiplier;\n    },\n\n    /**\n     * Clean up gesture data when complete\n     * @param {Particle} particle - The particle to clean up\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.glow) {\n            // Reset any glow properties\n            particle.glowIntensity = 1;\n            delete particle.gestureData.glow;\n        }\n    },\n\n    /**\n     * Sine easing for smooth glow transitions\n     * @param {number} t - Progress (0-1)\n     * @returns {number} Eased value\n     */\n    easeInOutSine: function(t) {\n        return -(Math.cos(Math.PI * t) - 1) / 2;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Peek Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Quick peek/hide motion for suspicious checking behavior\n * @author Emotive Engine Team\n * @module gestures/effects/peek\n * \n * GESTURE TYPE:\n * type: 'effect' - Visual effect without changing core position\n * \n * VISUAL EFFECT:\n * Particles quickly expand outward (peeking) then contract back (hiding),\n * like peeking around a corner or quickly checking surroundings.\n */\n\nexport default {\n    name: 'peek',\n    emoji: '👀',\n    type: 'effect',\n    description: 'Quick peek and hide motion',\n    \n    // Default configuration\n    config: {\n        peekDistance: 40,       // How far to peek out\n        peekSpeed: 0.15,        // Speed of peek motion\n        holdDuration: 200,      // How long to hold peek position (ms)\n        hideSpeed: 0.25,        // Speed of hiding (faster than peeking)\n        stagger: true,          // Stagger particle peeks\n        duration: 1500          // Total animation duration\n    },\n    \n    // Rhythm configuration - quick glimpse movements synchronized to rhythmic accents\n    rhythm: {\n        enabled: true,\n        syncMode: 'accent',  // Peek on rhythmic accents and syncopation\n        \n        // Peek distance responds to accent strength\n        distanceSync: {\n            onAccent: 60,         // Far peek on accents\n            offAccent: 25,        // Short peek off-accent\n            curve: 'quick'        // Sharp, sudden movement\n        },\n        \n        // Speed adapts to musical tempo\n        speedSync: {\n            mode: 'tempo',\n            fast: 0.25,           // Quick peeks for fast music\n            slow: 0.10,           // Slower peeks for slow music\n            hideMultiplier: 1.8   // Hide speed relative to peek speed\n        },\n        \n        // Duration matches rhythmic subdivisions\n        durationSync: {\n            mode: 'subdivision',\n            beats: 0.25,          // Quarter-beat peek duration\n            staggerBeats: 0.125,  // Eighth-beat stagger delay\n            sustain: false        // No sustain, quick action\n        },\n        \n        // Strong response to syncopated rhythms\n        syncopationResponse: {\n            enabled: true,\n            multiplier: 1.8,      // More dramatic peek on syncopation\n            type: 'distance'      // Affects peek distance\n        },\n        \n        // Style variations for different music types\n        patternOverrides: {\n            'funk': {\n                // Sharp, syncopated peeks\n                distanceSync: { onAccent: 70, offAccent: 35, curve: 'funky' },\n                syncopationResponse: { multiplier: 2.2 }\n            },\n            'latin': {\n                // Rhythmic, dance-like peeks\n                speedSync: { fast: 0.30, slow: 0.12 },\n                durationSync: { beats: 0.5, staggerBeats: 0.25 }\n            },\n            'breakbeat': {\n                // Erratic, complex peek patterns\n                distanceSync: { onAccent: 55, offAccent: 40 },\n                syncopationResponse: { multiplier: 2.5 }\n            },\n            'classical': {\n                // Subtle, expressive peeks\n                distanceSync: { onAccent: 45, offAccent: 20, curve: 'elegant' },\n                speedSync: { fast: 0.18, slow: 0.08 }\n            }\n        },\n        \n        // Musical dynamics\n        dynamics: {\n            forte: {\n                // Bold, assertive peeks\n                distanceSync: { \n                    onAccent: { multiplier: 1.6 },\n                    offAccent: { multiplier: 1.3 }\n                },\n                speedSync: { multiplier: 1.4 },\n                syncopationResponse: { multiplier: 2.8 }\n            },\n            piano: {\n                // Cautious, subtle peeks\n                distanceSync: { \n                    onAccent: { multiplier: 0.6 },\n                    offAccent: { multiplier: 0.4 }\n                },\n                speedSync: { multiplier: 0.7 },\n                syncopationResponse: { multiplier: 1.2 }\n            }\n        }\n    },\n    \n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        // Initialize peek data if needed\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        \n        if (!particle.gestureData.peek) {\n            const dx = particle.x - centerX;\n            const dy = particle.y - centerY;\n            const angle = Math.atan2(dy, dx);\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            \n            particle.gestureData.peek = {\n                originalX: particle.x,\n                originalY: particle.y,\n                peekAngle: angle,\n                originalDistance: distance,\n                staggerDelay: this.config.stagger ? Math.random() * 0.3 : 0,\n                phase: 'waiting',  // 'waiting', 'peeking', 'holding', 'hiding'\n                phaseTimer: 0,\n                peekOffset: { x: 0, y: 0 }\n            };\n        }\n        \n        const data = particle.gestureData.peek;\n        const config = this.config;\n        \n        // Adjust progress for stagger\n        const adjustedProgress = Math.max(0, Math.min(1, (progress - data.staggerDelay) / (1 - data.staggerDelay)));\n        \n        // Determine phase based on progress\n        if (adjustedProgress === 0) {\n            data.phase = 'waiting';\n        } else if (adjustedProgress < 0.3) {\n            data.phase = 'peeking';\n        } else if (adjustedProgress < 0.6) {\n            data.phase = 'holding';\n        } else if (adjustedProgress < 1) {\n            data.phase = 'hiding';\n        }\n        \n        // Calculate peek offset based on phase\n        let targetOffset = 0;\n        \n        switch (data.phase) {\n            case 'peeking':\n                // Smooth peek out\n                const peekProgress = adjustedProgress / 0.3;\n                targetOffset = this.easeOutCubic(peekProgress) * config.peekDistance;\n                break;\n                \n            case 'holding':\n                // Hold at peek position\n                targetOffset = config.peekDistance;\n                // Add slight tremor while holding\n                if (Math.random() < 0.1) {\n                    data.peekOffset.x += (Math.random() - 0.5) * 2;\n                    data.peekOffset.y += (Math.random() - 0.5) * 2;\n                }\n                break;\n                \n            case 'hiding':\n                // Quick hide back\n                const hideProgress = (adjustedProgress - 0.6) / 0.4;\n                targetOffset = (1 - this.easeInCubic(hideProgress)) * config.peekDistance;\n                break;\n        }\n        \n        // Apply the peek offset\n        if (data.phase !== 'waiting') {\n            const peekX = Math.cos(data.peekAngle) * targetOffset;\n            const peekY = Math.sin(data.peekAngle) * targetOffset;\n            \n            // Smooth transition to target position\n            data.peekOffset.x += (peekX - data.peekOffset.x) * config.peekSpeed;\n            data.peekOffset.y += (peekY - data.peekOffset.y) * config.peekSpeed;\n            \n            // Apply offset to particle\n            particle.x = data.originalX + data.peekOffset.x;\n            particle.y = data.originalY + data.peekOffset.y;\n        }\n        \n        // Add opacity effect - slightly fade during peek\n        if (particle.alpha !== undefined) {\n            if (data.phase === 'peeking' || data.phase === 'holding') {\n                particle.alpha = 0.7 + Math.random() * 0.3;  // Flickering visibility\n            } else {\n                particle.alpha = 1.0;\n            }\n        }\n    },\n    \n    // Easing functions\n    easeOutCubic: function(t) {\n        return 1 - Math.pow(1 - t, 3);\n    },\n    \n    easeInCubic: function(t) {\n        return t * t * t;\n    },\n    \n    cleanup: function(particle) {\n        if (particle.gestureData?.peek) {\n            // Restore original position\n            particle.x = particle.gestureData.peek.originalX;\n            particle.y = particle.gestureData.peek.originalY;\n            if (particle.alpha !== undefined) {\n                particle.alpha = 1.0;\n            }\n            delete particle.gestureData.peek;\n        }\n    }\n};","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE v4.0 - Gesture Registry\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Central registry for all gesture animations with plugin support\r\n * @author Emotive Engine Team\r\n * @version 4.0.0\r\n * @module gestures\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                                   PURPOSE                                         \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ Control center for all gestures with full plugin adapter integration.             \r\n * ║ • Three gesture types: blending (motions), override (transforms), effects        \r\n * ║ • Core gestures loaded synchronously at startup                                   \r\n * ║ • Plugin gestures registered dynamically via adapter                              \r\n * ║ • Value-agnostic configurations for easy tuning                                   \r\n * ║                                                                                    \r\n * ║ TO ADD A PLUGIN GESTURE:                                                          \r\n * ║ Use pluginAdapter.registerPluginGesture() from your plugin                        \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n */\r\n\r\nimport pluginAdapter from './plugin-adapter.js';\r\n\r\n// ┌─────────────────────────────────────────────────────────────────────────────────────\r\n// │ IMPORT MOTION GESTURES (Blending - add to existing motion)\r\n// └─────────────────────────────────────────────────────────────────────────────────────\r\nimport bounce from './motions/bounce.js';\r\nimport pulse from './motions/pulse.js';\r\nimport shake from './motions/shake.js';\r\nimport nod from './motions/nod.js';\r\nimport vibrate from './motions/vibrate.js';\r\nimport orbit from './motions/orbit.js';\r\nimport twitch from './motions/twitch.js';\r\nimport sway from './motions/sway.js';\r\nimport float from './motions/float.js';\r\nimport jitter from './motions/jitter.js';\r\n\r\n// ┌─────────────────────────────────────────────────────────────────────────────────────\r\n// │ IMPORT TRANSFORM GESTURES (Override - replace motion completely)\r\n// └─────────────────────────────────────────────────────────────────────────────────────\r\nimport spin from './transforms/spin.js';\r\nimport jump from './transforms/jump.js';\r\nimport morph from './transforms/morph.js';\r\nimport stretch from './transforms/stretch.js';\r\nimport tilt from './transforms/tilt.js';\r\nimport orbital from './transforms/orbital.js';\r\nimport hula from './transforms/hula.js';\r\nimport scan from './transforms/scan.js';\r\nimport twist from './transforms/twist.js';\r\n\r\n// ┌─────────────────────────────────────────────────────────────────────────────────────\r\n// │ IMPORT EFFECT GESTURES (Visual effects)\r\n// └─────────────────────────────────────────────────────────────────────────────────────\r\nimport wave from './effects/wave.js';\r\nimport drift from './effects/drift.js';\r\nimport flicker from './effects/flicker.js';\r\nimport burst from './effects/burst.js';\r\nimport directional from './effects/directional.js';\r\nimport settle from './effects/settle.js';\r\nimport fade from './effects/fade.js';\r\nimport hold from './effects/hold.js';\r\nimport breathe from './effects/breathe.js';\r\nimport expand from './effects/expand.js';\r\nimport contract from './effects/contract.js';\r\nimport flash from './effects/flash.js';\r\nimport glow from './effects/glow.js';\r\nimport peek from './effects/peek.js';\r\nimport runningman from './effects/runningman.js';\r\nimport charleston from './effects/charleston.js';\r\n\r\n// ┌─────────────────────────────────────────────────────────────────────────────────────\r\n// │ PLACEHOLDER GESTURES FOR NEW ANIMATIONS\r\n// └─────────────────────────────────────────────────────────────────────────────────────\r\n// These are handled by GestureAnimator but need registry entries for rhythm system\r\nconst createPlaceholderGesture = (name, emoji = '✨') => ({\r\n    name,\r\n    emoji,\r\n    type: 'blending', // Use blending type so they don't interfere\r\n    description: `${name} animation`,\r\n    config: {\r\n        duration: 1000, // Legacy fallback only\r\n        musicalDuration: { musical: true, beats: 2 } // Default: 2 beats\r\n    },\r\n    rhythm: {\r\n        enabled: true,\r\n        syncMode: 'beat',\r\n        timingSync: 'nextBeat',\r\n        durationSync: { mode: 'beats', beats: 2 }, // Musical duration\r\n        interruptible: true,\r\n        priority: 3,\r\n        blendable: true,\r\n        crossfadePoint: 'anyBeat',\r\n        maxQueue: 3\r\n    },\r\n    apply: (particle, progress, params) => {\r\n        // No-op - handled by GestureAnimator\r\n        return false;\r\n    },\r\n    blend: (particle, progress, params) => {\r\n        // No-op - handled by GestureAnimator\r\n        return false;\r\n    }\r\n});\r\n\r\nconst sparkle = createPlaceholderGesture('sparkle', '✨');\r\n\r\n// Shimmer gesture - makes particles shimmer with wave effect\r\nconst shimmer = {\r\n    name: 'shimmer',\r\n    emoji: '🌟',\r\n    type: 'particle',  // Particle type to affect particle behavior\r\n    description: 'Shimmer effect with sparkling particles',\r\n    config: {\r\n        duration: 2000,  // Legacy fallback\r\n        musicalDuration: { musical: true, bars: 1 }, // 1 bar (4 beats)\r\n        particleMotion: 'radiant'  // Use radiant behavior for shimmering effect\r\n    },\r\n    rhythm: {\r\n        enabled: true,\r\n        syncType: 'beat',\r\n        durationSync: { mode: 'bars', bars: 1 }, // Musical: 1 bar\r\n        intensity: 0.8\r\n    },\r\n    override: (particle, progress, params) => {\r\n        // Shimmer makes particles sparkle with wave effect\r\n        particle.shimmerEffect = true;\r\n        particle.shimmerProgress = progress;\r\n        return true;\r\n    },\r\n    blend: (particle, progress, params) => {\r\n        // Blend with other gestures\r\n        return false;\r\n    }\r\n};\r\nconst wiggle = createPlaceholderGesture('wiggle', '〰️');\r\nconst groove = createPlaceholderGesture('groove', '🎵');\r\nconst point = createPlaceholderGesture('point', '👉');\r\nconst lean = createPlaceholderGesture('lean', '↗️');\r\nconst reach = createPlaceholderGesture('reach', '🤚');\r\nconst headBob = createPlaceholderGesture('headBob', '🎧');\r\n\r\n// Rain gesture - applies doppler effect to particles\r\nconst rain = {\r\n    name: 'rain',\r\n    emoji: '🌧️',\r\n    type: 'particle',  // Particle type to affect particle behavior\r\n    description: 'Rain effect with falling particles',\r\n    config: {\r\n        duration: 3000,  // Legacy fallback\r\n        musicalDuration: { musical: true, bars: 2 }, // 2 bars (8 beats)\r\n        particleMotion: 'falling'  // Use the falling particle behavior\r\n    },\r\n    rhythm: {\r\n        enabled: true,\r\n        syncType: 'off-beat',\r\n        durationSync: { mode: 'bars', bars: 2 }, // Musical: 2 bars\r\n        intensity: 0.8\r\n    },\r\n    apply: (particle, progress, params) => {\r\n        // The doppler behavior is handled by the particle system\r\n        // This just marks particles as being affected by rain\r\n        particle.rainEffect = true;\r\n        particle.rainProgress = progress;\r\n        return true;\r\n    },\r\n    blend: (particle, progress, params) => {\r\n        // Blend with other gestures\r\n        return false;\r\n    }\r\n};\r\n\r\n// ┌─────────────────────────────────────────────────────────────────────────────────────\r\n// │ GESTURE COLLECTIONS\r\n// └─────────────────────────────────────────────────────────────────────────────────────\r\nconst MOTION_GESTURES = [\r\n    bounce,\r\n    pulse,\r\n    shake,\r\n    nod,\r\n    vibrate,\r\n    orbit,\r\n    twitch,\r\n    sway,\r\n    float,\r\n    jitter,\r\n    // New gestures\r\n    sparkle,\r\n    shimmer,\r\n    wiggle,\r\n    groove,\r\n    point,\r\n    lean,\r\n    reach,\r\n    headBob,\r\n    rain\r\n];\r\n\r\nconst TRANSFORM_GESTURES = [\r\n    spin,\r\n    jump,\r\n    morph,\r\n    stretch,\r\n    tilt,\r\n    orbital,\r\n    hula,\r\n    scan,\r\n    twist\r\n];\r\n\r\nconst EFFECT_GESTURES = [\r\n    wave,\r\n    drift,\r\n    flicker,\r\n    burst,\r\n    directional,\r\n    settle,\r\n    fade,\r\n    hold,\r\n    breathe,\r\n    expand,\r\n    contract,\r\n    flash,\r\n    glow,\r\n    peek,\r\n    runningman,\r\n    charleston\r\n];\r\n\r\n// ┌─────────────────────────────────────────────────────────────────────────────────────\r\n// │ GESTURE REGISTRY - Fast lookup by name\r\n// └─────────────────────────────────────────────────────────────────────────────────────\r\nexport const GESTURE_REGISTRY = {};\r\n\r\n// Build the registry from all gesture arrays - SYNCHRONOUSLY\r\n[...MOTION_GESTURES, ...TRANSFORM_GESTURES, ...EFFECT_GESTURES].forEach(gesture => {\r\n    GESTURE_REGISTRY[gesture.name] = gesture;\r\n});\r\n\r\n// ┌─────────────────────────────────────────────────────────────────────────────────────\r\n// │ GESTURE TYPE MAPPING - Quick type lookup\r\n// └─────────────────────────────────────────────────────────────────────────────────────\r\nexport const GESTURE_TYPES = {\r\n    blending: MOTION_GESTURES.map(g => g.name),\r\n    override: TRANSFORM_GESTURES.map(g => g.name),\r\n    effect: EFFECT_GESTURES.map(g => g.name)\r\n};\r\n\r\n/**\r\n * Get a gesture by name (checks both core and plugin gestures)\r\n * @param {string} name - Gesture name (e.g., 'bounce', 'spin')\r\n * @returns {Object|null} Gesture object or null if not found\r\n */\r\nexport function getGesture(name) {\r\n    // Check core gestures first\r\n    if (GESTURE_REGISTRY[name]) {\r\n        return GESTURE_REGISTRY[name];\r\n    }\r\n    \r\n    // Check plugin gestures\r\n    const pluginGesture = pluginAdapter.getPluginGesture(name);\r\n    if (pluginGesture) {\r\n        return pluginGesture;\r\n    }\r\n    \r\n    return null;\r\n}\r\n\r\n/**\r\n * Check if a gesture is a blending type\r\n * @param {string} name - Gesture name\r\n * @returns {boolean} True if gesture blends with existing motion\r\n */\r\nexport function isBlendingGesture(name) {\r\n    const gesture = getGesture(name);\r\n    return gesture ? gesture.type === 'blending' : false;\r\n}\r\n\r\n/**\r\n * Check if a gesture is an override type\r\n * @param {string} name - Gesture name\r\n * @returns {boolean} True if gesture overrides existing motion\r\n */\r\nexport function isOverrideGesture(name) {\r\n    const gesture = getGesture(name);\r\n    return gesture ? gesture.type === 'override' : false;\r\n}\r\n\r\n/**\r\n * Apply a gesture to a particle\r\n * @param {Particle} particle - The particle to animate\r\n * @param {string} gestureName - Name of the gesture\r\n * @param {number} progress - Animation progress (0-1)\r\n * @param {Object} motion - Motion configuration\r\n * @param {number} dt - Delta time\r\n * @param {number} centerX - Orb center X\r\n * @param {number} centerY - Orb center Y\r\n * @returns {boolean} True if gesture was applied\r\n */\r\nexport function applyGesture(particle, gestureName, progress, motion, dt, centerX, centerY) {\r\n    const gesture = getGesture(gestureName);\r\n    \r\n    if (!gesture) {\r\n        return false;\r\n    }\r\n    \r\n    // Apply the gesture\r\n    if (gesture.apply) {\r\n        gesture.apply(particle, progress, motion, dt, centerX, centerY);\r\n    }\r\n    \r\n    // Clean up if complete\r\n    if (progress >= 1 && gesture.cleanup) {\r\n        gesture.cleanup(particle);\r\n    }\r\n    \r\n    return true;\r\n}\r\n\r\n/**\r\n * Get list of all available gestures (core and plugin)\r\n * @returns {Array} Array of gesture info objects\r\n */\r\nexport function listGestures() {\r\n    const allGestures = [];\r\n    \r\n    // Add core gestures\r\n    Object.values(GESTURE_REGISTRY).forEach(gesture => {\r\n        allGestures.push({\r\n            name: gesture.name,\r\n            emoji: gesture.emoji || '🎭',\r\n            type: gesture.type,\r\n            description: gesture.description || 'No description',\r\n            source: 'core'\r\n        });\r\n    });\r\n    \r\n    // Add plugin gestures\r\n    const pluginGestureNames = pluginAdapter.getAllPluginGestures();\r\n    pluginGestureNames.forEach(name => {\r\n        const gesture = pluginAdapter.getPluginGesture(name);\r\n        allGestures.push({\r\n            name: gesture.name,\r\n            emoji: gesture.emoji || '🔌',\r\n            type: gesture.type,\r\n            description: gesture.description || 'Plugin gesture',\r\n            source: 'plugin'\r\n        });\r\n    });\r\n    \r\n    return allGestures;\r\n}\r\n\r\n// Debug utilities can be imported directly if needed\r\n// Export them instead of polluting global scope\r\n\r\n// Export plugin adapter for external use\r\nexport { pluginAdapter };\r\n\r\n// Export everything\r\nexport default {\r\n    GESTURE_REGISTRY,\r\n    GESTURE_TYPES,\r\n    getGesture,\r\n    isBlendingGesture,\r\n    isOverrideGesture,\r\n    applyGesture,\r\n    listGestures,\r\n    pluginAdapter\r\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Fade Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Fade gesture - opacity fade effect\n * @author Emotive Engine Team\n * @module gestures/effects/fade\n */\n\nexport default {\n    name: 'fade',\n    emoji: '👻',\n    type: 'blending',\n    description: 'Fade particle opacity',\n    \n    // Default configuration\n    config: {\n        fadeIn: false,      // Enable fade in effect\n        fadeOut: true,      // Enable fade out effect\n        minOpacity: 0,      // Minimum opacity level\n        maxOpacity: 1       // Maximum opacity level\n    },\n    \n    // Rhythm configuration - fades sync to musical dynamics\n    rhythm: {\n        enabled: true,\n        syncMode: 'dynamic',  // Fade with volume/intensity changes\n        \n        // Opacity modulation with beat\n        opacitySync: {\n            onBeat: 0.9,              // Nearly visible on beat\n            offBeat: 0.3,             // Ghostly between beats\n            subdivision: 'eighth',     // Check every 8th note\n            curve: 'exponential'      // Sharp opacity changes\n        },\n        \n        // Fade timing with musical structure\n        fadePhaseSync: {\n            verse: { fadeIn: true, fadeOut: false },    // Build in verse\n            chorus: { fadeIn: false, fadeOut: false },  // Full visibility\n            bridge: { fadeIn: true, fadeOut: true },    // In and out\n            outro: { fadeIn: false, fadeOut: true }     // Fade to end\n        },\n        \n        // Pulse with rhythm\n        pulseSync: {\n            enabled: true,\n            frequency: 'quarter',     // Pulse every quarter note\n            intensity: 0.2,           // Pulse depth\n            onAccent: 0.4            // Deeper pulse on accents\n        },\n        \n        // Musical dynamics\n        dynamics: {\n            forte: { minOpacity: 0.5, maxOpacity: 1.0 },    // More visible when loud\n            piano: { minOpacity: 0.0, maxOpacity: 0.4 }     // Ghostly when quiet\n        }\n    },\n    \n    /**\n     * Initialize fade data\n     * Stores particle's original opacity\n     */\n    initialize: function(particle) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        particle.gestureData.fade = {\n            baseOpacity: particle.opacity || particle.life || 1\n        };\n    },\n    \n    /**\n     * Apply fade effect to particle\n     * Smoothly transitions opacity based on configuration\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        if (!particle.gestureData?.fade) {\n            this.initialize(particle);\n        }\n        \n        const data = particle.gestureData.fade;\n        const config = { ...this.config, ...motion };\n        \n        let targetOpacity;\n        if (config.fadeIn && !config.fadeOut) {\n            // Fade in only - opacity increases over time\n            targetOpacity = config.minOpacity + (config.maxOpacity - config.minOpacity) * progress;\n        } else if (config.fadeOut && !config.fadeIn) {\n            // Fade out only - opacity decreases over time\n            targetOpacity = config.maxOpacity - (config.maxOpacity - config.minOpacity) * progress;\n        } else {\n            // Fade in then out - peak opacity at midpoint\n            if (progress < 0.5) {\n                targetOpacity = config.minOpacity + (config.maxOpacity - config.minOpacity) * (progress * 2);\n            } else {\n                targetOpacity = config.maxOpacity - (config.maxOpacity - config.minOpacity) * ((progress - 0.5) * 2);\n            }\n        }\n        \n        // Apply calculated opacity\n        particle.opacity = data.baseOpacity * targetOpacity;\n        // Also update life property for particles that use it\n        if (particle.life !== undefined) {\n            particle.life = particle.opacity;\n        }\n    },\n    \n    /**\n     * Clean up fade effect\n     * Restores original opacity values\n     */\n    cleanup: function(particle) {\n        if (particle.gestureData?.fade) {\n            particle.opacity = particle.gestureData.fade.baseOpacity;\n            if (particle.life !== undefined) {\n                particle.life = particle.opacity;\n            }\n            delete particle.gestureData.fade;\n        }\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Hold Gesture\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Hold gesture - freeze particles in place\n * @author Emotive Engine Team\n * @module gestures/effects/hold\n */\n\nexport default {\n    name: 'hold',\n    emoji: '⏸️',\n    type: 'override',\n    description: 'Hold particles in current position',\n    \n    // Default configuration\n    config: {\n        holdStrength: 0.95,  // Position retention strength\n        allowDrift: false    // Enable slight movement\n    },\n    \n    // Rhythm configuration - synchronized pause effects following musical structure\n    rhythm: {\n        enabled: true,\n        syncMode: 'rest',    // Hold particles during musical rests and pauses\n        \n        // Hold strength responds to musical silence\n        holdSync: {\n            onRest: 0.98,         // Very strong hold during rests\n            onSound: 0.80,        // Looser hold when music plays\n            curve: 'immediate'    // Instant response to silence/sound\n        },\n        \n        // Duration matches rest length\n        durationSync: {\n            mode: 'rests',\n            minBeats: 0.5,        // Minimum half-beat hold\n            maxBeats: 8,          // Maximum 8-beat hold\n            sustain: true         // Maintain hold through entire rest\n        },\n        \n        // Response to fermatas and caesuras\n        pauseResponse: {\n            enabled: true,\n            multiplier: 1.5,      // Stronger hold during marked pauses\n            type: 'strength'      // Affects hold strength\n        },\n        \n        // Style variations for different music types\n        patternOverrides: {\n            'classical': {\n                // Expressive holds for dramatic pauses\n                holdSync: { onRest: 0.99, onSound: 0.75, curve: 'dramatic' },\n                pauseResponse: { multiplier: 2.0 }\n            },\n            'minimal': {\n                // Extended, meditative holds\n                holdSync: { onRest: 0.95, onSound: 0.85 },\n                durationSync: { minBeats: 2, maxBeats: 16 }\n            },\n            'jazz': {\n                // Subtle holds that allow for swing\n                holdSync: { onRest: 0.90, onSound: 0.70 },\n                allowDrift: true  // Enable slight movement for swing feel\n            },\n            'electronic': {\n                // Precise, digital-style holds\n                holdSync: { onRest: 0.99, onSound: 0.60, curve: 'digital' },\n                pauseResponse: { multiplier: 1.2 }\n            }\n        },\n        \n        // Musical dynamics\n        dynamics: {\n            forte: {\n                // Strong, definitive holds\n                holdSync: { \n                    onRest: { multiplier: 1.02 },\n                    onSound: { multiplier: 0.9 }\n                },\n                pauseResponse: { multiplier: 2.2 }\n            },\n            piano: {\n                // Gentle, floating holds\n                holdSync: { \n                    onRest: { multiplier: 0.97 },\n                    onSound: { multiplier: 0.85 }\n                },\n                pauseResponse: { multiplier: 1.3 }\n            }\n        }\n    },\n    \n    initialize: function(particle) {\n        if (!particle.gestureData) {\n            particle.gestureData = {};\n        }\n        particle.gestureData.hold = {\n            holdX: particle.x,\n            holdY: particle.y,\n            originalVx: particle.vx,\n            originalVy: particle.vy\n        };\n    },\n    \n    /**\n     * Apply hold effect to particle\n     * Freezes or slows particle movement based on configuration\n     */\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\n        if (!particle.gestureData?.hold) {\n            this.initialize(particle);\n        }\n        \n        const data = particle.gestureData.hold;\n        const holdStrength = motion.holdStrength || this.config.holdStrength;\n        \n        if (motion.allowDrift) {\n            // Allow slight drift with velocity damping\n            particle.vx *= holdStrength;\n            particle.vy *= holdStrength;\n        } else {\n            // Hard hold - lock to position\n            particle.x += (data.holdX - particle.x) * (1 - holdStrength);\n            particle.y += (data.holdY - particle.y) * (1 - holdStrength);\n            particle.vx = 0;\n            particle.vy = 0;\n        }\n        \n        // Gradually restore velocity near end\n        if (progress > 0.9) {\n            const restoreFactor = (progress - 0.9) * 10;\n            particle.vx = particle.vx * (1 - restoreFactor) + data.originalVx * restoreFactor;\n            particle.vy = particle.vy * (1 - restoreFactor) + data.originalVy * restoreFactor;\n        }\n    },\n    \n    cleanup: function(particle) {\n        if (particle.gestureData?.hold) {\n            const data = particle.gestureData.hold;\n            particle.vx = data.originalVx;\n            particle.vy = data.originalVy;\n            delete particle.gestureData.hold;\n        }\n    }\n};","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Running Man Gesture\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Running Man gesture - hip-hop shuffle dance move\r\n * @author Emotive Engine Team\r\n * @module gestures/effects/runningman\r\n */\r\n\r\nexport default {\r\n    name: 'runningman',\r\n    emoji: '🏃',\r\n    type: 'effect',\r\n    description: 'Hip-hop running man shuffle',\r\n    \r\n    // Default configuration\r\n    config: {\r\n        duration: 2000,        // Animation duration\r\n        slideDistance: 30,     // Horizontal slide distance\r\n        stepHeight: 15,        // Vertical step height\r\n        speed: 1.2,            // Animation speed multiplier\r\n        strength: 0.8,         // Overall effect intensity\r\n        // Particle motion configuration\r\n        particleMotion: {\r\n            type: 'runningman',\r\n            strength: 0.7\r\n        }\r\n    },\r\n    \r\n    // Rhythm configuration - synchronized to beat\r\n    rhythm: {\r\n        enabled: true,\r\n        syncToBeat: true,      // Snap to beat grid\r\n        beatMultiplier: 1,     // Steps per beat\r\n        accentBeats: [1, 3]    // Emphasized steps\r\n    },\r\n    \r\n    /**\r\n     * Apply running man motion - handled by GestureAnimator\r\n     * This is a placeholder for the gesture system\r\n     */\r\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\r\n        // Motion is handled by GestureAnimator.applyRunningMan()\r\n        return false;\r\n    },\r\n    \r\n    /**\r\n     * Blend with existing motion\r\n     */\r\n    blend: function(particle, progress, motion) {\r\n        // Allow blending with other gestures\r\n        return false;\r\n    }\r\n}","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Charleston Gesture\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Charleston gesture - classic hip-hop shuffle with modern twist\r\n * @author Emotive Engine Team\r\n * @module gestures/effects/charleston\r\n */\r\n\r\nexport default {\r\n    name: 'charleston',\r\n    emoji: '🕺',\r\n    type: 'effect',\r\n    description: 'Hip-hop Charleston shuffle with crisscross',\r\n    \r\n    // Default configuration\r\n    config: {\r\n        duration: 2500,        // Animation duration\r\n        kickDistance: 35,      // Kick extension distance\r\n        swivelRange: 40,       // Hip swivel range\r\n        bounceHeight: 12,      // Vertical bounce\r\n        strength: 0.9,         // Overall effect intensity\r\n        // Particle motion configuration\r\n        particleMotion: {\r\n            type: 'charleston',\r\n            strength: 0.8\r\n        }\r\n    },\r\n    \r\n    // Rhythm configuration - tight sync with beat\r\n    rhythm: {\r\n        enabled: true,\r\n        syncToBeat: true,      // Lock to beat grid\r\n        beatMultiplier: 2,     // Double-time feel\r\n        accentBeats: [1, 2.5, 3, 4.5]  // Syncopated accents\r\n    },\r\n    \r\n    /**\r\n     * Apply charleston motion - handled by GestureAnimator\r\n     * This is a placeholder for the gesture system\r\n     */\r\n    apply: function(particle, progress, motion, dt, centerX, centerY) {\r\n        // Motion is handled by GestureAnimator.applyCharleston()\r\n        return false;\r\n    },\r\n    \r\n    /**\r\n     * Blend with existing motion\r\n     */\r\n    blend: function(particle, progress, motion) {\r\n        // Allow blending with other gestures\r\n        return false;\r\n    }\r\n}","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Rhythm Core\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n * \r\n * @fileoverview Core rhythm timing engine for musical synchronization\r\n * @author Emotive Engine Team\r\n * @module core/rhythm\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ CONCEPT                                                                           \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ Central timing engine that provides musical time references to all subsystems.    \r\n * ║ Does NOT dictate what animations do - only provides timing information.           \r\n * ║ Each subsystem maintains its own rhythm configuration in its files.              \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n * \r\n * ARCHITECTURE:\r\n * • Provides beat events and musical time references\r\n * • Supports multiple time signatures and tempo changes\r\n * • Enables audio synchronization from external sources\r\n * • Each gesture/emotion/behavior defines its own rhythm response\r\n * \r\n * ┌──────────────────────────────────────────────────────────────────────────────────┐\r\n * │  TIMING FLOW                                                                      │\r\n * │                                                                                   │\r\n * │  Audio Input ──┐                                                                 │\r\n * │                ↓                                                                  │\r\n * │  [Rhythm Engine] ← Internal Clock                                                │\r\n * │        ↓                                                                          │\r\n * │   Beat Events → Subsystems (each with own rhythm config)                        │\r\n * │                                                                                   │\r\n * └──────────────────────────────────────────────────────────────────────────────────┘\r\n */\r\n\r\nclass RhythmEngine {\r\n    constructor() {\r\n        // Core timing properties\r\n        this.bpm = 120;                    // Default BPM (beats per minute)\r\n        this.timeSignature = [4, 4];       // Default 4/4 time\r\n        this.isPlaying = false;            // Whether rhythm is active\r\n        \r\n        // Musical time tracking\r\n        this.startTime = 0;                // When rhythm started\r\n        this.currentBeat = 0;              // Current beat number\r\n        this.currentBar = 0;               // Current bar/measure number\r\n        this.beatProgress = 0;             // Progress within current beat (0-1)\r\n        this.barProgress = 0;              // Progress within current bar (0-1)\r\n        \r\n        // Timing calculations\r\n        this.beatDuration = 60000 / this.bpm;  // Milliseconds per beat\r\n        this.barDuration = this.beatDuration * this.timeSignature[0];\r\n        this.lastBeatTime = 0;             // Timestamp of last beat\r\n        this.nextBeatTime = 0;             // Timestamp of next beat\r\n        \r\n        // Event listeners\r\n        this.listeners = new Map();        // Event type -> Set of callbacks\r\n        this.beatCallbacks = new Set();    // Callbacks for every beat\r\n        this.barCallbacks = new Set();     // Callbacks for every bar\r\n        \r\n        // Subdivisions for finer timing\r\n        this.subdivisions = {\r\n            sixteenth: 0,    // 16th note position\r\n            eighth: 0,       // 8th note position\r\n            triplet: 0,      // Triplet position\r\n            swing: 0         // Swing timing offset\r\n        };\r\n        \r\n        // Sync state\r\n        this.audioSync = null;             // External audio sync source\r\n        this.syncOffset = 0;               // Timing offset for sync\r\n        this.autoSync = false;             // Auto-detect tempo from audio\r\n        \r\n        // Musical dynamics\r\n        this.intensity = 1.0;              // Current musical intensity (0-1)\r\n        this.groove = 0;                   // Groove/swing amount (0-1)\r\n        this.humanize = 0.05;              // Timing humanization factor\r\n        \r\n        // Pattern tracking\r\n        this.patterns = new Map();         // Named rhythm patterns\r\n        this.currentPattern = null;        // Active rhythm pattern\r\n        \r\n        // Initialize default patterns\r\n        this.initializePatterns();\r\n    }\r\n    \r\n    /**\r\n     * Initialize default rhythm patterns\r\n     */\r\n    initializePatterns() {\r\n        // Basic patterns - these are just timing references\r\n        // Actual animations define their own responses to these patterns\r\n        \r\n        // Common time signatures\r\n        this.patterns.set('4/4', {\r\n            name: '4/4',\r\n            description: 'Common time - 4 beats per bar',\r\n            timeSignature: [4, 4],\r\n            groove: 0,\r\n            accents: [1, 0.5, 0.7, 0.5]  // Beat emphasis pattern\r\n        });\r\n        \r\n        this.patterns.set('straight', {\r\n            name: 'straight',\r\n            description: 'Straight, even timing',\r\n            groove: 0,\r\n            accents: [1, 0.5, 0.7, 0.5]  // Beat emphasis pattern\r\n        });\r\n        \r\n        this.patterns.set('swing', {\r\n            name: 'swing',\r\n            description: 'Swing/shuffle timing',\r\n            groove: 0.67,  // 2:1 swing ratio\r\n            accents: [1, 0.3, 0.8, 0.3]\r\n        });\r\n        \r\n        this.patterns.set('3/4', {\r\n            name: '3/4',\r\n            description: 'Waltz time - 3 beats per bar',\r\n            timeSignature: [3, 4],\r\n            accents: [1, 0.5, 0.5]\r\n        });\r\n        \r\n        this.patterns.set('waltz', {\r\n            name: 'waltz',\r\n            description: '3/4 waltz timing',\r\n            timeSignature: [3, 4],\r\n            accents: [1, 0.5, 0.5]\r\n        });\r\n        \r\n        this.patterns.set('6/8', {\r\n            name: '6/8',\r\n            description: 'Compound duple time',\r\n            timeSignature: [6, 8],\r\n            accents: [1, 0.3, 0.3, 0.7, 0.3, 0.3]\r\n        });\r\n        \r\n        this.patterns.set('5/4', {\r\n            name: '5/4',\r\n            description: 'Complex meter - 5 beats per bar',\r\n            timeSignature: [5, 4],\r\n            accents: [1, 0.5, 0.6, 0.5, 0.7]\r\n        });\r\n        \r\n        this.patterns.set('7/8', {\r\n            name: '7/8',\r\n            description: 'Irregular meter',\r\n            timeSignature: [7, 8],\r\n            accents: [1, 0.5, 0.5, 0.7, 0.5, 0.5, 0.6]\r\n        });\r\n        \r\n        this.patterns.set('dubstep', {\r\n            name: 'dubstep',\r\n            description: 'Dubstep half-time feel',\r\n            accents: [0.2, 0.2, 1, 0.2],  // Heavy on beat 3\r\n            subdivisions: { wobble: true }\r\n        });\r\n        \r\n        this.patterns.set('breakbeat', {\r\n            name: 'breakbeat',\r\n            description: 'Broken beat pattern',\r\n            accents: [1, 0.2, 0.7, 0.9, 0.2, 0.8, 0.4, 0.2]\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Start the rhythm engine\r\n     */\r\n    start() {\r\n        if (this.isPlaying) return;\r\n\r\n        this.isPlaying = true;\r\n        this.isRunning = true; // Add explicit running flag\r\n        this.startTime = performance.now();\r\n        this.lastBeatTime = this.startTime;\r\n        this.nextBeatTime = this.startTime + this.beatDuration;\r\n        this.currentBeat = 0;\r\n        this.currentBar = 0;\r\n\r\n        // Emit start event\r\n        this.emit('start', {\r\n            bpm: this.bpm,\r\n            timeSignature: this.timeSignature,\r\n            pattern: this.currentPattern\r\n        });\r\n\r\n        // Start update loop\r\n        this.update();\r\n    }\r\n    \r\n    /**\r\n     * Stop the rhythm engine\r\n     */\r\n    stop() {\r\n        if (!this.isPlaying) return;\r\n        \r\n        this.isPlaying = false;\r\n        this.emit('stop', {\r\n            totalBeats: this.currentBeat,\r\n            totalBars: this.currentBar\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Main update loop\r\n     */\r\n    update() {\r\n        if (!this.isPlaying) return;\r\n        \r\n        const now = performance.now();\r\n        const elapsed = now - this.startTime;\r\n        \r\n        // Calculate musical time positions\r\n        const beatsSinceStart = elapsed / this.beatDuration;\r\n        const newBeat = Math.floor(beatsSinceStart);\r\n        this.beatProgress = beatsSinceStart % 1;\r\n        \r\n        // Check for beat change\r\n        if (newBeat > this.currentBeat) {\r\n            this.onBeat(newBeat);\r\n        }\r\n        \r\n        // Calculate bar position\r\n        const newBar = Math.floor(newBeat / this.timeSignature[0]);\r\n        if (newBar > this.currentBar) {\r\n            this.onBar(newBar);\r\n        }\r\n        \r\n        this.currentBeat = newBeat;\r\n        this.currentBar = newBar;\r\n        this.barProgress = (newBeat % this.timeSignature[0]) / this.timeSignature[0];\r\n        \r\n        // Calculate subdivisions\r\n        this.updateSubdivisions();\r\n        \r\n        // Emit continuous update\r\n        this.emit('update', this.getTimeInfo());\r\n        \r\n        // Continue loop only if still playing\r\n        if (this.isPlaying) {\r\n            requestAnimationFrame(() => this.update());\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handle beat event\r\n     */\r\n    onBeat(beatNumber) {\r\n        const beatInBar = beatNumber % this.timeSignature[0];\r\n        const accent = this.getAccent(beatInBar);\r\n        \r\n        // Add humanization\r\n        const humanTiming = this.humanize * (Math.random() - 0.5) * this.beatDuration;\r\n        \r\n        const beatInfo = {\r\n            beat: beatNumber,\r\n            beatInBar: beatInBar,\r\n            bar: this.currentBar,\r\n            accent: accent,\r\n            intensity: this.intensity * accent,\r\n            humanTiming: humanTiming,\r\n            timestamp: performance.now()\r\n        };\r\n        \r\n        // Emit beat event\r\n        this.emit('beat', beatInfo);\r\n        \r\n        // Call beat callbacks\r\n        this.beatCallbacks.forEach(callback => callback(beatInfo));\r\n        \r\n        // Update timing\r\n        this.lastBeatTime = performance.now();\r\n        this.nextBeatTime = this.lastBeatTime + this.beatDuration;\r\n    }\r\n    \r\n    /**\r\n     * Handle bar event\r\n     */\r\n    onBar(barNumber) {\r\n        const barInfo = {\r\n            bar: barNumber,\r\n            timeSignature: this.timeSignature,\r\n            pattern: this.currentPattern,\r\n            timestamp: performance.now()\r\n        };\r\n        \r\n        // Emit bar event\r\n        this.emit('bar', barInfo);\r\n        \r\n        // Call bar callbacks\r\n        this.barCallbacks.forEach(callback => callback(barInfo));\r\n    }\r\n    \r\n    /**\r\n     * Update subdivision timings\r\n     */\r\n    updateSubdivisions() {\r\n        // Calculate subdivision positions within beat\r\n        this.subdivisions.sixteenth = (this.beatProgress * 4) % 1;\r\n        this.subdivisions.eighth = (this.beatProgress * 2) % 1;\r\n        this.subdivisions.triplet = (this.beatProgress * 3) % 1;\r\n        \r\n        // Apply swing/groove\r\n        if (this.groove > 0) {\r\n            const swingRatio = 0.5 + this.groove * 0.17; // Max 67% swing\r\n            if (this.subdivisions.eighth < 0.5) {\r\n                this.subdivisions.swing = this.subdivisions.eighth / swingRatio;\r\n            } else {\r\n                this.subdivisions.swing = 0.5 + (this.subdivisions.eighth - 0.5) / (1 - swingRatio);\r\n            }\r\n        } else {\r\n            this.subdivisions.swing = this.subdivisions.eighth;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Get accent level for beat position\r\n     */\r\n    getAccent(beatInBar) {\r\n        if (this.currentPattern && this.patterns.has(this.currentPattern)) {\r\n            const pattern = this.patterns.get(this.currentPattern);\r\n            if (pattern.accents && pattern.accents[beatInBar] !== undefined) {\r\n                return pattern.accents[beatInBar];\r\n            }\r\n        }\r\n        \r\n        // Default accent pattern (strong on 1, medium on 3 in 4/4)\r\n        if (beatInBar === 0) return 1.0;\r\n        if (beatInBar === 2 && this.timeSignature[0] === 4) return 0.7;\r\n        return 0.5;\r\n    }\r\n    \r\n    /**\r\n     * Get current time information\r\n     */\r\n    getTimeInfo() {\r\n        return {\r\n            // Absolute time\r\n            elapsed: performance.now() - this.startTime,\r\n            \r\n            // Musical time\r\n            beat: this.currentBeat,\r\n            bar: this.currentBar,\r\n            beatInBar: this.currentBeat % this.timeSignature[0],\r\n            \r\n            // Progress values (0-1)\r\n            beatProgress: this.beatProgress,\r\n            barProgress: this.barProgress,\r\n            \r\n            // Subdivisions\r\n            subdivisions: { ...this.subdivisions },\r\n            \r\n            // Timing info\r\n            bpm: this.bpm,\r\n            beatDuration: this.beatDuration,\r\n            timeSignature: [...this.timeSignature],\r\n            \r\n            // Musical properties\r\n            intensity: this.intensity,\r\n            groove: this.groove,\r\n            pattern: this.currentPattern,\r\n            \r\n            // Next beat timing\r\n            nextBeatIn: this.nextBeatTime - performance.now(),\r\n            \r\n            // Accent for current beat\r\n            accent: this.getAccent(this.currentBeat % this.timeSignature[0])\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Set BPM (beats per minute)\r\n     */\r\n    setBPM(bpm) {\r\n        this.bpm = Math.max(20, Math.min(360, bpm));\r\n        this.beatDuration = 60000 / this.bpm;\r\n        this.barDuration = this.beatDuration * this.timeSignature[0];\r\n        \r\n        this.emit('tempoChange', { bpm: this.bpm });\r\n    }\r\n    \r\n    /**\r\n     * Set time signature\r\n     */\r\n    setTimeSignature(numerator, denominator) {\r\n        this.timeSignature = [numerator, denominator];\r\n        this.barDuration = this.beatDuration * numerator;\r\n        \r\n        this.emit('timeSignatureChange', { \r\n            timeSignature: this.timeSignature \r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Set rhythm pattern\r\n     */\r\n    setPattern(patternName) {\r\n        if (!this.patterns.has(patternName)) {\r\n            return;\r\n        }\r\n        \r\n        const pattern = this.patterns.get(patternName);\r\n        this.currentPattern = patternName;\r\n        \r\n        // Apply pattern settings\r\n        if (pattern.timeSignature) {\r\n            this.setTimeSignature(...pattern.timeSignature);\r\n        }\r\n        if (pattern.groove !== undefined) {\r\n            this.groove = pattern.groove;\r\n        }\r\n        \r\n        this.emit('patternChange', { pattern: patternName });\r\n    }\r\n    \r\n    /**\r\n     * Register for beat events\r\n     */\r\n    onBeatCallback(callback) {\r\n        this.beatCallbacks.add(callback);\r\n        return () => this.beatCallbacks.delete(callback);\r\n    }\r\n    \r\n    /**\r\n     * Register for bar events\r\n     */\r\n    onBarCallback(callback) {\r\n        this.barCallbacks.add(callback);\r\n        return () => this.barCallbacks.delete(callback);\r\n    }\r\n    \r\n    /**\r\n     * Emit event to listeners\r\n     */\r\n    emit(event, data) {\r\n        if (this.listeners.has(event)) {\r\n            this.listeners.get(event).forEach(callback => callback(data));\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Listen for events\r\n     */\r\n    on(event, callback) {\r\n        if (!this.listeners.has(event)) {\r\n            this.listeners.set(event, new Set());\r\n        }\r\n        this.listeners.get(event).add(callback);\r\n        \r\n        // Return unsubscribe function\r\n        return () => {\r\n            if (this.listeners.has(event)) {\r\n                this.listeners.get(event).delete(callback);\r\n            }\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Sync to audio source (stub for future implementation)\r\n     */\r\n    syncToAudio(audioContext, audioSource) {\r\n        this.audioSync = { context: audioContext, source: audioSource };\r\n        // Future: Implement beat detection and tempo extraction\r\n    }\r\n    \r\n    /**\r\n     * Get rhythm adapter for subsystems\r\n     * Returns timing info and utilities for rhythm-aware animations\r\n     */\r\n    getAdapter() {\r\n        return {\r\n            // Current time info\r\n            getTimeInfo: () => this.getTimeInfo(),\r\n            \r\n            // Check if on beat (with tolerance)\r\n            isOnBeat: (tolerance = 0.1) => {\r\n                return this.beatProgress < tolerance || this.beatProgress > (1 - tolerance);\r\n            },\r\n            \r\n            // Check if on specific subdivision\r\n            isOnSubdivision: (subdivision, tolerance = 0.1) => {\r\n                const value = this.subdivisions[subdivision] || 0;\r\n                return value < tolerance || value > (1 - tolerance);\r\n            },\r\n            \r\n            // Get interpolated value synced to beat\r\n            getBeatSync: (min = 0, max = 1, curve = 'linear') => {\r\n                let progress = this.beatProgress;\r\n                \r\n                // Apply curve\r\n                switch(curve) {\r\n                    case 'ease':\r\n                        progress = 0.5 - Math.cos(progress * Math.PI) / 2;\r\n                        break;\r\n                    case 'bounce':\r\n                        progress = Math.abs(Math.sin(progress * Math.PI));\r\n                        break;\r\n                    case 'pulse':\r\n                        progress = Math.pow(Math.sin(progress * Math.PI), 2);\r\n                        break;\r\n                }\r\n                \r\n                return min + (max - min) * progress;\r\n            },\r\n            \r\n            // Get value with musical accent\r\n            getAccentedValue: (baseValue, accentMultiplier = 2) => {\r\n                const accent = this.getAccent(this.currentBeat % this.timeSignature[0]);\r\n                return baseValue * (1 + (accent - 0.5) * accentMultiplier);\r\n            },\r\n            \r\n            // Subscribe to beat events\r\n            onBeat: (callback) => this.onBeatCallback(callback),\r\n            onBar: (callback) => this.onBarCallback(callback),\r\n            \r\n            // Musical time utilities\r\n            beatsToMs: (beats) => beats * this.beatDuration,\r\n            msToBeats: (ms) => ms / this.beatDuration,\r\n            \r\n            // Current musical state\r\n            isPlaying: () => this.isPlaying,\r\n            getBPM: () => this.bpm,\r\n            getPattern: () => this.currentPattern\r\n        };\r\n    }\r\n}\r\n\r\n// Create singleton instance\r\nconst rhythmEngine = new RhythmEngine();\r\n\r\n// Export both the engine and the class\r\nexport { rhythmEngine, RhythmEngine };\r\nexport default rhythmEngine;","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Rhythm Integration Module\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n * \r\n * @fileoverview Integration layer between rhythm engine and existing subsystems\r\n * @author Emotive Engine Team\r\n * @module core/rhythmIntegration\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ CONCEPT                                                                           \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ This module connects the rhythm engine to existing subsystems without modifying   \r\n * ║ their core behavior. It reads rhythm configurations from individual files and     \r\n * ║ applies timing modulations based on musical events.                              \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n * \r\n * INTEGRATION POINTS:\r\n * • Particle System - Emission timing, behavior modulation\r\n * • Gesture System - Animation sync, duration adjustment\r\n * • Emotion System - Intensity mapping, transition timing\r\n * • Renderer - Glow pulsing, visual effects sync\r\n * \r\n * ┌──────────────────────────────────────────────────────────────────────────────────┐\r\n * │  MODULAR RHYTHM FLOW                                                             │\r\n * │                                                                                   │\r\n * │  gesture.js ──┐                                                                  │\r\n * │  emotion.js ──┼→ [Integration] ← [Rhythm Engine]                                │\r\n * │  behavior.js ─┘         ↓                                                        │\r\n * │                   Apply Timing                                                   │\r\n * │                                                                                   │\r\n * └──────────────────────────────────────────────────────────────────────────────────┘\r\n */\r\n\r\nimport rhythmEngine from './rhythm.js';\r\n\r\nclass RhythmIntegration {\r\n    constructor() {\r\n        this.enabled = false;\r\n        this.adapter = null;\r\n        this.subsystemConfigs = new Map();\r\n        this.activeModulations = new Map();\r\n    }\r\n    \r\n    /**\r\n     * Initialize rhythm integration\r\n     */\r\n    initialize() {\r\n        this.adapter = rhythmEngine.getAdapter();\r\n        this.enabled = true;\r\n        \r\n        // Subscribe to rhythm events\r\n        this.adapter.onBeat(this.handleBeat.bind(this));\r\n        this.adapter.onBar(this.handleBar.bind(this));\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Update BPM from detected audio\r\n     * @param {number} newBPM - Detected BPM from audio analysis\r\n     */\r\n    updateBPM(newBPM) {\r\n        if (newBPM >= 60 && newBPM <= 220) {\r\n            // Check if rhythm was manually stopped\r\n            if (window.rhythmManuallyStoppedForCurrentAudio) {\r\n                return; // Don't auto-update if manually stopped\r\n            }\r\n\r\n            // Auto-start rhythm engine if not running\r\n            if (!rhythmEngine.isRunning) {\r\n\r\n                // Auto-start the rhythm engine for gesture sync\r\n                this.start(newBPM, 'straight');\r\n\r\n                // Trigger the rhythm sync visualizer to show BPM\r\n                if (window.rhythmSyncVisualizer && !window.rhythmSyncVisualizer.state.active) {\r\n                    console.log('RhythmIntegration: Auto-starting rhythm sync visualizer with BPM:', newBPM);\r\n                    window.rhythmSyncVisualizer.start();\r\n                }\r\n\r\n                return;\r\n            }\r\n            \r\n            // If running, always update BPM regardless of whether it changed\r\n            // This ensures new tracks get their correct BPM\r\n            rhythmEngine.setBPM(newBPM);\r\n            \r\n            // BPM is now shown visually through the beat histogram bars\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Register a subsystem's rhythm configuration\r\n     * Called when loading gestures, emotions, behaviors, etc.\r\n     */\r\n    registerConfig(type, name, config) {\r\n        if (!config.rhythm || !config.rhythm.enabled) return;\r\n        \r\n        const key = `${type}:${name}`;\r\n        this.subsystemConfigs.set(key, {\r\n            type,\r\n            name,\r\n            rhythmConfig: config.rhythm,\r\n            originalConfig: config\r\n        });\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Apply rhythm modulation to a gesture\r\n     */\r\n    applyGestureRhythm(gesture, particle, progress, dt) {\r\n        if (!this.enabled || !gesture.rhythm?.enabled) return {};\r\n        \r\n        const timeInfo = this.adapter.getTimeInfo();\r\n        const rhythmConfig = gesture.rhythm;\r\n        const modulation = {};\r\n        \r\n        // Apply amplitude sync\r\n        if (rhythmConfig.amplitudeSync) {\r\n            const sync = rhythmConfig.amplitudeSync;\r\n            const beatSync = this.adapter.getBeatSync(\r\n                sync.offBeat || 0.8,\r\n                sync.onBeat || 1.5,\r\n                sync.curve || 'linear'\r\n            );\r\n            modulation.amplitudeMultiplier = beatSync;\r\n        }\r\n        \r\n        // Apply wobble sync\r\n        if (rhythmConfig.wobbleSync) {\r\n            const sync = rhythmConfig.wobbleSync;\r\n            if (this.adapter.isOnSubdivision(sync.subdivision, 0.1)) {\r\n                modulation.wobbleMultiplier = 1 + sync.intensity;\r\n            } else {\r\n                modulation.wobbleMultiplier = 1;\r\n            }\r\n        }\r\n        \r\n        // Apply accent response\r\n        if (rhythmConfig.accentResponse?.enabled) {\r\n            const accentedValue = this.adapter.getAccentedValue(\r\n                1,\r\n                rhythmConfig.accentResponse.multiplier || 1.5\r\n            );\r\n            modulation.accentMultiplier = accentedValue;\r\n        }\r\n        \r\n        // Apply pattern overrides\r\n        const currentPattern = this.adapter.getPattern();\r\n        if (currentPattern && rhythmConfig.patternOverrides?.[currentPattern]) {\r\n            Object.assign(modulation, rhythmConfig.patternOverrides[currentPattern]);\r\n        }\r\n        \r\n        return modulation;\r\n    }\r\n    \r\n    /**\r\n     * Apply rhythm modulation to particle emission\r\n     */\r\n    applyParticleRhythm(emotionState, particleSystem) {\r\n        if (!this.enabled || !emotionState.rhythm?.enabled) return {};\r\n        \r\n        const timeInfo = this.adapter.getTimeInfo();\r\n        const rhythmConfig = emotionState.rhythm;\r\n        const modulation = {};\r\n        \r\n        // Particle emission sync\r\n        if (rhythmConfig.particleEmission) {\r\n            const emission = rhythmConfig.particleEmission;\r\n            \r\n            if (emission.syncMode === 'beat' && this.adapter.isOnBeat(0.1)) {\r\n                // Emit burst on beat\r\n                modulation.emitBurst = emission.burstSize || 3;\r\n            } else if (emission.offBeatRate !== undefined) {\r\n                // Reduce emission between beats\r\n                modulation.emissionRate = emission.offBeatRate;\r\n            }\r\n        }\r\n        \r\n        // Glow sync\r\n        if (rhythmConfig.glowSync) {\r\n            const glow = rhythmConfig.glowSync;\r\n            const glowIntensity = this.adapter.getBeatSync(\r\n                glow.intensityRange[0] || 1.0,\r\n                glow.intensityRange[1] || 2.0,\r\n                'pulse'\r\n            );\r\n            modulation.glowIntensity = glowIntensity;\r\n        }\r\n        \r\n        // Breathing sync\r\n        if (rhythmConfig.breathSync?.mode === 'bars') {\r\n            const breath = rhythmConfig.breathSync;\r\n            const barsElapsed = timeInfo.bar % breath.barsPerBreath;\r\n            const breathProgress = barsElapsed / breath.barsPerBreath;\r\n            modulation.breathPhase = breathProgress * Math.PI * 2;\r\n        }\r\n        \r\n        return modulation;\r\n    }\r\n    \r\n    /**\r\n     * Apply rhythm to particle behavior\r\n     */\r\n    applyBehaviorRhythm(behavior, particle, dt) {\r\n        if (!this.enabled || !behavior.rhythm?.enabled) return {};\r\n        \r\n        const timeInfo = this.adapter.getTimeInfo();\r\n        const rhythmConfig = behavior.rhythm;\r\n        const modulation = {};\r\n        \r\n        // Glitch timing for glitchy behavior\r\n        if (rhythmConfig.glitchTiming) {\r\n            const glitch = rhythmConfig.glitchTiming;\r\n            const isOnSubdivision = this.adapter.isOnSubdivision(glitch.subdivision, 0.05);\r\n            \r\n            if (isOnSubdivision && Math.random() < glitch.probability) {\r\n                const intensity = this.adapter.isOnBeat() \r\n                    ? glitch.intensityOnBeat \r\n                    : glitch.intensityOffBeat;\r\n                modulation.triggerGlitch = true;\r\n                modulation.glitchIntensity = intensity;\r\n            }\r\n        }\r\n        \r\n        // Orbital rhythm\r\n        if (rhythmConfig.orbitRhythm) {\r\n            const orbit = rhythmConfig.orbitRhythm;\r\n            \r\n            if (orbit.baseSpeed === 'tempo') {\r\n                modulation.speedMultiplier = this.adapter.getBPM() / 120; // Normalize to 120 BPM\r\n            }\r\n            \r\n            if (orbit.beatAcceleration && this.adapter.isOnBeat(0.1)) {\r\n                modulation.speedBoost = orbit.beatAcceleration;\r\n            }\r\n            \r\n            if (orbit.barReset && timeInfo.beatInBar === 0) {\r\n                modulation.resetOrbit = true;\r\n            }\r\n        }\r\n        \r\n        // Stutter sync\r\n        if (rhythmConfig.stutterSync) {\r\n            const stutter = rhythmConfig.stutterSync;\r\n            const pattern = this.adapter.getPattern();\r\n            \r\n            if (pattern && stutter.patterns?.[pattern]) {\r\n                const patternConfig = stutter.patterns[pattern];\r\n                \r\n                if (patternConfig.freezeOnDrop && timeInfo.beatInBar === 2) {\r\n                    modulation.freeze = true;\r\n                    modulation.freezeDuration = patternConfig.dropDuration;\r\n                } else if (patternConfig.randomFreeze && Math.random() < patternConfig.randomFreeze) {\r\n                    modulation.freeze = true;\r\n                    modulation.freezeDuration = patternConfig.duration;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return modulation;\r\n    }\r\n    \r\n    /**\r\n     * Handle beat event\r\n     */\r\n    handleBeat(beatInfo) {\r\n        // Store beat info for subsystems to access\r\n        this.lastBeatInfo = beatInfo;\r\n        \r\n        // Could trigger specific effects here if needed\r\n        // But mainly subsystems will query rhythm state during their update\r\n    }\r\n    \r\n    /**\r\n     * Handle bar event\r\n     */\r\n    handleBar(barInfo) {\r\n        // Store bar info for subsystems to access\r\n        this.lastBarInfo = barInfo;\r\n    }\r\n    \r\n    /**\r\n     * Get duration adjusted for musical time\r\n     */\r\n    getMusicalDuration(rhythmConfig, originalDuration) {\r\n        if (!this.enabled || !rhythmConfig?.durationSync) return originalDuration;\r\n        \r\n        const sync = rhythmConfig.durationSync;\r\n        \r\n        if (sync.mode === 'bars') {\r\n            return this.adapter.beatsToMs(sync.bars * 4); // Assuming 4/4 time\r\n        } else if (sync.mode === 'beats') {\r\n            return this.adapter.beatsToMs(sync.beats);\r\n        }\r\n        \r\n        return originalDuration;\r\n    }\r\n    \r\n    /**\r\n     * Check if rhythm is enabled globally\r\n     */\r\n    isEnabled() {\r\n        return this.enabled && this.adapter.isPlaying();\r\n    }\r\n    \r\n    /**\r\n     * Start rhythm playback\r\n     */\r\n    start(bpm = 120, pattern = 'straight') {\r\n        if (bpm) rhythmEngine.setBPM(bpm);\r\n        if (pattern) rhythmEngine.setPattern(pattern);\r\n        rhythmEngine.start();\r\n        this.enabled = true;\r\n    }\r\n    \r\n    /**\r\n     * Stop rhythm playback\r\n     */\r\n    stop() {\r\n        rhythmEngine.stop();\r\n        this.enabled = false;\r\n        // Unlock BPM when stopping\r\n        this.bpmLocked = false;\r\n        this.lockedBPM = null;\r\n    }\r\n    \r\n    /**\r\n     * Set rhythm pattern\r\n     */\r\n    setPattern(pattern) {\r\n        rhythmEngine.setPattern(pattern);\r\n    }\r\n    \r\n    /**\r\n     * Set BPM\r\n     */\r\n    setBPM(bpm) {\r\n        rhythmEngine.setBPM(bpm);\r\n        // Update the locked BPM if manually changed\r\n        if (this.bpmLocked) {\r\n            this.lockedBPM = bpm;\r\n            console.log('🔒 BPM manually updated to:', bpm);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Resample BPM - unlocks detection for one update\r\n     */\r\n    resampleBPM() {\r\n        console.log('🔓 Unlocking BPM for resampling');\r\n        this.bpmLocked = false;\r\n        this.lockedBPM = null;\r\n    }\r\n    \r\n    /**\r\n     * Set time signature from detected pattern\r\n     */\r\n    setTimeSignature(signature) {\r\n        this.timeSignature = signature;\r\n        \r\n        // Update UI if available\r\n        const timeSigDisplay = document.getElementById('time-sig-display');\r\n        if (timeSigDisplay) {\r\n            timeSigDisplay.textContent = signature;\r\n        }\r\n        \r\n        // Could update rhythm patterns based on time signature here\r\n        // For example, switch to waltz pattern for 3/4\r\n        if (signature === '3/4' && rhythmEngine.getPattern() !== 'waltz') {\r\n            // Could auto-switch to waltz pattern\r\n            // rhythmEngine.setPattern('waltz');\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Sync to external audio\r\n     */\r\n    syncToAudio(audioContext, audioSource) {\r\n        rhythmEngine.syncToAudio(audioContext, audioSource);\r\n    }\r\n}\r\n\r\n// Create singleton instance\r\nconst rhythmIntegration = new RhythmIntegration();\r\n\r\nexport { rhythmIntegration, RhythmIntegration };\r\nexport default rhythmIntegration;","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Modular Particle System with 3D Depth\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Orchestrator for the modular particle system with z-coordinate depth\r\n * @author Emotive Engine Team\r\n * @module core/Particle-modular\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                               MODULAR ARCHITECTURE                                \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ This is a drop-in replacement for the original Particle.js                        \r\n * ║ Same API, but with modular architecture for easier maintenance                    \r\n * ║                                                                                    \r\n * ║ STRUCTURE:                                                                         \r\n * ║ - Particle class (this file) - orchestrates everything                            \r\n * ║ - particles/behaviors/* - behavior modules                                     \r\n * ║ - particles/config/* - configuration constants                                    \r\n * ║ - particles/utils/* - utility functions                                           \r\n * ║ - gestures/* - modular gesture system                                             \r\n * ║                                                                                    \r\n * ║ 3D DEPTH SYSTEM:                                                                   \r\n * ║ - Z-coordinate ranges from -1 (behind orb) to +1 (in front)                       \r\n * ║ - 1/13 particles spawn in foreground, 12/13 in background                         \r\n * ║ - Depth affects visual size (20% scaling based on z)                              \r\n * ║ - Foreground particles spawn with offset to prevent stacking                      \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n */\r\n\r\n// Import behaviors\r\nimport { initializeBehavior, updateBehavior } from './particles/behaviors/index.js';\r\n\r\n// Import utilities\r\nimport { selectWeightedColor } from './particles/utils/colorUtils.js';\r\n\r\n// Import config\r\nimport { PHYSICS } from './particles/config/physics.js';\r\n\r\n// Import gesture system - NOW USING MODULAR GESTURES!\r\nimport { \r\n    applyGestureMotion as applyFullGestureMotion,\r\n    isGestureOverriding,\r\n    isGestureBlending \r\n} from './gestures/GestureMotion.js';\r\n\r\n/**\r\n * Particle class - Individual particle with behavior and rendering\r\n * \r\n * LIFECYCLE:\r\n * 1. Created by ParticleSystem with position and behavior\r\n * 2. Initialized with behavior-specific properties\r\n * 3. Updated each frame (position, behavior, lifecycle)\r\n * 4. Rendered to canvas\r\n * 5. Removed when life reaches 0\r\n */\r\nclass Particle {\r\n    /**\r\n     * Creates a new particle with specific behavior and appearance\r\n     * \r\n     * @param {number} x - Starting X position on canvas\r\n     * @param {number} y - Starting Y position on canvas\r\n     * @param {string} behavior - Behavior type (ambient, rising, falling, etc.)\r\n     * @param {number} scaleFactor - Global scale multiplier (affects size/distance)\r\n     * @param {number} particleSizeMultiplier - Additional size multiplier\r\n     * @param {Array} emotionColors - Array of color options with weights\r\n     */\r\n    constructor(x, y, behavior = 'ambient', scaleFactor = 1, particleSizeMultiplier = 1, emotionColors = null) {\r\n        // Position and movement (now with z-coordinate for depth)\r\n        // 1/13 chance of being in front (z > 0), 12/13 chance of being behind (z < 0)\r\n        const zRoll = Math.random();\r\n        this.z = zRoll < (1/13) ? 0.5 + Math.random() * 0.5 : -1 + Math.random() * 0.9;\r\n        \r\n        // Add spawn offset to prevent stacking\r\n        // Much larger offset for foreground particles to completely avoid visual stacking\r\n        const spawnRadius = this.z > 0 ? (20 + Math.random() * 20) * scaleFactor : 3 * scaleFactor;\r\n        const angle = Math.random() * Math.PI * 2;\r\n        this.x = x + Math.cos(angle) * spawnRadius;\r\n        this.y = y + Math.sin(angle) * spawnRadius;\r\n        this.vx = 0;\r\n        this.vy = 0;\r\n        this.vz = 0; // For future 3D motion effects\r\n        \r\n        // Lifecycle\r\n        this.life = 0.0; // Start at 0 for fade-in\r\n        this.maxLife = 1.0;\r\n        this.lifeDecay = 0.01; // Life lost per frame\r\n        this.fadeInTime = 0.15; // 15% of life for fade-in\r\n        this.fadeOutTime = 0.3; // Last 30% of life for fade-out\r\n        this.isFadingOut = false; // Track if particle is in fade-out phase\r\n        this.age = 0; // Track particle age for smooth fading\r\n        \r\n        // Visual properties - matching original Emotive scale\r\n        this.scaleFactor = scaleFactor;\r\n        this.particleSizeMultiplier = particleSizeMultiplier;\r\n        this.size = (4 + Math.random() * 6) * scaleFactor * particleSizeMultiplier; // 4-10 pixels scaled\r\n        this.baseSize = this.size;\r\n        this.emotionColors = emotionColors; // Store emotion colors for use in behaviors\r\n        this.color = '#ffffff';\r\n        this.opacity = 1.0;\r\n        \r\n        // Glow properties - 1/3 of particles have glow with varying sizes\r\n        this.hasGlow = Math.random() < 0.333;  // 1/3 chance of glow\r\n        this.glowSizeMultiplier = this.hasGlow ? (1.33 + Math.random() * 0.33) : 0;  // 1.33x to 1.66x particle size\r\n        \r\n        // Cell shading - 1/3 of particles are cell shaded (cartoon style)\r\n        this.isCellShaded = Math.random() < 0.333;  // 1/3 chance of cell shading\r\n        \r\n        // Make particles more ephemeral\r\n        this.baseOpacity = 0.3 + Math.random() * 0.4;  // 30-70% max opacity for ethereal look\r\n        \r\n        // Color caching for performance\r\n        this.cachedColors = new Map(); // Cache RGBA strings\r\n        this.lastColor = null;\r\n        this.lastOpacity = -1;\r\n        \r\n        // Behavior properties\r\n        this.behavior = behavior;\r\n        this.behaviorData = {}; // Behavior-specific data\r\n        \r\n        // Gesture properties for motion system\r\n        this.gestureData = {\r\n            initialX: x,\r\n            initialY: y\r\n        };\r\n        \r\n        // Initialize behavior-specific properties\r\n        initializeBehavior(this, behavior);\r\n    }\r\n\r\n    /**\r\n     * Updates particle position and behavior\r\n     * @param {number} deltaTime - Time since last update in milliseconds\r\n     * @param {number} centerX - Center X coordinate for behavior calculations\r\n     * @param {number} centerY - Center Y coordinate for behavior calculations\r\n     * @param {Object} undertoneModifier - Optional undertone modifications\r\n     * @param {Object} gestureMotion - Optional gesture motion to apply\r\n     * @param {number} gestureProgress - Progress of the gesture (0-1)\r\n     */\r\n    update(deltaTime, centerX, centerY, undertoneModifier = null, gestureMotion = null, gestureProgress = 0) {\r\n        // Cap deltaTime to prevent huge jumps\r\n        const cappedDeltaTime = Math.min(deltaTime, 50);\r\n        // Normalize to 60 FPS equivalent for consistent physics\r\n        const dt = cappedDeltaTime / 16.67; // 16.67ms = 60 FPS frame time\r\n        \r\n        // Universal law: Gestures override state behavior based on their motion type\r\n        // Use the modular gesture system to determine gesture behavior\r\n        const gestureIsOverriding = gestureMotion && gestureMotion.type && gestureProgress > 0 && \r\n            isGestureOverriding(gestureMotion.type);\r\n        \r\n        if (gestureIsOverriding) {\r\n            // Gesture completely controls particle - skip normal behavior\r\n            this.applyGestureMotion(gestureMotion, gestureProgress, dt, centerX, centerY);\r\n        } else if (this.gestureBehavior === 'falling') {\r\n            // Rain gesture is active - use falling behavior instead of normal behavior\r\n            updateBehavior(this, 'falling', dt, centerX, centerY);\r\n        } else if (this.gestureBehavior === 'radiant') {\r\n            // Shimmer gesture is active - use radiant behavior for shimmering effect\r\n            updateBehavior(this, 'radiant', dt, centerX, centerY);\r\n        } else {\r\n            // Normal behavior update\r\n            updateBehavior(this, this.behavior, dt, centerX, centerY);\r\n            \r\n            // Don't apply undertone modifications to particle motion\r\n            // Undertones only affect color saturation and core behaviors\r\n            \r\n            // Apply non-overriding gesture motion if present\r\n            if (gestureMotion && gestureProgress > 0) {\r\n                this.applyGestureMotion(gestureMotion, gestureProgress, dt, centerX, centerY);\r\n            }\r\n        }\r\n        \r\n        // Apply velocity to position (unless gesture is directly controlling position)\r\n        if (!gestureIsOverriding) {\r\n            this.x += this.vx * dt;\r\n            this.y += this.vy * dt;\r\n        }\r\n        \r\n        // HARD BOUNDARY CONSTRAINTS - particles NEVER leave canvas\r\n        const canvasWidth = centerX * 2;\r\n        const canvasHeight = centerY * 2;\r\n        const margin = 20;\r\n        \r\n        // Bounce off boundaries\r\n        if (this.x - this.size < margin) {\r\n            this.x = margin + this.size;\r\n            this.vx = Math.abs(this.vx) * 0.5;\r\n        } else if (this.x + this.size > canvasWidth - margin) {\r\n            this.x = canvasWidth - margin - this.size;\r\n            this.vx = -Math.abs(this.vx) * 0.5;\r\n        }\r\n        \r\n        if (this.y - this.size < margin) {\r\n            this.y = margin + this.size;\r\n            this.vy = Math.abs(this.vy) * 0.5;\r\n        } else if (this.y + this.size > canvasHeight - margin) {\r\n            this.y = canvasHeight - margin - this.size;\r\n            this.vy = -Math.abs(this.vy) * 0.5;\r\n        }\r\n        \r\n        // Update age and life (EXACT COPY FROM ORIGINAL)\r\n        this.age += this.lifeDecay * dt;\r\n        \r\n        // Smooth fade-in at birth\r\n        if (this.age < this.fadeInTime) {\r\n            this.life = this.age / this.fadeInTime;\r\n        }\r\n        // Full opacity in middle of life\r\n        else if (this.age < (1.0 - this.fadeOutTime)) {\r\n            this.life = 1.0;\r\n        }\r\n        // Smooth fade-out at death\r\n        else {\r\n            this.life = (1.0 - this.age) / this.fadeOutTime;\r\n            this.isFadingOut = true;\r\n            \r\n            // Dynamic size reduction for popcorn during fade-out\r\n            if (this.behavior === 'popcorn') {\r\n                this.size = this.baseSize * (0.5 + 0.5 * this.life);\r\n            }\r\n        }\r\n        \r\n        this.life = Math.max(0, Math.min(1, this.life));\r\n        \r\n        // Update opacity with easing for extra smoothness\r\n        this.opacity = this.easeInOutCubic(this.life);\r\n        \r\n        // Update size based on life for some behaviors\r\n        if (this.behavior === 'burst' && this.behaviorData && this.life < this.behaviorData.fadeStart) {\r\n            this.size = this.baseSize * (this.life / this.behaviorData.fadeStart);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * DEPRECATED - Undertones no longer affect particle motion\r\n     * Kept for compatibility but does nothing\r\n     * @param {number} dt - Normalized delta time\r\n     * @param {Object} modifier - Undertone modifier settings\r\n     */\r\n    applyUndertoneModifier(dt, modifier) {\r\n        // Undertones no longer affect particles\r\n        // They only affect color saturation and core behaviors\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Apply gesture motion to particle\r\n     * @param {Object} motion - Gesture motion configuration\r\n     * @param {number} progress - Gesture progress (0-1)\r\n     * @param {number} dt - Normalized delta time\r\n     * @param {number} centerX - Orb center X\r\n     * @param {number} centerY - Orb center Y\r\n     */\r\n    applyGestureMotion(motion, progress, dt, centerX, centerY) {\r\n        // Use the full gesture system from the original\r\n        applyFullGestureMotion(this, dt, motion, progress, centerX, centerY);\r\n    }\r\n\r\n    /**\r\n     * Check if particle is out of bounds\r\n     * @param {number} width - Canvas width\r\n     * @param {number} height - Canvas height\r\n     * @returns {boolean} True if particle is out of bounds\r\n     */\r\n    isOutOfBounds(width, height) {\r\n        const margin = 50; // Allow some margin for particles to re-enter\r\n        return this.x < -margin || this.x > width + margin || \r\n               this.y < -margin || this.y > height + margin;\r\n    }\r\n\r\n    /**\r\n     * Check if particle is still alive\r\n     * @returns {boolean} True if particle life > 0\r\n     */\r\n    isAlive() {\r\n        return this.life > 0;\r\n    }\r\n\r\n    /**\r\n     * Set outward velocity for gesture effects\r\n     * @param {number} angle - Direction angle in radians\r\n     */\r\n    setOutwardVelocity(angle) {\r\n        if (this.behaviorData && this.behaviorData.outwardSpeed !== undefined) {\r\n            const speed = this.behaviorData.outwardSpeed;\r\n            this.vx = Math.cos(angle) * speed;\r\n            this.vy = Math.sin(angle) * speed + (this.behaviorData.upwardBias || 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get depth-adjusted size for 3D effect\r\n     * Particles farther away (negative z) appear smaller for depth perception\r\n     * \r\n     * @returns {number} Adjusted size based on z-depth\r\n     * \r\n     * DEPTH SCALING:\r\n     * - z = -1.0: 80% size (farthest back)\r\n     * - z =  0.0: 100% size (orb plane)\r\n     * - z = +1.0: 120% size (closest to viewer)\r\n     */\r\n    getDepthAdjustedSize() {\r\n        // Map z from [-1, 1] to scale [0.8, 1.2]\r\n        // Negative z (behind) = smaller, positive z (front) = larger\r\n        const depthScale = 1 + (this.z * 0.2);\r\n        return this.size * depthScale;\r\n    }\r\n    \r\n    /**\r\n     * Get particle state for debugging\r\n     * @returns {Object} Current particle state\r\n     */\r\n    getState() {\r\n        return {\r\n            position: { x: this.x, y: this.y, z: this.z },\r\n            velocity: { x: this.vx, y: this.vy, z: this.vz },\r\n            life: this.life,\r\n            behavior: this.behavior,\r\n            size: this.size,\r\n            opacity: this.opacity\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Reset particle for reuse from pool\r\n     * @param {number} x - New X position\r\n     * @param {number} y - New Y position\r\n     * @param {string} behavior - New behavior type\r\n     * @param {number} scaleFactor - Scale factor\r\n     * @param {number} particleSizeMultiplier - Size multiplier\r\n     * @param {Array} emotionColors - Emotion colors\r\n     */\r\n    reset(x, y, behavior = 'ambient', scaleFactor = 1, particleSizeMultiplier = 1, emotionColors = null) {\r\n        // 1/13 chance of being in front (z > 0), 12/13 chance of being behind (z < 0)\r\n        const zRoll = Math.random();\r\n        this.z = zRoll < (1/13) ? 0.5 + Math.random() * 0.5 : -1 + Math.random() * 0.9;\r\n        \r\n        // Add spawn offset to prevent stacking\r\n        // Much larger offset for foreground particles to completely avoid visual stacking\r\n        const spawnRadius = this.z > 0 ? (20 + Math.random() * 20) * scaleFactor : 3 * scaleFactor;\r\n        const angle = Math.random() * Math.PI * 2;\r\n        this.x = x + Math.cos(angle) * spawnRadius;\r\n        this.y = y + Math.sin(angle) * spawnRadius;\r\n        this.vx = 0;\r\n        this.vy = 0;\r\n        this.vz = 0;\r\n        this.life = 0.0;  // Start at 0 for fade-in\r\n        this.age = 0;  // Reset age\r\n        this.scaleFactor = scaleFactor;\r\n        this.particleSizeMultiplier = particleSizeMultiplier;\r\n        this.size = (4 + Math.random() * 6) * scaleFactor * particleSizeMultiplier;  // Scaled size\r\n        this.baseSize = this.size;\r\n        this.emotionColors = emotionColors;  // Store emotion colors\r\n        \r\n        // Clear cached colors for reuse\r\n        this.cachedColors.clear();\r\n        this.opacity = 0.0;  // Start invisible\r\n        this.isFadingOut = false;\r\n        this.baseOpacity = 0.3 + Math.random() * 0.4;  // Reset base opacity\r\n        this.color = '#ffffff';  // Reset color to white before reinitializing\r\n        this.behavior = behavior;\r\n        \r\n        // Clear gesture data if it exists\r\n        this.gestureData = null;\r\n        \r\n        // Reset behavior data\r\n        if (!this.behaviorData) {\r\n            this.behaviorData = {};\r\n        } else {\r\n            // Clear existing properties\r\n            for (let key in this.behaviorData) {\r\n                delete this.behaviorData[key];\r\n            }\r\n        }\r\n        \r\n        // Reinitialize behavior\r\n        initializeBehavior(this, behavior);\r\n    }\r\n\r\n    /**\r\n     * Get cached color string for performance\r\n     * @param {string} hexColor - Hex color code\r\n     * @param {number} opacity - Opacity value (0-1)\r\n     * @returns {string} RGBA color string\r\n     */\r\n    getCachedColor(hexColor, opacity) {\r\n        // Round opacity to reduce cache entries\r\n        const roundedOpacity = Math.round(opacity * 100) / 100;\r\n        const cacheKey = `${hexColor}_${roundedOpacity}`;\r\n        \r\n        if (!this.cachedColors.has(cacheKey)) {\r\n            this.cachedColors.set(cacheKey, this.hexToRgba(hexColor, roundedOpacity));\r\n        }\r\n        \r\n        return this.cachedColors.get(cacheKey);\r\n    }\r\n\r\n    /**\r\n     * Convert hex color to RGBA string\r\n     * @param {string} hex - Hex color code\r\n     * @param {number} alpha - Alpha value (0-1)\r\n     * @returns {string} RGBA color string\r\n     */\r\n    hexToRgba(hex, alpha) {\r\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        if (!result) return `rgba(255, 255, 255, ${alpha})`;\r\n        \r\n        return `rgba(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}, ${alpha})`;\r\n    }\r\n\r\n    /**\r\n     * Cubic ease in/out function for smooth animations\r\n     * @param {number} t - Progress value (0-1)\r\n     * @returns {number} Eased value (0-1)\r\n     */\r\n    easeInOutCubic(t) {\r\n        return t < 0.5 \r\n            ? 4 * t * t * t \r\n            : 1 - Math.pow(-2 * t + 2, 3) / 2;\r\n    }\r\n\r\n    /**\r\n     * Render the particle to canvas\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n     * @param {string} emotionColor - Color to use for rendering\r\n     */\r\n    render(ctx, emotionColor = '#ffffff') {\r\n        if (this.life <= 0) return;\r\n        \r\n        // Validate position values to prevent rendering errors\r\n        if (!isFinite(this.x) || !isFinite(this.y)) {\r\n            return;\r\n        }\r\n        \r\n        // Use sub-pixel accurate coordinates for smooth rendering\r\n        const renderX = this.x;\r\n        const renderY = this.y;\r\n        \r\n        // Ensure size is never negative\r\n        const safeSize = Math.max(0.1, this.size);\r\n        \r\n        // Use the particle's own color if set, otherwise fall back to emotion color\r\n        const particleColor = this.tempColor || this.color || emotionColor;\r\n        \r\n        ctx.save();\r\n        \r\n        if (this.isCellShaded) {\r\n            // Cell shaded style - hard edges, no gradients\r\n            \r\n            // Draw outline (darker color)\r\n            ctx.strokeStyle = this.getCachedColor(particleColor, this.opacity * 0.9);\r\n            ctx.lineWidth = 2;\r\n            ctx.beginPath();\r\n            ctx.arc(renderX, renderY, safeSize, 0, Math.PI * 2);\r\n            ctx.stroke();\r\n            \r\n            // Draw flat color fill with discrete opacity levels\r\n            const discreteOpacity = Math.floor(this.opacity * 3) / 3;\r\n            ctx.fillStyle = this.getCachedColor(particleColor, discreteOpacity * (this.baseOpacity || 0.5) * 0.5);\r\n            ctx.beginPath();\r\n            ctx.arc(renderX, renderY, Math.max(0.1, safeSize - 1), 0, Math.PI * 2);\r\n            ctx.fill();\r\n            \r\n            // Add hard-edged highlight\r\n            if (discreteOpacity > 0.5) {\r\n                ctx.fillStyle = this.getCachedColor('#FFFFFF', 0.3);\r\n                ctx.beginPath();\r\n                ctx.arc(renderX - safeSize * 0.3, renderY - safeSize * 0.3, safeSize * 0.3, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n        } else {\r\n            // Standard gradient style\r\n            \r\n            // Create radial gradient for soft particle\r\n            const gradient = ctx.createRadialGradient(renderX, renderY, 0, renderX, renderY, safeSize);\r\n            \r\n            // Core is full opacity with base opacity applied\r\n            gradient.addColorStop(0, this.getCachedColor(particleColor, this.opacity * (this.baseOpacity || 0.5)));\r\n            // Mid fade\r\n            gradient.addColorStop(0.5, this.getCachedColor(particleColor, this.opacity * (this.baseOpacity || 0.5) * 0.5));\r\n            // Edge is transparent\r\n            gradient.addColorStop(1, this.getCachedColor(particleColor, 0));\r\n            \r\n            ctx.fillStyle = gradient;\r\n            ctx.beginPath();\r\n            ctx.arc(renderX, renderY, safeSize, 0, Math.PI * 2);\r\n            ctx.fill();\r\n            \r\n            // Add glow effect if enabled\r\n            if (this.hasGlow && this.glowSizeMultiplier > 0) {\r\n                const glowSize = safeSize * this.glowSizeMultiplier;\r\n                const glowGradient = ctx.createRadialGradient(renderX, renderY, safeSize * 0.5, renderX, renderY, glowSize);\r\n\r\n                // Make glow visible even when particles are subdued\r\n                // Use a minimum opacity for glow to ensure visibility\r\n                const minGlowOpacity = 0.3; // Minimum glow visibility\r\n                const particleOpacity = Math.max(minGlowOpacity, this.opacity);\r\n\r\n                // Scale glow intensity based on glowSizeMultiplier\r\n                // Higher multiplier = more intense glow (especially for gesture effects)\r\n                const glowIntensity = Math.min(1.0, this.glowSizeMultiplier / 3); // More aggressive scaling\r\n\r\n                // Create bright, visible glow with minimum opacity thresholds\r\n                glowGradient.addColorStop(0, this.getCachedColor(particleColor, Math.max(0.5, particleOpacity * 0.8) * glowIntensity));\r\n                glowGradient.addColorStop(0.25, this.getCachedColor(particleColor, Math.max(0.3, particleOpacity * 0.6) * glowIntensity));\r\n                glowGradient.addColorStop(0.5, this.getCachedColor(particleColor, Math.max(0.2, particleOpacity * 0.4) * glowIntensity));\r\n                glowGradient.addColorStop(0.75, this.getCachedColor(particleColor, Math.max(0.1, particleOpacity * 0.2) * glowIntensity));\r\n                glowGradient.addColorStop(1, this.getCachedColor(particleColor, 0));\r\n\r\n                // Use additive blending for brighter glow effect\r\n                ctx.save();\r\n                ctx.globalCompositeOperation = 'screen';\r\n                ctx.fillStyle = glowGradient;\r\n                ctx.beginPath();\r\n                ctx.arc(renderX, renderY, glowSize, 0, Math.PI * 2);\r\n                ctx.fill();\r\n                ctx.restore();\r\n            }\r\n        }\r\n        \r\n        ctx.restore();\r\n    }\r\n}\r\n\r\n// Export the Particle class as default\r\nexport default Particle;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Gesture Motion Orchestrator\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Orchestrator for modular gesture system - replaces monolithic switch\n * @author Emotive Engine Team\n * @module gestures/GestureMotion\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ This orchestrator manages gesture application using the modular gesture system.   \n * ║ It replaces the old 538-line switch statement with clean, modular lookups.        \n * ║ Drop-in replacement for the old applyGestureMotion function.                      \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n */\n\nimport { getGesture, isBlendingGesture, isOverrideGesture } from './index.js';\nimport rhythmIntegration from '../rhythmIntegration.js';\n\n/**\n * Apply gesture motion to a particle using the modular system\n * This is a drop-in replacement for the old applyGestureMotion function\n * \n * @param {Particle} particle - The particle to animate\n * @param {number} dt - Delta time (normalized to 60fps)\n * @param {Object} motion - Gesture motion configuration\n * @param {number} progress - Gesture progress (0-1)\n * @param {number} centerX - Orb center X position\n * @param {number} centerY - Orb center Y position\n */\nexport function applyGestureMotion(particle, dt, motion, progress, centerX, centerY) {\n    // Validate inputs\n    if (!motion || !motion.type || progress >= 1) {\n        return;\n    }\n    \n    // Initialize gesture data if needed\n    if (!particle.gestureData) {\n        particle.gestureData = {\n            originalVx: particle.vx,\n            originalVy: particle.vy,\n            initialX: particle.x,\n            initialY: particle.y,\n            // For compatibility with gestures that expect these\n            startAngle: Math.atan2(particle.y - centerY, particle.x - centerX),\n            startRadius: Math.sqrt(Math.pow(particle.x - centerX, 2) + Math.pow(particle.y - centerY, 2))\n        };\n    }\n    \n    // Look up the gesture from registry\n    const gesture = getGesture(motion.type);\n    \n    if (!gesture) {\n        return;\n    }\n    \n    // Apply rhythm modulation if enabled\n    let rhythmModifiedMotion = motion;\n    if (rhythmIntegration.isEnabled() && gesture.rhythm?.enabled) {\n        const modulation = rhythmIntegration.applyGestureRhythm(gesture, particle, progress, dt);\n        \n        // Create modified motion with rhythm adjustments\n        rhythmModifiedMotion = {\n            ...motion,\n            amplitude: (motion.amplitude || 1) * (modulation.amplitudeMultiplier || 1) * (modulation.accentMultiplier || 1),\n            wobbleAmount: (motion.wobbleAmount || 0) * (modulation.wobbleMultiplier || 1),\n            // Allow rhythm to affect other parameters as needed\n            rhythmModulation: modulation\n        };\n    }\n    \n    // Apply the gesture using its modular implementation\n    if (gesture.apply) {\n        gesture.apply(particle, progress, rhythmModifiedMotion, dt, centerX, centerY);\n    }\n    \n    // Handle cleanup when gesture completes\n    if (progress >= 0.99 && gesture.cleanup) {\n        gesture.cleanup(particle);\n        // Reset gesture data for next gesture\n        particle.gestureData = null;\n    }\n}\n\n/**\n * Helper function to check if a gesture should override particle behavior\n * Used by Particle.js to determine update flow\n * \n * @param {string} gestureType - The gesture type name\n * @returns {boolean} True if gesture completely overrides particle motion\n */\nexport function isGestureOverriding(gestureType) {\n    return isOverrideGesture(gestureType);\n}\n\n/**\n * Helper function to check if a gesture blends with existing motion\n * Used by Particle.js to determine update flow\n * \n * @param {string} gestureType - The gesture type name\n * @returns {boolean} True if gesture blends with existing motion\n */\nexport function isGestureBlending(gestureType) {\n    return isBlendingGesture(gestureType);\n}\n\n/**\n * Get list of all available gesture types\n * Useful for debugging and UI generation\n * \n * @returns {Array<string>} Array of gesture type names\n */\nexport function getAvailableGestures() {\n    const gestures = [];\n    \n    // Import the registry to get all gestures\n    import('./index.js').then(module => {\n        const allGestures = module.listGestures();\n        allGestures.forEach(g => gestures.push(g.name));\n    });\n    \n    return gestures;\n}\n\n/**\n * Legacy compatibility layer\n * Maps old gesture motion configurations to new system\n * \n * @param {Object} motion - Old-style motion object\n * @returns {Object} Normalized motion object\n */\nfunction normalizeMotion(motion) {\n    // Handle legacy motion properties\n    const normalized = { ...motion };\n    \n    // Map legacy aliases to their primary gestures\n    if (motion.type === 'radial') {\n        normalized.type = 'pulse';\n    }\n    \n    if (motion.type === 'oscillate') {\n        normalized.type = 'bounce';\n        normalized.axis = motion.axis || 'vertical';\n    }\n    \n    if (motion.type === 'jitter') {\n        normalized.type = 'shake';\n    }\n    \n    return normalized;\n}\n\n/**\n * Main export - drop-in replacement for old applyGestureMotion\n * Includes legacy compatibility\n */\nexport default function(particle, dt, motion, progress, centerX, centerY) {\n    // Normalize motion for legacy compatibility\n    const normalizedMotion = normalizeMotion(motion);\n    \n    // Apply using modular system\n    applyGestureMotion(particle, dt, normalizedMotion, progress, centerX, centerY);\n}\n\n// Also export named function for clarity\nexport { applyGestureMotion as applyModularGestureMotion };","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE\r\n *  └─○═╝                                                                             \r\n *                     ◐ ◑ ◒ ◓  PARTICLE SYSTEM  ◓ ◒ ◑ ◐                     \r\n *                                                                                    \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Particle System - Orchestrator of Emotional Atmosphere with 3D Depth\r\n * @author Emotive Engine Team\r\n * @version 2.4.0\r\n * @module ParticleSystem\r\n * @changelog 2.4.0 - Added z-coordinate depth system with split rendering layers\r\n * @changelog 2.3.0 - Batch rendering optimization for reduced state changes\r\n * @changelog 2.2.0 - Added undertone saturation system for dynamic particle depth\r\n * @changelog 2.1.0 - Added support for passing emotion colors to individual particles\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                                   PURPOSE                                         \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ The CONDUCTOR of particle chaos. Manages the lifecycle, behavior, and             \r\n * ║ performance of all particles. Uses object pooling to prevent memory leaks         \r\n * ║ and coordinates particles to create emotional atmospheres around the orb.         \r\n * ║                                                                                    \r\n * ║ NEW: Undertone saturation dynamically adjusts particle colors based on emotional  \r\n * ║ intensity, creating visual depth through saturation levels.                       \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 🎭 SYSTEM FEATURES                                                                \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • Object pooling for performance (reuse dead particles)                           \r\n * │ • Time-based spawning with accumulator                                            \r\n * │ • Automatic cleanup every 5 seconds                                               \r\n * │ • Memory leak detection and prevention                                            \r\n * │ • Dynamic particle limits based on emotion                                        \r\n * │ • 13 different particle behaviors                                                 \r\n * │ • Undertone-based saturation adjustments for particle colors                      \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 🔄 OBJECT POOL STRATEGY                                                           \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • Lazy initialization (create as needed)                                          \r\n * │ • Max pool size: 50 particles                                                     \r\n * │ • Reuse dead particles before creating new                                        \r\n * │ • Track pool hits/misses for optimization                                         \r\n * │ • Absolute max: 2x configured limit (prevents runaway)                            \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 📊 PERFORMANCE LIMITS                                                             \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • Default max particles  : 50                                                     \r\n * │ • Absolute max particles : 100 (2x default)                                       \r\n * │ • Pool size             : Min(maxParticles, 50)                                  \r\n * │ • Cleanup interval      : 5000ms                                                 \r\n * │ • Spawn rate            : Based on emotion config                                \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                              MEMORY MANAGEMENT                                    \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ Critical for preventing memory leaks:                                             \r\n * ║ 1. Reuse particles from pool when available                                       \r\n * ║ 2. Clear references when returning to pool                                        \r\n * ║ 3. Periodic cleanup of excess particles                                           \r\n * ║ 4. Track creation/destruction for leak detection                                  \r\n * ║ 5. Hard limits prevent runaway particle creation                                  \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * ════════════════════════════════════════════════════════════════════════════════════\r\n */\r\n\r\nimport Particle from './Particle.js';\r\nimport { applyUndertoneSaturationToArray } from '../utils/colorUtils.js';\r\nimport rhythmIntegration from './rhythmIntegration.js';\r\nimport { getEmotion } from './emotions/index.js';\r\n\r\nclass ParticleSystem {\r\n    constructor(maxParticles = 50, errorBoundary = null) {\r\n        this.errorBoundary = errorBoundary;\r\n        this.maxParticles = maxParticles;\r\n        this.absoluteMaxParticles = maxParticles * 2; // Hard limit to prevent leaks\r\n        \r\n        // Active particles\r\n        this.particles = [];\r\n        \r\n        // Object pool for performance - reduced to prevent memory buildup\r\n        this.pool = [];\r\n        this.poolSize = Math.min(maxParticles, 50); // Limit pool to max 50 particles\r\n        \r\n        // Memory leak detection\r\n        this.totalParticlesCreated = 0;\r\n        this.totalParticlesDestroyed = 0;\r\n        this.stateChangeCount = 0;\r\n        this.lastMemoryCheck = Date.now();\r\n        this.lastLeakedCount = 0;\r\n        \r\n        // TIME-BASED spawning using accumulation for smooth, consistent particle creation\r\n        this.spawnAccumulator = 0; // Accumulates time to spawn particles\r\n        \r\n        // Performance tracking\r\n        this.particleCount = 0;\r\n        this.poolHits = 0;\r\n        this.poolMisses = 0;\r\n        \r\n        // Cleanup timer to prevent memory buildup\r\n        this.cleanupTimer = 0;\r\n        this.cleanupInterval = 5000; // Clean up every 5 seconds\r\n        \r\n        // Initialize object pool\r\n        this.initializePool();\r\n        \r\n        // ParticleSystem initialized\r\n    }\r\n\r\n    /**\r\n     * Initialize the object pool with pre-created particles\r\n     */\r\n    initializePool() {\r\n        // Don't pre-create particles - create them lazily as needed\r\n        // This prevents memory buildup on initialization\r\n        this.pool = [];\r\n    }\r\n\r\n    /**\r\n     * Gets a particle from the pool or creates a new one\r\n     * @param {number} x - X position\r\n     * @param {number} y - Y position\r\n     * @param {string} behavior - Particle behavior type\r\n     * @returns {Particle} Particle instance\r\n     */\r\n    getParticleFromPool(x, y, behavior) {\r\n        let particle;\r\n        \r\n        if (this.pool.length > 0) {\r\n            // Reuse from pool\r\n            particle = this.pool.pop();\r\n            particle.reset(x, y, behavior, this.scaleFactor || 1, this.particleSizeMultiplier || 1, this.currentEmotionColors);\r\n            this.poolHits++;\r\n        } else {\r\n            // Create new particle\r\n            particle = new Particle(x, y, behavior, this.scaleFactor || 1, this.particleSizeMultiplier || 1, this.currentEmotionColors);\r\n            this.poolMisses++;\r\n            this.totalParticlesCreated++;\r\n        }\r\n        \r\n        // Set the emotion for behavior customization\r\n        particle.emotion = this.currentEmotion;\r\n        \r\n        // Apply gesture behavior if active (e.g., doppler for rain)\r\n        if (this.gestureBehavior) {\r\n            particle.gestureBehavior = this.gestureBehavior;\r\n        }\r\n        \r\n        return particle;\r\n    }\r\n\r\n    /**\r\n     * Returns a particle to the pool for reuse\r\n     * @param {Particle} particle - Particle to return to pool\r\n     */\r\n    returnParticleToPool(particle) {\r\n        if (this.pool.length < this.poolSize) {\r\n            // Clear references before pooling\r\n            particle.cachedGradient = null;\r\n            particle.cachedGradientKey = null;\r\n            // Clear behaviorData properties but keep the object\r\n            if (particle.behaviorData) {\r\n                for (let key in particle.behaviorData) {\r\n                    delete particle.behaviorData[key];\r\n                }\r\n            }\r\n            this.pool.push(particle);\r\n        } else {\r\n            // If pool is full, count as destroyed since it will be GC'd\r\n            this.totalParticlesDestroyed++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Spawns particles based on emotional state and particle rate\r\n     * NEW APPROACH: Fixed timestep - only spawn at specific intervals\r\n     * \r\n     * @param {string} behavior - Particle behavior type (ambient, rising, falling, etc.)\r\n     * @param {string} emotion - Current emotional state\r\n     * @param {number} particleRate - Rate of particle spawning (particles per second at 60fps)\r\n     * @param {number} centerX - X coordinate of spawn center\r\n     * @param {number} centerY - Y coordinate of spawn center\r\n     * @param {number} deltaTime - Time since last frame in milliseconds\r\n     * @param {number|null} count - Force spawn this many particles (null for rate-based)\r\n     * @param {number} minParticles - Minimum particles to maintain\r\n     * @param {number} maxParticles - Maximum particles allowed\r\n     * @param {number} scaleFactor - Scale multiplier for particle sizes\r\n     * @param {number} particleSizeMultiplier - Additional size multiplier\r\n     * @param {Array|null} emotionColors - Array of color strings or weighted color objects\r\n     * @param {string|null} undertone - Emotional undertone for saturation adjustment\r\n     *                                   (intense, confident, nervous, clear, tired, subdued)\r\n     *                                   Affects particle color saturation to create depth\r\n     */\r\n    spawn(behavior, emotion, particleRate, centerX, centerY, deltaTime, count = null, minParticles = 0, maxParticles = 10, scaleFactor = 1, particleSizeMultiplier = 1, emotionColors = null, undertone = null) {\r\n        this.scaleFactor = scaleFactor; // Store for particle creation\r\n        this.particleSizeMultiplier = particleSizeMultiplier; // Store for particle sizing\r\n        if (this.errorBoundary) {\r\n            return this.errorBoundary.wrap(() => {\r\n                this._spawn(behavior, emotion, particleRate, centerX, centerY, deltaTime, count, minParticles, maxParticles, emotionColors, undertone);\r\n            }, 'particle-spawn')();\r\n        } else {\r\n            this._spawn(behavior, emotion, particleRate, centerX, centerY, deltaTime, count, minParticles, maxParticles, emotionColors, undertone);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Resets the spawn accumulator (for tab switches)\r\n     */\r\n    resetAccumulator() {\r\n        this.spawnAccumulator = 0;\r\n    }\r\n\r\n    /**\r\n     * Internal spawn implementation - TIME-BASED accumulation for smooth spawning\r\n     * \r\n     * Applies undertone saturation adjustments to particle colors before spawning.\r\n     * The saturation system creates visual depth:\r\n     * - Intense/Confident: Oversaturated colors appear to pop forward\r\n     * - Clear: Normal midtone colors sit in the middle ground  \r\n     * - Tired/Subdued: Desaturated colors recede into background\r\n     * \r\n     * This creates a natural transition as particles cycle through their lifecycle,\r\n     * with new particles spawning with current undertone saturation while existing\r\n     * particles maintain their original colors until expiration.\r\n     */\r\n    _spawn(behavior, emotion, particleRate, centerX, centerY, deltaTime, count, minParticles = 0, maxParticles = 10, emotionColors = null, undertone = null) {\r\n        // Store emotion for particle initialization\r\n        this.currentEmotion = emotion;\r\n        \r\n        // Debug logging for excited emotion\r\n        if (emotion === 'excited' && !this._excitedDebugLogged) {\r\n            console.log('[ParticleSystem] Excited emotion spawn:', {\r\n                behavior,\r\n                emotion,\r\n                particleRate,\r\n                minParticles,\r\n                maxParticles,\r\n                emotionColors,\r\n                currentParticleCount: this.particles.length\r\n            });\r\n            this._excitedDebugLogged = true;\r\n            setTimeout(() => { this._excitedDebugLogged = false; }, 5000); // Reset after 5 seconds\r\n        }\r\n        \r\n        // Store base colors and undertone separately to ensure consistent application\r\n        this.baseEmotionColors = emotionColors;\r\n        this.currentUndertone = undertone;\r\n        \r\n        // Apply undertone saturation to emotion colors for all particles\r\n        // This adjustment persists for the lifetime of each particle, creating\r\n        // smooth visual transitions as particles naturally cycle\r\n        this.currentEmotionColors = emotionColors && undertone ? \r\n            applyUndertoneSaturationToArray(emotionColors, undertone) : \r\n            emotionColors;\r\n        \r\n        // Apply rhythm modulation if enabled\r\n        let rhythmModulatedRate = particleRate;\r\n        if (rhythmIntegration.isEnabled()) {\r\n            const emotionConfig = getEmotion(emotion);\r\n            if (emotionConfig) {\r\n                const modulation = rhythmIntegration.applyParticleRhythm(emotionConfig, this);\r\n                \r\n                // Apply emission burst on beat\r\n                if (modulation.emitBurst) {\r\n                    for (let i = 0; i < modulation.emitBurst && this.particles.length < maxParticles; i++) {\r\n                        this.spawnSingleParticle(behavior, centerX, centerY);\r\n                    }\r\n                }\r\n                \r\n                // Modulate emission rate\r\n                if (modulation.emissionRate !== undefined) {\r\n                    rhythmModulatedRate *= modulation.emissionRate;\r\n                }\r\n            }\r\n        }\r\n        \r\n        \r\n        // If specific count is provided, spawn that many\r\n        if (count !== null) {\r\n            for (let i = 0; i < count && this.particles.length < this.maxParticles; i++) {\r\n                this.spawnSingleParticle(behavior, centerX, centerY);\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // Skip spawning if frame rate is too low (performance optimization)\r\n        if (this.skipSpawnThisFrame) {\r\n            return;\r\n        }\r\n        \r\n        // Always maintain minimum particles\r\n        while (this.particles.length < minParticles && this.particles.length < this.maxParticles) {\r\n            this.spawnSingleParticle(behavior, centerX, centerY);\r\n        }\r\n        \r\n        // If we're at or above max for this emotion, don't spawn more\r\n        if (this.particles.length >= maxParticles) {\r\n            return;\r\n        }\r\n        \r\n        // Don't spawn if rate is 0\r\n        if (rhythmModulatedRate <= 0) return;\r\n        \r\n        // TIME-BASED SPAWNING using accumulation\r\n        // rhythmModulatedRate represents desired particles at 60 FPS\r\n        // So rate of 1 = 1 particle per 60 frames = 1 particle per second at 60fps\r\n        // Cap deltaTime to prevent huge accumulation spikes\r\n        const cappedDeltaTime = Math.min(deltaTime, 50);\r\n        const particlesPerSecond = rhythmModulatedRate; // Direct mapping: rate = particles/second\r\n        const particlesPerMs = particlesPerSecond / 1000;\r\n        \r\n        // Accumulate spawn time with capped delta\r\n        this.spawnAccumulator += particlesPerMs * cappedDeltaTime;\r\n        \r\n        // Cap accumulator to prevent excessive spawning after long pauses\r\n        this.spawnAccumulator = Math.min(this.spawnAccumulator, 3.0);\r\n        \r\n        // Spawn accumulated particles smoothly\r\n        while (this.spawnAccumulator >= 1.0 && this.particles.length < maxParticles) {\r\n            this.spawnSingleParticle(behavior, centerX, centerY);\r\n            this.spawnAccumulator -= 1.0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Spawns a single particle with the specified behavior\r\n     * @param {string} behavior - Particle behavior type\r\n     * @param {number} centerX - Center X coordinate\r\n     * @param {number} centerY - Center Y coordinate\r\n     */\r\n    spawnSingleParticle(behavior, centerX, centerY) {\r\n        // Hard limit check to prevent memory leaks\r\n        if (this.particles.length >= this.absoluteMaxParticles) {\r\n            return;\r\n        }\r\n        \r\n        // Calculate spawn position based on behavior\r\n        let spawnPos = this.getSpawnPosition(behavior, centerX, centerY);\r\n        \r\n        // CLAMP spawn position to canvas boundaries\r\n        const clampedPos = this.clampToCanvas(spawnPos.x, spawnPos.y, centerX, centerY);\r\n        spawnPos.x = clampedPos.x;\r\n        spawnPos.y = clampedPos.y;\r\n        \r\n        // Get particle from pool\r\n        const particle = this.getParticleFromPool(spawnPos.x, spawnPos.y, behavior);\r\n        \r\n        // Pass additional data for meditation_swirl\r\n        if (behavior === 'meditation_swirl' && spawnPos.palmCenter) {\r\n            particle.palmCenter = spawnPos.palmCenter;\r\n            particle.swirlAngle = spawnPos.swirlAngle;\r\n        }\r\n        \r\n        // Add to active particles\r\n        this.particles.push(particle);\r\n        this.particleCount++;\r\n        \r\n        // Debug logging disabled to prevent console spam\r\n        // Only uncomment for debugging particle spawning issues\r\n        // if (this.particleCount <= 3) {\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * Calculates spawn position based on behavior type\r\n     * @param {string} behavior - Particle behavior type\r\n     * @param {number} centerX - Center X coordinate\r\n     * @param {number} centerY - Center Y coordinate\r\n     * @returns {Object} Spawn position {x, y}\r\n     */\r\n    getSpawnPosition(behavior, centerX, centerY) {\r\n        // Calculate orb radius based on canvas size (matching EmotiveRenderer)\r\n        const canvasSize = Math.min(centerX * 2, centerY * 2);\r\n        const orbRadius = canvasSize / 12;  // Core radius\r\n        const glowRadius = orbRadius * 2.5; // Glow extends this far\r\n        \r\n        // CONSTRAIN spawn positions to stay within canvas boundaries\r\n        const canvasWidth = centerX * 2;\r\n        const canvasHeight = centerY * 2;\r\n        const margin = 30; // Keep spawns away from edges\r\n        \r\n        // Spawn particles outside the glow radius so they're visible\r\n        const minSpawnRadius = glowRadius * 1.1; // 10% beyond glow edge\r\n        const maxSpawnRadius = Math.min(glowRadius * 1.5, \r\n            centerX - margin, centerY - margin); // Constrain to canvas\r\n        \r\n        switch (behavior) {\r\n            case 'ambient':\r\n            case 'resting':\r\n                // Spawn at edge of glow where particles become visible\r\n                // They'll move outward to create \"emanating from center\" effect\r\n                const ambientAngle = Math.random() * Math.PI * 2;\r\n                const ambientRadius = glowRadius * 0.9; // Just at glow edge\r\n                return {\r\n                    x: centerX + Math.cos(ambientAngle) * ambientRadius,\r\n                    y: centerY + Math.sin(ambientAngle) * ambientRadius,\r\n                    angle: ambientAngle  // Pass angle for outward velocity\r\n                };\r\n                \r\n            case 'rising':\r\n            case 'falling':\r\n                // These can spawn from outside for visibility\r\n                const angle = Math.random() * Math.PI * 2;\r\n                const radius = minSpawnRadius + Math.random() * (maxSpawnRadius - minSpawnRadius);\r\n                return {\r\n                    x: centerX + Math.cos(angle) * radius,\r\n                    y: centerY + Math.sin(angle) * radius\r\n                };\r\n                \r\n            case 'aggressive':\r\n                // Spawn just outside the glow for aggressive burst effect\r\n                const aggressiveAngle = Math.random() * Math.PI * 2;\r\n                const aggressiveRadius = glowRadius + Math.random() * orbRadius;\r\n                return {\r\n                    x: centerX + Math.cos(aggressiveAngle) * aggressiveRadius,\r\n                    y: centerY + Math.sin(aggressiveAngle) * aggressiveRadius\r\n                };\r\n                \r\n            case 'scattering':\r\n                // Spawn at center for outward movement (scattering needs this)\r\n                return { x: centerX, y: centerY };\r\n                \r\n            case 'burst':\r\n                // Spawn at edge of orb so particles are visible\r\n                const burstAngle = Math.random() * Math.PI * 2;\r\n                if (this.currentEmotion === 'suspicion') {\r\n                    const burstRadius = orbRadius * 1.5; // Further outside for suspicion\r\n                    return {\r\n                        x: centerX + Math.cos(burstAngle) * burstRadius,\r\n                        y: centerY + Math.sin(burstAngle) * burstRadius\r\n                    };\r\n                } else if (this.currentEmotion === 'surprise') {\r\n                    // Surprise spawns around the orb edge for visibility\r\n                    const burstRadius = orbRadius * 1.2; // Just outside the orb\r\n                    return {\r\n                        x: centerX + Math.cos(burstAngle) * burstRadius,\r\n                        y: centerY + Math.sin(burstAngle) * burstRadius\r\n                    };\r\n                } else {\r\n                    // Other emotions spawn at center\r\n                    return { x: centerX, y: centerY };\r\n                }\r\n                \r\n            case 'repelling':\r\n                // Spawn at edge of glow so particles are visible\r\n                const repelAngle = Math.random() * Math.PI * 2;\r\n                const repelRadius = glowRadius * 0.9; // Just at glow edge\r\n                return {\r\n                    x: centerX + Math.cos(repelAngle) * repelRadius,\r\n                    y: centerY + Math.sin(repelAngle) * repelRadius\r\n                };\r\n                \r\n            case 'orbiting':\r\n                // Spawn at orbital distance outside the glow\r\n                const orbitAngle = Math.random() * Math.PI * 2;\r\n                const orbitRadius = glowRadius * 1.2 + Math.random() * glowRadius * 0.5;\r\n                return {\r\n                    x: centerX + Math.cos(orbitAngle) * orbitRadius,\r\n                    y: centerY + Math.sin(orbitAngle) * orbitRadius\r\n                };\r\n                \r\n            default:\r\n                return { x: centerX, y: centerY };\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Clamps a position to stay within canvas boundaries\r\n     */\r\n    clampToCanvas(x, y, centerX, centerY, margin = 30) {\r\n        const canvasWidth = centerX * 2;\r\n        const canvasHeight = centerY * 2;\r\n        return {\r\n            x: Math.max(margin, Math.min(canvasWidth - margin, x)),\r\n            y: Math.max(margin, Math.min(canvasHeight - margin, y))\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates all particles and manages lifecycle\r\n     * @param {number} deltaTime - Time since last update in milliseconds\r\n     * @param {number} centerX - Center X coordinate for behavior calculations\r\n     * @param {number} centerY - Center Y coordinate for behavior calculations\r\n     * @param {Object} gestureMotion - Optional gesture motion to apply\r\n     * @param {number} gestureProgress - Progress of gesture (0-1)\r\n     * @param {Object} undertoneModifier - Optional undertone modifications\r\n     */\r\n    update(deltaTime, centerX, centerY, gestureMotion = null, gestureProgress = 0, undertoneModifier = null) {\r\n        if (this.errorBoundary) {\r\n            const wrappedUpdate = this.errorBoundary.wrap(\r\n                (dt, cx, cy, gm, gp, um) => this._update(dt, cx, cy, gm, gp, um), \r\n                'particle-update'\r\n            );\r\n            return wrappedUpdate(deltaTime, centerX, centerY, gestureMotion, gestureProgress, undertoneModifier);\r\n        } else {\r\n            this._update(deltaTime, centerX, centerY, gestureMotion, gestureProgress, undertoneModifier);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal update implementation\r\n     */\r\n    _update(deltaTime, centerX, centerY, gestureMotion = null, gestureProgress = 0, undertoneModifier = null) {\r\n        // Update cleanup timer\r\n        this.cleanupTimer += deltaTime;\r\n        \r\n        // Periodic cleanup to prevent memory buildup\r\n        if (this.cleanupTimer >= this.cleanupInterval) { // Clean up every 5 seconds\r\n            this.performCleanup();\r\n            this.cleanupTimer = 0;\r\n        }\r\n        \r\n        // Memory leak detection - log every 30 seconds (reduced frequency)\r\n        if (Date.now() - this.lastMemoryCheck > 30000) {\r\n            const leaked = this.totalParticlesCreated - this.totalParticlesDestroyed;\r\n            // Only warn if leak is significant and growing\r\n            if (leaked > 200 && leaked > this.lastLeakedCount + 50) {\r\n                this.lastLeakedCount = leaked;\r\n            }\r\n            this.lastMemoryCheck = Date.now();\r\n        }\r\n        \r\n        // Update all particles\r\n        for (let i = this.particles.length - 1; i >= 0; i--) {\r\n            const particle = this.particles[i];\r\n            \r\n            // Update particle with gesture motion and undertone modifier\r\n            particle.update(deltaTime, centerX, centerY, undertoneModifier, gestureMotion, gestureProgress);\r\n            \r\n            // Remove dead particles\r\n            if (!particle.isAlive()) {\r\n                this.removeParticle(i);\r\n            }\r\n        }\r\n        \r\n        // Enforce particle limit by removing oldest if necessary\r\n        while (this.particles.length > this.maxParticles) {\r\n            this.removeParticle(0); // Remove oldest (first in array)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a temporary gesture behavior for particles\r\n     * @param {string} behaviorName - Name of the behavior (e.g., 'doppler')\r\n     * @param {boolean} active - Whether the behavior is active\r\n     */\r\n    setGestureBehavior(behaviorName, active) {\r\n        this.gestureBehavior = active ? behaviorName : null;\r\n        \r\n        // Apply gesture behavior to existing particles\r\n        if (active) {\r\n            this.particles.forEach(particle => {\r\n                particle.gestureBehavior = behaviorName;\r\n            });\r\n        } else {\r\n            // Clear gesture behavior from particles\r\n            this.particles.forEach(particle => {\r\n                particle.gestureBehavior = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a particle at the specified index\r\n     * @param {number} index - Index of particle to remove\r\n     */\r\n    removeParticle(index) {\r\n        if (index >= 0 && index < this.particles.length) {\r\n            const particle = this.particles.splice(index, 1)[0];\r\n            // Clear any cached data before returning to pool\r\n            particle.cachedGradient = null;\r\n            particle.cachedGradientKey = null;\r\n            // Don't set behaviorData to null - let reset handle it properly\r\n            this.returnParticleToPool(particle);\r\n            this.particleCount = Math.max(0, this.particleCount - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders all particles to the canvas context\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas rendering context\r\n     * @param {string} emotionColor - Color to use for particle rendering\r\n     * @param {Object} gestureTransform - Optional gesture transform data\r\n     */\r\n    render(ctx, emotionColor = '#ffffff', gestureTransform = null) {\r\n        if (this.errorBoundary) {\r\n            return this.errorBoundary.wrap(() => {\r\n                this._render(ctx, emotionColor, gestureTransform);\r\n            }, 'particle-render')();\r\n        } else {\r\n            this._render(ctx, emotionColor, gestureTransform);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Renders particles in the background layer (behind orb)\r\n     * Particles with z < 0 are rendered, appearing smaller based on depth\r\n     * \r\n     * @param {CanvasRenderingContext2D} ctx - Canvas rendering context\r\n     * @param {string} emotionColor - Color to use for particle rendering\r\n     * \r\n     * LAYER DISTRIBUTION:\r\n     * - ~92% of particles render in background (z < 0)\r\n     * - Particles scale from 80% to 100% size based on z-depth\r\n     */\r\n    renderBackground(ctx, emotionColor = '#ffffff', gestureTransform = null) {\r\n        if (this.errorBoundary) {\r\n            return this.errorBoundary.wrap(() => {\r\n                this._renderLayer(ctx, emotionColor, false, gestureTransform); // false = background (z < 0)\r\n            }, 'particle-render-bg')();\r\n        } else {\r\n            this._renderLayer(ctx, emotionColor, false, gestureTransform);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Renders particles in the foreground layer (in front of orb)\r\n     * Particles with z >= 0 are rendered, appearing larger based on depth\r\n     * \r\n     * @param {CanvasRenderingContext2D} ctx - Canvas rendering context\r\n     * @param {string} emotionColor - Color to use for particle rendering\r\n     * \r\n     * LAYER DISTRIBUTION:\r\n     * - ~8% of particles render in foreground (z >= 0) \r\n     * - Particles scale from 100% to 120% size based on z-depth\r\n     * - Spawn with offset to prevent visual stacking\r\n     */\r\n    renderForeground(ctx, emotionColor = '#ffffff', gestureTransform = null) {\r\n        if (this.errorBoundary) {\r\n            return this.errorBoundary.wrap(() => {\r\n                this._renderLayer(ctx, emotionColor, true, gestureTransform); // true = foreground (z >= 0)\r\n            }, 'particle-render-fg')();\r\n        } else {\r\n            this._renderLayer(ctx, emotionColor, true, gestureTransform);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal render implementation for a specific layer\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas rendering context\r\n     * @param {string} emotionColor - Color to use for particle rendering\r\n     * @param {boolean} isForeground - true for foreground (z >= 0), false for background (z < 0)\r\n     */\r\n    _renderLayer(ctx, emotionColor, isForeground, gestureTransform = null) {\r\n        // Sort particles by rendering properties to minimize state changes\r\n        const visibleParticles = [];\r\n        \r\n        // First pass: cull off-screen, dead, and wrong-layer particles\r\n        const margin = 50;\r\n        const canvasWidth = ctx.canvas.width;\r\n        const canvasHeight = ctx.canvas.height;\r\n        \r\n        for (const particle of this.particles) {\r\n            // Filter by z-layer\r\n            const particleInForeground = particle.z >= 0;\r\n            if (particleInForeground !== isForeground) {\r\n                continue; // Skip particles in wrong layer\r\n            }\r\n            \r\n            // Skip off-screen particles (culling)\r\n            if (particle.x < -margin || particle.x > canvasWidth + margin ||\r\n                particle.y < -margin || particle.y > canvasHeight + margin) {\r\n                continue;\r\n            }\r\n            \r\n            // Skip dead particles\r\n            if (particle.life <= 0) continue;\r\n            \r\n            visibleParticles.push(particle);\r\n        }\r\n        \r\n        // Sort by render type to minimize state changes\r\n        visibleParticles.sort((a, b) => {\r\n            if (a.isCellShaded !== b.isCellShaded) {\r\n                return a.isCellShaded ? -1 : 1;\r\n            }\r\n            if (a.hasGlow !== b.hasGlow) {\r\n                return a.hasGlow ? -1 : 1;\r\n            }\r\n            return 0;\r\n        });\r\n        \r\n        // Actually render the particles\r\n        this._renderParticles(ctx, visibleParticles, emotionColor, gestureTransform);\r\n    }\r\n    \r\n    /**\r\n     * Internal render implementation - batch optimized rendering (legacy, renders all)\r\n     */\r\n    _render(ctx, emotionColor, gestureTransform = null) {\r\n        // Sort particles by rendering properties to minimize state changes\r\n        const visibleParticles = [];\r\n        \r\n        // First pass: cull off-screen and dead particles\r\n        const margin = 50;\r\n        const canvasWidth = ctx.canvas.width;\r\n        const canvasHeight = ctx.canvas.height;\r\n        \r\n        for (const particle of this.particles) {\r\n            // Skip off-screen particles (culling)\r\n            if (particle.x < -margin || particle.x > canvasWidth + margin ||\r\n                particle.y < -margin || particle.y > canvasHeight + margin) {\r\n                continue;\r\n            }\r\n            \r\n            // Skip dead particles\r\n            if (particle.life <= 0) continue;\r\n            \r\n            visibleParticles.push(particle);\r\n        }\r\n        \r\n        // Sort by render type to minimize state changes\r\n        // Group: cellShaded first, then by hasGlow, then by color\r\n        visibleParticles.sort((a, b) => {\r\n            if (a.isCellShaded !== b.isCellShaded) {\r\n                return a.isCellShaded ? -1 : 1;\r\n            }\r\n            if (a.hasGlow !== b.hasGlow) {\r\n                return a.hasGlow ? -1 : 1;\r\n            }\r\n            // Group by color to reduce fillStyle changes\r\n            const colorA = a.color || emotionColor;\r\n            const colorB = b.color || emotionColor;\r\n            if (colorA !== colorB) {\r\n                return colorA < colorB ? -1 : 1;\r\n            }\r\n            return 0;\r\n        });\r\n        \r\n        // Actually render the particles\r\n        this._renderParticles(ctx, visibleParticles, emotionColor, gestureTransform);\r\n    }\r\n    \r\n    /**\r\n     * Render a list of particles with batch optimization\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas rendering context\r\n     * @param {Array} visibleParticles - Array of particles to render\r\n     * @param {string} emotionColor - Color to use for particle rendering\r\n     * @param {Object} gestureTransform - Optional gesture transform data\r\n     */\r\n    _renderParticles(ctx, visibleParticles, emotionColor, gestureTransform = null) {\r\n        // Batch render with minimized state changes\r\n        ctx.save();\r\n        let lastFillStyle = null;\r\n        let lastStrokeStyle = null;\r\n        let lastLineWidth = null;\r\n\r\n        for (const particle of visibleParticles) {\r\n            // For cell-shaded, use original render (they need complex stroke/fill combos)\r\n            if (particle.isCellShaded) {\r\n                particle.render(ctx, emotionColor);\r\n                // Reset cached values since particle.render may have changed them\r\n                lastFillStyle = null;\r\n                lastStrokeStyle = null;\r\n                lastLineWidth = null;\r\n            } else {\r\n                // Batch-optimized rendering for regular particles\r\n                const particleColor = particle.color || emotionColor;\r\n                \r\n                // Only set fillStyle if it changed\r\n                if (particleColor !== lastFillStyle) {\r\n                    ctx.fillStyle = particleColor;\r\n                    lastFillStyle = particleColor;\r\n                }\r\n                \r\n                // Validate position once\r\n                if (!isFinite(particle.x) || !isFinite(particle.y)) continue;\r\n                \r\n                // Use depth-adjusted size if particle has the method\r\n                const depthSize = particle.getDepthAdjustedSize ? particle.getDepthAdjustedSize() : particle.size;\r\n                const safeSize = Math.max(0.1, depthSize);\r\n                \r\n                // Apply firefly effect if sparkle gesture is active\r\n                let fireflyGlow = 1.0;\r\n                if (gestureTransform && gestureTransform.fireflyEffect) {\r\n                    // Each particle gets unique phase for async firefly blinking\r\n                    const particlePhase = (particle.x * 0.01 + particle.y * 0.01 + particle.size * 0.1) % (Math.PI * 2);\r\n                    const time = gestureTransform.fireflyTime || (Date.now() * 0.001);\r\n                    const intensity = gestureTransform.particleGlow || 2.0;\r\n                    \r\n                    // Create firefly pulse pattern\r\n                    fireflyGlow = 0.3 + Math.max(0, Math.sin(time * 3 + particlePhase)) * intensity;\r\n                }\r\n                \r\n                // Apply flicker effect if flicker gesture is active (now does particle shimmer)\r\n                if (gestureTransform && gestureTransform.flickerEffect) {\r\n                    // Each particle shimmers with a wave pattern\r\n                    const particlePhase = (particle.x * 0.02 + particle.y * 0.02) % (Math.PI * 2);\r\n                    const time = gestureTransform.flickerTime || (Date.now() * 0.001);\r\n                    const intensity = gestureTransform.particleGlow || 2.0;\r\n                    \r\n                    // Create shimmer wave pattern - faster oscillation\r\n                    fireflyGlow = 0.5 + Math.sin(time * 12 + particlePhase) * intensity * 0.5;\r\n                }\r\n                \r\n                // Apply shimmer effect if shimmer gesture is active (subtle glow)\r\n                if (gestureTransform && gestureTransform.shimmerEffect) {\r\n                    // Each particle gets a subtle brightness variation based on distance from center\r\n                    const dx = particle.x - (ctx.canvas.width / 2);\r\n                    const dy = particle.y - (ctx.canvas.height / 2);\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    const normalizedDistance = distance / 200; // Normalize to reasonable range\r\n                    \r\n                    const time = gestureTransform.shimmerTime || (Date.now() * 0.001);\r\n                    const wave = gestureTransform.shimmerWave || 0;\r\n                    const intensity = gestureTransform.particleGlow || 1.2;\r\n                    \r\n                    // Subtle traveling wave from center outward\r\n                    const travelingWave = Math.sin(time * 3 - normalizedDistance + wave);\r\n                    \r\n                    // Very subtle glow modulation\r\n                    fireflyGlow = 1 + travelingWave * 0.15 * intensity;\r\n                }\r\n                \r\n                // Apply glow effect if glow gesture is active (radiant burst)\r\n                if (gestureTransform && gestureTransform.glowEffect) {\r\n                    const envelope = gestureTransform.glowEnvelope || 0;\r\n                    const progress = gestureTransform.glowProgress || 0;\r\n                    const intensity = gestureTransform.particleGlow || 2.0;\r\n\r\n                    // Particles brighten based on distance - closer particles glow first\r\n                    const dx = particle.x - (ctx.canvas.width / 2);\r\n                    const dy = particle.y - (ctx.canvas.height / 2);\r\n                    const distance = Math.sqrt(dx * dx + dy * dy);\r\n                    const normalizedDistance = distance / 300;\r\n\r\n                    // Glow radiates outward\r\n                    const radiateDelay = Math.min(normalizedDistance * 0.3, 0.5);\r\n                    const localProgress = Math.max(0, (progress - radiateDelay) / (1 - radiateDelay));\r\n                    const localEnvelope = Math.sin(localProgress * Math.PI);\r\n\r\n                    // ACTUALLY MAKE PARTICLES GLOW by temporarily setting glow properties\r\n                    // Store original values if not already stored\r\n                    if (!particle._originalGlow) {\r\n                        particle._originalGlow = {\r\n                            hasGlow: particle.hasGlow,\r\n                            glowSizeMultiplier: particle.glowSizeMultiplier || 0\r\n                        };\r\n                    }\r\n\r\n                    // Enable glow and set a large multiplier for visibility\r\n                    particle.hasGlow = true;\r\n                    particle.glowSizeMultiplier = Math.max(3.0, particle._originalGlow.glowSizeMultiplier) + localEnvelope * intensity * 3;\r\n\r\n                    // Also boost particle size slightly\r\n                    const glowSizeBoost = 1 + localEnvelope * 0.3;\r\n                    safeSize = safeSize * glowSizeBoost;\r\n\r\n                    // Cleanup flag - restore original values when effect ends\r\n                    if (progress >= 0.99 && particle._originalGlow) {\r\n                        particle.hasGlow = particle._originalGlow.hasGlow;\r\n                        particle.glowSizeMultiplier = particle._originalGlow.glowSizeMultiplier;\r\n                        delete particle._originalGlow;\r\n                    }\r\n                }\r\n                \r\n                // Draw glow layers if needed\r\n                if (particle.hasGlow || fireflyGlow > 1.0) {\r\n                    const glowRadius = Math.max(0.1, safeSize * (particle.glowSizeMultiplier || 1.5) * fireflyGlow);\r\n                    \r\n                    // Outer glow (enhanced by firefly effect)\r\n                    ctx.globalAlpha = particle.opacity * 0.15 * fireflyGlow;\r\n                    ctx.beginPath();\r\n                    ctx.arc(particle.x, particle.y, glowRadius, 0, Math.PI * 2);\r\n                    ctx.fill();\r\n                    \r\n                    // Inner glow (enhanced by firefly effect)\r\n                    ctx.globalAlpha = particle.opacity * 0.25 * fireflyGlow;\r\n                    ctx.beginPath();\r\n                    ctx.arc(particle.x, particle.y, glowRadius * 0.6, 0, Math.PI * 2);\r\n                    ctx.fill();\r\n                }\r\n                \r\n                // Draw core (also brightened by firefly effect)\r\n                ctx.globalAlpha = particle.opacity * (particle.baseOpacity || 0.5) * 0.6 * Math.min(2.0, fireflyGlow);\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x, particle.y, safeSize, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n        }\r\n        \r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Clears all particles and returns them to the pool\r\n     */\r\n    clear() {\r\n        this.stateChangeCount++;\r\n        \r\n        // Return all particles to pool but avoid duplicates\r\n        while (this.particles.length > 0) {\r\n            const particle = this.particles.pop();\r\n            // Clear cached data before returning\r\n            if (particle.cachedColors) {\r\n                particle.cachedColors.clear();\r\n            }\r\n            // Clear behaviorData properties but keep the object\r\n            if (particle.behaviorData) {\r\n                for (let key in particle.behaviorData) {\r\n                    delete particle.behaviorData[key];\r\n                }\r\n            }\r\n            // Only add to pool if it's not already there and pool has space\r\n            if (this.pool.length < this.poolSize && !this.pool.includes(particle)) {\r\n                this.pool.push(particle);\r\n            }\r\n        }\r\n        \r\n        this.particles.length = 0;\r\n        this.particleCount = 0;\r\n        this.spawnAccumulator = 0; // Reset accumulator when clearing\r\n        \r\n        // Trim pool if it's grown too large\r\n        if (this.pool.length > this.poolSize) {\r\n            // Actually remove excess particles from pool\r\n            const excess = this.pool.length - this.poolSize;\r\n            this.pool.splice(this.poolSize, excess);\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * Triggers a burst of particles for gesture effects\r\n     * @param {number} count - Number of particles to burst\r\n     * @param {string} behavior - Behavior type for burst particles\r\n     * @param {number} centerX - Center X coordinate\r\n     * @param {number} centerY - Center Y coordinate\r\n     */\r\n    burst(count, behavior, centerX, centerY) {\r\n        if (this.errorBoundary) {\r\n            return this.errorBoundary.wrap(() => {\r\n                this._burst(count, behavior, centerX, centerY);\r\n            }, 'particle-burst')();\r\n        } else {\r\n            this._burst(count, behavior, centerX, centerY);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal burst implementation\r\n     */\r\n    _burst(count, behavior, centerX, centerY) {\r\n        const actualCount = Math.min(count, this.maxParticles - this.particles.length);\r\n        \r\n        for (let i = 0; i < actualCount; i++) {\r\n            this.spawnSingleParticle(behavior, centerX, centerY);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs periodic cleanup to prevent memory buildup\r\n     */\r\n    performCleanup() {\r\n        // Trim pool if it's grown too large\r\n        if (this.pool.length > this.poolSize) {\r\n            // Clear excess particles from pool\r\n            const excess = this.pool.length - this.poolSize;\r\n            for (let i = 0; i < excess; i++) {\r\n                const particle = this.pool.pop();\r\n                // Ensure all references are cleared\r\n                if (particle) {\r\n                    particle.cachedGradient = null;\r\n                    particle.cachedGradientKey = null;\r\n                    particle.behaviorData = null;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Clear any cached data from active particles\r\n        for (const particle of this.particles) {\r\n            if (particle.cachedGradient && particle.life < 0.5) {\r\n                // Clear gradient cache for fading particles\r\n                particle.cachedGradient = null;\r\n                particle.cachedGradientKey = null;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Gets current particle system statistics\r\n     * @returns {Object} Performance and state information\r\n     */\r\n    getStats() {\r\n        return {\r\n            activeParticles: this.particles.length,\r\n            maxParticles: this.maxParticles,\r\n            poolSize: this.pool.length,\r\n            poolHits: this.poolHits,\r\n            poolMisses: this.poolMisses,\r\n            poolEfficiency: this.poolHits / Math.max(1, this.poolHits + this.poolMisses),\r\n            spawnAccumulator: this.spawnAccumulator\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum number of particles\r\n     * @param {number} maxParticles - New maximum particle count\r\n     */\r\n    setMaxParticles(maxParticles) {\r\n        this.originalMaxParticles = this.originalMaxParticles || this.maxParticles;\r\n        this.maxParticles = Math.max(1, maxParticles);\r\n        \r\n        // Remove excess particles if new limit is lower\r\n        while (this.particles.length > this.maxParticles) {\r\n            this.removeParticle(0);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Cleans up dead particles and optimizes the pool\r\n     */\r\n    cleanupDeadParticles() {\r\n        // Remove any dead particles that shouldn't be there\r\n        const beforeCount = this.particles.length;\r\n        this.particles = this.particles.filter(particle => particle.isAlive());\r\n        const removed = beforeCount - this.particles.length;\r\n        \r\n        // Clear excess items from the pool to free memory\r\n        if (this.pool.length > 20) {\r\n            this.pool.length = 20;\r\n        }\r\n        \r\n        return removed;\r\n    }\r\n\r\n    /**\r\n     * Gets particles by behavior type for debugging\r\n     * @param {string} behavior - Behavior type to filter by\r\n     * @returns {Array} Particles with matching behavior\r\n     */\r\n    getParticlesByBehavior(behavior) {\r\n        return this.particles.filter(particle => particle.behavior === behavior);\r\n    }\r\n\r\n    /**\r\n     * Validates that all particles are in valid state\r\n     * @returns {boolean} True if all particles are valid\r\n     */\r\n    validateParticles() {\r\n        for (const particle of this.particles) {\r\n            if (!particle.isAlive() || particle.life < 0 || particle.life > 1) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Forces cleanup of dead particles (for testing)\r\n     */\r\n    cleanup() {\r\n        for (let i = this.particles.length - 1; i >= 0; i--) {\r\n            if (!this.particles[i].isAlive()) {\r\n                this.removeParticle(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroys the particle system and cleans up resources\r\n     */\r\n    destroy() {\r\n        this.clear();\r\n        this.pool.length = 0;\r\n        this.poolHits = 0;\r\n        this.poolMisses = 0;\r\n        // ParticleSystem destroyed\r\n    }\r\n}\r\n\r\nexport default ParticleSystem;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                      ◐ ◑ ◒ ◓  UNDERTONE MODIFIERS  ◓ ◒ ◑ ◐                      \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Undertone Modifiers - Subtle Emotion Variations\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module UndertoneModifiers\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Undertones add NUANCE to emotions - like being \"nervously happy\" or              \n * ║ \"confidently angry\". These modifiers STACK on top of emotion modifiers            \n * ║ to create more complex, realistic emotional expressions.                          \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎨 MULTIPLIER EFFECTS (Applied to Base Gesture)                                   \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • speed        : Animation speed (0.5=half speed, 2.0=double speed)               \n * │ • amplitude    : Movement size (0.5=smaller, 2.0=bigger)                          \n * │ • intensity    : Effect strength (0.5=subtle, 2.0=extreme)                        \n * │ • smoothness   : Animation smoothing (0.5=jerky, 1.5=very smooth)                 \n * │ • regularity   : Pattern consistency (0.5=chaotic, 1.0=regular)                   \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ ⚡ SPECIAL EFFECTS (Boolean Flags)                                                \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • addFlutter      : Butterfly-like motion (nervous)                               \n * │ • addMicroShake   : Tiny trembling (nervous, tired)                               \n * │ • addPower        : Strong, decisive motion (confident)                           \n * │ • addDrag         : Sluggish, heavy motion (tired)                                \n * │ • addTension      : Tight, controlled motion (intense)                            \n * │ • addSoftness     : Gentle, flowing motion (subdued)                              \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ ❌ DO NOT ADD HERE (Belongs in Other Files)                                       \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ ✗ Base gesture definitions   → use gestureConfig.js                              \n * │ ✗ Emotion modifiers         → use emotionModifiers.js                            \n * │ ✗ Visual properties         → use emotionMap.js                                  \n * │ ✗ Particle behaviors        → use Particle.js                                    \n * │ ✗ State logic              → use EmotiveStateMachine.js                          \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                           ADDING NEW UNDERTONES                                   \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ 1. Create new undertone object with all base multipliers (default to 1.0)         \n * ║ 2. Add special effect flags as needed (addXXX properties)                         \n * ║ 3. Test combinations with ALL emotions for unexpected interactions                \n * ║ 4. Document the intended \"feel\" and use cases                                     \n * ║ 5. Add to valid undertones in ErrorBoundary.js                                    \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport const UNDERTONE_MODIFIERS = {\n    // No undertone - neutral multipliers\n    none: {\n        speed: 1.0,\n        amplitude: 1.0,\n        intensity: 1.0,\n        smoothness: 1.0,\n        regularity: 1.0\n    },\n    \n    nervous: {\n        speed: 1.2,        // 20% faster\n        amplitude: 0.9,    // 10% smaller (contained)\n        intensity: 1.1,    // 10% more intense\n        smoothness: 0.7,   // 30% less smooth (fluttery)\n        regularity: 0.6,   // Irregular (butterflies)\n        addFlutter: true,  // Butterfly-like flutter\n        addMicroShake: true // Subtle tremor\n    },\n    \n    confident: {\n        speed: 0.9,        // 10% slower (deliberate)\n        amplitude: 1.3,    // 30% bigger (bold)\n        intensity: 1.2,    // 20% more intense\n        smoothness: 1.1,   // 10% smoother (controlled)\n        regularity: 1.2,   // Very regular (assured)\n        addPower: true,    // Strong, decisive motion\n        addHold: true      // Brief pause at peaks\n    },\n    \n    tired: {\n        speed: 0.7,        // 30% slower\n        amplitude: 0.7,    // 30% smaller\n        intensity: 0.8,    // 20% less intense\n        smoothness: 1.3,   // 30% smoother (sluggish)\n        regularity: 0.8,   // Slightly irregular (drowsy)\n        addDroop: true,    // Downward tendency\n        addPause: true     // Occasional hesitation\n    },\n    \n    intense: {\n        speed: 1.3,        // 30% faster\n        amplitude: 1.2,    // 20% bigger\n        intensity: 1.4,    // 40% more intense\n        smoothness: 0.6,   // 40% less smooth (sharp)\n        regularity: 0.9,   // Slightly irregular\n        addPulse: true,    // Pulsing intensity\n        addFocus: true     // Concentrated motion\n    },\n    \n    subdued: {\n        speed: 0.8,        // 20% slower\n        amplitude: 0.8,    // 20% smaller\n        intensity: 0.7,    // 30% less intense\n        smoothness: 1.2,   // 20% smoother\n        regularity: 1.1,   // Regular (restrained)\n        addSoftness: true, // Gentle, muted motion\n        addFade: true      // Fading at edges\n    }\n};\n\n/**\n * Get undertone modifier\n * @param {string} undertone - Name of the undertone\n * @returns {Object} Modifier object with default values if undertone not found\n */\nexport function getUndertoneModifier(undertone) {\n    if (!undertone || undertone === '') {\n        return UNDERTONE_MODIFIERS.none;\n    }\n    return UNDERTONE_MODIFIERS[undertone] || UNDERTONE_MODIFIERS.none;\n}","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                   ◐ ◑ ◒ ◓  GESTURE COMPOSITOR  ◓ ◒ ◑ ◐                   \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Gesture Compositor - Emotion-Modified Animation Synthesis\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module GestureCompositor\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ The ANIMATOR'S MIXER. Takes base gestures (bounce, pulse, etc.) and blends        \n * ║ them with emotional modifiers and undertones to create nuanced animations.        \n * ║ A happy bounce is different from a sad bounce - this is where that happens!       \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎭 COMPOSITION FORMULA                                                             \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ Final Animation = Base Gesture × Emotion Modifier × Undertone Modifier            \n * │                                                                                    \n * │ Example: Bounce + Joy + Confident                                                 \n * │   = Fast, big, springy bounce with extra confidence                               \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🔗 DEPENDENCIES                                                                    \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • gestures/index.js     : Modular gesture system with base configs                \n * │ • emotionModifiers.js   : How emotions affect movement                            \n * │ • undertoneModifiers.js : Subtle variations in expression                         \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\nimport { getGesture } from './gestures/index.js';\nimport { getEmotionModifiers } from './emotions/index.js';\nimport { getUndertoneModifier } from '../config/undertoneModifiers.js';\n\nclass GestureCompositor {\n    constructor() {\n        // Cache for computed parameters\n        this.cache = new Map();\n        \n        // Pre-calculate common easing curves for performance\n        this.easingCache = new Map();\n        this.preCalculateEasingCurves();\n    }\n    \n    /**\n     * Pre-calculate common easing curves to avoid repeated calculations\n     */\n    preCalculateEasingCurves() {\n        const steps = 100;\n        const easingTypes = ['linear', 'ease-in', 'ease-out', 'ease-in-out', 'bounce'];\n        \n        for (const type of easingTypes) {\n            const curve = new Float32Array(steps + 1);\n            for (let i = 0; i <= steps; i++) {\n                const t = i / steps;\n                curve[i] = this.calculateEasing(t, type);\n            }\n            this.easingCache.set(type, curve);\n        }\n    }\n    \n    /**\n     * Calculate easing value\n     */\n    calculateEasing(t, type) {\n        switch(type) {\n            case 'ease-in':\n                return t * t;\n            case 'ease-out':\n                return t * (2 - t);\n            case 'ease-in-out':\n                return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n            case 'bounce':\n                if (t < 0.363636) return 7.5625 * t * t;\n                if (t < 0.727272) return 7.5625 * (t -= 0.545454) * t + 0.75;\n                if (t < 0.909090) return 7.5625 * (t -= 0.818181) * t + 0.9375;\n                return 7.5625 * (t -= 0.954545) * t + 0.984375;\n            default:\n                return t; // linear\n        }\n    }\n    \n    /**\n     * Get easing value from cache\n     */\n    getEasingValue(progress, type) {\n        const curve = this.easingCache.get(type);\n        if (!curve) return progress; // Fallback to linear\n        \n        const index = Math.min(Math.floor(progress * 100), 100);\n        return curve[index];\n    }\n    \n    /**\n     * Compose final gesture parameters\n     * @param {string} gesture - Name of the gesture\n     * @param {string} emotion - Current emotion state\n     * @param {string} undertone - Current undertone (optional)\n     * @returns {Object} Final composed parameters for the gesture\n     */\n    compose(gesture, emotion, undertone = null) {\n        // Check cache first\n        const cacheKey = `${gesture}-${emotion}-${undertone || 'none'}`;\n        if (this.cache.has(cacheKey)) {\n            return this.cache.get(cacheKey);\n        }\n        \n        // Get base configuration from modular gesture system\n        const gestureModule = getGesture(gesture);\n        const base = gestureModule ? gestureModule.config : {\n            duration: 500,\n            amplitude: 20,\n            easing: 'sine'\n        };\n        const emotionMod = getEmotionModifiers(emotion);\n        const undertoneMod = getUndertoneModifier(undertone);\n        \n        // Compose the final parameters\n        const composed = this.applyModifiers(base, emotionMod, undertoneMod, gesture);\n        \n        // Cache the result with size limit\n        if (this.cache.size > 100) {\n            // Clear cache if it gets too large\n            this.cache.clear();\n        }\n        this.cache.set(cacheKey, composed);\n        \n        return composed;\n    }\n    \n    /**\n     * Apply modifiers to base parameters\n     * @param {Object} base - Base gesture configuration\n     * @param {Object} emotionMod - Emotion modifiers\n     * @param {Object} undertoneMod - Undertone modifiers\n     * @param {string} gesture - Gesture name for special handling\n     * @returns {Object} Modified parameters\n     */\n    applyModifiers(base, emotionMod, undertoneMod, gesture) {\n        const result = { ...base };\n        \n        // Apply speed modifiers (affects duration inversely)\n        const speedMultiplier = emotionMod.speed * undertoneMod.speed;\n        result.duration = Math.round(base.duration / speedMultiplier);\n        \n        // Apply amplitude modifiers\n        if (result.amplitude !== undefined) {\n            result.amplitude = base.amplitude * emotionMod.amplitude * undertoneMod.amplitude;\n        }\n        \n        // Apply scale modifiers\n        if (result.scaleAmount !== undefined) {\n            result.scaleAmount = base.scaleAmount * emotionMod.intensity * undertoneMod.intensity;\n        }\n        if (result.scaleTarget !== undefined) {\n            const scaleModifier = emotionMod.amplitude * undertoneMod.amplitude;\n            result.scaleTarget = 1 + (base.scaleTarget - 1) * scaleModifier;\n        }\n        \n        // Apply glow modifiers\n        if (result.glowAmount !== undefined) {\n            result.glowAmount = base.glowAmount * emotionMod.intensity * undertoneMod.intensity;\n        }\n        if (result.glowPeak !== undefined) {\n            result.glowPeak = 1 + (base.glowPeak - 1) * emotionMod.intensity * undertoneMod.intensity;\n        }\n        \n        // Apply rotation modifiers\n        if (result.rotations !== undefined) {\n            result.rotations = base.rotations * emotionMod.amplitude * undertoneMod.amplitude;\n        }\n        if (result.angle !== undefined) {\n            result.angle = base.angle * emotionMod.amplitude * undertoneMod.amplitude;\n        }\n        \n        // Apply distance modifiers (for drift)\n        if (result.distance !== undefined) {\n            result.distance = base.distance * emotionMod.amplitude * undertoneMod.amplitude;\n        }\n        \n        // Apply smoothness (affects easing)\n        const smoothness = emotionMod.smoothness * undertoneMod.smoothness;\n        result.smoothness = smoothness;\n        result.easing = this.selectEasing(base.easing, smoothness);\n        \n        // Apply regularity (affects patterns)\n        result.regularity = emotionMod.regularity * undertoneMod.regularity;\n        \n        // Add special effects based on emotion\n        result.effects = [];\n        if (emotionMod.addBounce) result.effects.push('bounce');\n        if (emotionMod.addGravity) result.effects.push('gravity');\n        if (emotionMod.addShake) result.effects.push('shake');\n        if (emotionMod.addJitter) result.effects.push('shake');\n        if (emotionMod.addPop) result.effects.push('pop');\n        if (emotionMod.addRecoil) result.effects.push('recoil');\n        if (emotionMod.addWarmth) result.effects.push('warmth');\n        if (emotionMod.addFlow) result.effects.push('flow');\n        if (emotionMod.addWobble) result.effects.push('wobble');\n        if (emotionMod.addVibration) result.effects.push('vibration');\n        if (emotionMod.addDrag) result.effects.push('drag');\n        if (emotionMod.addWeight) result.effects.push('weight');\n        if (emotionMod.addTension) result.effects.push('tension');\n        if (emotionMod.addPrecision) result.effects.push('precision');\n        \n        // Add undertone effects\n        if (undertoneMod.addFlutter) result.effects.push('flutter');\n        if (undertoneMod.addMicroShake) result.effects.push('microShake');\n        if (undertoneMod.addPower) result.effects.push('power');\n        if (undertoneMod.addHold) result.effects.push('hold');\n        if (undertoneMod.addDroop) result.effects.push('droop');\n        if (undertoneMod.addPause) result.effects.push('pause');\n        if (undertoneMod.addPulse) result.effects.push('pulse');\n        if (undertoneMod.addFocus) result.effects.push('focus');\n        if (undertoneMod.addSoftness) result.effects.push('softness');\n        if (undertoneMod.addFade) result.effects.push('fade');\n        \n        // Apply gesture-specific modifications\n        this.applyGestureSpecificMods(result, gesture, emotionMod, undertoneMod);\n        \n        // Include particleMotion if it exists in base config\n        if (base.particleMotion) {\n            result.particleMotion = { ...base.particleMotion };\n            \n            // Apply modifiers to particle motion strength\n            if (result.particleMotion.strength !== undefined) {\n                result.particleMotion.strength *= emotionMod.intensity * undertoneMod.intensity;\n            }\n            \n            // Apply speed modifiers to particle motion frequency\n            if (result.particleMotion.frequency !== undefined) {\n                result.particleMotion.frequency *= speedMultiplier;\n            }\n            \n            // Apply amplitude modifiers to particle motion amplitude\n            if (result.particleMotion.amplitude !== undefined) {\n                result.particleMotion.amplitude *= emotionMod.amplitude * undertoneMod.amplitude;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Select easing function based on smoothness\n     * @param {string} baseEasing - Base easing type\n     * @param {number} smoothness - Smoothness multiplier\n     * @returns {string} Selected easing function\n     */\n    selectEasing(baseEasing, smoothness) {\n        if (smoothness < 0.5) {\n            return 'linear'; // Very sharp\n        } else if (smoothness < 0.8) {\n            return 'quad'; // Somewhat sharp\n        } else if (smoothness < 1.2) {\n            return baseEasing; // Normal\n        } else if (smoothness < 1.5) {\n            return 'cubic'; // Smooth\n        } else {\n            return 'sine'; // Very smooth\n        }\n    }\n    \n    /**\n     * Apply gesture-specific modifications\n     * @param {Object} result - Current parameters\n     * @param {string} gesture - Gesture name\n     * @param {Object} emotionMod - Emotion modifiers\n     * @param {Object} undertoneMod - Undertone modifiers\n     */\n    applyGestureSpecificMods(result, gesture, emotionMod, undertoneMod) {\n        switch(gesture) {\n            case 'bounce':\n                // Angry bounce is more violent\n                if (emotionMod.addShake) {\n                    result.frequency = Math.floor(result.frequency * 1.5);\n                }\n                // Sad bounce barely leaves ground\n                if (emotionMod.addGravity) {\n                    result.amplitude *= 0.6;\n                    result.frequency = 1;\n                }\n                break;\n                \n            case 'pulse':\n                // Love pulse is like a heartbeat\n                if (emotionMod.addWarmth) {\n                    result.frequency = 2; // Double beat\n                    result.glowAmount *= 1.5;\n                }\n                // Nervous pulse is irregular\n                if (undertoneMod.addFlutter) {\n                    result.irregular = true;\n                }\n                break;\n                \n            case 'shake':\n                // Fear shake is more intense\n                if (emotionMod.addJitter) {\n                    result.frequency *= 1.5;\n                    result.amplitude *= 1.2;\n                }\n                // Anger shake is violent\n                if (emotionMod.addShake) {\n                    result.amplitude *= 1.5;\n                    result.decay = false; // Sustained shaking\n                }\n                break;\n                \n            case 'spin':\n                // Joy spin has extra rotations\n                if (emotionMod.addBounce) {\n                    result.rotations *= 1.5;\n                }\n                // Confused spin reverses direction\n                if (emotionMod.addWobble) {\n                    result.wobble = true;\n                }\n                break;\n                \n            // Add more gesture-specific modifications as needed\n        }\n    }\n    \n    /**\n     * Clear the cache (useful when configs change)\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n}\n\nexport default GestureCompositor;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Zen Vortex Effect\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Zen meditation vortex visual effect\n * @author Emotive Engine Team\n * @module effects/zen-vortex\n */\n\nexport default {\n    name: 'zen-vortex',\n    emoji: '🌀',\n    description: 'Swirling meditation vortex effect',\n    \n    // Configuration\n    config: {\n        vortexSpeed: 0.02,\n        spiralTightness: 0.15,\n        maxRadius: 1.5,\n        lineWidth: 2,\n        segments: 50,\n        arms: 3,\n        fadeStart: 0.7,\n        baseOpacity: 0.3,\n        pulseSpeed: 0.01\n    },\n    \n    // State for animation\n    state: {\n        rotation: 0,\n        pulsePhase: 0,\n        intensity: 0\n    },\n    \n    /**\n     * Check if effect should be active\n     * @param {Object} state - Renderer state\n     * @returns {boolean}\n     */\n    shouldActivate: function(state) {\n        return state.emotion === 'zen' || state.zenTransition?.active;\n    },\n    \n    /**\n     * Apply the zen vortex effect\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\n     * @param {Object} params - Effect parameters\n     */\n    apply: function(ctx, params) {\n        const { x, y, radius, intensity = 1.0, deltaTime = 16.67 } = params;\n        \n        // Update animation state\n        this.state.rotation += this.config.vortexSpeed * (deltaTime / 16.67);\n        this.state.pulsePhase += this.config.pulseSpeed * (deltaTime / 16.67);\n        this.state.intensity = intensity;\n        \n        ctx.save();\n        \n        // Draw multiple spiral arms\n        for (let arm = 0; arm < this.config.arms; arm++) {\n            const armOffset = (Math.PI * 2 / this.config.arms) * arm;\n            this.drawSpiralArm(ctx, x, y, radius, armOffset);\n        }\n        \n        // Draw meditation circle (∩∩ shape)\n        this.drawMeditationEyes(ctx, x, y, radius * 0.6, intensity);\n        \n        ctx.restore();\n    },\n    \n    /**\n     * Draw a single spiral arm\n     */\n    drawSpiralArm: function(ctx, centerX, centerY, baseRadius, offset) {\n        ctx.beginPath();\n        \n        const pulseMod = 1 + Math.sin(this.state.pulsePhase) * 0.1;\n        \n        for (let i = 0; i <= this.config.segments; i++) {\n            const t = i / this.config.segments;\n            const angle = this.state.rotation + offset + t * Math.PI * 4;\n            const spiralRadius = t * baseRadius * this.config.maxRadius * pulseMod;\n            \n            // Spiral equation\n            const x = centerX + Math.cos(angle) * spiralRadius;\n            const y = centerY + Math.sin(angle) * spiralRadius;\n            \n            if (i === 0) {\n                ctx.moveTo(x, y);\n            } else {\n                ctx.lineTo(x, y);\n            }\n        }\n        \n        // Create gradient for fade effect\n        const gradient = ctx.createLinearGradient(\n            centerX - baseRadius, centerY,\n            centerX + baseRadius, centerY\n        );\n        \n        const opacity = this.config.baseOpacity * this.state.intensity;\n        gradient.addColorStop(0, `rgba(147, 112, 219, 0)`);\n        gradient.addColorStop(0.3, `rgba(147, 112, 219, ${opacity * 0.5})`);\n        gradient.addColorStop(this.config.fadeStart, `rgba(147, 112, 219, ${opacity})`);\n        gradient.addColorStop(1, `rgba(147, 112, 219, 0)`);\n        \n        ctx.strokeStyle = gradient;\n        ctx.lineWidth = this.config.lineWidth;\n        ctx.stroke();\n    },\n    \n    /**\n     * Draw meditation eyes (∩∩)\n     */\n    drawMeditationEyes: function(ctx, x, y, radius, intensity) {\n        ctx.save();\n        \n        const eyeWidth = radius * 0.4;\n        const eyeHeight = radius * 0.3;\n        const eyeSpacing = radius * 0.3;\n        \n        ctx.strokeStyle = `rgba(255, 255, 255, ${0.8 * intensity})`;\n        ctx.lineWidth = 2;\n        \n        // Left eye (∩)\n        ctx.beginPath();\n        ctx.arc(x - eyeSpacing, y, eyeWidth, Math.PI, 0, true);\n        ctx.stroke();\n        \n        // Right eye (∩)\n        ctx.beginPath();\n        ctx.arc(x + eyeSpacing, y, eyeWidth, Math.PI, 0, true);\n        ctx.stroke();\n        \n        ctx.restore();\n    },\n    \n    /**\n     * Reset the effect state\n     */\n    reset: function() {\n        this.state.rotation = 0;\n        this.state.pulsePhase = 0;\n        this.state.intensity = 0;\n    }\n};","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Recording Glow Effect\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Pulsating red glow for recording state\r\n * @author Emotive Engine Team\r\n * @module effects/recording-glow\r\n */\r\n\r\nexport default {\r\n    name: 'recording-glow',\r\n    emoji: '🔴',\r\n    description: 'Pulsating red recording indicator',\r\n    \r\n    // Configuration\r\n    config: {\r\n        color: '#FF0000',\r\n        pulseSpeed: 0.08,\r\n        minIntensity: 0.6,\r\n        maxIntensity: 1.0,\r\n        radiusMultiplier: 2.0,\r\n        gradientStops: [\r\n            { position: 0, opacity: 1.0 },\r\n            { position: 0.3, opacity: 0.7 },\r\n            { position: 0.6, opacity: 0.4 },\r\n            { position: 0.85, opacity: 0.2 },\r\n            { position: 1, opacity: 0 }\r\n        ]\r\n    },\r\n    \r\n    // State for animation\r\n    state: {\r\n        pulsePhase: 0,\r\n        intensity: 0.8  // Start with visible intensity\r\n    },\r\n    \r\n    /**\r\n     * Check if effect should be active\r\n     * @param {Object} state - Renderer state\r\n     * @returns {boolean}\r\n     */\r\n    shouldActivate: function(state) {\r\n        return state.recording === true;\r\n    },\r\n    \r\n    /**\r\n     * Apply the recording glow effect\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n     * @param {Object} params - Effect parameters\r\n     */\r\n    apply: function(ctx, params) {\r\n        const { deltaTime = 16.67 } = params;\r\n        \r\n        // Update pulse animation for the indicator only\r\n        this.state.pulsePhase += this.config.pulseSpeed * (deltaTime / 16.67);\r\n        \r\n        // Calculate pulsating intensity\r\n        const pulse = (Math.sin(this.state.pulsePhase) + 1) / 2;\r\n        this.state.intensity = this.config.minIntensity + \r\n            (this.config.maxIntensity - this.config.minIntensity) * pulse;\r\n        \r\n        // Don't draw any glow on the mascot - only update the animation state\r\n        // The REC indicator will be drawn separately in drawRecordingIndicator\r\n        return true; // Return true to indicate effect was applied\r\n    },\r\n    \r\n    /**\r\n     * Draw recording indicator text only\r\n     */\r\n    drawRecordingIndicator: function(ctx, canvasWidth, canvasHeight) {\r\n        ctx.save();\r\n        \r\n        // Dynamic text size\r\n        const baseSize = Math.min(canvasWidth, canvasHeight);\r\n        const textSize = Math.floor(baseSize * 0.08);  // 8% of smallest dimension (bigger)\r\n        \r\n        // Position in upper-left corner with padding\r\n        const x = textSize * 1.5;\r\n        const y = textSize * 1.5;\r\n        \r\n        // Draw red recording dot\r\n        const dotRadius = textSize * 0.3;\r\n        ctx.fillStyle = this.hexToRgba('#FF0000', this.state.intensity);\r\n        ctx.beginPath();\r\n        ctx.arc(x - textSize, y, dotRadius, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        // Add white outline for visibility\r\n        ctx.strokeStyle = this.hexToRgba('#FFFFFF', this.state.intensity * 0.8);\r\n        ctx.lineWidth = 3;\r\n        ctx.font = `bold ${textSize}px 'Arial', sans-serif`;\r\n        ctx.textAlign = 'left';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.strokeText('REC', x, y);\r\n        \r\n        // Draw \"REC\" text on top\r\n        ctx.fillStyle = this.hexToRgba('#FF0000', this.state.intensity);\r\n        ctx.fillText('REC', x, y);\r\n        \r\n        ctx.restore();\r\n    },\r\n    \r\n    /**\r\n     * Convert hex to rgba\r\n     */\r\n    hexToRgba: function(hex, alpha) {\r\n        const r = parseInt(hex.slice(1, 3), 16);\r\n        const g = parseInt(hex.slice(3, 5), 16);\r\n        const b = parseInt(hex.slice(5, 7), 16);\r\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n    },\r\n    \r\n    /**\r\n     * Reset the effect state\r\n     */\r\n    reset: function() {\r\n        this.state.pulsePhase = 0;\r\n        this.state.intensity = 0;\r\n    }\r\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Speaking Pulse Effect\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'speaking-pulse',\n    emoji: '🗣️',\n    description: 'Audio-reactive pulse when speaking',\n    \n    config: {\n        scaleMultiplier: 0.15,  // Max scale increase when speaking\n        smoothing: 0.1,         // Smoothing factor for audio levels\n        minPulse: 0.02,         // Minimum pulse even when quiet\n        colorShift: true,       // Shift glow color when speaking\n        ringEffect: true        // Show expanding rings\n    },\n    \n    state: {\n        audioLevel: 0,\n        smoothedLevel: 0,\n        rings: []  // Array of expanding rings\n    },\n    \n    shouldActivate: function(state) {\n        return state.speaking === true;\n    },\n    \n    apply: function(ctx, params) {\n        const { x, y, radius, audioLevel = 0, deltaTime = 16.67 } = params;\n        \n        // Smooth audio level\n        this.state.smoothedLevel += (audioLevel - this.state.smoothedLevel) * this.config.smoothing;\n        \n        // Create expanding rings on audio peaks\n        if (audioLevel > 0.5 && this.state.audioLevel <= 0.5) {\n            this.state.rings.push({\n                radius: radius,\n                opacity: 0.5,\n                speed: 2\n            });\n        }\n        \n        // Update and draw rings\n        if (this.config.ringEffect) {\n            this.drawRings(ctx, x, y, deltaTime);\n        }\n        \n        // Store for next frame\n        this.state.audioLevel = audioLevel;\n    },\n    \n    drawRings: function(ctx, x, y, deltaTime) {\n        ctx.save();\n        ctx.strokeStyle = 'rgba(100, 200, 255, 0.5)';\n        ctx.lineWidth = 2;\n        \n        // Update and draw each ring\n        for (let i = this.state.rings.length - 1; i >= 0; i--) {\n            const ring = this.state.rings[i];\n            \n            // Update ring\n            ring.radius += ring.speed * (deltaTime / 16.67);\n            ring.opacity -= 0.02 * (deltaTime / 16.67);\n            \n            // Remove if faded\n            if (ring.opacity <= 0) {\n                this.state.rings.splice(i, 1);\n                continue;\n            }\n            \n            // Draw ring\n            ctx.globalAlpha = ring.opacity;\n            ctx.beginPath();\n            ctx.arc(x, y, ring.radius, 0, Math.PI * 2);\n            ctx.stroke();\n        }\n        \n        ctx.restore();\n    },\n    \n    getScaleModifier: function() {\n        return 1 + (this.state.smoothedLevel * this.config.scaleMultiplier);\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Sleeping Effect\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'sleeping',\n    emoji: '😴',\n    description: 'Sleeping with closed eyes and Z particles',\n    \n    config: {\n        eyeClosedScale: 0.1,    // How closed the eyes are (0.1 = 90% closed)\n        breathingDepth: 0.15,    // Deeper breathing when sleeping\n        breathingRate: 0.8,      // Slower breathing\n        zParticleInterval: 2000, // Spawn Z every 2 seconds\n        zDriftSpeed: 1,          // Speed of Z particles floating up\n        zFadeSpeed: 0.01,        // How fast Z's fade out\n        orbDimming: 0.3,         // Dim orb to 30% brightness when sleeping\n        glowDimming: 0.2         // Dim glow even more (20% brightness)\n    },\n    \n    state: {\n        lastZSpawn: 0,\n        zParticles: []\n    },\n    \n    shouldActivate: function(state) {\n        return state.sleeping === true || state.emotion === 'resting';\n    },\n    \n    apply: function(ctx, params) {\n        const { x, y, radius, deltaTime = 16.67 } = params;\n        const now = Date.now();\n        \n        // Spawn new Z particle\n        if (now - this.state.lastZSpawn > this.config.zParticleInterval) {\n            // Random Poppins font weights: 100-900\n            const weights = [100, 200, 300, 400, 500, 600, 700, 800, 900];\n            const randomWeight = weights[Math.floor(Math.random() * weights.length)];\n            \n            this.state.zParticles.push({\n                x: x + radius,\n                y: y - radius,\n                opacity: 1.0,\n                size: 12 + Math.random() * 8, // Random size 12-20px\n                drift: Math.random() * 0.5 - 0.25, // Slight random drift\n                weight: randomWeight, // Random font weight\n                rotation: Math.random() * 30 - 15 // Random rotation -15 to 15 degrees\n            });\n            this.state.lastZSpawn = now;\n        }\n        \n        // Update and draw Z particles\n        this.drawZParticles(ctx, deltaTime);\n    },\n    \n    drawZParticles: function(ctx, deltaTime) {\n        ctx.save();\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        \n        for (let i = this.state.zParticles.length - 1; i >= 0; i--) {\n            const z = this.state.zParticles[i];\n            \n            // Update position\n            z.y -= this.config.zDriftSpeed * (deltaTime / 16.67);\n            z.x += z.drift * (deltaTime / 16.67);\n            z.opacity -= this.config.zFadeSpeed * (deltaTime / 16.67);\n            z.rotation += 0.5 * (deltaTime / 16.67); // Slow rotation\n            \n            // Remove if faded\n            if (z.opacity <= 0) {\n                this.state.zParticles.splice(i, 1);\n                continue;\n            }\n            \n            // Draw Z with random Poppins weight\n            ctx.save();\n            ctx.translate(z.x, z.y);\n            ctx.rotate(z.rotation * Math.PI / 180);\n            ctx.globalAlpha = z.opacity * 0.7; // Slightly transparent\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n            ctx.font = `${z.weight} ${z.size}px 'Poppins', sans-serif`;\n            ctx.fillText('Z', 0, 0);\n            \n            // Add a subtle shadow for depth\n            ctx.shadowBlur = 3;\n            ctx.shadowColor = 'rgba(147, 112, 219, 0.5)'; // Purple shadow for dreamy effect\n            ctx.fillText('Z', 0, 0);\n            ctx.restore();\n        }\n        \n        ctx.restore();\n    },\n    \n    getEyeOpenness: function() {\n        return this.config.eyeClosedScale;\n    },\n    \n    getBreathingModifiers: function() {\n        return {\n            rate: this.config.breathingRate,\n            depth: this.config.breathingDepth\n        };\n    },\n    \n    getDimmingValues: function() {\n        return {\n            orbDimming: this.config.orbDimming,\n            glowDimming: this.config.glowDimming\n        };\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Suspicion Scan Effect\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'suspicion-scan',\n    emoji: '🔍',\n    description: 'Suspicious scanning and squinting',\n    \n    config: {\n        squintAmount: 0.4,      // 40% eye narrowing\n        scanInterval: 5000,     // Scan every 5 seconds\n        scanDuration: 800,      // Each scan takes 800ms\n        scanAngle: 45,          // Degrees to look left/right\n        squintSpeed: 0.02,      // Animation speed for squinting\n        pupilShift: 0.3         // How much the pupil shifts when scanning\n    },\n    \n    state: {\n        currentSquint: 0,\n        targetSquint: 0,\n        lastScanTime: 0,\n        scanPhase: 0,  // 0 = center, -1 = left, 1 = right\n        scanning: false\n    },\n    \n    shouldActivate: function(state) {\n        return state.emotion === 'suspicion' || state.suspicious === true;\n    },\n    \n    apply: function(ctx, params) {\n        const { x, y, radius, deltaTime = 16.67 } = params;\n        const now = Date.now();\n        \n        // Update squint amount\n        this.updateSquint(deltaTime);\n        \n        // Handle scanning motion\n        if (now - this.state.lastScanTime > this.config.scanInterval) {\n            this.startScan();\n            this.state.lastScanTime = now;\n        }\n        \n        if (this.state.scanning) {\n            this.updateScan(now, deltaTime);\n        }\n    },\n    \n    updateSquint: function(deltaTime) {\n        // Set target squint when suspicious\n        this.state.targetSquint = this.config.squintAmount;\n        \n        // Animate toward target\n        const diff = this.state.targetSquint - this.state.currentSquint;\n        if (Math.abs(diff) > 0.01) {\n            this.state.currentSquint += diff * this.config.squintSpeed * (deltaTime / 16.67);\n        } else {\n            this.state.currentSquint = this.state.targetSquint;\n        }\n    },\n    \n    startScan: function() {\n        this.state.scanning = true;\n        this.state.scanStartTime = Date.now();\n        this.state.scanPhase = -1; // Start by looking left\n    },\n    \n    updateScan: function(now, deltaTime) {\n        const elapsed = now - this.state.scanStartTime;\n        const progress = elapsed / this.config.scanDuration;\n        \n        if (progress < 0.33) {\n            // Look left\n            this.state.scanPhase = -1;\n        } else if (progress < 0.66) {\n            // Look right\n            this.state.scanPhase = 1;\n        } else if (progress < 1) {\n            // Return to center\n            this.state.scanPhase = 0;\n        } else {\n            // Scan complete\n            this.state.scanning = false;\n            this.state.scanPhase = 0;\n        }\n    },\n    \n    getEyeModifiers: function() {\n        return {\n            scaleY: 1 - this.state.currentSquint,  // Narrow vertically\n            scaleX: 1 + this.state.currentSquint * 0.3,  // Widen horizontally slightly\n            offsetX: this.state.scanPhase * this.config.pupilShift\n        };\n    },\n    \n    drawScanLines: function(ctx, x, y, radius) {\n        if (!this.state.scanning) return;\n        \n        ctx.save();\n        ctx.strokeStyle = 'rgba(255, 165, 0, 0.3)'; // Orange scan lines\n        ctx.lineWidth = 1;\n        ctx.setLineDash([5, 5]);\n        \n        // Draw scanning beam\n        const angle = this.state.scanPhase * (this.config.scanAngle * Math.PI / 180);\n        const endX = x + Math.cos(angle) * radius * 2;\n        const endY = y + Math.sin(angle) * radius * 0.5;\n        \n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n        \n        ctx.restore();\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Gaze Narrowing Effect\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport default {\n    name: 'gaze-narrowing',\n    emoji: '👁️',\n    description: 'Eye narrowing based on gaze proximity',\n    \n    config: {\n        maxHorizontalScale: 1.3,  // Max horizontal widening (30%)\n        maxVerticalScale: 0.5,    // Max vertical narrowing (50%)\n        smoothing: 0.1,           // Smoothing factor for transitions\n        focusThreshold: 0.3       // Intensity threshold to start narrowing\n    },\n    \n    state: {\n        currentScaleX: 1,\n        currentScaleY: 1,\n        targetScaleX: 1,\n        targetScaleY: 1\n    },\n    \n    shouldActivate: function(state) {\n        return state.gazeIntensity > 0 || state.gazeLocked;\n    },\n    \n    apply: function(ctx, params) {\n        const { gazeIntensity = 0, deltaTime = 16.67 } = params;\n        \n        // Calculate target scales based on gaze intensity\n        if (gazeIntensity > this.config.focusThreshold) {\n            const narrowFactor = (gazeIntensity - this.config.focusThreshold) / \n                                (1 - this.config.focusThreshold);\n            \n            this.state.targetScaleX = 1 + (this.config.maxHorizontalScale - 1) * narrowFactor;\n            this.state.targetScaleY = 1 - (1 - this.config.maxVerticalScale) * narrowFactor;\n        } else {\n            this.state.targetScaleX = 1;\n            this.state.targetScaleY = 1;\n        }\n        \n        // Smooth transitions\n        this.animateScales(deltaTime);\n    },\n    \n    animateScales: function(deltaTime) {\n        const speed = this.config.smoothing * (deltaTime / 16.67);\n        \n        // Animate X scale\n        const diffX = this.state.targetScaleX - this.state.currentScaleX;\n        if (Math.abs(diffX) > 0.001) {\n            this.state.currentScaleX += diffX * speed;\n        }\n        \n        // Animate Y scale\n        const diffY = this.state.targetScaleY - this.state.currentScaleY;\n        if (Math.abs(diffY) > 0.001) {\n            this.state.currentScaleY += diffY * speed;\n        }\n    },\n    \n    getEyeScales: function() {\n        return {\n            scaleX: this.state.currentScaleX,\n            scaleY: this.state.currentScaleY\n        };\n    },\n    \n    drawFocusIndicator: function(ctx, x, y, radius, intensity) {\n        if (intensity < this.config.focusThreshold) return;\n        \n        ctx.save();\n        \n        // Draw focus lines converging on target\n        const alpha = (intensity - this.config.focusThreshold) * 0.5;\n        ctx.strokeStyle = `rgba(100, 200, 255, ${alpha})`;\n        ctx.lineWidth = 1;\n        ctx.setLineDash([2, 4]);\n        \n        // Draw converging lines\n        const angles = [0, 60, 120, 180, 240, 300];\n        for (const angle of angles) {\n            const rad = angle * Math.PI / 180;\n            const startDist = radius * 2;\n            const endDist = radius * 1.2;\n            \n            ctx.beginPath();\n            ctx.moveTo(\n                x + Math.cos(rad) * startDist,\n                y + Math.sin(rad) * startDist\n            );\n            ctx.lineTo(\n                x + Math.cos(rad) * endDist,\n                y + Math.sin(rad) * endDist\n            );\n            ctx.stroke();\n        }\n        \n        ctx.restore();\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Fingerprint Effect\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Biometric fingerprint pattern effect\n * @author Emotive Engine Team\n * @module effects/fingerprint\n * \n * Created from a happy accident in the resting state that produced\n * concentric circles resembling a fingerprint pattern!\n */\n\nexport default {\n    name: 'fingerprint',\n    emoji: '👆',\n    description: 'Biometric fingerprint pattern for authentication UI',\n    \n    // Configuration\n    config: {\n        rings: 8,                  // Number of concentric rings\n        ringSpacing: 15,           // Pixels between rings\n        lineWidth: 1.5,           // Width of fingerprint lines\n        rotationSpeed: 0.001,     // Slow rotation for scanning effect\n        pulseSpeed: 0.02,         // Breathing/pulse speed\n        waveAmplitude: 3,         // Waviness of lines (realistic fingerprint)\n        waveFrequency: 8,         // How many waves per ring\n        breakPoints: 5,           // Random breaks in lines (like real fingerprints)\n        opacity: 0.4,             // Base opacity\n        scanLineSpeed: 0.01,      // Speed of scanning line\n        scanLineWidth: 3,         // Width of scanning beam\n        color: '#00CED1',         // Cyan for tech/biometric feel\n        glowColor: '#00FFFF',     // Bright cyan for scan\n        successColor: '#00FF00',  // Green for successful scan\n        failColor: '#FF0000'      // Red for failed scan\n    },\n    \n    // State for animation\n    state: {\n        rotation: 0,\n        pulsePhase: 0,\n        scanPosition: 0,\n        scanDirection: 1,\n        isScanning: false,\n        scanResult: null,  // 'success', 'fail', or null\n        breaks: [],        // Random break positions in rings\n        whorls: []         // Whorl patterns for realism\n    },\n    \n    /**\n     * Check if effect should be active\n     * @param {Object} state - Renderer state\n     * @returns {boolean}\n     */\n    shouldActivate: function(state) {\n        return state.biometric === true || state.fingerprint === true || state.authenticating === true;\n    },\n    \n    /**\n     * Initialize fingerprint pattern\n     */\n    initialize: function() {\n        // Generate random breaks for each ring\n        this.state.breaks = [];\n        for (let i = 0; i < this.config.rings; i++) {\n            const ringBreaks = [];\n            for (let j = 0; j < this.config.breakPoints; j++) {\n                ringBreaks.push(Math.random() * Math.PI * 2);\n            }\n            this.state.breaks.push(ringBreaks);\n        }\n        \n        // Generate whorl centers for realistic pattern\n        this.state.whorls = [\n            { x: 0.2, y: -0.1, strength: 0.3 },\n            { x: -0.15, y: 0.2, strength: 0.25 },\n            { x: 0, y: 0, strength: 0.5 }  // Central whorl\n        ];\n    },\n    \n    /**\n     * Apply the fingerprint effect\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\n     * @param {Object} params - Effect parameters\n     */\n    apply: function(ctx, params) {\n        const { x, y, radius, deltaTime = 16.67, scanning = false, authResult = null } = params;\n        \n        // Initialize on first run\n        if (this.state.breaks.length === 0) {\n            this.initialize();\n        }\n        \n        // Update animation state\n        this.state.rotation += this.config.rotationSpeed * (deltaTime / 16.67);\n        this.state.pulsePhase += this.config.pulseSpeed * (deltaTime / 16.67);\n        \n        // Update scan position\n        if (scanning || this.state.isScanning) {\n            this.state.isScanning = true;\n            this.state.scanPosition += this.config.scanLineSpeed * this.state.scanDirection * (deltaTime / 16.67);\n            \n            // Reverse at bounds\n            if (this.state.scanPosition > 1) {\n                this.state.scanPosition = 1;\n                this.state.scanDirection = -1;\n            } else if (this.state.scanPosition < -1) {\n                this.state.scanPosition = -1;\n                this.state.scanDirection = 1;\n            }\n        }\n        \n        ctx.save();\n        \n        // Draw fingerprint rings\n        this.drawFingerprintPattern(ctx, x, y, radius);\n        \n        // Draw scanning line if active\n        if (this.state.isScanning) {\n            this.drawScanLine(ctx, x, y, radius);\n        }\n        \n        // Show auth result\n        if (authResult) {\n            this.showAuthResult(ctx, x, y, radius, authResult);\n        }\n        \n        ctx.restore();\n    },\n    \n    /**\n     * Draw the fingerprint pattern\n     */\n    drawFingerprintPattern: function(ctx, centerX, centerY, baseRadius) {\n        const pulse = Math.sin(this.state.pulsePhase) * 0.1 + 1;\n        \n        for (let ring = 0; ring < this.config.rings; ring++) {\n            const ringRadius = (ring + 1) * this.config.ringSpacing * pulse;\n            \n            // Skip if ring is outside visible area\n            if (ringRadius > baseRadius * 2) continue;\n            \n            ctx.beginPath();\n            ctx.strokeStyle = this.config.color;\n            ctx.lineWidth = this.config.lineWidth;\n            ctx.globalAlpha = this.config.opacity * (1 - ring / this.config.rings * 0.5);\n            \n            // Draw ring with breaks and distortions\n            for (let angle = 0; angle < Math.PI * 2; angle += 0.05) {\n                // Check for breaks\n                let shouldBreak = false;\n                for (const breakAngle of this.state.breaks[ring] || []) {\n                    if (Math.abs(angle - breakAngle) < 0.1) {\n                        shouldBreak = true;\n                        break;\n                    }\n                }\n                \n                if (shouldBreak) {\n                    ctx.stroke();\n                    ctx.beginPath();\n                    continue;\n                }\n                \n                // Apply whorl distortions\n                let distortedRadius = ringRadius;\n                let distortedAngle = angle + this.state.rotation;\n                \n                for (const whorl of this.state.whorls) {\n                    const whorldX = centerX + whorl.x * baseRadius;\n                    const whorldY = centerY + whorl.y * baseRadius;\n                    const pointX = centerX + Math.cos(distortedAngle) * distortedRadius;\n                    const pointY = centerY + Math.sin(distortedAngle) * distortedRadius;\n                    \n                    const distance = Math.sqrt(\n                        Math.pow(pointX - whorldX, 2) + \n                        Math.pow(pointY - whorldY, 2)\n                    );\n                    \n                    const influence = Math.exp(-distance / (baseRadius * 0.5)) * whorl.strength;\n                    distortedAngle += influence * 0.5;\n                }\n                \n                // Add wave pattern\n                const wave = Math.sin(angle * this.config.waveFrequency) * this.config.waveAmplitude;\n                distortedRadius += wave;\n                \n                // Draw point\n                const px = centerX + Math.cos(distortedAngle) * distortedRadius;\n                const py = centerY + Math.sin(distortedAngle) * distortedRadius;\n                \n                if (angle === 0) {\n                    ctx.moveTo(px, py);\n                } else {\n                    ctx.lineTo(px, py);\n                }\n            }\n            \n            ctx.stroke();\n        }\n    },\n    \n    /**\n     * Draw scanning line\n     */\n    drawScanLine: function(ctx, x, y, radius) {\n        const scanY = y + this.state.scanPosition * radius;\n        \n        // Create gradient for scan line\n        const gradient = ctx.createLinearGradient(x - radius, scanY, x + radius, scanY);\n        gradient.addColorStop(0, 'rgba(0, 255, 255, 0)');\n        gradient.addColorStop(0.5, this.config.glowColor);\n        gradient.addColorStop(1, 'rgba(0, 255, 255, 0)');\n        \n        ctx.strokeStyle = gradient;\n        ctx.lineWidth = this.config.scanLineWidth;\n        ctx.globalAlpha = 0.8;\n        ctx.shadowBlur = 10;\n        ctx.shadowColor = this.config.glowColor;\n        \n        ctx.beginPath();\n        ctx.moveTo(x - radius, scanY);\n        ctx.lineTo(x + radius, scanY);\n        ctx.stroke();\n        \n        ctx.shadowBlur = 0;\n    },\n    \n    /**\n     * Show authentication result\n     */\n    showAuthResult: function(ctx, x, y, radius, result) {\n        const color = result === 'success' ? this.config.successColor : this.config.failColor;\n        const text = result === 'success' ? '✓ AUTHENTICATED' : '✗ ACCESS DENIED';\n        \n        ctx.fillStyle = color;\n        ctx.font = `bold ${radius * 0.15}px monospace`;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.globalAlpha = 0.9;\n        \n        ctx.fillText(text, x, y + radius * 1.3);\n        \n        // Draw result ring\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 3;\n        ctx.globalAlpha = 0.5;\n        ctx.beginPath();\n        ctx.arc(x, y, radius * 1.1, 0, Math.PI * 2);\n        ctx.stroke();\n    },\n    \n    /**\n     * Start authentication scan\n     */\n    startScan: function() {\n        this.state.isScanning = true;\n        this.state.scanPosition = -1;\n        this.state.scanDirection = 1;\n        this.state.scanResult = null;\n    },\n    \n    /**\n     * Complete authentication scan\n     */\n    completeScan: function(success = true) {\n        this.state.isScanning = false;\n        this.state.scanResult = success ? 'success' : 'fail';\n        \n        // Clear result after 2 seconds\n        setTimeout(() => {\n            this.state.scanResult = null;\n        }, 2000);\n    },\n    \n    /**\n     * Reset the effect state\n     */\n    reset: function() {\n        this.state.rotation = 0;\n        this.state.pulsePhase = 0;\n        this.state.scanPosition = 0;\n        this.state.scanDirection = 1;\n        this.state.isScanning = false;\n        this.state.scanResult = null;\n    }\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Visual Effects Registry\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Central registry for visual effects like zen vortex, recording glow, etc.\n * @author Emotive Engine Team\n * @module effects\n */\n\n// Import all effect modules\nimport zenVortex from './zen-vortex.js';\nimport recordingGlow from './recording-glow.js';\nimport speakingPulse from './speaking-pulse.js';\nimport sleepingEffect from './sleeping-effect.js';\nimport suspicionScan from './suspicion-scan.js';\nimport gazeNarrowing from './gaze-narrowing.js';\nimport fingerprint from './fingerprint.js';\n\n// Registry to store all visual effects\nconst effectRegistry = new Map();\n\n/**\n * Register a visual effect module\n * @param {Object} effectModule - The effect module to register\n */\nexport function registerEffect(effectModule) {\n    if (!effectModule.name) {\n        return;\n    }\n    effectRegistry.set(effectModule.name, effectModule);\n}\n\n/**\n * Get effect by name\n * @param {string} effectName - Name of the effect\n * @returns {Object|null} The effect module or null\n */\nexport function getEffect(effectName) {\n    return effectRegistry.get(effectName) || null;\n}\n\n/**\n * Apply a visual effect\n * @param {string} effectName - Name of the effect to apply\n * @param {CanvasRenderingContext2D} ctx - Canvas context\n * @param {Object} params - Effect parameters\n * @returns {boolean} True if effect was applied\n */\nexport function applyEffect(effectName, ctx, params) {\n    const effect = getEffect(effectName);\n    if (!effect) {\n        return false;\n    }\n    \n    if (effect.apply) {\n        effect.apply(ctx, params);\n        return true;\n    }\n    \n    return false;\n}\n\n/**\n * Check if effect should be active\n * @param {string} effectName - Name of the effect\n * @param {Object} state - Current state\n * @returns {boolean} True if effect should be active\n */\nexport function isEffectActive(effectName, state) {\n    const effect = getEffect(effectName);\n    if (!effect || !effect.shouldActivate) {\n        return false;\n    }\n    return effect.shouldActivate(state);\n}\n\n/**\n * Get all registered effect names\n * @returns {Array} Array of effect names\n */\nexport function getAllEffects() {\n    return Array.from(effectRegistry.keys());\n}\n\n// Register all built-in effects\nregisterEffect(zenVortex);\nregisterEffect(recordingGlow);\nregisterEffect(speakingPulse);\nregisterEffect(sleepingEffect);\nregisterEffect(suspicionScan);\nregisterEffect(gazeNarrowing);\nregisterEffect(fingerprint);\n\nexport default {\n    registerEffect,\n    getEffect,\n    applyEffect,\n    isEffectActive,\n    getAllEffects\n};","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE - Musical Duration System\n *  └─○═╝                                                                             \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Musical time calculation for tempo-aware gesture durations\n * @author Emotive Engine Team\n * @module core/MusicalDuration\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Converts between musical time (beats/bars) and clock time (milliseconds).        \n * ║ Ensures all gesture durations are perfect subdivisions of the beat, making        \n * ║ animations musically coherent at any tempo.                                      \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n */\n\nimport rhythmEngine from './rhythm.js';\n\nclass MusicalDuration {\n    constructor() {\n        // Standard note durations in beats (4/4 time)\n        this.noteDurations = {\n            'whole': 4,\n            'half': 2,\n            'quarter': 1,\n            'eighth': 0.5,\n            'sixteenth': 0.25,\n            'triplet': 0.333,\n            'dotted-quarter': 1.5,\n            'dotted-half': 3\n        };\n        \n        // Cache for performance\n        this.cache = new Map();\n        this.lastBPM = 0;\n        \n        // Pre-warm cache with common BPMs and durations\n        this.prewarmCache();\n    }\n    \n    /**\n     * Pre-calculate common durations to prevent first-run lag\n     */\n    prewarmCache() {\n        const commonBPMs = [60, 90, 120, 140, 160, 180];\n        const commonDurations = [\n            { musical: true, beats: 1 },      // 1 beat\n            { musical: true, bars: 1 },       // 1 bar\n            { musical: true, beats: 0.5 },    // Half beat\n            { musical: true, beats: 2 }       // 2 beats\n        ];\n        \n        commonBPMs.forEach(bpm => {\n            commonDurations.forEach(duration => {\n                const key = `${bpm}_${JSON.stringify(duration)}`;\n                const ms = this.toMilliseconds(duration, bpm);\n                this.cache.set(key, ms);\n            });\n        });\n    }\n    \n    /**\n     * Convert musical duration to milliseconds\n     * @param {Object} duration - Musical duration config\n     * @param {number} [bpm] - Optional BPM override\n     * @returns {number} Duration in milliseconds\n     */\n    toMilliseconds(duration, bpm = null) {\n        const currentBPM = bpm || rhythmEngine.bpm || 120;\n        \n        // Handle different duration formats\n        if (typeof duration === 'number') {\n            // Already in milliseconds\n            return duration;\n        }\n        \n        if (typeof duration === 'object' && duration.musical) {\n            const beatDuration = 60000 / currentBPM;\n            \n            if (duration.beats !== undefined) {\n                // Specified in beats\n                return duration.beats * beatDuration;\n            } else if (duration.bars !== undefined) {\n                // Specified in bars (assume 4/4)\n                const timeSignature = rhythmEngine.timeSignature || [4, 4];\n                return duration.bars * timeSignature[0] * beatDuration;\n            } else if (duration.subdivision !== undefined) {\n                // Specified as note value\n                const beats = this.noteDurations[duration.subdivision] || 1;\n                return beats * beatDuration;\n            }\n        }\n        \n        // Default fallback\n        return 1000;\n    }\n    \n    /**\n     * Convert milliseconds to musical duration\n     * @param {number} ms - Duration in milliseconds\n     * @param {number} [bpm] - Optional BPM override\n     * @returns {Object} Musical duration\n     */\n    toMusical(ms, bpm = null) {\n        const currentBPM = bpm || rhythmEngine.bpm || 120;\n        const beatDuration = 60000 / currentBPM;\n        const beats = ms / beatDuration;\n        \n        // Find closest standard duration\n        let closestNote = 'quarter';\n        let closestDiff = Math.abs(beats - 1);\n        \n        for (const [note, duration] of Object.entries(this.noteDurations)) {\n            const diff = Math.abs(beats - duration);\n            if (diff < closestDiff) {\n                closestDiff = diff;\n                closestNote = note;\n            }\n        }\n        \n        return {\n            musical: true,\n            beats: beats,\n            bars: beats / 4,\n            closestSubdivision: closestNote,\n            exact: closestDiff < 0.01\n        };\n    }\n    \n    /**\n     * Calculate gesture phases with musical timing\n     * @param {Array} phases - Array of phase configurations\n     * @param {number} totalBeats - Total duration in beats\n     * @returns {Array} Phases with calculated timings\n     */\n    calculatePhases(phases, totalBeats) {\n        if (!phases || phases.length === 0) {\n            return [{ name: 'main', beats: totalBeats, start: 0, end: 1 }];\n        }\n        \n        // Calculate total beats from phases\n        const phaseBeats = phases.reduce((sum, phase) => sum + (phase.beats || 1), 0);\n        const scaleFactor = totalBeats / phaseBeats;\n        \n        let cumulativeBeats = 0;\n        return phases.map(phase => {\n            const beats = (phase.beats || 1) * scaleFactor;\n            const start = cumulativeBeats / totalBeats;\n            cumulativeBeats += beats;\n            const end = cumulativeBeats / totalBeats;\n            \n            return {\n                name: phase.name,\n                beats: beats,\n                start: start,\n                end: end,\n                duration: this.toMilliseconds({ musical: true, beats })\n            };\n        });\n    }\n    \n    /**\n     * Get progress through current beat\n     * @returns {number} Progress 0-1 through current beat\n     */\n    getBeatProgress() {\n        const timeInfo = rhythmEngine.getTimeInfo();\n        return timeInfo ? timeInfo.beatProgress : 0;\n    }\n    \n    /**\n     * Get progress through current bar\n     * @returns {number} Progress 0-1 through current bar\n     */\n    getBarProgress() {\n        const timeInfo = rhythmEngine.getTimeInfo();\n        return timeInfo ? timeInfo.barProgress : 0;\n    }\n    \n    /**\n     * Calculate when next musical boundary occurs\n     * @param {string} boundary - 'beat', 'bar', 'phrase'\n     * @returns {number} Milliseconds until boundary\n     */\n    timeToNextBoundary(boundary = 'beat') {\n        const timeInfo = rhythmEngine.getTimeInfo();\n        if (!timeInfo) return 100;\n        \n        switch (boundary) {\n            case 'beat':\n                return timeInfo.nextBeatIn;\n            case 'bar':\n                const beatsInBar = timeInfo.timeSignature[0];\n                const beatsToBar = beatsInBar - timeInfo.beatInBar;\n                return beatsToBar * timeInfo.beatDuration;\n            case 'phrase':\n                // Assume 4-bar phrases\n                const barsInPhrase = 4;\n                const currentBar = timeInfo.bar || 0;\n                const barsToPhrase = barsInPhrase - (currentBar % barsInPhrase);\n                return barsToPhrase * beatsInBar * timeInfo.beatDuration;\n            default:\n                return timeInfo.nextBeatIn;\n        }\n    }\n    \n    /**\n     * Quantize a duration to nearest musical subdivision\n     * @param {number} ms - Duration in milliseconds\n     * @param {string} subdivision - Target subdivision\n     * @returns {number} Quantized duration in ms\n     */\n    quantize(ms, subdivision = 'eighth') {\n        const bpm = rhythmEngine.bpm || 120;\n        const beatDuration = 60000 / bpm;\n        const targetBeats = this.noteDurations[subdivision] || 1;\n        const targetMs = targetBeats * beatDuration;\n        \n        // Round to nearest multiple of target\n        const multiple = Math.round(ms / targetMs);\n        return multiple * targetMs;\n    }\n    \n    /**\n     * Check if we're on a musical boundary\n     * @param {string} boundary - 'beat', 'bar', 'phrase'\n     * @param {number} tolerance - Tolerance in ms\n     * @returns {boolean}\n     */\n    isOnBoundary(boundary = 'beat', tolerance = 50) {\n        const timeToNext = this.timeToNextBoundary(boundary);\n        const timeInfo = rhythmEngine.getTimeInfo();\n        \n        if (!timeInfo) return false;\n        \n        // Check if we just passed or are about to hit boundary\n        return timeToNext < tolerance || \n               (timeInfo.beatDuration - timeToNext) < tolerance;\n    }\n    \n    /**\n     * Get tempo-adaptive animation parameters\n     * @param {number} baseTempo - Reference tempo\n     * @returns {Object} Animation adjustment factors\n     */\n    getTempoAdaptation(baseTempo = 120) {\n        const currentTempo = rhythmEngine.bpm || 120;\n        const tempoRatio = currentTempo / baseTempo;\n        \n        return {\n            speed: tempoRatio,\n            energy: Math.min(2, Math.max(0.5, tempoRatio)),\n            smoothness: tempoRatio < 0.8 ? 1.2 : tempoRatio > 1.5 ? 0.8 : 1,\n            intensity: tempoRatio > 1.3 ? 1.2 : tempoRatio < 0.7 ? 0.8 : 1\n        };\n    }\n}\n\n// Create singleton instance\nconst musicalDuration = new MusicalDuration();\n\nexport { musicalDuration, MusicalDuration };\nexport default musicalDuration;","/**\r\n * GestureAnimator - Handles all gesture animations for EmotiveRenderer\r\n * @module core/renderer/GestureAnimator\r\n */\r\n\r\nimport { getGesture } from '../gestures/index.js';\r\nimport musicalDuration from '../MusicalDuration.js';\r\n\r\nexport class GestureAnimator {\r\n    constructor(renderer) {\r\n        this.renderer = renderer;\r\n        this.activeGestures = new Map();\r\n        this.gestureQueue = [];\r\n        this.scaleFactor = renderer.scaleFactor || 1;\r\n        \r\n        // Gesture animations state\r\n        this.gestureAnimations = {\r\n            bounce: { active: false, progress: 0, params: {} },\r\n            pulse: { active: false, progress: 0, params: {} },\r\n            shake: { active: false, progress: 0, params: {} },\r\n            spin: { active: false, progress: 0, params: {} },\r\n            nod: { active: false, progress: 0, params: {} },\r\n            tilt: { active: false, progress: 0, params: {} },\r\n            expand: { active: false, progress: 0, params: {} },\r\n            contract: { active: false, progress: 0, params: {} },\r\n            flash: { active: false, progress: 0, params: {} },\r\n            drift: { active: false, progress: 0, params: {} },\r\n            stretch: { active: false, progress: 0, params: {} },\r\n            glow: { active: false, progress: 0, params: {} },\r\n            flicker: { active: false, progress: 0, params: {} },\r\n            vibrate: { active: false, progress: 0, params: {} },\r\n            orbital: { active: false, progress: 0, params: {} },  // ADDED\r\n            hula: { active: false, progress: 0, params: {} },     // ADDED\r\n            wave: { active: false, progress: 0, params: {} },\r\n            breathe: { active: false, progress: 0, params: {} },\r\n            morph: { active: false, progress: 0, params: {} },\r\n            slowBlink: { active: false, progress: 0, params: {} },\r\n            look: { active: false, progress: 0, params: {} },\r\n            settle: { active: false, progress: 0, params: {} },\r\n            breathIn: { active: false, progress: 0, params: {} },\r\n            breathOut: { active: false, progress: 0, params: {} },\r\n            breathHold: { active: false, progress: 0, params: {} },\r\n            breathHoldEmpty: { active: false, progress: 0, params: {} },\r\n            jump: { active: false, progress: 0, params: {} },\r\n            sway: { active: false, progress: 0, params: {} },\r\n            float: { active: false, progress: 0, params: {} },\r\n            sparkle: { active: false, progress: 0, params: {} },\r\n            shimmer: { active: false, progress: 0, params: {} },\r\n            wiggle: { active: false, progress: 0, params: {} },\r\n            groove: { active: false, progress: 0, params: {} },\r\n            point: { active: false, progress: 0, params: {} },\r\n            lean: { active: false, progress: 0, params: {} },\r\n            reach: { active: false, progress: 0, params: {} },\r\n            headBob: { active: false, progress: 0, params: {} },\r\n            orbit: { active: false, progress: 0, params: {} },\r\n            rain: { active: false, progress: 0, params: {} },\r\n            runningman: { active: false, progress: 0, params: {} },\r\n            charleston: { active: false, progress: 0, params: {} }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Start a gesture animation\r\n     * @param {string} gestureName - Name of the gesture to start\r\n     */\r\n    startGesture(gestureName) {\r\n        \r\n        // Get the gesture configuration\r\n        const gesture = getGesture(gestureName);\r\n        \r\n        // Trigger chromatic aberration for impact gestures\r\n        const impactGestures = ['bounce', 'shake', 'pulse', 'flash', 'jump', 'slam', 'spin', 'flicker'];\r\n        if (impactGestures.includes(gestureName) && this.renderer.specialEffects) {\r\n            // Vary intensity based on gesture - all high for testing\r\n            const intensities = {\r\n                'flash': 1.0,\r\n                'jump': 1.0,\r\n                'shake': 0.9,\r\n                'bounce': 0.8,\r\n                'pulse': 0.7,\r\n                'slam': 1.0,\r\n                'spin': 0.8,\r\n                'flicker': 1.0\r\n            };\r\n            const intensity = intensities[gestureName] || 0.8;\r\n            this.renderer.specialEffects.triggerChromaticAberration(intensity);\r\n            console.log(`[Chromatic Aberration] Triggered for ${gestureName} with intensity ${intensity}`);\r\n        }\r\n        \r\n        // Get composed parameters based on current emotion and undertone\r\n        // Use the renderer's gestureCompositor if available\r\n        let params;\r\n        if (this.renderer.gestureCompositor) {\r\n            params = this.renderer.gestureCompositor.compose(\r\n                gestureName,\r\n                this.renderer.state.emotion,\r\n                this.renderer.currentUndertone\r\n            );\r\n        } else {\r\n            // Fallback to gesture's default config if no compositor\r\n            params = gesture?.config || {\r\n                amplitude: 20,\r\n                frequency: 2,\r\n                duration: 1000,\r\n                scaleAmount: 0.2,\r\n                glowAmount: 0.3,\r\n                rotations: 1,\r\n                distance: 50,\r\n                angle: 15,\r\n                scaleTarget: 1.5,\r\n                glowPeak: 2.0,\r\n                scalePeak: 1.1,\r\n                scaleX: 1.2,\r\n                scaleY: 0.8,\r\n                maxOpacity: 1,\r\n                minOpacity: 0.5,\r\n                lookDirection: 'random',\r\n                lookDistance: 1,\r\n                wobbleFreq: 4,\r\n                squashAmount: 0.8,\r\n                stretchAmount: 1.2,\r\n                jumpHeight: 100,\r\n                decay: true,\r\n                easing: 'sine',\r\n                effects: []\r\n            };\r\n        }\r\n        \r\n        // Calculate duration from gesture config\r\n        let duration = 1000; // Default fallback\r\n        if (gesture && gesture.config) {\r\n            if (gesture.config.musicalDuration) {\r\n                // Use musical duration system\r\n                duration = musicalDuration.toMilliseconds(gesture.config.musicalDuration);\r\n            } else if (gesture.config.duration) {\r\n                // Use fixed duration\r\n                duration = gesture.config.duration;\r\n            }\r\n        }\r\n        \r\n        // Set up the animation\r\n        const anim = this.gestureAnimations[gestureName];\r\n        if (anim) {\r\n            anim.active = true;\r\n            anim.startTime = performance.now();\r\n            anim.progress = 0;\r\n            anim.params = params;\r\n            anim.duration = duration; // Store calculated duration\r\n            \r\n            // Reset random values for gestures that use them\r\n            if (gestureName === 'shake') {\r\n                anim.randomAngle = undefined; // Will be regenerated\r\n            } else if (gestureName === 'drift') {\r\n                anim.startX = undefined;\r\n                anim.startY = undefined;\r\n                anim.currentDriftAngle = undefined; // Reset the angle for new random direction\r\n            } else if (gestureName === 'tilt') {\r\n                anim.tiltDirection = undefined; // Reset for new random direction\r\n            } else if (gestureName === 'vibrate') {\r\n                anim.vibrateAngles = undefined;\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply all active gesture animations\r\n     * @returns {Object} Combined transformation values\r\n     */\r\n    applyGestureAnimations() {\r\n        const now = performance.now();\r\n        const transform = {\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            scale: 1,\r\n            rotation: 0,\r\n            glow: 1\r\n        };\r\n        \r\n        // Process each gesture animation\r\n        for (const [gestureName, anim] of Object.entries(this.gestureAnimations)) {\r\n            if (!anim.active) continue;\r\n            \r\n            const elapsed = now - anim.startTime;\r\n            // Use stored duration or fallback to params duration\r\n            const duration = anim.duration || (anim.params ? anim.params.duration : 1000);\r\n            anim.progress = Math.min(elapsed / duration, 1);\r\n            \r\n            // Apply easing\r\n            const easedProgress = this.applyEasing(anim.progress, anim.params.easing);\r\n            \r\n            // Apply gesture-specific transformations\r\n            let gestureTransform = {};\r\n            switch (gestureName) {\r\n                case 'bounce':\r\n                    gestureTransform = this.applyBounce(anim, easedProgress);\r\n                    break;\r\n                case 'pulse':\r\n                    gestureTransform = this.applyPulse(anim, easedProgress);\r\n                    break;\r\n                case 'shake':\r\n                    gestureTransform = this.applyShake(anim, easedProgress);\r\n                    break;\r\n                case 'spin':\r\n                    gestureTransform = this.applySpin(anim, easedProgress);\r\n                    break;\r\n                case 'nod':\r\n                    gestureTransform = this.applyNod(anim, easedProgress);\r\n                    break;\r\n                case 'tilt':\r\n                    gestureTransform = this.applyTilt(anim, easedProgress);\r\n                    break;\r\n                case 'expand':\r\n                    gestureTransform = this.applyExpand(anim, easedProgress);\r\n                    break;\r\n                case 'contract':\r\n                    gestureTransform = this.applyContract(anim, easedProgress);\r\n                    break;\r\n                case 'flash':\r\n                    gestureTransform = this.applyFlash(anim, easedProgress);\r\n                    break;\r\n                case 'drift':\r\n                    gestureTransform = this.applyDrift(anim, easedProgress);\r\n                    break;\r\n                case 'stretch':\r\n                    gestureTransform = this.applyStretch(anim, easedProgress);\r\n                    break;\r\n                case 'glow':\r\n                    gestureTransform = this.applyGlow(anim, easedProgress);\r\n                    break;\r\n                case 'flicker':\r\n                    gestureTransform = this.applyFlicker(anim, easedProgress);\r\n                    break;\r\n                case 'vibrate':\r\n                    gestureTransform = this.applyVibrate(anim, easedProgress);\r\n                    break;\r\n                case 'orbital':\r\n                    gestureTransform = this.applyOrbital(anim, easedProgress);\r\n                    break;\r\n                case 'hula':\r\n                    gestureTransform = this.applyHula(anim, easedProgress);\r\n                    break;\r\n                case 'wave':\r\n                    gestureTransform = this.applyWave(anim, easedProgress);\r\n                    break;\r\n                case 'breathe':\r\n                    gestureTransform = this.applyBreathe(anim, easedProgress);\r\n                    break;\r\n                case 'morph':\r\n                    gestureTransform = this.applyMorph(anim, easedProgress);\r\n                    break;\r\n                case 'slowBlink':\r\n                    gestureTransform = this.applySlowBlink(anim, easedProgress);\r\n                    break;\r\n                case 'look':\r\n                    gestureTransform = this.applyLook(anim, easedProgress);\r\n                    break;\r\n                case 'settle':\r\n                    gestureTransform = this.applySettle(anim, easedProgress);\r\n                    break;\r\n                case 'breathIn':\r\n                    gestureTransform = this.applyBreathIn(anim, easedProgress);\r\n                    break;\r\n                case 'breathOut':\r\n                    gestureTransform = this.applyBreathOut(anim, easedProgress);\r\n                    break;\r\n                case 'breathHold':\r\n                    gestureTransform = this.applyBreathHold(anim, easedProgress);\r\n                    break;\r\n                case 'breathHoldEmpty':\r\n                    gestureTransform = this.applyBreathHoldEmpty(anim, easedProgress);\r\n                    break;\r\n                case 'jump':\r\n                    gestureTransform = this.applyJump(anim, easedProgress);\r\n                    break;\r\n                case 'sway':\r\n                    gestureTransform = this.applySway(anim, easedProgress);\r\n                    break;\r\n                case 'float':\r\n                    gestureTransform = this.applyFloat(anim, easedProgress);\r\n                    break;\r\n                case 'rain':\r\n                    gestureTransform = this.applyRain(anim, easedProgress);\r\n                    break;\r\n                case 'runningman':\r\n                    gestureTransform = this.applyRunningMan(anim, easedProgress);\r\n                    break;\r\n                case 'charleston':\r\n                    gestureTransform = this.applyCharleston(anim, easedProgress);\r\n                    break;\r\n                case 'sparkle':\r\n                    gestureTransform = this.applySparkle(anim, easedProgress);\r\n                    break;\r\n                case 'shimmer':\r\n                    gestureTransform = this.applyShimmer(anim, easedProgress);\r\n                    break;\r\n                case 'wiggle':\r\n                    gestureTransform = this.applyWiggle(anim, easedProgress);\r\n                    break;\r\n                case 'groove':\r\n                    gestureTransform = this.applyGroove(anim, easedProgress);\r\n                    break;\r\n                case 'point':\r\n                    gestureTransform = this.applyPoint(anim, easedProgress);\r\n                    break;\r\n                case 'lean':\r\n                    gestureTransform = this.applyLean(anim, easedProgress);\r\n                    break;\r\n                case 'reach':\r\n                    gestureTransform = this.applyReach(anim, easedProgress);\r\n                    break;\r\n                case 'headBob':\r\n                    gestureTransform = this.applyHeadBob(anim, easedProgress);\r\n                    break;\r\n                case 'orbit':\r\n                    gestureTransform = this.applyOrbit(anim, easedProgress);\r\n                    break;\r\n            }\r\n            \r\n            // Combine transforms\r\n            transform.offsetX += gestureTransform.offsetX || 0;\r\n            transform.offsetY += gestureTransform.offsetY || 0;\r\n            transform.scale *= gestureTransform.scale || 1;\r\n            transform.rotation += gestureTransform.rotation || 0;\r\n            // Use MAX for glow instead of multiplying to prevent accumulation\r\n            transform.glow = Math.max(transform.glow, gestureTransform.glow || 1);\r\n            \r\n            // Pass flash wave data if present\r\n            if (gestureTransform.flashWave) {\r\n                transform.flashWave = gestureTransform.flashWave;\r\n            }\r\n            \r\n            // Pass firefly effect data if present (for sparkle gesture)\r\n            if (gestureTransform.fireflyEffect) {\r\n                transform.fireflyEffect = gestureTransform.fireflyEffect;\r\n                transform.particleGlow = gestureTransform.particleGlow;\r\n                transform.fireflyTime = gestureTransform.fireflyTime;\r\n            }\r\n            \r\n            // Pass flicker effect data if present (for flicker gesture - now does particle shimmer)\r\n            if (gestureTransform.flickerEffect) {\r\n                transform.flickerEffect = gestureTransform.flickerEffect;\r\n                transform.particleGlow = gestureTransform.particleGlow;\r\n                transform.flickerTime = gestureTransform.flickerTime;\r\n            }\r\n            \r\n            // Pass shimmer effect data if present (for shimmer gesture - subtle glow)\r\n            if (gestureTransform.shimmerEffect) {\r\n                transform.shimmerEffect = gestureTransform.shimmerEffect;\r\n                transform.particleGlow = gestureTransform.particleGlow;\r\n                transform.shimmerTime = gestureTransform.shimmerTime;\r\n                transform.shimmerWave = gestureTransform.shimmerWave;\r\n            }\r\n            \r\n            // Pass glow effect data if present (for glow gesture)\r\n            if (gestureTransform.glowEffect) {\r\n                transform.glowEffect = gestureTransform.glowEffect;\r\n                transform.particleGlow = gestureTransform.particleGlow;\r\n                transform.glowTime = gestureTransform.glowTime;\r\n                transform.glowProgress = gestureTransform.glowProgress;\r\n                transform.glowEnvelope = gestureTransform.glowEnvelope;\r\n            }\r\n            \r\n            // Check if animation is complete\r\n            if (anim.progress >= 1) {\r\n                anim.active = false;\r\n                anim.progress = 0;\r\n                anim.startTime = 0;\r\n                // Clean up flash wave data\r\n                if (gestureName === 'flash') {\r\n                    anim.flashWave = null;\r\n                    anim.flashWaveData = null;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return transform;\r\n    }\r\n\r\n    /**\r\n     * Update active gestures\r\n     * @param {number} deltaTime - Time since last frame\r\n     */\r\n    update(deltaTime) {\r\n        // Update logic moved to applyGestureAnimations\r\n        return this.applyGestureAnimations();\r\n    }\r\n\r\n    /**\r\n     * Stop all active gestures\r\n     */\r\n    stopAllGestures() {\r\n        // Reset all gesture animations\r\n        Object.keys(this.gestureAnimations).forEach(key => {\r\n            this.gestureAnimations[key].active = false;\r\n            this.gestureAnimations[key].startTime = 0;\r\n            this.gestureAnimations[key].progress = 0;\r\n            this.gestureAnimations[key].params = null;\r\n        });\r\n        this.activeGestures.clear();\r\n        this.gestureQueue = [];\r\n    }\r\n    \r\n    /**\r\n     * Get current active gesture information for particle system\r\n     * @returns {Object|null} Current gesture with particleMotion and progress, or null\r\n     */\r\n    getCurrentGesture() {\r\n        // Priority: Find override gestures first (like orbital, hula), then other gestures\r\n        const overrideGestures = ['orbital', 'hula', 'wave', 'spin'];\r\n        \r\n        // Check override gestures first\r\n        for (const gestureName of overrideGestures) {\r\n            const anim = this.gestureAnimations[gestureName];\r\n            if (anim && anim.active) {\r\n                // Get the actual gesture configuration\r\n                const gesture = getGesture(gestureName);\r\n                \r\n                // Use the gesture's config for particleMotion, or create one from gesture type\r\n                const particleMotion = gesture?.config?.particleMotion || {\r\n                    type: gestureName,  // This ensures the modular gesture system will find it\r\n                    strength: anim.params?.strength || 1.0\r\n                };\r\n                \r\n                const gestureInfo = {\r\n                    name: gestureName,\r\n                    particleMotion: particleMotion,\r\n                    progress: anim.progress || 0,\r\n                    params: anim.params\r\n                };\r\n                \r\n                return gestureInfo;\r\n            }\r\n        }\r\n        \r\n        // Then check all other gestures\r\n        for (const [gestureName, anim] of Object.entries(this.gestureAnimations)) {\r\n            if (anim.active) {\r\n                // Get the actual gesture configuration\r\n                const gesture = getGesture(gestureName);\r\n                \r\n                // Use the gesture's config for particleMotion, or params if available\r\n                const particleMotion = gesture?.config?.particleMotion || \r\n                                      anim.params?.particleMotion || \r\n                                      { type: gestureName, strength: anim.params?.strength || 1.0 };\r\n                \r\n                const gestureInfo = {\r\n                    name: gestureName,\r\n                    particleMotion: particleMotion,\r\n                    progress: anim.progress || 0,\r\n                    params: anim.params\r\n                };\r\n                \r\n                // Include breathPhase for breathe gesture\r\n                if (gestureName === 'breathe' && anim.breathPhase !== undefined) {\r\n                    gestureInfo.breathPhase = anim.breathPhase;\r\n                }\r\n                \r\n                return gestureInfo;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    /**\r\n     * Apply easing function to progress\r\n     */\r\n    applyEasing(progress, easing) {\r\n        switch (easing) {\r\n            case 'linear':\r\n                return progress;\r\n            case 'quad':\r\n                return progress * progress;\r\n            case 'cubic':\r\n                return progress * progress * progress;\r\n            case 'sine':\r\n                return Math.sin(progress * Math.PI / 2);\r\n            case 'back':\r\n                return progress * progress * (2.7 * progress - 1.7);\r\n            default:\r\n                return progress;\r\n        }\r\n    }\r\n    \r\n    // Individual gesture application methods\r\n    applyBounce(anim, progress) {\r\n        const bounce = Math.abs(Math.sin(progress * Math.PI * anim.params.frequency)) * anim.params.amplitude * this.scaleFactor;\r\n        // Apply effects\r\n        const multiplier = anim.params.effects && anim.params.effects.includes('gravity') ? 0.6 : 1;\r\n        return { offsetY: -bounce * multiplier };\r\n    }\r\n    \r\n    applyPulse(anim, progress) {\r\n        const pulse = Math.sin(progress * Math.PI * anim.params.frequency);\r\n        return {\r\n            scale: 1 + pulse * anim.params.scaleAmount,\r\n            glow: 1 + pulse * anim.params.glowAmount\r\n        };\r\n    }\r\n    \r\n    applyShake(anim, progress) {\r\n        // Initialize random direction for this shake if not set\r\n        if (!anim.randomAngle) {\r\n            anim.randomAngle = Math.random() * Math.PI * 2; // Random angle in radians\r\n        }\r\n        const decay = anim.params.decay ? (1 - progress) : 1;\r\n        const shake = Math.sin(progress * Math.PI * anim.params.frequency) * anim.params.amplitude * decay * this.scaleFactor;\r\n        return {\r\n            offsetX: shake * Math.cos(anim.randomAngle),\r\n            offsetY: shake * Math.sin(anim.randomAngle)\r\n        };\r\n    }\r\n    \r\n    applySpin(anim, progress) {\r\n        // Ensure full rotation even if progress doesn't quite reach 1.0\r\n        const actualProgress = Math.min(progress * 1.05, 1.0); // Slight overshoot to ensure completion\r\n        return {\r\n            rotation: actualProgress * anim.params.rotations * 360,\r\n            scale: 1 + Math.sin(progress * Math.PI) * anim.params.scaleAmount\r\n        };\r\n    }\r\n    \r\n    applyNod(anim, progress) {\r\n        const nod = Math.sin(progress * Math.PI * anim.params.frequency) * anim.params.amplitude * this.scaleFactor;\r\n        return { offsetY: nod };\r\n    }\r\n    \r\n    applyTilt(anim, progress) {\r\n        if (!anim.tiltDirection) {\r\n            // Randomly choose left (-1) or right (1) tilt\r\n            anim.tiltDirection = Math.random() < 0.5 ? -1 : 1;\r\n        }\r\n        const frequency = anim.params.frequency || 2;\r\n        const angle = (anim.params.angle || 15) * Math.PI / 180; // Convert to radians\r\n        const tiltProgress = Math.sin(progress * Math.PI * frequency) * anim.tiltDirection;\r\n        \r\n        // Apply both rotation and skew to make tilt visible on circular orb\r\n        return { \r\n            rotation: tiltProgress * angle,\r\n            // Skew the orb slightly to show tilt motion\r\n            scaleX: 1 + Math.abs(tiltProgress) * 0.1,  // Widen when tilted\r\n            scaleY: 1 - Math.abs(tiltProgress) * 0.05, // Compress slightly\r\n            // Move slightly with tilt\r\n            offsetX: tiltProgress * 10,\r\n            offsetY: Math.abs(tiltProgress) * -5  // Lift slightly when tilted\r\n        };\r\n    }\r\n    \r\n    applyExpand(anim, progress) {\r\n        // Use scaleAmount or scaleTarget (handle both config formats)\r\n        // Make sure we're expanding, not contracting\r\n        const targetScale = Math.max(anim.params.scaleAmount || anim.params.scaleTarget || 1.5, 1.0);\r\n        const easedProgress = Math.sin(progress * Math.PI / 2); // Smooth ease-out\r\n        const scale = 1 + (targetScale - 1) * easedProgress;\r\n        return {\r\n            scale: scale,\r\n            glow: 1 + Math.abs(anim.params.glowAmount || 0.2) * easedProgress\r\n        };\r\n    }\r\n    \r\n    applyContract(anim, progress) {\r\n        // Use scaleAmount or scaleTarget (handle both config formats)\r\n        const targetScale = anim.params.scaleAmount || anim.params.scaleTarget || 0.7;\r\n        const easedProgress = Math.sin(progress * Math.PI / 2); // Smooth ease-out\r\n        const scale = 1 + (targetScale - 1) * easedProgress;\r\n        return {\r\n            scale: scale,\r\n            glow: 1 + (anim.params.glowAmount || -0.2) * easedProgress\r\n        };\r\n    }\r\n    \r\n    applyFlash(anim, progress) {\r\n        const flash = Math.sin(progress * Math.PI); // Quick up and down\r\n        const glowPeak = anim.params.glowPeak || 2.0;  // Default if not defined\r\n        const scalePeak = anim.params.scalePeak || 1.1; // Default if not defined\r\n        return {\r\n            glow: 1 + (glowPeak - 1) * flash,\r\n            scale: 1 + (scalePeak - 1) * flash\r\n        };\r\n    }\r\n    \r\n    applyDrift(anim, progress) {\r\n        // Initialize drift angle when starting (progress near 0)\r\n        if (progress <= 0.01 && !anim.currentDriftAngle) {\r\n            // Always pick a random angle for drift\r\n            anim.currentDriftAngle = Math.random() * Math.PI * 2; // Random direction in radians\r\n        }\r\n        \r\n        const distance = anim.params.distance * Math.sin(progress * Math.PI) * this.scaleFactor;\r\n        const angle = anim.currentDriftAngle || 0;\r\n        \r\n        // Clear the angle when animation completes\r\n        if (progress >= 0.99) {\r\n            anim.currentDriftAngle = null;\r\n        }\r\n        \r\n        return {\r\n            offsetX: Math.cos(angle) * distance,\r\n            offsetY: Math.sin(angle) * distance\r\n        };\r\n    }\r\n    \r\n    applyStretch(anim, progress) {\r\n        const stretch = Math.sin(progress * Math.PI * anim.params.frequency);\r\n        // Note: We'd need to handle scaleX/scaleY separately for proper stretch\r\n        // For now, average them\r\n        const avgScale = (anim.params.scaleX + anim.params.scaleY) / 2;\r\n        return { scale: 1 + (avgScale - 1) * stretch };\r\n    }\r\n    \r\n    applyGlow(anim, progress) {\r\n        // Glow effect - pure luminosity like pulse but without movement\r\n        // Copy of pulse logic but focused only on glow\r\n\r\n        const glowPulse = Math.sin(progress * Math.PI * anim.params.frequency);\r\n\r\n        return {\r\n            scale: 1 + glowPulse * (anim.params.scaleAmount || 0.1), // Very subtle scale like new glow config\r\n            glow: 1 + glowPulse * (anim.params.glowAmount || 0.8)    // Strong glow like new glow config\r\n        };\r\n    }\r\n    \r\n    applyFlash(anim, progress) {\r\n        // Wave-like flash that emanates outward\r\n        // Store wave state in the animation object\r\n        if (!anim.flashWave) {\r\n            anim.flashWave = {\r\n                innerRadius: 0,\r\n                outerRadius: 0,\r\n                maxRadius: 3.0 // How far the wave travels (relative to core)\r\n            };\r\n        }\r\n        \r\n        // Update wave radius based on progress\r\n        anim.flashWave.outerRadius = progress * anim.flashWave.maxRadius;\r\n        anim.flashWave.innerRadius = Math.max(0, (progress - 0.1) * anim.flashWave.maxRadius);\r\n        \r\n        // Fade intensity as wave travels outward\r\n        const waveIntensity = Math.max(0, 1 - progress * 0.7);\r\n        \r\n        // Store wave data for renderer to use\r\n        anim.flashWaveData = {\r\n            innerRadius: anim.flashWave.innerRadius,\r\n            outerRadius: anim.flashWave.outerRadius,\r\n            intensity: waveIntensity\r\n        };\r\n        \r\n        // Return a very subtle glow increase at the core\r\n        return {\r\n            glow: 1 + waveIntensity * 0.3, // Very subtle core glow\r\n            flashWave: anim.flashWaveData // Pass wave data to renderer\r\n        };\r\n    }\r\n    \r\n    applyFlicker(anim, progress) {\r\n        // Flicker effect - particles shimmer with wave-like pulsing\r\n        const intensity = anim.params?.intensity || 2.0;\r\n        const shimmerSpeed = anim.params?.speed || 3;\r\n        \r\n        // Smooth sine wave for shimmer\r\n        const glow = 1 + Math.sin(progress * Math.PI * 2 * shimmerSpeed) * intensity * 0.3;\r\n        \r\n        // Slight horizontal wave motion\r\n        const waveX = Math.sin(progress * Math.PI * 4) * 5 * this.scaleFactor;\r\n        \r\n        // Create time-based shimmer for particles\r\n        const time = Date.now() * 0.001; // Convert to seconds\r\n        \r\n        // Main shimmer pulse\r\n        const mainPulse = Math.sin(progress * Math.PI * shimmerSpeed * 2) * 0.5 + 0.5;\r\n        \r\n        return {\r\n            offsetX: waveX,\r\n            glow: glow,\r\n            particleGlow: intensity * mainPulse, // Intensity for particles\r\n            flickerTime: time, // Pass time for particle calculations\r\n            flickerEffect: true // Flag to enable flicker effect on particles (shimmer-like)\r\n        };\r\n    }\r\n    \r\n    applyVibrate(anim, progress) {\r\n        // Initialize random vibration pattern if not set\r\n        if (!anim.vibrateAngles) {\r\n            anim.vibrateAngles = {\r\n                x: Math.random() * 2 - 1, // Random factor between -1 and 1\r\n                y: Math.random() * 2 - 1\r\n            };\r\n            // Normalize to unit vector\r\n            const mag = Math.sqrt(anim.vibrateAngles.x ** 2 + anim.vibrateAngles.y ** 2);\r\n            anim.vibrateAngles.x /= mag;\r\n            anim.vibrateAngles.y /= mag;\r\n        }\r\n        const vibration = Math.sin(progress * Math.PI * 2 * anim.params.frequency) * anim.params.amplitude * this.scaleFactor;\r\n        return {\r\n            offsetX: vibration * anim.vibrateAngles.x,\r\n            offsetY: vibration * anim.vibrateAngles.y\r\n        };\r\n    }\r\n    \r\n    applyWave(anim, progress) {\r\n        // Completely rewritten wave - a graceful, flowing infinity symbol motion\r\n        const amp = (anim.params.amplitude || 40) * this.scaleFactor;\r\n        \r\n        // Create a smooth infinity symbol (∞) pattern\r\n        // This feels more like a natural greeting wave\r\n        const t = progress * Math.PI * 2;\r\n        \r\n        // Infinity symbol parametric equations\r\n        // X: figure-8 horizontal motion\r\n        const infinityX = Math.sin(t) * amp;\r\n        \r\n        // Y: gentle vertical bob that rises during the wave\r\n        // Creates a \"lifting\" feeling like a real wave hello\r\n        const liftAmount = -Math.sin(progress * Math.PI) * amp * 0.3; // Lift up during wave\r\n        const infinityY = Math.sin(t * 2) * amp * 0.2 + liftAmount;\r\n        \r\n        // Add a subtle tilt that follows the wave direction\r\n        // Makes the orb \"lean into\" the wave\r\n        const tilt = Math.sin(t) * 5; // ±5 degrees of tilt\r\n        \r\n        // Gentle scale pulse for emphasis\r\n        const scalePulse = 1 + Math.sin(progress * Math.PI * 2) * 0.05; // 5% scale variation\r\n        \r\n        // Glow brightens slightly during wave\r\n        const glowPulse = 1 + Math.sin(progress * Math.PI) * 0.2; // 20% glow increase\r\n        \r\n        return {\r\n            offsetX: infinityX,\r\n            offsetY: infinityY,\r\n            rotation: tilt,\r\n            scale: scalePulse,\r\n            glow: glowPulse\r\n        };\r\n    }\r\n    \r\n    applyBreathe(anim, progress) {\r\n        // Deliberate, mindful breathing animation\r\n        const params = anim.params;\r\n        const holdPercent = params.particleMotion?.holdPercent || 0.1;\r\n        \r\n        // Create a breathing curve with holds at peaks\r\n        let breathPhase;\r\n        if (progress < 0.4) {\r\n            // Inhale phase (0-40%)\r\n            breathPhase = Math.sin((progress / 0.4) * Math.PI / 2);\r\n        } else if (progress < 0.4 + holdPercent) {\r\n            // Hold at full inhale\r\n            breathPhase = 1.0;\r\n        } else if (progress < 0.9) {\r\n            // Exhale phase  \r\n            const exhaleProgress = (progress - 0.4 - holdPercent) / (0.5 - holdPercent);\r\n            breathPhase = Math.cos(exhaleProgress * Math.PI / 2);\r\n        } else {\r\n            // Hold at full exhale\r\n            breathPhase = 0;\r\n        }\r\n        \r\n        // Apply scale changes - expand on inhale\r\n        const scaleAmount = params.scaleAmount || 0.25;\r\n        const scale = 1 + breathPhase * scaleAmount;\r\n        \r\n        // Apply glow changes - brighten on inhale\r\n        const glowAmount = params.glowAmount || 0.4;\r\n        const glow = 1 + breathPhase * glowAmount;\r\n        \r\n        // Store breath phase for particle system\r\n        anim.breathPhase = breathPhase;\r\n        \r\n        return {\r\n            scale: scale,\r\n            glow: glow,\r\n            breathPhase: breathPhase // Pass to particles for synchronized motion\r\n        };\r\n    }\r\n    \r\n    applyMorph(anim, progress) {\r\n        // Fluid morphing effect\r\n        const morph = Math.sin(progress * Math.PI * 2);\r\n        return {\r\n            scale: 1 + morph * 0.1,\r\n            rotation: morph * 10\r\n        };\r\n    }\r\n    \r\n    applySlowBlink(anim, progress) {\r\n        // Simulate blinking by scaling vertically\r\n        let scaleY = 1;\r\n        if (progress < 0.3) {\r\n            // Closing\r\n            scaleY = 1 - (progress / 0.3);\r\n        } else if (progress < 0.5) {\r\n            // Closed\r\n            scaleY = 0;\r\n        } else if (progress < 0.8) {\r\n            // Opening\r\n            scaleY = (progress - 0.5) / 0.3;\r\n        } else {\r\n            // Open\r\n            scaleY = 1;\r\n        }\r\n        \r\n        // Since we can't do scaleY separately, dim the orb instead\r\n        return {\r\n            glow: scaleY\r\n        };\r\n    }\r\n    \r\n    applyLook(anim, progress) {\r\n        // Initialize target position if not set\r\n        if (!anim.targetX) {\r\n            const direction = anim.params.lookDirection;\r\n            const distance = anim.params.lookDistance * 50 * this.scaleFactor; // Convert to pixels and scale\r\n            \r\n            switch(direction) {\r\n                case 'left':\r\n                    anim.targetX = -distance;\r\n                    anim.targetY = 0;\r\n                    break;\r\n                case 'right':\r\n                    anim.targetX = distance;\r\n                    anim.targetY = 0;\r\n                    break;\r\n                case 'up':\r\n                    anim.targetX = 0;\r\n                    anim.targetY = -distance;\r\n                    break;\r\n                case 'down':\r\n                    anim.targetX = 0;\r\n                    anim.targetY = distance;\r\n                    break;\r\n                default: // random\r\n                    const angle = Math.random() * Math.PI * 2;\r\n                    anim.targetX = Math.cos(angle) * distance;\r\n                    anim.targetY = Math.sin(angle) * distance;\r\n            }\r\n        }\r\n        \r\n        // Smooth look with hold\r\n        let lookProgress = progress;\r\n        if (progress < 0.3) {\r\n            // Move to target\r\n            lookProgress = progress / 0.3;\r\n        } else if (progress < 0.7) {\r\n            // Hold\r\n            lookProgress = 1;\r\n        } else {\r\n            // Return\r\n            lookProgress = 1 - (progress - 0.7) / 0.3;\r\n        }\r\n        \r\n        return {\r\n            offsetX: anim.targetX * lookProgress,\r\n            offsetY: anim.targetY * lookProgress\r\n        };\r\n    }\r\n    \r\n    applySettle(anim, progress) {\r\n        // Damped oscillation\r\n        const wobble = Math.sin(progress * Math.PI * anim.params.wobbleFreq) * \r\n                      Math.exp(-progress * 3) * 20 * this.scaleFactor;\r\n        return {\r\n            offsetY: wobble,\r\n            scale: 1 + wobble * 0.01\r\n        };\r\n    }\r\n    \r\n    applyBreathIn(anim, progress) {\r\n        const breathScale = 1 + (anim.params.scaleAmount - 1) * Math.sin(progress * Math.PI / 2);\r\n        return {\r\n            scale: breathScale\r\n        };\r\n    }\r\n    \r\n    applyBreathOut(anim, progress) {\r\n        const breathScale = 1 - (1 - anim.params.scaleAmount) * Math.sin(progress * Math.PI / 2);\r\n        return {\r\n            scale: breathScale\r\n        };\r\n    }\r\n    \r\n    applyBreathHold(anim, progress) {\r\n        // Hold at expanded state\r\n        return {\r\n            scale: anim.params.scaleAmount\r\n        };\r\n    }\r\n    \r\n    applyBreathHoldEmpty(anim, progress) {\r\n        // Hold at contracted state\r\n        return {\r\n            scale: anim.params.scaleAmount\r\n        };\r\n    }\r\n    \r\n    applyJump(anim, progress) {\r\n        let yOffset = 0;\r\n        let scale = 1;\r\n        \r\n        if (progress < 0.2) {\r\n            // Squash phase\r\n            const squashProgress = progress / 0.2;\r\n            scale = 1 - (1 - anim.params.squashAmount) * squashProgress;\r\n        } else if (progress < 0.7) {\r\n            // Jump phase\r\n            const jumpProgress = (progress - 0.2) / 0.5;\r\n            const jumpCurve = Math.sin(jumpProgress * Math.PI);\r\n            yOffset = -anim.params.jumpHeight * jumpCurve * this.scaleFactor;\r\n            scale = anim.params.squashAmount + \r\n                   (anim.params.stretchAmount - anim.params.squashAmount) * jumpCurve;\r\n        } else {\r\n            // Landing phase\r\n            const landProgress = (progress - 0.7) / 0.3;\r\n            scale = anim.params.stretchAmount - \r\n                   (anim.params.stretchAmount - 1) * landProgress;\r\n        }\r\n        \r\n        return {\r\n            offsetY: yOffset,\r\n            scale: scale\r\n        };\r\n    }\r\n    \r\n    applySway(anim, progress) {\r\n        // Gentle pendulum-like swaying motion for the core\r\n        const swayAmplitude = (anim.params?.amplitude || 30) * this.scaleFactor;\r\n        const swayFrequency = anim.params?.frequency || 1;\r\n        \r\n        // Sway side to side with a gentle ease\r\n        const swayX = Math.sin(progress * Math.PI * 2 * swayFrequency) * swayAmplitude;\r\n        \r\n        // Slight vertical bob for realism\r\n        const bobY = Math.sin(progress * Math.PI * 4 * swayFrequency) * swayAmplitude * 0.1;\r\n        \r\n        // Slight rotation to match the sway\r\n        const rotation = Math.sin(progress * Math.PI * 2 * swayFrequency) * 5; // 5 degrees max\r\n        \r\n        return {\r\n            offsetX: swayX,\r\n            offsetY: bobY,\r\n            rotation: rotation\r\n        };\r\n    }\r\n    \r\n    applyRain(anim, progress) {\r\n        // Rain effect - triggers falling particle behavior\r\n        // The actual particle motion is handled by the particle system\r\n        // This just adds a subtle downward drift to the core\r\n        \r\n        const rainIntensity = anim.params?.intensity || 1.0;\r\n        \r\n        // Gentle downward drift\r\n        const driftY = progress * 10 * this.scaleFactor * rainIntensity;\r\n        \r\n        // Slight sway as if affected by wind\r\n        const swayX = Math.sin(progress * Math.PI * 4) * 5 * this.scaleFactor;\r\n        \r\n        // Trigger particle falling effect through the renderer\r\n        if (this.renderer && this.renderer.particleSystem) {\r\n            // Enable falling behavior for particles during rain\r\n            this.renderer.particleSystem.setGestureBehavior('falling', progress > 0 && progress < 1);\r\n        }\r\n        \r\n        return {\r\n            offsetX: swayX,\r\n            offsetY: driftY,\r\n            particleEffect: 'falling'  // Signal to particle system\r\n        };\r\n    }\r\n    \r\n    applyFloat(anim, progress) {\r\n        // Ethereal floating motion with both vertical and horizontal drift\r\n        const floatAmplitude = (anim.params?.amplitude || 20) * this.scaleFactor;\r\n        const floatSpeed = anim.params?.speed || 1;\r\n        \r\n        // Primary vertical float with sine wave\r\n        const floatY = Math.sin(progress * Math.PI * 2 * floatSpeed) * floatAmplitude;\r\n        \r\n        // Secondary horizontal drift for natural movement\r\n        const driftX = Math.sin(progress * Math.PI * 3 * floatSpeed) * floatAmplitude * 0.3;\r\n        \r\n        // Slight scale pulsation for breathing effect\r\n        const scalePulse = 1 + Math.sin(progress * Math.PI * 4 * floatSpeed) * 0.02;\r\n        \r\n        return {\r\n            offsetX: driftX,\r\n            offsetY: floatY,\r\n            scale: scalePulse\r\n        };\r\n    }\r\n    \r\n    applyOrbital(anim, progress) {\r\n        // Orbital motion - particles orbit around core, core stays still\r\n        // This gesture is for particle motion only, not core movement\r\n        return {\r\n            // No core movement - orbital is a particle-only effect\r\n            offsetX: 0,\r\n            offsetY: 0\r\n        };\r\n    }\r\n    \r\n    applyHula(anim, progress) {\r\n        // Hula motion - horizontal figure-8 pattern\r\n        const amplitude = (anim.params?.amplitude || 40) * this.scaleFactor;\r\n        const t = progress * Math.PI * 2;\r\n        \r\n        // Figure-8 parametric equations\r\n        const x = Math.sin(t) * amplitude;\r\n        const y = Math.sin(t * 2) * amplitude * 0.5;\r\n        \r\n        return {\r\n            offsetX: x,\r\n            offsetY: y\r\n        };\r\n    }\r\n    \r\n    applySparkle(anim, progress) {\r\n        // Sparkle effect - make particles glow like fireflies\r\n        // Each particle gets its own random phase for async blinking\r\n        const intensity = anim.params?.intensity || 2.0;\r\n        const baseGlow = 0.8;\r\n        \r\n        // Create firefly-like glow pattern for particles\r\n        // Using time-based phase shifting for each particle\r\n        const time = Date.now() * 0.001; // Convert to seconds\r\n        \r\n        // Main glow pulse for the effect\r\n        const mainPulse = Math.sin(progress * Math.PI * 4) * 0.3 + 0.7;\r\n        \r\n        // This will be used by particles to create firefly effect\r\n        // Each particle will add its own random offset to this\r\n        return {\r\n            particleGlow: intensity, // Intensity for individual particles\r\n            glow: mainPulse, // Gentle overall glow\r\n            fireflyTime: time, // Pass time for particle calculations\r\n            fireflyEffect: true // Flag to enable firefly effect on particles\r\n        };\r\n    }\r\n    \r\n    applyShimmer(anim, progress) {\r\n        // Shimmer effect - subtle, ethereal glow that travels across surface\r\n        // Like moonlight on calm water\r\n        \r\n        const time = Date.now() * 0.001; // Current time in seconds\r\n        const intensity = anim.params?.intensity || 0.3; // Very subtle\r\n        \r\n        // Single slow wave for gentle shimmer\r\n        const wave = Math.sin(time * 2 + progress * Math.PI * 2);\r\n        \r\n        // Very subtle glow variation\r\n        const glowEffect = 1 + wave * intensity;\r\n        \r\n        // Tiny breathing effect\r\n        const scaleEffect = 1 + wave * 0.01; // Just 1% variation\r\n        \r\n        return {\r\n            offsetX: 0, // No movement\r\n            offsetY: 0, // No movement\r\n            glow: glowEffect,\r\n            scale: scaleEffect,\r\n            // Particle-specific data\r\n            particleGlow: 1 + wave * 0.2, // Very subtle particle effect\r\n            shimmerTime: time,\r\n            shimmerWave: wave,\r\n            shimmerEffect: true // Flag to enable shimmer effect on particles\r\n        };\r\n    }\r\n    \r\n    applyWiggle(anim, progress) {\r\n        // Hip-hop wiggle - 4 phase: center -> side -> opposite -> side -> center\r\n        const amplitude = (anim.params?.amplitude || 15) * this.scaleFactor;\r\n        \r\n        // Random starting direction (1 for right, -1 for left)\r\n        if (anim.wiggleDirection === undefined) {\r\n            anim.wiggleDirection = Math.random() < 0.5 ? 1 : -1;\r\n        }\r\n        const direction = anim.wiggleDirection;\r\n        \r\n        // 4-phase movement pattern\r\n        let wiggleX = 0;\r\n        let rotation = 0;\r\n        \r\n        if (progress < 0.25) {\r\n            // Phase 1: Center to first side (0-25%)\r\n            const phase = progress / 0.25;\r\n            wiggleX = amplitude * direction * phase;\r\n            rotation = 3 * direction * phase;\r\n        } else if (progress < 0.5) {\r\n            // Phase 2: First side to opposite side (25-50%)\r\n            const phase = (progress - 0.25) / 0.25;\r\n            wiggleX = amplitude * direction * (1 - 2 * phase);\r\n            rotation = 3 * direction * (1 - 2 * phase);\r\n        } else if (progress < 0.75) {\r\n            // Phase 3: Opposite side back to first side (50-75%)\r\n            const phase = (progress - 0.5) / 0.25;\r\n            wiggleX = amplitude * -direction * (1 - 2 * phase);\r\n            rotation = 3 * -direction * (1 - 2 * phase);\r\n        } else {\r\n            // Phase 4: First side back to center (75-100%)\r\n            const phase = (progress - 0.75) / 0.25;\r\n            wiggleX = amplitude * direction * (1 - phase);\r\n            rotation = 3 * direction * (1 - phase);\r\n        }\r\n        \r\n        // Subtle bounce synced with movement\r\n        const bounceY = Math.abs(Math.sin(progress * Math.PI * 4)) * amplitude * 0.15;\r\n        \r\n        return {\r\n            offsetX: wiggleX,\r\n            offsetY: -bounceY,\r\n            rotation: rotation\r\n        };\r\n    }\r\n    \r\n    applyGroove(anim, progress) {\r\n        // Groove motion - smooth, flowing dance movement\r\n        const amplitude = (anim.params?.amplitude || 25) * this.scaleFactor;\r\n        \r\n        // Smoother wave pattern with organic flow\r\n        const wave1 = Math.sin(progress * Math.PI * 2) * amplitude;\r\n        const wave2 = Math.sin(progress * Math.PI * 3 + 0.5) * amplitude * 0.4;\r\n        const grooveX = wave1 + wave2;\r\n        \r\n        // Gentle vertical bob with offset timing\r\n        const grooveY = Math.sin(progress * Math.PI * 4 + 0.3) * amplitude * 0.25;\r\n        \r\n        // Subtle pulse that breathes naturally\r\n        const scale = 1 + Math.sin(progress * Math.PI * 3 + 0.7) * 0.03;\r\n        \r\n        // Slight rotation for more natural movement\r\n        const rotation = Math.sin(progress * Math.PI * 2 + 0.2) * 8;\r\n        \r\n        return {\r\n            offsetX: grooveX,\r\n            offsetY: grooveY,\r\n            scale: scale,\r\n            rotation: rotation\r\n        };\r\n    }\r\n    \r\n    applyPoint(anim, progress) {\r\n        // Point gesture - directional lean/stretch with return to center\r\n        \r\n        // Random direction if not specified - only left or right\r\n        if (anim.pointDirection === undefined) {\r\n            // Randomly choose left (1) or right (-1)\r\n            anim.pointDirection = Math.random() < 0.5 ? -1 : 1;\r\n        }\r\n        \r\n        const direction = anim.params?.direction !== undefined ? anim.params.direction : anim.pointDirection;\r\n        const distance = (anim.params?.distance || 40) * this.scaleFactor;\r\n        \r\n        // Three-phase animation:\r\n        // 0.0-0.4: Move to point position\r\n        // 0.4-0.6: Hold at point\r\n        // 0.6-1.0: Return to center\r\n        let motionProgress;\r\n        let scaleProgress;\r\n        \r\n        if (progress < 0.4) {\r\n            // Phase 1: Move to point (ease out)\r\n            motionProgress = 1 - Math.pow(1 - (progress / 0.4), 3);\r\n            scaleProgress = motionProgress;\r\n        } else if (progress < 0.6) {\r\n            // Phase 2: Hold at point\r\n            motionProgress = 1.0;\r\n            scaleProgress = 1.0;\r\n        } else {\r\n            // Phase 3: Return to center (ease in)\r\n            motionProgress = Math.pow(1 - ((progress - 0.6) / 0.4), 3);\r\n            scaleProgress = motionProgress;\r\n        }\r\n        \r\n        // Move in direction (direction is -1 for left, 1 for right)\r\n        const offsetX = direction * distance * motionProgress;\r\n        const offsetY = -Math.abs(distance * 0.15 * motionProgress); // Slight upward movement when pointing\r\n        \r\n        // Stretch effect in pointing direction\r\n        const scale = 1 + 0.15 * scaleProgress; // 15% stretch\r\n        \r\n        // Add slight tilt when pointing\r\n        const rotation = direction * 5 * scaleProgress; // Tilt 5 degrees in pointing direction\r\n        \r\n        return {\r\n            offsetX: offsetX,\r\n            offsetY: offsetY,\r\n            scale: scale,\r\n            rotation: rotation\r\n        };\r\n    }\r\n    \r\n    applyLean(anim, progress) {\r\n        // Lean gesture - tilt to one side\r\n        const angle = anim.params?.angle || 15; // Degrees\r\n        const side = anim.params?.side || 1; // 1 for right, -1 for left\r\n        \r\n        // Smooth ease in-out\r\n        const easedProgress = Math.sin(progress * Math.PI);\r\n        \r\n        // Apply rotation and slight offset\r\n        const rotation = angle * side * easedProgress;\r\n        const offsetX = side * 10 * this.scaleFactor * easedProgress;\r\n        \r\n        return {\r\n            offsetX: offsetX,\r\n            rotation: rotation\r\n        };\r\n    }\r\n    \r\n    applyReach(anim, progress) {\r\n        // Reach gesture - stretch upward or outward\r\n        const direction = anim.params?.direction || -Math.PI/2; // Default upward\r\n        const distance = (anim.params?.distance || 40) * this.scaleFactor;\r\n        \r\n        // Two-phase motion: reach out, then return\r\n        let motionProgress;\r\n        if (progress < 0.4) {\r\n            // Reaching phase\r\n            motionProgress = progress / 0.4;\r\n        } else if (progress < 0.6) {\r\n            // Hold phase\r\n            motionProgress = 1;\r\n        } else {\r\n            // Return phase\r\n            motionProgress = 1 - (progress - 0.6) / 0.4;\r\n        }\r\n        \r\n        // Apply easing\r\n        motionProgress = motionProgress * motionProgress * (3 - 2 * motionProgress);\r\n        \r\n        const offsetX = Math.cos(direction) * distance * motionProgress;\r\n        const offsetY = Math.sin(direction) * distance * motionProgress;\r\n        \r\n        // Stretch slightly when reaching\r\n        const scale = 1 + motionProgress * 0.15;\r\n        \r\n        return {\r\n            offsetX: offsetX,\r\n            offsetY: offsetY,\r\n            scale: scale\r\n        };\r\n    }\r\n    \r\n    applyHeadBob(anim, progress) {\r\n        // Head bob motion - rhythmic vertical movement\r\n        const amplitude = (anim.params?.amplitude || 20) * this.scaleFactor;\r\n        const frequency = anim.params?.frequency || 2;\r\n        \r\n        // Vertical bob with sharp down, smooth up\r\n        const bobPhase = (progress * frequency) % 1;\r\n        let bobY;\r\n        if (bobPhase < 0.3) {\r\n            // Quick down\r\n            bobY = -amplitude * (bobPhase / 0.3);\r\n        } else {\r\n            // Smooth up\r\n            bobY = -amplitude * (1 - (bobPhase - 0.3) / 0.7);\r\n        }\r\n        \r\n        // Slight forward tilt on the down beat\r\n        const rotation = bobPhase < 0.3 ? -3 : 0;\r\n        \r\n        return {\r\n            offsetY: bobY,\r\n            rotation: rotation\r\n        };\r\n    }\r\n    \r\n    applyOrbit(anim, progress) {\r\n        // Orbit motion - circular path around center\r\n        const radius = (anim.params?.radius || 30) * this.scaleFactor;\r\n        const speed = anim.params?.speed || 1;\r\n        \r\n        // Circular motion\r\n        const angle = progress * Math.PI * 2 * speed;\r\n        const offsetX = Math.cos(angle) * radius;\r\n        const offsetY = Math.sin(angle) * radius;\r\n        \r\n        return {\r\n            offsetX: offsetX,\r\n            offsetY: offsetY\r\n        };\r\n    }\r\n\r\n    // Individual gesture methods - these will be moved from EmotiveRenderer\r\n    startBounce() { this.startGesture('bounce'); }\r\n    startPulse() { this.startGesture('pulse'); }\r\n    startShake() { this.startGesture('shake'); }\r\n    startSpin() { this.startGesture('spin'); }\r\n    startNod() { this.startGesture('nod'); }\r\n    startTilt() { this.startGesture('tilt'); }\r\n    startExpand() { this.startGesture('expand'); }\r\n    startContract() { this.startGesture('contract'); }\r\n    startFlash() { this.startGesture('flash'); }\r\n    startDrift() { this.startGesture('drift'); }\r\n    startStretch() { this.startGesture('stretch'); }\r\n    startGlow() { this.startGesture('glow'); }\r\n    startFlicker() { this.startGesture('flicker'); }\r\n    startVibrate() { this.startGesture('vibrate'); }\r\n    startOrbital() { this.startGesture('orbital'); }\r\n    startHula() { this.startGesture('hula'); }\r\n    startWave() { this.startGesture('wave'); }\r\n    startBreathe() { this.startGesture('breathe'); }\r\n    startMorph() { this.startGesture('morph'); }\r\n    startSlowBlink() { this.startGesture('slowBlink'); }\r\n    startLook() { this.startGesture('look'); }\r\n    startSettle() { this.startGesture('settle'); }\r\n    startBreathIn() { this.startGesture('breathIn'); }\r\n    startBreathOut() { this.startGesture('breathOut'); }\r\n    startBreathHold() { this.startGesture('breathHold'); }\r\n    startBreathHoldEmpty() { this.startGesture('breathHoldEmpty'); }\r\n    startJump() { this.startGesture('jump'); }\r\n    startSway() { this.startGesture('sway'); }\r\n    startFloat() { this.startGesture('float'); }\r\n    startRain() { this.startGesture('rain'); }\r\n    startRunningMan() { this.startGesture('runningman'); }\r\n    startCharleston() { this.startGesture('charleston'); }\r\n    startSparkle() { this.startGesture('sparkle'); }\r\n    startShimmer() { this.startGesture('shimmer'); }\r\n    startWiggle() { this.startGesture('wiggle'); }\r\n    startGroove() { this.startGesture('groove'); }\r\n    startPoint() { this.startGesture('point'); }\r\n    startLean() { this.startGesture('lean'); }\r\n    startReach() { this.startGesture('reach'); }\r\n    startHeadBob() { this.startGesture('headBob'); }\r\n    startOrbit() { this.startGesture('orbit'); }\r\n    \r\n    applyRunningMan(anim, progress) {\r\n        // Simple running shuffle - quick slide and step\r\n        const slide = Math.sin(progress * Math.PI * 4) * 20 * this.scaleFactor;\r\n        const step = -Math.abs(Math.sin(progress * Math.PI * 8)) * 10 * this.scaleFactor;\r\n        \r\n        return {\r\n            offsetX: slide,\r\n            offsetY: step,\r\n            rotation: slide * 0.3,\r\n            scaleY: 1 - Math.abs(Math.sin(progress * Math.PI * 8)) * 0.05\r\n        };\r\n    }\r\n    \r\n    applyCharleston(anim, progress) {\r\n        // Charleston - crisscross kicks\r\n        const kick = Math.sin(progress * Math.PI * 8) * 25 * this.scaleFactor;\r\n        const hop = -Math.abs(Math.sin(progress * Math.PI * 8)) * 10 * this.scaleFactor;\r\n        \r\n        return {\r\n            offsetX: kick,\r\n            offsetY: hop,\r\n            rotation: kick * 0.6,\r\n            scaleY: 1 - Math.abs(Math.sin(progress * Math.PI * 8)) * 0.06\r\n        };\r\n    }\r\n    \r\n    startRunningMan() { this.startGesture('runningman'); }\r\n    startCharleston() { this.startGesture('charleston'); }\r\n}\r\n\r\nexport default GestureAnimator;","/**\r\n * ColorUtilities - Color manipulation and transition utilities for EmotiveRenderer\r\n * @module core/renderer/ColorUtilities\r\n */\r\n\r\nexport class ColorUtilities {\r\n    constructor() {\r\n        this.colorTransition = null;\r\n    }\r\n\r\n    /**\r\n     * Apply undertone modifiers to current visual properties\r\n     * Will be moved from EmotiveRenderer\r\n     */\r\n    applyUndertoneModifiers(undertone, visualProperties) {\r\n        // Implementation will be moved here\r\n        return visualProperties;\r\n    }\r\n\r\n    /**\r\n     * Apply undertone to a color\r\n     * @param {string} baseColor - Base hex color\r\n     * @param {string|Object} undertone - Undertone modifier or weighted object\r\n     * @returns {string} Modified hex color\r\n     */\r\n    applyUndertoneToColor(baseColor, undertone) {\r\n        // Handle weighted modifier for smooth transitions\r\n        if (undertone && typeof undertone === 'object' && undertone.weight !== undefined) {\r\n            const weight = undertone.weight;\r\n            const undertoneType = undertone.type || 'clear';\r\n            \r\n            if (undertoneType === 'clear' || weight === 0) {\r\n                return baseColor;\r\n            }\r\n            \r\n            // Get full saturation adjustment for this undertone\r\n            const fullySaturated = this.applyUndertoneSaturation(baseColor, undertoneType);\r\n            \r\n            // Interpolate between base and fully saturated based on weight\r\n            const rgb1 = this.hexToRgb(baseColor);\r\n            const rgb2 = this.hexToRgb(fullySaturated);\r\n            \r\n            const r = Math.round(rgb1.r + (rgb2.r - rgb1.r) * weight);\r\n            const g = Math.round(rgb1.g + (rgb2.g - rgb1.g) * weight);\r\n            const b = Math.round(rgb1.b + (rgb2.b - rgb1.b) * weight);\r\n            \r\n            return this.rgbToHex(r, g, b);\r\n        }\r\n        \r\n        // Direct string-based undertone - use saturation system\r\n        if (!undertone || undertone === 'clear') return baseColor;\r\n        \r\n        return this.applyUndertoneSaturation(baseColor, undertone);\r\n    }\r\n\r\n    /**\r\n     * Convert hex color to RGB\r\n     * @param {string} hex - Hex color string\r\n     * @returns {Object} RGB values\r\n     */\r\n    hexToRgb(hex) {\r\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    }\r\n\r\n    /**\r\n     * Convert RGB to HSL\r\n     */\r\n    rgbToHsl(r, g, b) {\r\n        r /= 255;\r\n        g /= 255;\r\n        b /= 255;\r\n\r\n        const max = Math.max(r, g, b);\r\n        const min = Math.min(r, g, b);\r\n        let h, s, l = (max + min) / 2;\r\n\r\n        if (max === min) {\r\n            h = s = 0; // achromatic\r\n        } else {\r\n            const d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            \r\n            switch (max) {\r\n                case r: h = ((g - b) / d + (g < b ? 6 : 0)) / 6; break;\r\n                case g: h = ((b - r) / d + 2) / 6; break;\r\n                case b: h = ((r - g) / d + 4) / 6; break;\r\n            }\r\n        }\r\n\r\n        return { h: h * 360, s: s * 100, l: l * 100 }; // Convert s and l to percentages\r\n    }\r\n\r\n    /**\r\n     * Convert HSL to hex color\r\n     */\r\n    hslToHex(h, s, l) {\r\n        h = h / 360;\r\n        s = s / 100;\r\n        l = l / 100;\r\n\r\n        let r, g, b;\r\n\r\n        if (s === 0) {\r\n            r = g = b = l; // achromatic\r\n        } else {\r\n            const hue2rgb = (p, q, t) => {\r\n                if (t < 0) t += 1;\r\n                if (t > 1) t -= 1;\r\n                if (t < 1/6) return p + (q - p) * 6 * t;\r\n                if (t < 1/2) return q;\r\n                if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n                return p;\r\n            };\r\n\r\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            const p = 2 * l - q;\r\n            r = hue2rgb(p, q, h + 1/3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1/3);\r\n        }\r\n\r\n        const toHex = x => {\r\n            const hex = Math.round(x * 255).toString(16);\r\n            return hex.length === 1 ? '0' + hex : hex;\r\n        };\r\n\r\n        return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\r\n    }\r\n\r\n    /**\r\n     * Apply undertone saturation adjustment\r\n     */\r\n    applyUndertoneSaturation(baseColor, undertone) {\r\n        const rgb = this.hexToRgb(baseColor);\r\n        const hsl = this.rgbToHsl(rgb.r, rgb.g, rgb.b);\r\n        \r\n        // Saturation adjustments by undertone\r\n        const saturationModifiers = {\r\n            // Positive undertones (higher saturation)\r\n            'intense': 1.5,      // +50% saturation (very vivid)\r\n            'confident': 1.3,    // +30% saturation (bold)\r\n            'energetic': 1.2,    // +20% saturation (vibrant)\r\n            'upbeat': 1.2,       // +20% saturation\r\n            // Neutral/slightly nervous\r\n            'nervous': 1.15,     // +15% saturation (slightly heightened)\r\n            // Negative undertones (lower saturation)\r\n            'mellow': 0.8,       // -20% saturation  \r\n            'tired': 0.8,        // -20% saturation (washed out)\r\n            'subdued': 0.5       // -50% saturation (ghostly)\r\n        };\r\n        \r\n        const modifier = saturationModifiers[undertone] || 1.0;\r\n        hsl.s = Math.min(100, hsl.s * modifier);\r\n        \r\n        return this.hslToHex(hsl.h, hsl.s, hsl.l);\r\n    }\r\n    \r\n    /**\r\n     * Convert RGB values to hex\r\n     */\r\n    rgbToHex(r, g, b) {\r\n        const toHex = x => {\r\n            const hex = Math.round(x).toString(16);\r\n            return hex.length === 1 ? '0' + hex : hex;\r\n        };\r\n        return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\r\n    }\r\n    \r\n    /**\r\n     * Start a color transition\r\n     */\r\n    startColorTransition(targetColor, targetIntensity, duration = 1500) {\r\n        // Don't start a new transition if we're already at the target\r\n        if (this.currentColor === targetColor && \r\n            this.currentIntensity === targetIntensity) {\r\n            return;\r\n        }\r\n        \r\n        this.colorTransition = {\r\n            active: true,\r\n            fromColor: this.currentColor || '#ffffff',\r\n            toColor: targetColor,\r\n            fromIntensity: this.currentIntensity || 1.0,\r\n            toIntensity: targetIntensity,\r\n            progress: 0,\r\n            startTime: performance.now(),\r\n            duration: duration\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update color transition\r\n     */\r\n    updateColorTransition(deltaTime) {\r\n        if (!this.colorTransition || !this.colorTransition.active) return null;\r\n        \r\n        const elapsed = performance.now() - this.colorTransition.startTime;\r\n        const progress = Math.min(elapsed / this.colorTransition.duration, 1);\r\n        \r\n        // Use ease-out-quad for smooth deceleration\r\n        const eased = 1 - Math.pow(1 - progress, 2);\r\n        \r\n        // Interpolate color\r\n        const from = this.hexToRgb(this.colorTransition.fromColor);\r\n        const to = this.hexToRgb(this.colorTransition.toColor);\r\n        \r\n        const r = Math.round(from.r + (to.r - from.r) * eased);\r\n        const g = Math.round(from.g + (to.g - from.g) * eased);\r\n        const b = Math.round(from.b + (to.b - from.b) * eased);\r\n        \r\n        const currentColor = this.rgbToHex(r, g, b);\r\n        const currentIntensity = this.colorTransition.fromIntensity + \r\n            (this.colorTransition.toIntensity - this.colorTransition.fromIntensity) * eased;\r\n        \r\n        // Store current values\r\n        this.currentColor = currentColor;\r\n        this.currentIntensity = currentIntensity;\r\n        \r\n        // Complete transition if done\r\n        if (progress >= 1) {\r\n            this.colorTransition.active = false;\r\n        }\r\n        \r\n        return {\r\n            color: currentColor,\r\n            intensity: currentIntensity\r\n        };\r\n    }\r\n}\r\n\r\nexport default ColorUtilities;","/**\n * SpecialEffects - Special visual effects for EmotiveRenderer\n * @module core/renderer/SpecialEffects\n */\n\nexport class SpecialEffects {\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.ctx = renderer.ctx;\n        this.canvas = renderer.canvas;\n        console.log('[SpecialEffects] Canvas element:', this.canvas);\n        \n        // Effect states\n        this.recordingActive = false;\n        this.sleepMode = false;\n        this.speakingActive = false;\n        this.zenModeActive = false;\n        \n        // Speaking rings\n        this.speakingRings = [];\n        this.ringSpawnTimer = 0;\n        this.ringSpawnInterval = 300;\n        this.maxRings = 3;\n        \n        // Sleep Z's\n        this.sleepZ = [];\n        \n        // Sparkle particles\n        this.sparkles = [];\n        \n        // Chromatic aberration effect\n        this.chromaticAberration = {\n            active: false,\n            intensity: 0,\n            targetIntensity: 0,\n            fadeSpeed: 0.01, // Very slow fade for testing\n            maxOffset: 30 // Much larger offset for testing\n        };\n        \n        // Helper method references\n        this.scaleValue = (value) => renderer.scaleValue(value);\n        this.hexToRgba = (hex, alpha) => renderer.hexToRgba(hex, alpha);\n    }\n\n    /**\n     * Render recording glow effect\n     */\n    renderRecordingGlow(x, y, radius, intensity) {\n        const ctx = this.ctx;\n        const glowSize = radius * 2.5;\n        const gradient = ctx.createRadialGradient(x, y, 0, x, y, glowSize);\n        \n        gradient.addColorStop(0, `rgba(255, 0, 0, ${0.3 * intensity})`);\n        gradient.addColorStop(0.5, `rgba(255, 0, 0, ${0.15 * intensity})`);\n        gradient.addColorStop(1, 'rgba(255, 0, 0, 0)');\n        \n        ctx.save();\n        ctx.globalCompositeOperation = 'screen';\n        ctx.fillStyle = gradient;\n        ctx.fillRect(x - glowSize, y - glowSize, glowSize * 2, glowSize * 2);\n        ctx.restore();\n    }\n\n    /**\n     * Render recording indicator\n     */\n    renderRecordingIndicator(x, y) {\n        const time = Date.now() / 1000;\n        const pulse = 0.8 + Math.sin(time * 2) * 0.2;\n        \n        this.ctx.save();\n        this.ctx.translate(x, y);\n        \n        // Outer glow for text\n        this.ctx.shadowBlur = this.scaleValue(15);\n        this.ctx.shadowColor = `rgba(255, 0, 0, ${pulse * 0.8})`;\n        \n        // Main REC text\n        const recSize = this.scaleValue(80);\n        this.ctx.font = `italic 900 ${recSize}px \"Poppins\", sans-serif`;\n        this.ctx.fillStyle = `rgba(255, 0, 0, ${pulse})`;\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'middle';\n        this.ctx.fillText('REC', 0, 0);\n        \n        // Inner highlight\n        this.ctx.shadowBlur = 0;\n        this.ctx.font = `italic 900 ${recSize - 1}px \"Poppins\", sans-serif`;\n        this.ctx.fillStyle = `rgba(255, 255, 255, ${pulse * 0.3})`;\n        this.ctx.fillText('REC', -0.5, -0.5);\n        \n        this.ctx.restore();\n    }\n\n    /**\n     * Render sleep indicator with Z's\n     */\n    renderSleepIndicator(x, y, deltaTime) {\n        // Spawn new Z periodically\n        this.ringSpawnTimer += deltaTime;\n        if (this.ringSpawnTimer >= 2000 && this.sleepZ.length < 3) {\n            const weights = ['300', '500', '700', '900'];\n            const randomWeight = weights[Math.floor(Math.random() * weights.length)];\n            const randomCase = Math.random() > 0.5 ? 'Z' : 'z';\n            \n            this.sleepZ.push({\n                x: x + Math.random() * this.scaleValue(30) - this.scaleValue(15),\n                y: y + this.scaleValue(80),\n                size: this.scaleValue((24 + Math.random() * 8) * 3),\n                opacity: 1.0,\n                speed: -0.025,\n                drift: Math.random() * this.scaleValue(20) - this.scaleValue(10),\n                lifetime: 0,\n                rotation: Math.random() * 30 - 15,\n                text: randomCase,\n                weight: randomWeight\n            });\n            this.ringSpawnTimer = 0;\n        }\n        \n        // Update and render Z's\n        this.sleepZ = this.sleepZ.filter(z => {\n            z.lifetime += deltaTime;\n            z.y += z.speed * deltaTime;\n            z.x += Math.sin(z.lifetime * 0.0008) * z.drift * 0.008;\n            z.rotation += deltaTime * 0.01;\n            \n            // Gradient fade out\n            const fadeStart = 2000;\n            const fadeEnd = 4000;\n            if (z.lifetime < fadeStart) {\n                z.opacity = 1.0;\n            } else if (z.lifetime < fadeEnd) {\n                z.opacity = 1.0 - ((z.lifetime - fadeStart) / (fadeEnd - fadeStart));\n            } else {\n                z.opacity = 0;\n            }\n            \n            if (z.opacity > 0.01) {\n                this.ctx.save();\n                this.ctx.translate(z.x, z.y);\n                this.ctx.rotate(z.rotation * Math.PI / 180);\n                \n                const baseColor = this.renderer.state.glowColor || '#4a90e2';\n                \n                // Outer glow\n                this.ctx.shadowBlur = this.scaleValue(15);\n                this.ctx.shadowColor = this.hexToRgba(baseColor, z.opacity * 0.5);\n                \n                // Main Z with gradient\n                const gradient = this.ctx.createLinearGradient(-z.size/2, -z.size/2, z.size/2, z.size/2);\n                gradient.addColorStop(0, this.hexToRgba(baseColor, z.opacity));\n                gradient.addColorStop(0.5, this.hexToRgba('#ffffff', z.opacity * 0.9));\n                gradient.addColorStop(1, this.hexToRgba(baseColor, z.opacity * 0.7));\n                \n                this.ctx.font = `italic ${z.weight || '900'} ${z.size}px 'Poppins', sans-serif`;\n                this.ctx.fillStyle = gradient;\n                this.ctx.textAlign = 'center';\n                this.ctx.textBaseline = 'middle';\n                this.ctx.fillText(z.text || 'Z', 0, 0);\n                \n                // Inner highlight\n                this.ctx.shadowBlur = 0;\n                this.ctx.font = `italic ${z.weight || '900'} ${z.size * 0.9}px 'Poppins', sans-serif`;\n                this.ctx.fillStyle = this.hexToRgba('#ffffff', z.opacity * 0.3);\n                this.ctx.fillText(z.text || 'Z', -1, -1);\n                \n                this.ctx.restore();\n                return true;\n            }\n            return false;\n        });\n    }\n\n    /**\n     * Render speaking rings effect\n     */\n    renderSpeakingRings(centerX, centerY, coreRadius, deltaTime) {\n        // Spawn new rings periodically\n        this.ringSpawnTimer += deltaTime;\n        if (this.ringSpawnTimer >= this.ringSpawnInterval && this.speakingRings.length < this.maxRings) {\n            this.speakingRings.push({\n                radius: coreRadius,\n                opacity: 0.8,\n                speed: 0.15\n            });\n            this.ringSpawnTimer = 0;\n        }\n        \n        // Update and render existing rings\n        this.speakingRings = this.speakingRings.filter(ring => {\n            ring.radius += ring.speed * deltaTime;\n            ring.opacity = Math.max(0, 0.8 * (1 - (ring.radius - coreRadius) / (coreRadius * 2)));\n            \n            if (ring.opacity > 0.01) {\n                this.ctx.strokeStyle = this.hexToRgba(this.renderer.state.glowColor, ring.opacity);\n                this.ctx.lineWidth = this.scaleValue(2);\n                this.ctx.beginPath();\n                this.ctx.arc(centerX, centerY, ring.radius, 0, Math.PI * 2);\n                this.ctx.stroke();\n                return true;\n            }\n            return false;\n        });\n    }\n\n    /**\n     * Render zen core effect\n     */\n    renderZenCore(x, y, radius, time) {\n        const ctx = this.ctx;\n        const breathPhase = Math.sin(time * 0.001) * 0.5 + 0.5;\n        const zenRadius = radius * (0.9 + breathPhase * 0.1);\n        \n        // Inner glow\n        const gradient = ctx.createRadialGradient(x, y, 0, x, y, zenRadius);\n        gradient.addColorStop(0, 'rgba(147, 112, 219, 0.8)');\n        gradient.addColorStop(0.7, 'rgba(147, 112, 219, 0.3)');\n        gradient.addColorStop(1, 'rgba(147, 112, 219, 0)');\n        \n        ctx.save();\n        ctx.globalCompositeOperation = 'screen';\n        ctx.fillStyle = gradient;\n        ctx.beginPath();\n        ctx.arc(x, y, zenRadius * 1.5, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.restore();\n    }\n\n    /**\n     * Start recording effect\n     */\n    startRecording() {\n        this.recordingActive = true;\n    }\n\n    /**\n     * Stop recording effect\n     */\n    stopRecording() {\n        this.recordingActive = false;\n    }\n\n    /**\n     * Enter sleep mode\n     */\n    enterSleepMode() {\n        this.sleepMode = true;\n    }\n\n    /**\n     * Wake up from sleep\n     */\n    wakeUp() {\n        this.sleepMode = false;\n    }\n\n    /**\n     * Start speaking effect\n     */\n    startSpeaking() {\n        this.speakingActive = true;\n    }\n\n    /**\n     * Stop speaking effect\n     */\n    stopSpeaking() {\n        this.speakingActive = false;\n    }\n\n    /**\n     * Create a sparkle particle\n     */\n    createSparkle(x, y, options = {}) {\n        this.sparkles.push({\n            x,\n            y,\n            vx: options.velocity?.x || 0,\n            vy: options.velocity?.y || 0,\n            size: options.size || 3,\n            color: options.color || 'hsl(50, 100%, 70%)',\n            lifetime: options.lifetime || 1000,\n            maxLifetime: options.lifetime || 1000,\n            rotation: Math.random() * Math.PI * 2,\n            rotationSpeed: (Math.random() - 0.5) * 0.2\n        });\n    }\n    \n    /**\n     * Render all sparkles\n     */\n    renderSparkles() {\n        const ctx = this.ctx;\n        \n        this.sparkles.forEach(sparkle => {\n            const progress = 1 - (sparkle.lifetime / sparkle.maxLifetime);\n            const opacity = 1 - progress; // Fade out over time\n            \n            ctx.save();\n            ctx.translate(sparkle.x, sparkle.y);\n            ctx.rotate(sparkle.rotation);\n            \n            // Draw sparkle as a star shape\n            const size = this.scaleValue(sparkle.size * (1 - progress * 0.5));\n            \n            // Draw a 5-pointed star with smoother interior angles\n            ctx.beginPath();\n            const points = 5;\n            const outerRadius = size;\n            const innerRadius = size * 0.38; // Golden ratio-ish for smoother interior angles\n            \n            for (let i = 0; i < points * 2; i++) {\n                const angle = (i * Math.PI / points) - Math.PI / 2; // Start from top\n                const radius = i % 2 === 0 ? outerRadius : innerRadius;\n                \n                if (i === 0) {\n                    ctx.moveTo(\n                        Math.cos(angle) * radius,\n                        Math.sin(angle) * radius\n                    );\n                } else {\n                    ctx.lineTo(\n                        Math.cos(angle) * radius,\n                        Math.sin(angle) * radius\n                    );\n                }\n            }\n            ctx.closePath();\n            \n            // Add glow effect\n            ctx.shadowBlur = this.scaleValue(10);\n            ctx.shadowColor = sparkle.color;\n            \n            ctx.fillStyle = sparkle.color.replace('70%', `${70 + progress * 30}%`).replace(')', `, ${opacity})`).replace('hsl', 'hsla');\n            ctx.fill();\n            \n            ctx.restore();\n        });\n    }\n    \n    /**\n     * Trigger chromatic aberration effect\n     * @param {number} intensity - Effect intensity (0-1)\n     */\n    triggerChromaticAberration(intensity = 0.8) {\n        this.chromaticAberration.active = true;\n        this.chromaticAberration.targetIntensity = Math.min(1, intensity);\n        this.chromaticAberration.intensity = this.chromaticAberration.targetIntensity;\n        \n        // Get the actual visible canvas from the document\n        const visibleCanvas = document.getElementById('emotive-canvas') || \n                            document.querySelector('canvas') || \n                            this.canvas;\n        \n        console.log('[Chromatic] Visible canvas element:', visibleCanvas);\n        console.log('[Chromatic] Canvas ID:', visibleCanvas?.id);\n        \n        if (visibleCanvas) {\n            // Remove any existing animation\n            visibleCanvas.style.animation = 'none';\n            \n            // Force reflow to reset animation\n            void visibleCanvas.offsetHeight;\n            \n            // Add CSS styles if not already present\n            if (!document.getElementById('chromatic-styles')) {\n                const style = document.createElement('style');\n                style.id = 'chromatic-styles';\n                style.textContent = `\n                    @keyframes chromaticGlitch {\n                        0% {\n                            filter: none;\n                            transform: translateX(0);\n                        }\n                        15% {\n                            filter: drop-shadow(-2px 0 0 rgba(255,0,0,0.7)) drop-shadow(2px 0 0 rgba(0,255,255,0.7));\n                            transform: translateX(-0.5px);\n                        }\n                        30% {\n                            filter: drop-shadow(-3px 0 0 rgba(255,0,0,0.8)) drop-shadow(3px 0 0 rgba(0,255,255,0.8));\n                            transform: translateX(0.5px);\n                        }\n                        45% {\n                            filter: drop-shadow(-2px 0 0 rgba(255,0,0,0.6)) drop-shadow(2px 0 0 rgba(0,255,255,0.6));\n                            transform: translateX(-0.3px);\n                        }\n                        60% {\n                            filter: drop-shadow(-1px 0 0 rgba(255,0,0,0.4)) drop-shadow(1px 0 0 rgba(0,255,255,0.4));\n                            transform: translateX(0.2px);\n                        }\n                        100% {\n                            filter: none;\n                            transform: translateX(0);\n                        }\n                    }\n                `;\n                document.head.appendChild(style);\n            }\n            \n            // Apply animation - shorter duration (300-500ms based on intensity)\n            visibleCanvas.style.animation = `chromaticGlitch ${300 + 200 * intensity}ms ease-out`;\n        }\n    }\n    \n    /**\n     * Apply chromatic aberration effect to canvas\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\n     * @param {HTMLCanvasElement} sourceCanvas - Source canvas to apply effect to\n     */\n    applyChromaticAberration(ctx, sourceCanvas) {\n        if (!this.chromaticAberration.active || this.chromaticAberration.intensity <= 0) {\n            return;\n        }\n        \n        const intensity = this.chromaticAberration.intensity;\n        const offset = this.scaleValue(this.chromaticAberration.maxOffset * intensity);\n        \n        // Store current composite operation\n        const prevComposite = ctx.globalCompositeOperation;\n        \n        // Clear the canvas first\n        ctx.save();\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        \n        // Draw red channel (shifted left)\n        ctx.globalCompositeOperation = 'source-over';\n        ctx.filter = 'url(#red-channel)'; // Will use CSS filter fallback\n        ctx.drawImage(sourceCanvas, -offset, 0);\n        \n        // Draw green channel (center)\n        ctx.globalCompositeOperation = 'screen';\n        ctx.filter = 'url(#green-channel)';\n        ctx.drawImage(sourceCanvas, 0, 0);\n        \n        // Draw blue channel (shifted right)\n        ctx.globalCompositeOperation = 'screen';\n        ctx.filter = 'url(#blue-channel)';\n        ctx.drawImage(sourceCanvas, offset, 0);\n        \n        // Reset\n        ctx.filter = 'none';\n        ctx.globalCompositeOperation = prevComposite;\n        ctx.restore();\n    }\n    \n    /**\n     * Simple chromatic aberration using multiple draws\n     * (Fallback method that doesn't require filters)\n     */\n    applyChromaticAberrationSimple(ctx, centerX, centerY, radius, drawFunction) {\n        if (!this.chromaticAberration.active || this.chromaticAberration.intensity <= 0) {\n            drawFunction();\n            return;\n        }\n        \n        const intensity = this.chromaticAberration.intensity;\n        const offset = this.scaleValue(this.chromaticAberration.maxOffset * intensity);\n        \n        ctx.save();\n        \n        // Draw red channel (shifted left)\n        ctx.globalCompositeOperation = 'source-over';\n        ctx.translate(-offset, 0);\n        ctx.globalAlpha = 0.33;\n        ctx.fillStyle = '#ff0000';\n        ctx.filter = 'brightness(3)';\n        drawFunction();\n        ctx.translate(offset, 0);\n        \n        // Draw green channel (center)\n        ctx.globalCompositeOperation = 'screen';\n        ctx.globalAlpha = 0.33;\n        ctx.fillStyle = '#00ff00';\n        drawFunction();\n        \n        // Draw blue channel (shifted right)\n        ctx.translate(offset, 0);\n        ctx.globalAlpha = 0.33;\n        ctx.fillStyle = '#0000ff';\n        drawFunction();\n        \n        ctx.restore();\n    }\n    \n    /**\n     * Update all active effects\n     */\n    update(deltaTime) {\n        // Update sparkles\n        this.sparkles = this.sparkles.filter(sparkle => {\n            sparkle.x += sparkle.vx;\n            sparkle.y += sparkle.vy;\n            sparkle.rotation += sparkle.rotationSpeed;\n            sparkle.lifetime -= deltaTime;\n            sparkle.vy += 0.1; // Gravity\n            \n            return sparkle.lifetime > 0;\n        });\n        \n        // Update chromatic aberration fade\n        if (this.chromaticAberration.active) {\n            // Fade out the effect\n            this.chromaticAberration.intensity -= this.chromaticAberration.fadeSpeed;\n            \n            if (this.chromaticAberration.intensity <= 0) {\n                this.chromaticAberration.intensity = 0;\n                this.chromaticAberration.active = false;\n                this.chromaticAberration.targetIntensity = 0;\n                console.log('[CSS Chromatic] Effect completed');\n            }\n        }\n    }\n}\n\nexport default SpecialEffects;","/**\n * EyeRenderer - Handles eye expressions and blinking for EmotiveRenderer\n * @module core/renderer/EyeRenderer\n */\n\nexport class EyeRenderer {\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.ctx = renderer.ctx;\n        this.canvas = renderer.canvas;\n        \n        // Eye state\n        this.blinking = false;\n        this.blinkingEnabled = true;\n        this.blinkTimer = 0;\n        this.nextBlinkTime = this.getRandomBlinkTime();\n        \n        // Eye parameters\n        this.squintAmount = 0;\n        this.eyeClose = null;\n        this.eyeOpen = null;\n        \n        // Helper method references\n        this.scaleValue = (value) => renderer.scaleValue(value);\n        this.hexToRgba = (hex, alpha) => renderer.hexToRgba(hex, alpha);\n    }\n\n    /**\n     * Update blinking and eye animations\n     * @param {number} deltaTime - Time since last frame\n     */\n    update(deltaTime) {\n        // Update blink timer\n        if (this.blinking) {\n            this.blinkTimer += deltaTime;\n            if (this.blinkTimer >= 150) {\n                this.blinking = false;\n                this.blinkTimer = 0;\n                this.nextBlinkTime = Date.now() + this.getRandomBlinkTime();\n            }\n        }\n        \n        // Check for natural blink\n        if (this.blinkingEnabled && !this.blinking && Date.now() >= this.nextBlinkTime) {\n            this.startBlink();\n        }\n    }\n\n    /**\n     * Start a blink animation\n     */\n    startBlink() {\n        if (!this.blinkingEnabled) return;\n        this.blinking = true;\n        this.blinkTimer = 0;\n    }\n\n    /**\n     * Get random time until next blink (3-7 seconds)\n     * @returns {number} Time in milliseconds\n     */\n    getRandomBlinkTime() {\n        return 3000 + Math.random() * 4000;\n    }\n\n    /**\n     * Calculate blink scale for core\n     * @returns {number} Scale factor for blinking\n     */\n    getBlinkScale() {\n        if (!this.blinking) return 1;\n        \n        const blinkProgress = Math.min(this.blinkTimer / 150, 1);\n        const blinkCurve = Math.sin(blinkProgress * Math.PI);\n        return 1 - blinkCurve * 0.7; // Squish vertically by 70%\n    }\n\n    /**\n     * Draw eye expression\n     * @param {number} x - Center X\n     * @param {number} y - Center Y\n     * @param {number} radius - Core radius\n     * @param {string} emotion - Current emotion\n     * @param {Object} params - Eye parameters\n     */\n    drawEyes(x, y, radius, emotion, params = {}) {\n        const ctx = this.ctx;\n        \n        // Get eye parameters\n        const eyeOpenness = params.eyeOpenness || 1;\n        const eyeExpression = params.eyeExpression || 'neutral';\n        \n        // Don't draw eyes for certain states\n        if (emotion === 'zen' || emotion === 'neutral' || eyeOpenness <= 0) {\n            return;\n        }\n        \n        ctx.save();\n        \n        // Eye color (slightly darker than core)\n        ctx.strokeStyle = 'rgba(0, 0, 0, 0.3)';\n        ctx.lineWidth = this.scaleValue(2);\n        ctx.lineCap = 'round';\n        \n        // Calculate eye positions\n        const eyeSpacing = radius * 0.4;\n        const eyeY = y - radius * 0.1;\n        const eyeSize = radius * 0.25;\n        \n        // Draw based on expression\n        switch (eyeExpression) {\n            case 'happy':\n                this.drawHappyEyes(ctx, x, eyeY, eyeSpacing, eyeSize, eyeOpenness);\n                break;\n            case 'sad':\n                this.drawSadEyes(ctx, x, eyeY, eyeSpacing, eyeSize, eyeOpenness);\n                break;\n            case 'angry':\n                this.drawAngryEyes(ctx, x, eyeY, eyeSpacing, eyeSize, eyeOpenness);\n                break;\n            case 'surprised':\n                this.drawSurprisedEyes(ctx, x, eyeY, eyeSpacing, eyeSize, eyeOpenness);\n                break;\n            case 'focused':\n                this.drawFocusedEyes(ctx, x, eyeY, eyeSpacing, eyeSize, eyeOpenness);\n                break;\n            case 'sleepy':\n                this.drawSleepyEyes(ctx, x, eyeY, eyeSpacing, eyeSize, eyeOpenness);\n                break;\n            case 'suspicious':\n                this.drawSuspiciousEyes(ctx, x, eyeY, eyeSpacing, eyeSize, eyeOpenness);\n                break;\n            default:\n                // No eyes for neutral\n                break;\n        }\n        \n        ctx.restore();\n    }\n\n    /**\n     * Draw happy eyes (upward curves)\n     */\n    drawHappyEyes(ctx, x, y, spacing, size, openness) {\n        // Left eye\n        ctx.beginPath();\n        ctx.arc(x - spacing, y, size, Math.PI * 0.2, Math.PI * 0.8, false);\n        ctx.stroke();\n        \n        // Right eye\n        ctx.beginPath();\n        ctx.arc(x + spacing, y, size, Math.PI * 0.2, Math.PI * 0.8, false);\n        ctx.stroke();\n    }\n\n    /**\n     * Draw sad eyes (downward curves)\n     */\n    drawSadEyes(ctx, x, y, spacing, size, openness) {\n        // Left eye\n        ctx.beginPath();\n        ctx.arc(x - spacing, y + size * 0.5, size, Math.PI * 1.2, Math.PI * 1.8, false);\n        ctx.stroke();\n        \n        // Right eye\n        ctx.beginPath();\n        ctx.arc(x + spacing, y + size * 0.5, size, Math.PI * 1.2, Math.PI * 1.8, false);\n        ctx.stroke();\n    }\n\n    /**\n     * Draw angry eyes (angled lines)\n     */\n    drawAngryEyes(ctx, x, y, spacing, size, openness) {\n        // Left eye\n        ctx.beginPath();\n        ctx.moveTo(x - spacing - size, y - size * 0.3);\n        ctx.lineTo(x - spacing + size * 0.5, y + size * 0.3);\n        ctx.stroke();\n        \n        // Right eye\n        ctx.beginPath();\n        ctx.moveTo(x + spacing + size, y - size * 0.3);\n        ctx.lineTo(x + spacing - size * 0.5, y + size * 0.3);\n        ctx.stroke();\n    }\n\n    /**\n     * Draw surprised eyes (wide circles)\n     */\n    drawSurprisedEyes(ctx, x, y, spacing, size, openness) {\n        // Left eye\n        ctx.beginPath();\n        ctx.arc(x - spacing, y, size * 1.2, 0, Math.PI * 2);\n        ctx.stroke();\n        \n        // Right eye\n        ctx.beginPath();\n        ctx.arc(x + spacing, y, size * 1.2, 0, Math.PI * 2);\n        ctx.stroke();\n    }\n\n    /**\n     * Draw focused eyes (dots)\n     */\n    drawFocusedEyes(ctx, x, y, spacing, size, openness) {\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';\n        \n        // Left eye\n        ctx.beginPath();\n        ctx.arc(x - spacing, y, size * 0.3, 0, Math.PI * 2);\n        ctx.fill();\n        \n        // Right eye\n        ctx.beginPath();\n        ctx.arc(x + spacing, y, size * 0.3, 0, Math.PI * 2);\n        ctx.fill();\n    }\n\n    /**\n     * Draw sleepy eyes (half-closed)\n     */\n    drawSleepyEyes(ctx, x, y, spacing, size, openness) {\n        // Left eye\n        ctx.beginPath();\n        ctx.moveTo(x - spacing - size, y);\n        ctx.lineTo(x - spacing + size, y);\n        ctx.stroke();\n        \n        // Right eye\n        ctx.beginPath();\n        ctx.moveTo(x + spacing - size, y);\n        ctx.lineTo(x + spacing + size, y);\n        ctx.stroke();\n    }\n\n    /**\n     * Draw suspicious eyes (narrowed)\n     */\n    drawSuspiciousEyes(ctx, x, y, spacing, size, openness) {\n        // Left eye - narrowed\n        ctx.beginPath();\n        ctx.moveTo(x - spacing - size, y);\n        ctx.lineTo(x - spacing + size * 0.7, y);\n        ctx.stroke();\n        \n        // Right eye - more open\n        ctx.beginPath();\n        ctx.arc(x + spacing, y, size * 0.8, Math.PI * 0.1, Math.PI * 0.9, false);\n        ctx.stroke();\n    }\n\n    /**\n     * Enable or disable blinking\n     * @param {boolean} enabled - Whether blinking is enabled\n     */\n    setBlinkingEnabled(enabled) {\n        this.blinkingEnabled = enabled;\n        if (!enabled) {\n            this.blinking = false;\n            this.blinkTimer = 0;\n        }\n    }\n\n    /**\n     * Set squint amount for eye narrowing\n     * @param {number} amount - Squint amount (0-1)\n     */\n    setSquintAmount(amount) {\n        this.squintAmount = Math.max(0, Math.min(1, amount));\n    }\n\n    /**\n     * Force a blink\n     */\n    forceBlink() {\n        this.startBlink();\n    }\n}\n\nexport default EyeRenderer;","/**\n * BreathingAnimator - Handles breathing animations for EmotiveRenderer\n * @module core/renderer/BreathingAnimator\n */\n\nexport class BreathingAnimator {\n    constructor(renderer) {\n        this.renderer = renderer;\n        \n        // Breathing configuration\n        this.breathingSpeed = 0.42; // 16 breaths/min (0.42 rad/s = 4 sec/cycle = 15-16 bpm)\n        this.breathingDepth = 0.08; // 8% size variation for visible breathing\n        \n        // Breathing state\n        this.breathingPhase = 0;\n        this.breathRate = 1.0;\n        this.breathDepth = this.breathingDepth;\n        this.breathRateMult = 1.0;\n        this.breathDepthMult = 1.0;\n        this.breathIrregular = false;\n        \n        // Custom scale override\n        this.customScale = null;\n        \n        // Emotion-specific breathing patterns\n        this.emotionBreathPatterns = {\n            happy: { rate: 1.1, depth: 1.2 },\n            sad: { rate: 0.8, depth: 0.7 },\n            angry: { rate: 1.4, depth: 1.3 },\n            calm: { rate: 0.7, depth: 0.9 },\n            excited: { rate: 1.5, depth: 1.4 },\n            focused: { rate: 0.9, depth: 0.6 },\n            neutral: { rate: 1.0, depth: 1.0 },\n            love: { rate: 1.2, depth: 1.3 },\n            surprised: { rate: 1.3, depth: 1.1 },\n            confused: { rate: 1.1, depth: 0.9 },\n            amused: { rate: 1.2, depth: 1.1 },\n            bored: { rate: 0.6, depth: 0.8 },\n            tired: { rate: 0.5, depth: 1.2 },\n            anxious: { rate: 1.6, depth: 0.9 },\n            determined: { rate: 1.1, depth: 1.0 },\n            proud: { rate: 0.9, depth: 1.3 },\n            content: { rate: 0.8, depth: 1.0 },\n            hopeful: { rate: 1.0, depth: 1.1 },\n            zen: { rate: 0.4, depth: 1.5 },\n            intrigued: { rate: 1.1, depth: 0.8 },\n            embarrassed: { rate: 1.3, depth: 0.7 },\n            grateful: { rate: 0.9, depth: 1.1 },\n            inspired: { rate: 1.0, depth: 1.3 },\n            silly: { rate: 1.4, depth: 1.2 },\n            sleepy: { rate: 0.3, depth: 1.4 }\n        };\n    }\n\n    /**\n     * Update breathing animation\n     * @param {number} deltaTime - Time since last frame in ms\n     * @param {string} emotion - Current emotion\n     * @param {Object} undertone - Current undertone modifiers\n     */\n    update(deltaTime, emotion, undertone = {}) {\n        // Ensure undertone is not null\n        undertone = undertone || {};\n        \n        // Apply emotion-specific breathing pattern\n        const pattern = this.emotionBreathPatterns[emotion] || { rate: 1.0, depth: 1.0 };\n        \n        // Apply undertone modifiers (safe access with null check)\n        const undertoneRateMult = undertone?.breathRateMult || 1.0;\n        const undertoneDepthMult = undertone?.breathDepthMult || 1.0;\n        \n        // Calculate final breathing parameters\n        this.breathRate = pattern.rate * this.breathRateMult * undertoneRateMult;\n        this.breathDepth = this.breathingDepth * pattern.depth * this.breathDepthMult * undertoneDepthMult;\n        \n        // Add irregularity if needed\n        let phaseIncrement = this.breathingSpeed * this.breathRate * (deltaTime / 1000);\n        if (this.breathIrregular && undertone?.breathIrregular) {\n            phaseIncrement *= 0.8 + Math.sin(Date.now() * 0.0003) * 0.4;\n        }\n        \n        // Update breathing phase\n        this.breathingPhase += phaseIncrement;\n        if (this.breathingPhase > Math.PI * 2) {\n            this.breathingPhase -= Math.PI * 2;\n        }\n    }\n\n    /**\n     * Get current breathing scale\n     * @returns {number} Scale factor for breathing\n     */\n    getBreathingScale() {\n        // Return custom scale if set\n        if (this.customScale !== null) {\n            return this.customScale;\n        }\n        \n        // Calculate breathing scale\n        const breathAmount = Math.sin(this.breathingPhase);\n        return 1 + breathAmount * this.breathDepth;\n    }\n\n    /**\n     * Set custom breathing scale (overrides normal breathing)\n     * @param {number} scale - Custom scale value, or null to use normal breathing\n     */\n    setCustomScale(scale) {\n        this.customScale = scale;\n    }\n\n    /**\n     * Set breathing speed\n     * @param {number} speed - Breathing speed in radians per second\n     */\n    setBreathingSpeed(speed) {\n        this.breathingSpeed = speed;\n    }\n\n    /**\n     * Set breathing depth\n     * @param {number} depth - Breathing depth as percentage (0-1)\n     */\n    setBreathingDepth(depth) {\n        this.breathingDepth = Math.max(0, Math.min(1, depth));\n    }\n\n    /**\n     * Set breathing rate multiplier\n     * @param {number} mult - Rate multiplier\n     */\n    setBreathRateMultiplier(mult) {\n        this.breathRateMult = mult;\n    }\n\n    /**\n     * Set breathing depth multiplier\n     * @param {number} mult - Depth multiplier\n     */\n    setBreathDepthMultiplier(mult) {\n        this.breathDepthMult = mult;\n    }\n\n    /**\n     * Enable/disable irregular breathing\n     * @param {boolean} irregular - Whether breathing should be irregular\n     */\n    setIrregularBreathing(irregular) {\n        this.breathIrregular = irregular;\n    }\n\n    /**\n     * Reset breathing to default state\n     */\n    reset() {\n        this.breathingPhase = 0;\n        this.breathRate = 1.0;\n        this.breathDepth = this.breathingDepth;\n        this.breathRateMult = 1.0;\n        this.breathDepthMult = 1.0;\n        this.breathIrregular = false;\n        this.customScale = null;\n    }\n\n    /**\n     * Apply breath hold effect\n     * @param {boolean} empty - Whether lungs are empty (true) or full (false)\n     */\n    holdBreath(empty = false) {\n        // Set custom scale based on breath hold type\n        this.customScale = empty ? 0.92 : 1.08;\n    }\n\n    /**\n     * Release breath hold\n     */\n    releaseBreath() {\n        this.customScale = null;\n    }\n\n    /**\n     * Get breathing info for debugging\n     * @returns {Object} Breathing state info\n     */\n    getBreathingInfo() {\n        return {\n            phase: this.breathingPhase,\n            rate: this.breathRate,\n            depth: this.breathDepth,\n            scale: this.getBreathingScale(),\n            isCustom: this.customScale !== null,\n            isIrregular: this.breathIrregular\n        };\n    }\n}\n\nexport default BreathingAnimator;","/**\r\n * Gradient Cache System\r\n * Caches canvas gradients to avoid recreating them every frame\r\n *\r\n * @module core/renderer/GradientCache\r\n * @version 1.0.0\r\n */\r\n\r\n/**\r\n * Cache for canvas gradients to improve rendering performance\r\n */\r\nexport class GradientCache {\r\n    constructor() {\r\n        // Cache storage with Map for efficient lookups\r\n        this.cache = new Map();\r\n\r\n        // Stats for monitoring\r\n        this.stats = {\r\n            hits: 0,\r\n            misses: 0,\r\n            evictions: 0\r\n        };\r\n\r\n        // Cache configuration\r\n        this.maxSize = 100; // Maximum number of cached gradients\r\n        this.ttl = 60000; // Time to live in milliseconds (1 minute)\r\n\r\n        // LRU tracking\r\n        this.accessOrder = [];\r\n    }\r\n\r\n    /**\r\n     * Generate a unique key for gradient parameters\r\n     * @private\r\n     */\r\n    generateKey(type, params) {\r\n        if (type === 'radial') {\r\n            const { x0, y0, r0, x1, y1, r1, stops } = params;\r\n            const stopKey = stops.map(s => `${s.offset}:${s.color}`).join('|');\r\n            return `radial:${x0},${y0},${r0},${x1},${y1},${r1}:${stopKey}`;\r\n        } else if (type === 'linear') {\r\n            const { x0, y0, x1, y1, stops } = params;\r\n            const stopKey = stops.map(s => `${s.offset}:${s.color}`).join('|');\r\n            return `linear:${x0},${y0},${x1},${y1}:${stopKey}`;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get or create a radial gradient\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n     * @param {number} x0 - Start circle center x\r\n     * @param {number} y0 - Start circle center y\r\n     * @param {number} r0 - Start circle radius\r\n     * @param {number} x1 - End circle center x\r\n     * @param {number} y1 - End circle center y\r\n     * @param {number} r1 - End circle radius\r\n     * @param {Array} stops - Color stops [{offset, color}]\r\n     * @returns {CanvasGradient} Cached or new gradient\r\n     */\r\n    getRadialGradient(ctx, x0, y0, r0, x1, y1, r1, stops) {\r\n        const key = this.generateKey('radial', { x0, y0, r0, x1, y1, r1, stops });\r\n\r\n        // Check cache\r\n        const cached = this.cache.get(key);\r\n        if (cached && Date.now() - cached.timestamp < this.ttl) {\r\n            this.stats.hits++;\r\n            this.updateAccessOrder(key);\r\n            return cached.gradient;\r\n        }\r\n\r\n        // Create new gradient\r\n        this.stats.misses++;\r\n        const gradient = ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\r\n\r\n        // Add color stops\r\n        stops.forEach(stop => {\r\n            gradient.addColorStop(stop.offset, stop.color);\r\n        });\r\n\r\n        // Cache it\r\n        this.set(key, gradient);\r\n\r\n        return gradient;\r\n    }\r\n\r\n    /**\r\n     * Get or create a linear gradient\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n     * @param {number} x0 - Start point x\r\n     * @param {number} y0 - Start point y\r\n     * @param {number} x1 - End point x\r\n     * @param {number} y1 - End point y\r\n     * @param {Array} stops - Color stops [{offset, color}]\r\n     * @returns {CanvasGradient} Cached or new gradient\r\n     */\r\n    getLinearGradient(ctx, x0, y0, x1, y1, stops) {\r\n        const key = this.generateKey('linear', { x0, y0, x1, y1, stops });\r\n\r\n        // Check cache\r\n        const cached = this.cache.get(key);\r\n        if (cached && Date.now() - cached.timestamp < this.ttl) {\r\n            this.stats.hits++;\r\n            this.updateAccessOrder(key);\r\n            return cached.gradient;\r\n        }\r\n\r\n        // Create new gradient\r\n        this.stats.misses++;\r\n        const gradient = ctx.createLinearGradient(x0, y0, x1, y1);\r\n\r\n        // Add color stops\r\n        stops.forEach(stop => {\r\n            gradient.addColorStop(stop.offset, stop.color);\r\n        });\r\n\r\n        // Cache it\r\n        this.set(key, gradient);\r\n\r\n        return gradient;\r\n    }\r\n\r\n    /**\r\n     * Store gradient in cache with LRU eviction\r\n     * @private\r\n     */\r\n    set(key, gradient) {\r\n        // Check if we need to evict\r\n        if (this.cache.size >= this.maxSize && !this.cache.has(key)) {\r\n            this.evictLRU();\r\n        }\r\n\r\n        // Store with timestamp\r\n        this.cache.set(key, {\r\n            gradient,\r\n            timestamp: Date.now()\r\n        });\r\n\r\n        this.updateAccessOrder(key);\r\n    }\r\n\r\n    /**\r\n     * Update access order for LRU tracking\r\n     * @private\r\n     */\r\n    updateAccessOrder(key) {\r\n        // Remove from current position\r\n        const index = this.accessOrder.indexOf(key);\r\n        if (index > -1) {\r\n            this.accessOrder.splice(index, 1);\r\n        }\r\n        // Add to end (most recently used)\r\n        this.accessOrder.push(key);\r\n    }\r\n\r\n    /**\r\n     * Evict least recently used item\r\n     * @private\r\n     */\r\n    evictLRU() {\r\n        if (this.accessOrder.length > 0) {\r\n            const keyToEvict = this.accessOrder.shift();\r\n            this.cache.delete(keyToEvict);\r\n            this.stats.evictions++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all cached gradients\r\n     */\r\n    clear() {\r\n        this.cache.clear();\r\n        this.accessOrder = [];\r\n    }\r\n\r\n    /**\r\n     * Clear expired entries\r\n     */\r\n    clearExpired() {\r\n        const now = Date.now();\r\n        const keysToDelete = [];\r\n\r\n        for (const [key, value] of this.cache.entries()) {\r\n            if (now - value.timestamp >= this.ttl) {\r\n                keysToDelete.push(key);\r\n            }\r\n        }\r\n\r\n        keysToDelete.forEach(key => {\r\n            this.cache.delete(key);\r\n            const index = this.accessOrder.indexOf(key);\r\n            if (index > -1) {\r\n                this.accessOrder.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get cache statistics\r\n     * @returns {Object} Cache stats\r\n     */\r\n    getStats() {\r\n        const hitRate = this.stats.hits + this.stats.misses > 0\r\n            ? (this.stats.hits / (this.stats.hits + this.stats.misses) * 100).toFixed(2)\r\n            : 0;\r\n\r\n        return {\r\n            size: this.cache.size,\r\n            maxSize: this.maxSize,\r\n            hits: this.stats.hits,\r\n            misses: this.stats.misses,\r\n            evictions: this.stats.evictions,\r\n            hitRate: `${hitRate}%`\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Create a gradient helper that automatically caches\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n     * @returns {Object} Helper object with gradient methods\r\n     */\r\n    createHelper(ctx) {\r\n        return {\r\n            radial: (x0, y0, r0, x1, y1, r1, stops) =>\r\n                this.getRadialGradient(ctx, x0, y0, r0, x1, y1, r1, stops),\r\n            linear: (x0, y0, x1, y1, stops) =>\r\n                this.getLinearGradient(ctx, x0, y0, x1, y1, stops)\r\n        };\r\n    }\r\n}\r\n\r\n// Create singleton instance\r\nexport const gradientCache = new GradientCache();\r\n\r\n// Export for convenience\r\nexport default gradientCache;","/**\n * GlowRenderer - Handles glow effects rendering for EmotiveRenderer\n * @module core/renderer/GlowRenderer\n */\n\nimport { gradientCache } from './GradientCache.js';\n\nexport class GlowRenderer {\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.ctx = renderer.ctx;\n        this.canvas = renderer.canvas;\n        \n        // Glow state\n        this.glowIntensity = 1.0;\n        this.glowColor = '#4a90e2';\n        this.targetGlowColor = '#4a90e2';\n        this.glowColorTransition = 0;\n        this.glowColorTransitionSpeed = 0.05;\n        \n        // Offscreen canvas for caching glow gradients\n        this.offscreenCanvas = null;\n        this.offscreenCtx = null;\n        this.cachedGlowColor = null;\n        this.cachedGlowRadius = 0;\n        \n        // Helper method references\n        this.scaleValue = (value) => renderer.scaleValue(value);\n        this.hexToRgba = (hex, alpha) => renderer.hexToRgba(hex, alpha);\n        \n        this.initOffscreenCanvas();\n    }\n\n    /**\n     * Initialize offscreen canvas for gradient caching\n     */\n    initOffscreenCanvas() {\n        this.offscreenCanvas = document.createElement('canvas');\n        this.offscreenCtx = this.offscreenCanvas.getContext('2d');\n    }\n\n    /**\n     * Update offscreen canvas size\n     * @param {number} size - Size for the offscreen canvas\n     */\n    updateOffscreenSize(size) {\n        if (this.offscreenCanvas.width !== size || this.offscreenCanvas.height !== size) {\n            this.offscreenCanvas.width = size;\n            this.offscreenCanvas.height = size;\n            this.cachedGlowColor = null; // Invalidate cache\n        }\n    }\n\n    /**\n     * Render main glow effect\n     * @param {number} x - Center X position\n     * @param {number} y - Center Y position\n     * @param {number} radius - Core radius\n     * @param {Object} params - Additional parameters\n     */\n    renderGlow(x, y, radius, params = {}) {\n        const ctx = this.ctx;\n        const color = params.color || this.glowColor;\n        const intensity = params.intensity !== undefined ? params.intensity : this.glowIntensity;\n        \n        // Skip if intensity is too low\n        if (intensity < 0.01) return;\n        \n        // Outer glow size\n        const glowSize = this.scaleValue(200);\n        \n        // Always use direct rendering for consistent brightness\n        this.renderGlowDirect(ctx, x, y, radius, color, intensity);\n        return;\n        \n        // Check if we need to update the cached gradient\n        if (this.cachedGlowColor !== color || this.cachedGlowRadius !== glowSize) {\n            this.cacheGlowGradient(color, glowSize);\n        }\n        \n        // Draw cached gradient for normal intensity\n        if (this.offscreenCanvas && this.cachedGlowColor === color) {\n            ctx.save();\n            ctx.globalAlpha = Math.min(1, intensity);\n            ctx.globalCompositeOperation = 'screen';\n            \n            // Draw from offscreen canvas\n            const drawX = x - glowSize;\n            const drawY = y - glowSize;\n            ctx.drawImage(this.offscreenCanvas, drawX, drawY);\n            \n            ctx.restore();\n        } else {\n            // Fallback to direct rendering if cache fails\n            this.renderGlowDirect(ctx, x, y, radius, color, intensity);\n        }\n    }\n\n    /**\n     * Cache glow gradient to offscreen canvas\n     * @param {string} color - Glow color\n     * @param {number} size - Glow size\n     */\n    cacheGlowGradient(color, size) {\n        const offCtx = this.offscreenCtx;\n        const center = size;\n        \n        // Update offscreen canvas size\n        this.updateOffscreenSize(size * 2);\n        \n        // Clear offscreen canvas\n        offCtx.clearRect(0, 0, this.offscreenCanvas.width, this.offscreenCanvas.height);\n        \n        // Use cached gradient - higher opacity to match original brightness\n        const gradient = gradientCache.getRadialGradient(\n            offCtx, center, center, 0, center, center, size,\n            [\n                { offset: 0, color: this.hexToRgba(color, 0.4) },\n                { offset: 0.3, color: this.hexToRgba(color, 0.2) },\n                { offset: 0.6, color: this.hexToRgba(color, 0.1) },\n                { offset: 1, color: this.hexToRgba(color, 0) }\n            ]\n        );\n\n        // Draw gradient to offscreen canvas\n        offCtx.fillStyle = gradient;\n        offCtx.fillRect(0, 0, size * 2, size * 2);\n        \n        // Update cache info\n        this.cachedGlowColor = color;\n        this.cachedGlowRadius = size;\n    }\n\n    /**\n     * Direct glow rendering (fallback)\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\n     * @param {number} x - Center X\n     * @param {number} y - Center Y\n     * @param {number} radius - Core radius\n     * @param {string} color - Glow color\n     * @param {number} intensity - Glow intensity\n     */\n    renderGlowDirect(ctx, x, y, radius, color, intensity) {\n        // Use the EXACT original formula for consistent brightness\n        ctx.save();\n        \n        // Build gradient stops array\n        const stops = 20;\n        const gradientStops = [];\n        for (let i = 0; i <= stops; i++) {\n            const position = i / stops;\n            const baseOpacity = 0.6 * Math.pow(1 - position, 2.2);\n            const opacity = baseOpacity * intensity;\n            gradientStops.push({ offset: position, color: this.hexToRgba(color, opacity) });\n        }\n\n        // Use cached gradient\n        const gradient = gradientCache.getRadialGradient(\n            ctx, x, y, 0, x, y, radius, gradientStops\n        );\n        \n        ctx.fillStyle = gradient;\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\n        ctx.fill();\n        \n        ctx.restore();\n    }\n\n    /**\n     * Render recording glow effect\n     * @param {number} x - Center X\n     * @param {number} y - Center Y\n     * @param {number} radius - Core radius\n     * @param {number} intensity - Glow intensity\n     */\n    renderRecordingGlow(x, y, radius, intensity) {\n        const ctx = this.ctx;\n        const glowSize = radius * 2.5;\n        const gradient = gradientCache.getRadialGradient(\n            ctx, x, y, 0, x, y, glowSize,\n            [\n                { offset: 0, color: `rgba(255, 0, 0, ${0.3 * intensity})` },\n                { offset: 0.5, color: `rgba(255, 0, 0, ${0.15 * intensity})` },\n                { offset: 1, color: 'rgba(255, 0, 0, 0)' }\n            ]\n        );\n        \n        ctx.save();\n        ctx.globalCompositeOperation = 'screen';\n        ctx.fillStyle = gradient;\n        ctx.fillRect(x - glowSize, y - glowSize, glowSize * 2, glowSize * 2);\n        ctx.restore();\n    }\n\n    /**\n     * Render zen glow effect\n     * @param {number} x - Center X\n     * @param {number} y - Center Y\n     * @param {number} radius - Core radius\n     * @param {number} time - Current time for animation\n     */\n    renderZenGlow(x, y, radius, time) {\n        const ctx = this.ctx;\n        const breathPhase = Math.sin(time * 0.001) * 0.5 + 0.5;\n        const zenRadius = radius * (0.9 + breathPhase * 0.1);\n        \n        // Inner glow\n        const gradient = gradientCache.getRadialGradient(\n            ctx, x, y, 0, x, y, zenRadius,\n            [\n                { offset: 0, color: 'rgba(147, 112, 219, 0.8)' },\n                { offset: 0.7, color: 'rgba(147, 112, 219, 0.3)' },\n                { offset: 1, color: 'rgba(147, 112, 219, 0)' }\n            ]\n        );\n        \n        ctx.save();\n        ctx.globalCompositeOperation = 'screen';\n        ctx.fillStyle = gradient;\n        ctx.beginPath();\n        ctx.arc(x, y, zenRadius * 1.5, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.restore();\n    }\n\n    /**\n     * Update glow color with transition\n     * @param {string} targetColor - Target glow color\n     * @param {number} deltaTime - Time since last frame\n     */\n    updateGlowColor(targetColor, deltaTime) {\n        if (this.targetGlowColor !== targetColor) {\n            this.targetGlowColor = targetColor;\n            this.glowColorTransition = 0;\n        }\n        \n        // Animate color transition\n        if (this.glowColorTransition < 1) {\n            this.glowColorTransition = Math.min(1, this.glowColorTransition + this.glowColorTransitionSpeed);\n            this.glowColor = this.lerpColor(this.glowColor, this.targetGlowColor, this.glowColorTransition);\n        }\n    }\n\n    /**\n     * Lerp between two colors\n     * @param {string} color1 - Start color\n     * @param {string} color2 - End color\n     * @param {number} t - Interpolation value (0-1)\n     * @returns {string} Interpolated color\n     */\n    lerpColor(color1, color2, t) {\n        // Convert hex to RGB\n        const rgb1 = this.hexToRgb(color1);\n        const rgb2 = this.hexToRgb(color2);\n        \n        // Interpolate\n        const r = Math.round(rgb1.r + (rgb2.r - rgb1.r) * t);\n        const g = Math.round(rgb1.g + (rgb2.g - rgb1.g) * t);\n        const b = Math.round(rgb1.b + (rgb2.b - rgb1.b) * t);\n        \n        // Convert back to hex\n        return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;\n    }\n\n    /**\n     * Convert hex color to RGB\n     * @param {string} hex - Hex color\n     * @returns {Object} RGB values\n     */\n    hexToRgb(hex) {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16)\n        } : { r: 0, g: 0, b: 0 };\n    }\n\n    /**\n     * Set glow intensity\n     * @param {number} intensity - Glow intensity (0-1)\n     */\n    setGlowIntensity(intensity) {\n        this.glowIntensity = Math.max(0, Math.min(1, intensity));\n    }\n\n    /**\n     * Set glow color instantly\n     * @param {string} color - Glow color\n     */\n    setGlowColor(color) {\n        this.glowColor = color;\n        this.targetGlowColor = color;\n        this.glowColorTransition = 1;\n    }\n\n    /**\n     * Clean up resources\n     */\n    destroy() {\n        this.offscreenCanvas = null;\n        this.offscreenCtx = null;\n        this.cachedGlowColor = null;\n    }\n}\n\nexport default GlowRenderer;","/**\r\n * CoreRenderer - Handles core shape rendering for EmotiveRenderer\r\n * @module core/renderer/CoreRenderer\r\n */\r\n\r\nimport { gradientCache } from './GradientCache.js';\r\n\r\nexport class CoreRenderer {\r\n    constructor(renderer) {\r\n        this.renderer = renderer;\r\n        this.ctx = renderer.ctx;\r\n        this.canvas = renderer.canvas;\r\n        \r\n        // Core appearance\r\n        this.coreColor = '#FFFFFF';\r\n        this.coreOpacity = 1.0;\r\n        this.coreBorderWidth = 0;\r\n        this.coreBorderColor = null;\r\n        \r\n        // Shape state\r\n        this.shapePoints = null;\r\n        this.isMorphing = false;\r\n        \r\n        // Helper method references\r\n        this.scaleValue = (value) => renderer.scaleValue(value);\r\n        this.hexToRgba = (hex, alpha) => renderer.hexToRgba(hex, alpha);\r\n    }\r\n\r\n    /**\r\n     * Render the main core shape\r\n     * @param {number} x - Center X position\r\n     * @param {number} y - Center Y position\r\n     * @param {number} radius - Core radius\r\n     * @param {Object} params - Rendering parameters\r\n     */\r\n    renderCore(x, y, radius, params = {}) {\r\n        const ctx = this.ctx;\r\n        \r\n        // Extract parameters\r\n        const scaleX = params.scaleX || 1;\r\n        const scaleY = params.scaleY || 1;\r\n        const rotation = params.rotation || 0;\r\n        const opacity = params.opacity !== undefined ? params.opacity : this.coreOpacity;\r\n        const color = params.color || this.coreColor;\r\n        const shapePoints = params.shapePoints || this.shapePoints;\r\n        \r\n        ctx.save();\r\n        \r\n        // Apply transformations\r\n        ctx.translate(x, y);\r\n        if (rotation !== 0) {\r\n            ctx.rotate(rotation);\r\n        }\r\n        ctx.scale(scaleX, scaleY);\r\n        \r\n        // Set core style\r\n        ctx.fillStyle = this.hexToRgba(color, opacity);\r\n        \r\n        // Draw shape based on points or default circle\r\n        if (shapePoints && shapePoints.length > 0) {\r\n            this.drawMorphedShape(ctx, shapePoints, radius);\r\n        } else {\r\n            this.drawCircle(ctx, radius);\r\n        }\r\n        \r\n        // Draw border if needed\r\n        if (this.coreBorderWidth > 0 && this.coreBorderColor) {\r\n            ctx.strokeStyle = this.coreBorderColor;\r\n            ctx.lineWidth = this.scaleValue(this.coreBorderWidth);\r\n            ctx.stroke();\r\n        }\r\n        \r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw drop shadow for depth\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n     * @param {number} radius - Shape radius\r\n     * @param {Array} shapePoints - Shape points\r\n     */\r\n    drawDropShadow(ctx, radius, shapePoints) {\r\n        ctx.save();\r\n        \r\n        const shadowOffset = this.scaleValue(2);\r\n        ctx.translate(0, shadowOffset);\r\n        \r\n        // Use simpler shadow for complex deformed shapes\r\n        if (shapePoints && shapePoints.length > 32) {\r\n            // Simple dark circle shadow when shape is complex\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.15)';\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, radius * 1.05, 0, Math.PI * 2);\r\n            ctx.fill();\r\n        } else {\r\n            // Shadow gradient - dark center fading to transparent\r\n            const shadowGradient = gradientCache.getRadialGradient(\r\n                ctx, 0, 0, radius * 0.7, 0, 0, radius * 1.2,\r\n                [\r\n                    { offset: 0, color: 'rgba(0, 0, 0, 0.2)' },\r\n                    { offset: 0.8, color: 'rgba(0, 0, 0, 0.1)' },\r\n                    { offset: 1, color: 'rgba(0, 0, 0, 0)' }\r\n                ]\r\n            );\r\n\r\n            ctx.fillStyle = shadowGradient;\r\n            ctx.beginPath();\r\n            if (shapePoints) {\r\n                // Scale points for shadow\r\n                const scale = 1.1;\r\n                const step = shapePoints.length > 20 ? 2 : 1;\r\n                ctx.moveTo(shapePoints[0].x * scale, shapePoints[0].y * scale);\r\n                for (let i = step; i < shapePoints.length; i += step) {\r\n                    ctx.lineTo(shapePoints[i].x * scale, shapePoints[i].y * scale);\r\n                }\r\n                ctx.closePath();\r\n            } else {\r\n                ctx.arc(0, 0, radius * 1.1, 0, Math.PI * 2);\r\n            }\r\n            ctx.fill();\r\n        }\r\n        \r\n        ctx.restore();\r\n    }\r\n    \r\n    /**\r\n     * Draw a simple circle\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n     * @param {number} radius - Circle radius\r\n     */\r\n    drawCircle(ctx, radius) {\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, radius, 0, Math.PI * 2);\r\n        ctx.fill();\r\n    }\r\n\r\n    /**\r\n     * Draw a morphed shape from points\r\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\r\n     * @param {Array} points - Shape points\r\n     * @param {number} baseRadius - Base radius for scaling\r\n     */\r\n    drawMorphedShape(ctx, points, baseRadius) {\r\n        if (!points || points.length < 3) {\r\n            // Fallback to circle if not enough points\r\n            this.drawCircle(ctx, baseRadius);\r\n            return;\r\n        }\r\n        \r\n        ctx.beginPath();\r\n        \r\n        // Points from getCanvasPoints are already in canvas coordinates\r\n        // relative to the center (0,0) after translation\r\n        points.forEach((point, i) => {\r\n            if (i === 0) {\r\n                ctx.moveTo(point.x, point.y);\r\n            } else {\r\n                ctx.lineTo(point.x, point.y);\r\n            }\r\n        });\r\n        \r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n\r\n    /**\r\n     * Render zen core effect\r\n     * @param {number} x - Center X\r\n     * @param {number} y - Center Y\r\n     * @param {number} radius - Core radius\r\n     * @param {number} time - Current time for animation\r\n     */\r\n    renderZenCore(x, y, radius, time) {\r\n        const ctx = this.ctx;\r\n        \r\n        // Zen breathing effect\r\n        const breathPhase = Math.sin(time * 0.001) * 0.5 + 0.5;\r\n        const zenRadius = radius * (0.95 + breathPhase * 0.05);\r\n        \r\n        // Draw zen core with subtle inner glow\r\n        ctx.save();\r\n        \r\n        // Inner shadow for depth\r\n        ctx.shadowBlur = this.scaleValue(10);\r\n        ctx.shadowColor = 'rgba(147, 112, 219, 0.3)';\r\n        ctx.shadowOffsetX = 0;\r\n        ctx.shadowOffsetY = 0;\r\n        \r\n        // Main core\r\n        ctx.fillStyle = '#FFFFFF';\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, zenRadius, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        // Inner ring\r\n        ctx.strokeStyle = 'rgba(147, 112, 219, 0.2)';\r\n        ctx.lineWidth = this.scaleValue(1);\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, zenRadius * 0.9, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n        \r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Render sleepy core effect\r\n     * @param {number} x - Center X\r\n     * @param {number} y - Center Y\r\n     * @param {number} radius - Core radius\r\n     */\r\n    renderSleepyCore(x, y, radius) {\r\n        const ctx = this.ctx;\r\n        \r\n        // Slightly squished for sleepy look\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.scale(1, 0.85);\r\n        \r\n        ctx.fillStyle = '#FFFFFF';\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, radius, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Render glitched core effect\r\n     * @param {number} x - Center X\r\n     * @param {number} y - Center Y\r\n     * @param {number} radius - Core radius\r\n     * @param {number} glitchIntensity - Glitch intensity (0-1)\r\n     */\r\n    renderGlitchedCore(x, y, radius, glitchIntensity) {\r\n        const ctx = this.ctx;\r\n        \r\n        // Draw multiple offset cores for glitch effect\r\n        const offsets = [\r\n            { x: -2, y: 0, alpha: 0.3 },\r\n            { x: 2, y: 0, alpha: 0.3 },\r\n            { x: 0, y: -1, alpha: 0.2 }\r\n        ];\r\n        \r\n        ctx.save();\r\n        \r\n        offsets.forEach(offset => {\r\n            ctx.fillStyle = this.hexToRgba('#FFFFFF', offset.alpha * glitchIntensity);\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n                x + offset.x * glitchIntensity * this.scaleValue(5),\r\n                y + offset.y * glitchIntensity * this.scaleValue(5),\r\n                radius,\r\n                0,\r\n                Math.PI * 2\r\n            );\r\n            ctx.fill();\r\n        });\r\n        \r\n        // Main core\r\n        ctx.fillStyle = '#FFFFFF';\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Set shape points for morphing\r\n     * @param {Array} points - Array of normalized points\r\n     */\r\n    setShapePoints(points) {\r\n        this.shapePoints = points;\r\n        this.isMorphing = points && points.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Clear shape points (return to circle)\r\n     */\r\n    clearShapePoints() {\r\n        this.shapePoints = null;\r\n        this.isMorphing = false;\r\n    }\r\n\r\n    /**\r\n     * Set core color\r\n     * @param {string} color - Core color\r\n     */\r\n    setCoreColor(color) {\r\n        this.coreColor = color;\r\n    }\r\n\r\n    /**\r\n     * Set core opacity\r\n     * @param {number} opacity - Core opacity (0-1)\r\n     */\r\n    setCoreOpacity(opacity) {\r\n        this.coreOpacity = Math.max(0, Math.min(1, opacity));\r\n    }\r\n\r\n    /**\r\n     * Set core border\r\n     * @param {number} width - Border width\r\n     * @param {string} color - Border color\r\n     */\r\n    setCoreBorder(width, color) {\r\n        this.coreBorderWidth = width;\r\n        this.coreBorderColor = color;\r\n    }\r\n\r\n    /**\r\n     * Get core rendering info\r\n     * @returns {Object} Core state info\r\n     */\r\n    getCoreInfo() {\r\n        return {\r\n            color: this.coreColor,\r\n            opacity: this.coreOpacity,\r\n            hasBorder: this.coreBorderWidth > 0,\r\n            isMorphing: this.isMorphing,\r\n            shapePointCount: this.shapePoints ? this.shapePoints.length : 0\r\n        };\r\n    }\r\n}\r\n\r\nexport default CoreRenderer;","/**\r\n * RotationBrake - Simple braking system using DEGREES like the working demo\r\n * @module core/animation/RotationBrake\r\n */\r\n\r\nexport class RotationBrake {\r\n    constructor(renderer) {\r\n        this.renderer = renderer;\r\n\r\n        // Braking state - EXACTLY like the demo\r\n        this.brakeStartTime = null;\r\n        this.brakeDuration = 2500; // Will be calculated dynamically\r\n        this.brakeStartRotation = 0;\r\n        this.brakeTargetRotation = 0;\r\n        this.brakeStartVelocity = 0;\r\n\r\n        // Callbacks\r\n        this.onComplete = null;\r\n        this.onProgress = null;\r\n\r\n        // Constants\r\n        this.DURATION_FACTOR = 14; // Tuned for natural deceleration feel\r\n    }\r\n\r\n    /**\r\n     * Brake to upright position (0 degrees)\r\n     * @param {Object} options - Brake options\r\n     * @returns {Promise} Resolves when braking complete\r\n     */\r\n    brakeToUpright(options = {}) {\r\n        return this.brakeToTarget(0, options);\r\n    }\r\n\r\n    /**\r\n     * Brake to nearest multiple of given angle\r\n     * @param {number} angleStep - Angle step in DEGREES (e.g., 90 for 90°)\r\n     * @param {Object} options - Brake options\r\n     * @returns {Promise} Resolves when braking complete\r\n     */\r\n    brakeToNearest(angleStep, options = {}) {\r\n        const currentAngle = this.renderer.state.manualRotation || 0;\r\n        const steps = Math.round(currentAngle / angleStep);\r\n        const targetAngle = steps * angleStep;\r\n        return this.brakeToTarget(targetAngle, options);\r\n    }\r\n\r\n    /**\r\n     * Brake to specific target angle\r\n     * @param {number} targetAngle - Target angle in DEGREES (0 = upright)\r\n     * @param {Object} options - Brake options\r\n     * @returns {Promise} Resolves when braking complete\r\n     */\r\n    brakeToTarget(targetAngle, options = {}) {\r\n        return new Promise((resolve) => {\r\n            const {\r\n                onProgress = null,\r\n                onComplete = null\r\n            } = options;\r\n\r\n            this.onProgress = onProgress;\r\n            this.onComplete = onComplete;\r\n\r\n            // Get current state - ALL IN DEGREES\r\n            const currentVelocity = this.renderer.state.rotationSpeed || 0;\r\n            const rotation = this.renderer.state.manualRotation || 0;\r\n\r\n            // Do nothing if not moving or already braking\r\n            if (currentVelocity === 0 || this.brakeStartTime) {\r\n                resolve();\r\n                return;\r\n            }\r\n\r\n            // Initialize braking state\r\n            this.brakeStartTime = performance.now();\r\n            this.brakeStartRotation = rotation;\r\n            this.brakeStartVelocity = currentVelocity;\r\n\r\n            // Calculate the nearest upright target rotation\r\n            if (targetAngle === 0) {\r\n                // Special case for upright\r\n                if (currentVelocity > 0) { // Spinning clockwise\r\n                    this.brakeTargetRotation = (Math.floor(rotation / 360) + 1) * 360;\r\n                } else { // Spinning counter-clockwise\r\n                    this.brakeTargetRotation = Math.floor(rotation / 360) * 360;\r\n                }\r\n            } else {\r\n                // General case\r\n                const normalizedTarget = targetAngle % 360;\r\n                const baseCycles = Math.floor(rotation / 360);\r\n\r\n                if (currentVelocity > 0) {\r\n                    if (normalizedTarget > (rotation % 360)) {\r\n                        this.brakeTargetRotation = baseCycles * 360 + normalizedTarget;\r\n                    } else {\r\n                        this.brakeTargetRotation = (baseCycles + 1) * 360 + normalizedTarget;\r\n                    }\r\n                } else {\r\n                    if (normalizedTarget < (rotation % 360)) {\r\n                        this.brakeTargetRotation = baseCycles * 360 + normalizedTarget;\r\n                    } else {\r\n                        this.brakeTargetRotation = (baseCycles - 1) * 360 + normalizedTarget;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // DYNAMIC DURATION CALCULATION - EXACTLY like the demo\r\n            const angleToTravel = Math.abs(this.brakeTargetRotation - this.brakeStartRotation);\r\n            this.brakeDuration = Math.max(500, (angleToTravel / Math.abs(currentVelocity)) * this.DURATION_FACTOR * 5);\r\n\r\n            console.log('Brake started:', {\r\n                from: rotation.toFixed(1) + '°',\r\n                to: this.brakeTargetRotation.toFixed(1) + '°',\r\n                velocity: currentVelocity,\r\n                duration: this.brakeDuration.toFixed(0) + 'ms'\r\n            });\r\n\r\n            // Stop adding velocity immediately\r\n            this.renderer.setRotationSpeed(0);\r\n\r\n            this.resolvePromise = resolve;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update brake state - called by renderer each frame\r\n     * @param {number} currentTime - Current timestamp from requestAnimationFrame\r\n     * @returns {Object|null} - Rotation update or null if not braking\r\n     */\r\n    updateBrake(currentTime) {\r\n        if (!this.brakeStartTime) {\r\n            return null; // Not braking\r\n        }\r\n\r\n        const elapsed = currentTime - this.brakeStartTime;\r\n        const progress = Math.min(elapsed / this.brakeDuration, 1);\r\n\r\n        // Ease-out quartic for smooth deceleration (starts fast, ends slow)\r\n        const easedProgress = 1 - Math.pow(1 - progress, 4);\r\n\r\n        // Calculate new rotation based on eased progress\r\n        const rotation = this.brakeStartRotation +\r\n            (this.brakeTargetRotation - this.brakeStartRotation) * easedProgress;\r\n\r\n        // Calculate virtual speed for UI (decreases with progress)\r\n        const virtualSpeed = this.brakeStartVelocity * Math.pow(1 - easedProgress, 2);\r\n\r\n        // Progress callback\r\n        if (this.onProgress) {\r\n            this.onProgress(easedProgress, virtualSpeed, rotation);\r\n        }\r\n\r\n        if (progress >= 1) {\r\n            // Stop the animation when braking is complete\r\n            this.brakeStartTime = null;\r\n\r\n            console.log('Brake complete:', {\r\n                target: this.brakeTargetRotation.toFixed(1) + '°',\r\n                duration: elapsed.toFixed(0) + 'ms'\r\n            });\r\n\r\n            this.complete();\r\n\r\n            // Return final position\r\n            return {\r\n                rotation: this.brakeTargetRotation,\r\n                speed: 0,\r\n                complete: true\r\n            };\r\n        }\r\n\r\n        // Continue braking\r\n        return {\r\n            rotation: rotation,\r\n            speed: virtualSpeed,\r\n            complete: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Stop any active braking\r\n     */\r\n    stop() {\r\n        this.brakeStartTime = null;\r\n    }\r\n\r\n    /**\r\n     * Complete the braking operation\r\n     * @private\r\n     */\r\n    complete() {\r\n        if (this.onComplete) {\r\n            this.onComplete();\r\n        }\r\n\r\n        if (this.resolvePromise) {\r\n            this.resolvePromise();\r\n            this.resolvePromise = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if currently braking\r\n     * @returns {boolean}\r\n     */\r\n    isBraking() {\r\n        return this.brakeStartTime !== null;\r\n    }\r\n\r\n    /**\r\n     * Emergency stop - immediately halt rotation\r\n     */\r\n    emergencyStop() {\r\n        this.stop();\r\n        this.renderer.setRotationSpeed(0);\r\n        this.complete();\r\n    }\r\n\r\n    /**\r\n     * Get current brake progress\r\n     * @returns {number} Progress from 0 to 1\r\n     */\r\n    getProgress() {\r\n        if (!this.brakeStartTime) return 0;\r\n        const elapsed = performance.now() - this.brakeStartTime;\r\n        return Math.min(elapsed / this.brakeDuration, 1);\r\n    }\r\n}\r\n\r\nexport default RotationBrake;","/**\r\n * AmbientDanceAnimator - Connects ambient dance gestures to the renderer\r\n * Bridges the GestureBlender output with the actual rendering system\r\n */\r\n\r\nclass AmbientDanceAnimator {\r\n    constructor(renderer) {\r\n        this.renderer = renderer;\r\n\r\n        // Animation states for ambient gestures\r\n        this.animations = {\r\n            grooveSway: null,\r\n            grooveBob: null,\r\n            grooveFlow: null,\r\n            groovePulse: null,\r\n            grooveStep: null\r\n        };\r\n\r\n        // Current active animation\r\n        this.activeAnimation = null;\r\n\r\n        // Blend state from GestureBlender\r\n        this.blendState = {\r\n            x: 0,\r\n            y: 0,\r\n            rotation: 0,\r\n            scale: 1,\r\n            opacity: 1\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Start an ambient dance animation\r\n     * @param {string} animationName - Name of the ambient gesture\r\n     * @param {Object} options - Animation options\r\n     */\r\n    startAmbientAnimation(animationName, options = {}) {\r\n        // Stop previous animation\r\n        if (this.activeAnimation && this.activeAnimation !== animationName) {\r\n            this.stopAmbientAnimation(this.activeAnimation);\r\n        }\r\n\r\n        this.activeAnimation = animationName;\r\n        this.animations[animationName] = {\r\n            startTime: Date.now(),\r\n            intensity: options.intensity || 1.0,\r\n            frequency: options.frequency || 1.0,\r\n            options: options\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Stop an ambient animation\r\n     */\r\n    stopAmbientAnimation(animationName) {\r\n        if (this.animations[animationName]) {\r\n            this.animations[animationName] = null;\r\n        }\r\n        if (this.activeAnimation === animationName) {\r\n            this.activeAnimation = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update blend state from GestureBlender\r\n     */\r\n    updateBlendState(blendState) {\r\n        if (!blendState) return;\r\n\r\n        // Smooth interpolation\r\n        const lerpFactor = 0.2;\r\n        this.blendState.x = this.lerp(this.blendState.x, blendState.x || 0, lerpFactor);\r\n        this.blendState.y = this.lerp(this.blendState.y, blendState.y || 0, lerpFactor);\r\n        this.blendState.rotation = this.lerp(this.blendState.rotation, blendState.rotation || 0, lerpFactor);\r\n        this.blendState.scale = this.lerp(this.blendState.scale, blendState.scale || 1, lerpFactor);\r\n        this.blendState.opacity = this.lerp(this.blendState.opacity, blendState.opacity || 1, lerpFactor);\r\n    }\r\n\r\n    /**\r\n     * Get current animation transform\r\n     */\r\n    getTransform(deltaTime) {\r\n        const transform = {\r\n            x: this.blendState.x,\r\n            y: this.blendState.y,\r\n            rotation: this.blendState.rotation,\r\n            scale: this.blendState.scale,\r\n            opacity: this.blendState.opacity\r\n        };\r\n\r\n        // Apply active animation on top\r\n        if (this.activeAnimation) {\r\n            const animation = this.animations[this.activeAnimation];\r\n            if (animation) {\r\n                const elapsed = Date.now() - animation.startTime;\r\n\r\n                switch (this.activeAnimation) {\r\n                    case 'grooveSway':\r\n                        transform.x += Math.sin(elapsed / 500 * animation.frequency) * 15 * animation.intensity;\r\n                        transform.rotation += Math.sin(elapsed / 500 * animation.frequency + Math.PI/4) * 5 * animation.intensity;\r\n                        break;\r\n\r\n                    case 'grooveBob':\r\n                        transform.y += Math.sin(elapsed / 400 * animation.frequency) * 10 * animation.intensity;\r\n                        transform.scale *= 1 + Math.sin(elapsed / 400 * animation.frequency) * 0.03 * animation.intensity;\r\n                        break;\r\n\r\n                    case 'grooveFlow':\r\n                        const t = elapsed / 1000 * animation.frequency;\r\n                        transform.x += Math.sin(t) * Math.cos(t * 2) * 20 * animation.intensity;\r\n                        transform.y += Math.cos(t) * Math.sin(t * 2) * 10 * animation.intensity;\r\n                        transform.rotation += Math.sin(t * 2) * 8 * animation.intensity;\r\n                        break;\r\n\r\n                    case 'groovePulse':\r\n                        transform.scale *= 1 + Math.sin(elapsed / 250 * animation.frequency) * 0.05 * animation.intensity;\r\n                        transform.opacity *= 0.9 + Math.sin(elapsed / 250 * animation.frequency) * 0.1 * animation.intensity;\r\n                        break;\r\n\r\n                    case 'grooveStep':\r\n                        const stepPhase = Math.floor(elapsed / 500 * animation.frequency) % 4;\r\n                        const stepProgress = (elapsed / 500 * animation.frequency) % 1;\r\n                        const smoothStep = this.smoothStep(stepProgress);\r\n\r\n                        if (stepPhase === 0) transform.x += smoothStep * 25 * animation.intensity;\r\n                        else if (stepPhase === 2) transform.x -= smoothStep * 25 * animation.intensity;\r\n\r\n                        transform.y += Math.abs(Math.sin(elapsed / 250 * animation.frequency)) * 5 * animation.intensity;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return transform;\r\n    }\r\n\r\n    /**\r\n     * Linear interpolation\r\n     */\r\n    lerp(a, b, t) {\r\n        return a + (b - a) * t;\r\n    }\r\n\r\n    /**\r\n     * Smooth step function\r\n     */\r\n    smoothStep(t) {\r\n        return t * t * (3 - 2 * t);\r\n    }\r\n}\r\n\r\n// Export for ES6 modules\r\nexport { AmbientDanceAnimator };\r\n\r\n// Also export as default\r\nexport default AmbientDanceAnimator;","/**\r\n * Animation Loop Manager\r\n * Consolidates all requestAnimationFrame calls into a single, efficient loop\r\n *\r\n * @module core/AnimationLoopManager\r\n * @version 1.0.0\r\n */\r\n\r\n/**\r\n * Priority levels for animations\r\n * @enum {number}\r\n */\r\nexport const AnimationPriority = {\r\n    CRITICAL: 0,    // Must run every frame (e.g., main render)\r\n    HIGH: 1,        // Should run every frame if possible\r\n    MEDIUM: 2,      // Can skip frames if needed\r\n    LOW: 3,         // Background tasks, can be throttled\r\n    IDLE: 4         // Only run when idle\r\n};\r\n\r\n/**\r\n * Centralized animation loop manager\r\n * Replaces multiple requestAnimationFrame calls with a single, optimized loop\r\n */\r\nexport class AnimationLoopManager {\r\n    constructor() {\r\n        // Animation callbacks organized by priority\r\n        this.callbacks = new Map();\r\n        this.callbackIdCounter = 0;\r\n\r\n        // Frame timing\r\n        this.frameId = null;\r\n        this.isRunning = false;\r\n        this.lastFrameTime = 0;\r\n        this.deltaTime = 0;\r\n        this.fps = 60;\r\n        this.frameCount = 0;\r\n\r\n        // Performance\r\n        this.targetFPS = 60;\r\n        this.targetFrameTime = 1000 / this.targetFPS;\r\n        this.frameBudget = 16.67; // ms\r\n\r\n        // Frame skipping for low priority\r\n        this.prioritySkipCounters = {\r\n            [AnimationPriority.MEDIUM]: 0,\r\n            [AnimationPriority.LOW]: 0,\r\n            [AnimationPriority.IDLE]: 0\r\n        };\r\n\r\n        // Performance monitoring\r\n        this.performanceMonitor = null;\r\n        this.frameTimeHistory = [];\r\n        this.maxHistorySize = 60;\r\n\r\n        // Bind methods\r\n        this.loop = this.loop.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Register an animation callback\r\n     * @param {Function} callback - Function to call each frame (receives deltaTime, timestamp)\r\n     * @param {number} priority - Priority level from AnimationPriority enum\r\n     * @param {Object} context - Optional context for callback\r\n     * @returns {number} Callback ID for later removal\r\n     */\r\n    register(callback, priority = AnimationPriority.MEDIUM, context = null) {\r\n        if (typeof callback !== 'function') {\r\n            throw new Error('Callback must be a function');\r\n        }\r\n\r\n        const id = ++this.callbackIdCounter;\r\n\r\n        // Store callback with metadata\r\n        this.callbacks.set(id, {\r\n            callback,\r\n            priority,\r\n            context,\r\n            lastRun: 0,\r\n            runCount: 0,\r\n            totalTime: 0,\r\n            enabled: true\r\n        });\r\n\r\n        // Auto-start if this is the first callback\r\n        if (this.callbacks.size === 1 && !this.isRunning) {\r\n            this.start();\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Unregister an animation callback\r\n     * @param {number} id - Callback ID returned from register()\r\n     */\r\n    unregister(id) {\r\n        this.callbacks.delete(id);\r\n\r\n        // Auto-stop if no callbacks remain\r\n        if (this.callbacks.size === 0 && this.isRunning) {\r\n            this.stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable/disable a callback without removing it\r\n     * @param {number} id - Callback ID\r\n     * @param {boolean} enabled - Whether to enable or disable\r\n     */\r\n    setEnabled(id, enabled) {\r\n        const callback = this.callbacks.get(id);\r\n        if (callback) {\r\n            callback.enabled = enabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start the animation loop\r\n     */\r\n    start() {\r\n        if (this.isRunning) return;\r\n\r\n        this.isRunning = true;\r\n        this.lastFrameTime = performance.now();\r\n        this.frameId = requestAnimationFrame(this.loop);\r\n    }\r\n\r\n    /**\r\n     * Stop the animation loop\r\n     */\r\n    stop() {\r\n        if (!this.isRunning) return;\r\n\r\n        this.isRunning = false;\r\n        if (this.frameId) {\r\n            cancelAnimationFrame(this.frameId);\r\n            this.frameId = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Main animation loop\r\n     * @param {number} timestamp - Current timestamp from requestAnimationFrame\r\n     */\r\n    loop(timestamp) {\r\n        if (!this.isRunning) return;\r\n\r\n        // Calculate delta time\r\n        this.deltaTime = timestamp - this.lastFrameTime;\r\n        this.lastFrameTime = timestamp;\r\n\r\n        // Update FPS\r\n        this.frameCount++;\r\n        if (this.frameCount % 60 === 0) {\r\n            this.fps = Math.round(1000 / (this.deltaTime || 16.67));\r\n        }\r\n\r\n        // Track frame time\r\n        this.frameTimeHistory.push(this.deltaTime);\r\n        if (this.frameTimeHistory.length > this.maxHistorySize) {\r\n            this.frameTimeHistory.shift();\r\n        }\r\n\r\n        // Performance marker start\r\n        const frameStartTime = performance.now();\r\n\r\n        // Group callbacks by priority\r\n        const callbacksByPriority = this.groupCallbacksByPriority();\r\n\r\n        // Execute callbacks by priority\r\n        let timeSpent = 0;\r\n\r\n        for (const priority of [\r\n            AnimationPriority.CRITICAL,\r\n            AnimationPriority.HIGH,\r\n            AnimationPriority.MEDIUM,\r\n            AnimationPriority.LOW,\r\n            AnimationPriority.IDLE\r\n        ]) {\r\n            // Check frame budget (except for CRITICAL)\r\n            if (priority > AnimationPriority.CRITICAL && timeSpent > this.frameBudget * 0.8) {\r\n                break; // Skip lower priorities if running out of time\r\n            }\r\n\r\n            // Check if we should skip this priority level\r\n            if (this.shouldSkipPriority(priority)) {\r\n                continue;\r\n            }\r\n\r\n            // Execute callbacks at this priority\r\n            const callbacks = callbacksByPriority.get(priority) || [];\r\n\r\n            for (const callbackData of callbacks) {\r\n                if (!callbackData.enabled) continue;\r\n\r\n                const callbackStart = performance.now();\r\n\r\n                try {\r\n                    // Call with context if provided\r\n                    if (callbackData.context) {\r\n                        callbackData.callback.call(callbackData.context, this.deltaTime, timestamp);\r\n                    } else {\r\n                        callbackData.callback(this.deltaTime, timestamp);\r\n                    }\r\n\r\n                    // Track performance\r\n                    const callbackTime = performance.now() - callbackStart;\r\n                    callbackData.totalTime += callbackTime;\r\n                    callbackData.runCount++;\r\n                    callbackData.lastRun = timestamp;\r\n                    timeSpent += callbackTime;\r\n\r\n                } catch (error) {\r\n                    console.error('Animation callback error:', error);\r\n                    // Disable problematic callbacks\r\n                    if (callbackData.runCount > 0 && callbackData.totalTime / callbackData.runCount > 10) {\r\n                        console.warn('Disabling slow callback');\r\n                        callbackData.enabled = false;\r\n                    }\r\n                }\r\n\r\n                // Break if spending too much time\r\n                if (timeSpent > this.frameBudget) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Performance marker end\r\n        const frameTime = performance.now() - frameStartTime;\r\n\r\n        // Warn if frame took too long\r\n        if (frameTime > this.frameBudget * 1.5) {\r\n            console.warn(`Frame took ${frameTime.toFixed(2)}ms (target: ${this.frameBudget}ms)`);\r\n        }\r\n\r\n        // Schedule next frame\r\n        this.frameId = requestAnimationFrame(this.loop);\r\n    }\r\n\r\n    /**\r\n     * Group callbacks by priority for efficient execution\r\n     * @returns {Map} Map of priority to callback arrays\r\n     */\r\n    groupCallbacksByPriority() {\r\n        const groups = new Map();\r\n\r\n        for (const [id, callbackData] of this.callbacks) {\r\n            const priority = callbackData.priority;\r\n\r\n            if (!groups.has(priority)) {\r\n                groups.set(priority, []);\r\n            }\r\n\r\n            groups.get(priority).push(callbackData);\r\n        }\r\n\r\n        return groups;\r\n    }\r\n\r\n    /**\r\n     * Determine if we should skip a priority level this frame\r\n     * @param {number} priority - Priority level to check\r\n     * @returns {boolean} True if should skip\r\n     */\r\n    shouldSkipPriority(priority) {\r\n        // Never skip critical\r\n        if (priority === AnimationPriority.CRITICAL) return false;\r\n\r\n        // Skip based on frame rate\r\n        if (this.fps < 30 && priority >= AnimationPriority.LOW) return true;\r\n        if (this.fps < 45 && priority === AnimationPriority.IDLE) return true;\r\n\r\n        // Frame skipping for lower priorities\r\n        if (priority === AnimationPriority.MEDIUM) {\r\n            // Run every 2nd frame if FPS is low\r\n            if (this.fps < 50) {\r\n                this.prioritySkipCounters[priority]++;\r\n                if (this.prioritySkipCounters[priority] % 2 !== 0) return true;\r\n            }\r\n        } else if (priority === AnimationPriority.LOW) {\r\n            // Run every 3rd frame if FPS is low\r\n            if (this.fps < 50) {\r\n                this.prioritySkipCounters[priority]++;\r\n                if (this.prioritySkipCounters[priority] % 3 !== 0) return true;\r\n            }\r\n        } else if (priority === AnimationPriority.IDLE) {\r\n            // Run every 5th frame\r\n            this.prioritySkipCounters[priority]++;\r\n            if (this.prioritySkipCounters[priority] % 5 !== 0) return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get performance statistics\r\n     * @returns {Object} Performance stats\r\n     */\r\n    getStats() {\r\n        const stats = {\r\n            fps: this.fps,\r\n            frameCount: this.frameCount,\r\n            callbackCount: this.callbacks.size,\r\n            averageFrameTime: 0,\r\n            maxFrameTime: 0,\r\n            minFrameTime: Infinity\r\n        };\r\n\r\n        // Calculate frame time stats\r\n        if (this.frameTimeHistory.length > 0) {\r\n            let total = 0;\r\n            for (const time of this.frameTimeHistory) {\r\n                total += time;\r\n                stats.maxFrameTime = Math.max(stats.maxFrameTime, time);\r\n                stats.minFrameTime = Math.min(stats.minFrameTime, time);\r\n            }\r\n            stats.averageFrameTime = total / this.frameTimeHistory.length;\r\n        }\r\n\r\n        // Get callback stats by priority\r\n        stats.callbacksByPriority = {};\r\n        for (const [id, callback] of this.callbacks) {\r\n            const priority = callback.priority;\r\n            if (!stats.callbacksByPriority[priority]) {\r\n                stats.callbacksByPriority[priority] = {\r\n                    count: 0,\r\n                    totalTime: 0,\r\n                    enabled: 0\r\n                };\r\n            }\r\n            stats.callbacksByPriority[priority].count++;\r\n            stats.callbacksByPriority[priority].totalTime += callback.totalTime;\r\n            if (callback.enabled) stats.callbacksByPriority[priority].enabled++;\r\n        }\r\n\r\n        return stats;\r\n    }\r\n\r\n    /**\r\n     * Set target FPS\r\n     * @param {number} fps - Target frames per second\r\n     */\r\n    setTargetFPS(fps) {\r\n        this.targetFPS = Math.max(15, Math.min(120, fps));\r\n        this.targetFrameTime = 1000 / this.targetFPS;\r\n        this.frameBudget = this.targetFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Set performance monitor\r\n     * @param {PerformanceMonitor} monitor - Performance monitor instance\r\n     */\r\n    setPerformanceMonitor(monitor) {\r\n        this.performanceMonitor = monitor;\r\n    }\r\n\r\n    /**\r\n     * Destroy and cleanup\r\n     */\r\n    destroy() {\r\n        this.stop();\r\n        this.callbacks.clear();\r\n        this.frameTimeHistory = [];\r\n    }\r\n}\r\n\r\n// Create singleton instance\r\nexport const animationLoopManager = new AnimationLoopManager();\r\n\r\n// Export for convenience\r\nexport default animationLoopManager;","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE\r\n *  └─○═╝                                                                             \r\n *                      ◐ ◑ ◒ ◓  EMOTIVE RENDERER  ◓ ◒ ◑ ◐                      \r\n *                                                                                    \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Emotive Renderer - Visual Rendering Engine\r\n * @author Emotive Engine Team\r\n * @version 2.4.0\r\n * @module EmotiveRenderer\r\n * @changelog 2.4.0 - Added offscreen canvas caching for glow gradients\r\n * @changelog 2.3.0 - Optimized color transitions to use main render loop\r\n * @changelog 2.2.0 - Dynamic visual resampling on resize for consistent quality\r\n * @changelog 2.1.0 - Implemented undertone saturation system for glow colors\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                                   PURPOSE                                         \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ The VISUAL ARTIST of the Emotive Engine. Renders the iconic orb with its          \r\n * ║ glowing core, breathing animation, eye expressions, and gesture animations.       \r\n * ║ Creates the minimalist yet expressive visual that defines Emotive.                \r\n * ║                                                                                    \r\n * ║ NEW: Undertone saturation creates visual depth by adjusting glow color            \r\n * ║ saturation based on emotional intensity (intense→electric, subdued→ghostly)       \r\n * ║ NEW: Dynamic visual resampling ensures consistent quality at any canvas size      \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 🎨 VISUAL COMPONENTS                                                              \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • White Core      : The solid center orb (#FFFFFF)                                \r\n * │ • Colored Glow    : Emotional aura surrounding the core                           \r\n * │ • Eye Shape       : Arc-based expressions (happiness, sadness, focus)             \r\n * │ • Breathing       : Subtle size pulsation for life-like quality                   \r\n * │ • Gesture Motion  : Position, scale, and rotation animations                      \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 🎭 RENDERING PIPELINE                                                             \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ 1. Clear canvas or apply motion blur                                              \r\n * │ 2. Calculate breathing scale factor                                               \r\n * │ 3. Apply gesture transformations (position, scale, rotation)                      \r\n * │ 4. Draw colored glow layers (3 gradient circles)                                  \r\n * │ 5. Draw white core circle                                                         \r\n * │ 6. Draw eye expression if not neutral                                             \r\n * │ 7. Apply special effects (jitter, zen morph, etc.)                                \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ ⚙️  CONFIGURABLE PROPERTIES                                                       \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • coreSizeDivisor  : Orb size relative to canvas (default: 12)                    \r\n * │ • glowMultiplier   : Glow radius vs core (default: 2.5x)                          \r\n * │ • breathingSpeed   : Breaths per minute (default: 16)                             \r\n * │ • breathingDepth   : Scale variation % (default: 8%)                              \r\n * │ • renderingStyle   : 'classic' | 'soft' | 'sharp'                                 \r\n * │ • referenceSize    : Reference canvas size for scaling (default: 400)             \r\n * │ • baseScale        : Global scale multiplier (default: 1.0)                       \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 👁️ EYE EXPRESSION SYSTEM                                                          \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • Openness    : 0.0 (closed) to 1.0 (fully open)                                  \r\n * │ • Arc         : -1.0 (sad ∩) to 1.0 (happy ∪)                                    \r\n * │ • Asymmetry   : Different shapes for left/right eyes                              \r\n * │ • Blinking    : Smooth open/close animations                                      \r\n * │ • Zen Morph   : Special ∩∩ shape for meditation                                   \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ ❌ PERFORMANCE CRITICAL                                                           \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ ✗ Gradient caching     → Recreating gradients kills FPS                          \r\n * │ ✗ Canvas save/restore  → Excessive use causes slowdown                           \r\n * │ ✗ Clear rect timing    → Motion blur depends on this                             \r\n * │ ✗ Animation frame IDs  → Must track to prevent memory leaks                      \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ════════════════════════════════════════════════════════════════════════════════════\r\n */\r\n\r\nimport { interpolateHsl, applyUndertoneSaturation, rgbToHex, hexToRgb } from '../utils/colorUtils.js';\r\nimport GestureCompositor from './GestureCompositor.js';\r\nimport { getEmotion } from './emotions/index.js';\r\nimport { getEffect, applyEffect, isEffectActive } from './effects/index.js';\r\nimport { getGesture } from './gestures/index.js';\r\nimport musicalDuration from './MusicalDuration.js';\r\n\r\n// Import modular renderer components\r\nimport { GestureAnimator } from './renderer/GestureAnimator.js';\r\nimport { ColorUtilities } from './renderer/ColorUtilities.js';\r\nimport { SpecialEffects } from './renderer/SpecialEffects.js';\r\nimport { EyeRenderer } from './renderer/EyeRenderer.js';\r\nimport { BreathingAnimator } from './renderer/BreathingAnimator.js';\r\nimport { GlowRenderer } from './renderer/GlowRenderer.js';\r\nimport { CoreRenderer } from './renderer/CoreRenderer.js';\r\nimport { RotationBrake } from './animation/RotationBrake.js';\r\nimport { AmbientDanceAnimator } from './renderer/AmbientDanceAnimator.js';\r\nimport { animationLoopManager, AnimationPriority } from './AnimationLoopManager.js';\r\nimport { gradientCache } from './renderer/GradientCache.js';\r\n\r\nclass EmotiveRenderer {\r\n    constructor(canvasManager, options = {}) {\r\n        this.canvasManager = canvasManager;\r\n        this.ctx = canvasManager.getContext();\r\n        \r\n        if (!this.ctx) {\r\n        }\r\n        \r\n        // Gesture compositor for emotion/undertone modulation\r\n        this.gestureCompositor = new GestureCompositor();\r\n        \r\n        // Initialize current undertone\r\n        this.currentUndertone = null;\r\n        \r\n        // Initialize modular components\r\n        this.gestureAnimator = new GestureAnimator(this);\r\n        this.colorUtilities = new ColorUtilities();\r\n        this.specialEffects = new SpecialEffects(this);\r\n        this.eyeRenderer = new EyeRenderer(this);\r\n        this.breathingAnimator = new BreathingAnimator(this);\r\n        this.glowRenderer = new GlowRenderer(this);\r\n        this.coreRenderer = new CoreRenderer(this);\r\n        this.rotationBrake = new RotationBrake(this);\r\n        this.ambientDanceAnimator = new AmbientDanceAnimator(this);\r\n\r\n        // Configuration - matching original Emotive proportions\r\n        this.config = {\r\n            coreColor: options.coreColor || '#FFFFFF',\r\n            coreSizeDivisor: options.coreSizeDivisor || 12,  // Core radius = min(width,height) / 12\r\n            glowMultiplier: options.glowMultiplier || 2.5,   // Glow radius = core radius * 2.5\r\n            defaultGlowColor: options.defaultGlowColor || '#14B8A6',  // Teal\r\n            breathingSpeed: options.breathingSpeed || 0.42,  // 16 breaths/min (0.42 rad/s = 4 sec/cycle = 15-16 bpm)\r\n            breathingDepth: options.breathingDepth || 0.08,  // 8% size variation for visible breathing\r\n            renderingStyle: options.renderingStyle || 'classic',\r\n            baseScale: options.baseScale || 1.0,  // Global scale multiplier for entire system\r\n            referenceSize: 400,  // Reference canvas size for scale calculations\r\n            topOffset: options.topOffset || 0  // Vertical offset to align with layout\r\n        };\r\n        \r\n        // Initialize scaleFactor based on current canvas size\r\n        const canvasSize = Math.min(\r\n            this.canvasManager.width || 400, \r\n            this.canvasManager.height || 400\r\n        );\r\n        this.scaleFactor = (canvasSize / this.config.referenceSize) * this.config.baseScale;\r\n        \r\n        // State\r\n        this.state = {\r\n            emotion: 'neutral',\r\n            glowColor: this.config.defaultGlowColor,\r\n            glowIntensity: 1.0,\r\n            breathRate: 1.0,\r\n            breathDepth: this.config.breathingDepth,\r\n            coreJitter: false,\r\n            speaking: false,\r\n            recording: false,\r\n            sleeping: false,\r\n            blinking: false,\r\n            blinkingEnabled: true,  // Add flag to control blinking\r\n            gazeOffset: { x: 0, y: 0 },\r\n            gazeIntensity: 0,\r\n            gazeLocked: false,\r\n            gazeTrackingEnabled: false,  // Whether to track mouse/touch\r\n            gazeTarget: { x: 0, y: 0 },  // Target position for gaze (-1 to 1)\r\n            zenVortexIntensity: 1.0,  // Adjustable whirlpool intensity for zen\r\n            // Suspicion state\r\n            squintAmount: 0,         // 0-1, how much the eye is narrowed\r\n            targetSquintAmount: 0,   // Target squint amount to animate to\r\n            scanPhase: 0,            // Current phase of scanning animation\r\n            lastScanTime: 0,         // Last time we did a scan\r\n            isSuspicious: false,     // Track if we're in suspicion mode\r\n            // Custom scale for breathing\r\n            customScale: null,       // When set, overrides normal breathing scale\r\n            // Undertone modifiers - initialize with defaults\r\n            sizeMultiplier: 1.0,\r\n            jitterAmount: 0,\r\n            episodicFlutter: false,\r\n            glowRadiusMult: 1.0,\r\n            breathRateMult: 1.0,\r\n            breathDepthMult: 1.0,\r\n            breathIrregular: false,\r\n            particleRateMult: 1.0,\r\n            // Manual rotation control (not BPM-locked)\r\n            manualRotation: 0,        // Current rotation angle in DEGREES\r\n            rotationSpeed: 0,         // Rotation speed in DEGREES per frame (like velocity in demo)\r\n            lastRotationUpdate: performance.now()\r\n        };\r\n        \r\n        // Animation state (now delegated to modules)\r\n        // Breathing is handled by BreathingAnimator\r\n        // Blinking is handled by EyeRenderer\r\n        \r\n        // Track animation frame IDs to prevent memory leaks\r\n        this.animationFrameIds = {\r\n            colorTransition: null,\r\n            eyeClose: null,\r\n            eyeOpen: null,\r\n            zenEnter: null,\r\n            zenExit: null\r\n        };\r\n\r\n        // Track loop manager callback IDs\r\n        this.loopCallbackIds = {\r\n            eyeClose: null,\r\n            eyeOpen: null,\r\n            zenEnter: null,\r\n            zenExit: null\r\n        };\r\n        \r\n        // Offscreen canvas for double buffering\r\n        this.offscreenCanvas = null;\r\n        this.offscreenCtx = null;\r\n        this.initOffscreenCanvas();\r\n\r\n        // Store canvas reference for gaze tracking\r\n        this.canvas = canvasManager.canvas;\r\n        \r\n        // Cache for expensive gradients\r\n        this.glowCache = new Map();\r\n        this.maxCacheSize = 10;\r\n        \r\n        // Gesture animations\r\n        this.gestureAnimations = {\r\n            bounce: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            pulse: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            shake: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            spin: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            nod: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            tilt: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            expand: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            contract: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            flash: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            drift: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null,\r\n                startX: 0,\r\n                startY: 0\r\n            },\r\n            stretch: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            glow: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            flicker: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            vibrate: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            wave: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            breathe: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            morph: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            slowBlink: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            look: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null,\r\n                targetX: 0,\r\n                targetY: 0\r\n            },\r\n            settle: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            breathIn: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            breathOut: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            breathHold: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            breathHoldEmpty: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            jump: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            orbital: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            },\r\n            hula: {\r\n                active: false,\r\n                startTime: 0,\r\n                progress: 0,\r\n                params: null\r\n            }\r\n        };\r\n        \r\n        // Episodic effects for undertones\r\n        this.episodicEffects = {\r\n            nervous: {\r\n                active: false,\r\n                startTime: 0,\r\n                duration: 0,\r\n                intensity: 0,\r\n                nextTrigger: 3000 + Math.random() * 2000 // 3-5 seconds\r\n            },\r\n            confident: {\r\n                active: false,\r\n                startTime: 0,\r\n                duration: 0,\r\n                intensity: 0,\r\n                nextTrigger: 4000 + Math.random() * 2000 // 4-6 seconds\r\n            },\r\n            tired: {\r\n                active: false,\r\n                startTime: 0,\r\n                duration: 0,\r\n                intensity: 0,\r\n                nextTrigger: 5000 + Math.random() * 2000 // 5-7 seconds\r\n            },\r\n            intense: {\r\n                active: false,\r\n                startTime: 0,\r\n                duration: 0,\r\n                intensity: 0,\r\n                nextTrigger: 3000 + Math.random() * 3000 // 3-6 seconds\r\n            },\r\n            subdued: {\r\n                active: false,\r\n                startTime: 0,\r\n                duration: 0,\r\n                intensity: 0,\r\n                nextTrigger: 4000 + Math.random() * 3000 // 4-7 seconds\r\n            }\r\n        };\r\n        \r\n        // Speaking animation\r\n        this.speakingRings = [];\r\n        this.maxRings = 5;\r\n        this.ringSpawnTimer = 0;\r\n        this.ringSpawnInterval = 200; // ms between rings\r\n        \r\n        // Recording animation (rings move inward)\r\n        this.recordingRings = [];\r\n        this.recordingPulse = 0;\r\n        \r\n        // Sleep state - consolidated here for visualization\r\n        this.sleepZ = [];\r\n        \r\n        // Zen state animation\r\n        this.zenTransition = {\r\n            active: false,\r\n            phase: null, // 'entering', 'in', 'exiting'\r\n            startTime: 0,\r\n            previousEmotion: null,\r\n            targetEmotion: null,\r\n            scaleX: 1.0,\r\n            scaleY: 1.0,\r\n            arcHeight: 0,\r\n            lotusMorph: 0, // 0 = circle, 1 = full lotus\r\n            petalSpread: 0, // 0 = closed, 1 = fully open\r\n            smileCurve: 0  // 0 = straight, 1 = full smile\r\n        };\r\n        \r\n        // Standardized color transition system\r\n        this.colorTransition = {\r\n            active: false,\r\n            fromColor: this.state.glowColor,\r\n            toColor: this.state.glowColor,\r\n            fromIntensity: this.state.glowIntensity,\r\n            toIntensity: this.state.glowIntensity,\r\n            progress: 0,\r\n            startTime: 0,\r\n            duration: 1500  // Default 1.5s\r\n        };\r\n        \r\n        // Comprehensive undertone modifiers\r\n        this.undertoneModifiers = {\r\n            nervous: {\r\n                // Color - subtle shimmer, no major shift\r\n                hueShift: 0,          // No hue change\r\n                saturationMult: 1.05, // Tiny bit more vivid\r\n                brightnessMult: 1.0,  // Normal brightness\r\n                brightnessFlicker: 0.05, // 5% brightness variation\r\n                // Visual\r\n                sizeMultiplier: 1.0,  // Normal size\r\n                jitterAmount: 0,      // No constant jitter - handled by episodic flutter\r\n                episodicFlutter: true, // Occasional butterfly moments\r\n                glowRadiusMult: 1.0,  // Normal glow\r\n                glowPulse: 0.05,      // 5% subtle heartbeat pulse\r\n                // Breathing\r\n                breathRateMult: 1.1,  // Slightly faster\r\n                breathDepthMult: 0.9, // Slightly shallower\r\n                breathIrregular: true, // Occasional catch in rhythm\r\n            },\r\n            confident: {\r\n                // Color - warmer, vibrant\r\n                hueShift: 15,         // Warmer but not overwhelming\r\n                saturationMult: 1.2,  // More vibrant\r\n                brightnessMult: 1.1,  // Slightly brighter\r\n                // Visual\r\n                sizeMultiplier: 1.0,  // Normal size until episodes\r\n                jitterAmount: 0,      // Rock solid\r\n                episodicPowerPose: true, // Occasional chest puffs\r\n                glowRadiusMult: 1.15, // Slightly expanded glow\r\n                // Breathing\r\n                breathRateMult: 0.95, // Slightly slower, controlled\r\n                breathDepthMult: 1.1, // Fuller breaths\r\n                breathIrregular: false,\r\n            },\r\n            tired: {\r\n                // Color - slightly cooler, less saturated\r\n                hueShift: -5,         // Slightly cooler\r\n                saturationMult: 0.7,  // Less vibrant\r\n                brightnessMult: 0.85, // Slightly darker\r\n                // Visual\r\n                sizeMultiplier: 0.95, // Slightly smaller\r\n                jitterAmount: 0,\r\n                episodicMicroSleep: true, // Occasional drowsy sags\r\n                glowRadiusMult: 0.9,  // Slightly reduced glow\r\n                // Breathing\r\n                breathRateMult: 0.8,  // Slower\r\n                breathDepthMult: 1.2, // Deeper breaths\r\n                breathIrregular: false,\r\n            },\r\n            intense: {\r\n                // Color - high contrast, saturated\r\n                hueShift: 5,          // Very slightly warmer\r\n                saturationMult: 1.3,  // More saturated\r\n                brightnessMult: 1.15, // Brighter\r\n                // Visual\r\n                sizeMultiplier: 1.0,  // Normal until focus moments\r\n                jitterAmount: 0,      // Still, focused\r\n                episodicLaserFocus: true, // Brief concentration moments\r\n                glowRadiusMult: 1.2,  // Expanded glow\r\n                // Breathing\r\n                breathRateMult: 1.2,  // Faster but controlled\r\n                breathDepthMult: 0.9, // Shallower, focused breaths\r\n                breathIrregular: false,\r\n            },\r\n            subdued: {\r\n                // Color - slightly muted\r\n                hueShift: -10,        // Slightly cooler\r\n                saturationMult: 0.75, // Somewhat muted\r\n                brightnessMult: 0.9,  // Slightly dimmed\r\n                // Visual\r\n                sizeMultiplier: 0.95, // Slightly smaller\r\n                jitterAmount: 0,\r\n                episodicWithdrawal: true, // Brief inward pulls\r\n                glowRadiusMult: 0.85, // Slightly reduced glow\r\n                // Breathing\r\n                breathRateMult: 0.9,  // Slightly slower\r\n                breathDepthMult: 0.9, // Slightly shallow\r\n                breathIrregular: false,\r\n            }\r\n        };\r\n        \r\n        // Performance\r\n        this.lastFrameTime = 0;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Scale a value based on current canvas size vs reference size\r\n     * Used to scale hard-coded values like shadowBlur, lineWidth, etc.\r\n     * @param {number} value - The base value to scale\r\n     * @returns {number} The scaled value\r\n     */\r\n    scaleValue(value) {\r\n        return value * this.scaleFactor;\r\n    }\r\n    \r\n    /**\r\n     * Initialize offscreen canvas for double buffering\r\n     */\r\n    initOffscreenCanvas() {\r\n        // Create offscreen canvas\r\n        this.offscreenCanvas = document.createElement('canvas');\r\n        this.offscreenCtx = this.offscreenCanvas.getContext('2d', {\r\n            alpha: true,\r\n            desynchronized: true,  // Reduces latency\r\n            willReadFrequently: false\r\n        });\r\n        \r\n        if (!this.offscreenCtx) {\r\n        }\r\n        \r\n        // Match dimensions\r\n        this.updateOffscreenSize();\r\n    }\r\n    \r\n    /**\r\n     * Update offscreen canvas size to match main canvas\r\n     */\r\n    updateOffscreenSize() {\r\n        if (this.offscreenCanvas && this.canvasManager) {\r\n            const width = this.canvasManager.canvas.width;\r\n            const height = this.canvasManager.canvas.height;\r\n            \r\n            if (this.offscreenCanvas.width !== width || this.offscreenCanvas.height !== height) {\r\n                this.offscreenCanvas.width = width;\r\n                this.offscreenCanvas.height = height;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Main render method\r\n     */\r\n    render(state, deltaTime, gestureTransform = null) {\r\n        // Performance marker: Frame start\r\n        if (this.performanceMonitor) {\r\n            this.performanceMonitor.markFrameStart();\r\n        }\r\n        const frameStartTime = performance.now();\r\n\r\n        // Get ambient dance transform and merge with gesture transform\r\n        const ambientTransform = this.ambientDanceAnimator.getTransform(deltaTime);\r\n        if (gestureTransform) {\r\n            // Merge transforms\r\n            gestureTransform.x = (gestureTransform.x || 0) + (ambientTransform.x || 0);\r\n            gestureTransform.y = (gestureTransform.y || 0) + (ambientTransform.y || 0);\r\n            gestureTransform.rotation = (gestureTransform.rotation || 0) + (ambientTransform.rotation || 0);\r\n            gestureTransform.scale = (gestureTransform.scale || 1) * (ambientTransform.scale || 1);\r\n        } else {\r\n            gestureTransform = ambientTransform;\r\n        }\r\n\r\n        // Store gestureTransform for use in other methods\r\n        this.gestureTransform = gestureTransform;\r\n\r\n        // Update offscreen canvas size if needed\r\n        this.updateOffscreenSize();\r\n        \r\n        // Get logical dimensions from canvasManager (not scaled by DPR)\r\n        const logicalWidth = this.canvasManager.width || this.canvas.width || 400;\r\n        const logicalHeight = this.canvasManager.height || this.canvas.height || 400;\r\n        \r\n        // Store original context and switch to offscreen for double buffering\r\n        const originalCtx = this.ctx;\r\n        this.ctx = this.offscreenCtx;\r\n        \r\n        // Clear offscreen canvas for fresh render\r\n        this.ctx.clearRect(0, 0, logicalWidth, logicalHeight);\r\n        \r\n        // Update undertone modifiers every frame during transitions\r\n        if (this.stateMachine && this.stateMachine.getWeightedUndertoneModifiers) {\r\n            const weightedModifier = this.stateMachine.getWeightedUndertoneModifiers();\r\n            if (weightedModifier) {\r\n                this.applyUndertoneModifiers(weightedModifier);\r\n            } else {\r\n                // Reset to defaults when no undertone\r\n                this.applyUndertoneModifiers(null);\r\n            }\r\n        }\r\n        \r\n        // Update color transition (if active)\r\n        if (this.colorTransition && this.colorTransition.active) {\r\n            this.updateColorTransition(deltaTime);\r\n        }\r\n        \r\n        // Update animation timers\r\n        this.updateTimers(deltaTime);\r\n        \r\n        // Update gaze offset\r\n        if (this.state.gazeTrackingEnabled) {\r\n            // When gaze tracking is enabled, follow mouse/touch\r\n            const smoothing = 0.15;\r\n            const maxOffset = 50; // Maximum pixels the orb can move\r\n            this.state.gazeOffset.x += (this.state.gazeTarget.x * maxOffset - this.state.gazeOffset.x) * smoothing;\r\n            this.state.gazeOffset.y += (this.state.gazeTarget.y * maxOffset - this.state.gazeOffset.y) * smoothing;\r\n        } else {\r\n            // When gaze tracking is disabled, return to center\r\n            const smoothing = 0.1;\r\n            this.state.gazeOffset.x += (0 - this.state.gazeOffset.x) * smoothing;\r\n            this.state.gazeOffset.y += (0 - this.state.gazeOffset.y) * smoothing;\r\n        }\r\n        \r\n        // Calculate dimensions - using logical size for proper scaling\r\n        const canvasSize = Math.min(logicalWidth, logicalHeight);\r\n        let centerX = logicalWidth / 2;\r\n        let centerY = logicalHeight / 2 - this.config.topOffset;\r\n        \r\n        // Apply vertical offset for certain emotions (like excited for exclamation mark)\r\n        if (state.properties && state.properties.verticalOffset) {\r\n            centerY = (logicalHeight / 2 - this.config.topOffset) + (logicalHeight * state.properties.verticalOffset);\r\n        }\r\n        \r\n        // Calculate global scale factor based on canvas size and baseScale config\r\n        this.scaleFactor = (canvasSize / this.config.referenceSize) * this.config.baseScale;\r\n        \r\n        // Apply gesture transform if present\r\n        let scaleMultiplier = 1;\r\n        let rotationAngle = 0;\r\n        let glowMultiplier = 1;\r\n        \r\n        if (gestureTransform) {\r\n            centerX += gestureTransform.x || 0;\r\n            centerY += gestureTransform.y || 0;\r\n            scaleMultiplier = gestureTransform.scale || 1;\r\n            rotationAngle = (gestureTransform.rotation || 0) * Math.PI / 180;\r\n            glowMultiplier = gestureTransform.glowIntensity || 1;\r\n        }\r\n\r\n        // Apply gesture animations (delegate to GestureAnimator)\r\n        const gestureTransforms = this.gestureAnimator.applyGestureAnimations();\r\n        if (gestureTransforms) {\r\n            centerX += gestureTransforms.offsetX || 0;\r\n            centerY += gestureTransforms.offsetY || 0;\r\n            scaleMultiplier *= gestureTransforms.scale || 1;\r\n            rotationAngle += (gestureTransforms.rotation || 0) * Math.PI / 180;\r\n            // DON'T MULTIPLY - just use the glow value directly to prevent accumulation\r\n            glowMultiplier = gestureTransforms.glow || 1;\r\n        }\r\n        \r\n        // Apply zen levitation - lazy floating when in zen state\r\n        if (this.state.emotion === 'zen' && this.zenTransition.phase === 'in') {\r\n            const time = Date.now() / 1000;\r\n            // Lazy vertical float - slow sine wave\r\n            const floatY = Math.sin(time * 0.3) * 15 * this.scaleFactor; // Very slow, 15px amplitude\r\n            // Gentle horizontal sway - even slower\r\n            const swayX = Math.sin(time * 0.2) * 8 * this.scaleFactor; // Subtle 8px sway\r\n            // Small rotation for ethereal effect\r\n            const floatRotation = Math.sin(time * 0.25) * 0.05; // ±3 degrees\r\n            \r\n            centerY += floatY;\r\n            centerX += swayX;\r\n            rotationAngle += floatRotation;\r\n        }\r\n        \r\n        // Apply sleep state modifications (with animated dimming)\r\n        let sleepOpacityMod = 1;\r\n        let sleepScaleMod = 1;\r\n        let glowOpacityMod = 1;\r\n        if (this.state.sleeping || this.state.emotion === 'resting' || isEffectActive('sleeping', this.state)) {\r\n            const sleepEffect = getEffect('sleeping');\r\n            if (sleepEffect) {\r\n                const dimming = sleepEffect.getDimmingValues();\r\n                // Use effect's dimming values\r\n                sleepOpacityMod = this.state.sleepDimness !== undefined ? this.state.sleepDimness : dimming.orbDimming;\r\n                glowOpacityMod = dimming.glowDimming; // Dim glow even more\r\n                sleepScaleMod = this.state.sleepScale !== undefined ? this.state.sleepScale : 0.9;\r\n            } else {\r\n                // Fallback values\r\n                sleepOpacityMod = this.state.sleepDimness !== undefined ? this.state.sleepDimness : 0.3;\r\n                glowOpacityMod = 0.2;\r\n                sleepScaleMod = this.state.sleepScale !== undefined ? this.state.sleepScale : 0.9;\r\n            }\r\n            this.state.breathRate = 0.5;  // Slower breathing\r\n            this.state.breathDepth = 0.15; // Deeper breaths\r\n        }\r\n        \r\n        // Calculate breathing factors - INVERSE for core and glow\r\n        // Use custom scale if set (for breathing exercises), otherwise use normal breathing\r\n        let coreBreathFactor, glowBreathFactor;\r\n        \r\n        if (this.state.customScale !== null) {\r\n            // Use custom scale directly for breathing exercises\r\n            coreBreathFactor = this.state.customScale;\r\n            glowBreathFactor = 1 + (this.state.customScale - 1) * 0.5; // Glow follows at half intensity\r\n        } else {\r\n            // Normal breathing behavior\r\n            // Zen uses full breath depth regardless of breathRate\r\n            const effectiveBreathDepth = this.state.emotion === 'zen' ? this.state.breathDepth : \r\n                                         this.state.breathDepth * this.state.breathRate;\r\n            // Get breathing scale from BreathingAnimator\r\n            const breathingScale = this.breathingAnimator.getBreathingScale();\r\n            coreBreathFactor = breathingScale;\r\n            glowBreathFactor = 1 - (breathingScale - 1) * 0.5; // Glow breathes opposite, less pronounced\r\n        }\r\n        \r\n        // Add nervous glow pulse if needed\r\n        if (this.state.undertone === 'nervous' && this.undertoneModifiers.nervous.glowPulse) {\r\n            const nervousPulse = Math.sin(Date.now() / 200) * this.undertoneModifiers.nervous.glowPulse; // Fast subtle pulse\r\n            glowBreathFactor *= (1 + nervousPulse);\r\n        }\r\n        \r\n        // Calculate core dimensions - using unified scale factor\r\n        const baseRadius = (this.config.referenceSize / this.config.coreSizeDivisor) * this.scaleFactor;\r\n        \r\n        // Apply emotion core size from state properties\r\n        const emotionSizeMult = (state.properties && state.properties.coreSize) ? state.properties.coreSize : 1.0;\r\n        \r\n        // Apply undertone size multiplier\r\n        const undertoneSizeMult = this.state.sizeMultiplier || 1.0;\r\n        \r\n        let coreRadius = baseRadius * emotionSizeMult * coreBreathFactor * scaleMultiplier * sleepScaleMod * undertoneSizeMult;\r\n        let glowRadius = baseRadius * this.config.glowMultiplier * glowBreathFactor * this.state.glowIntensity * scaleMultiplier * sleepScaleMod * undertoneSizeMult * glowMultiplier;  // Apply gesture glow multiplier\r\n\r\n        // Use state glow intensity directly multiplied by gesture glow\r\n        const effectiveGlowIntensity = this.state.glowIntensity * glowMultiplier;\r\n        \r\n        \r\n        // Apply blinking (only when not sleeping or zen)\r\n        if (!this.state.sleeping && this.state.emotion !== 'zen') {\r\n            const blinkScale = this.eyeRenderer.getBlinkScale();\r\n            coreRadius *= blinkScale; // Apply blink squish\r\n        }\r\n        \r\n        // Apply jitter if needed (anger, fear, or undertone jitter)\r\n        let jitterX = 0, jitterY = 0;\r\n        const jitterAmount = this.state.jitterAmount || 0;\r\n        \r\n        // Handle episodic effects for undertones\r\n        if (this.currentUndertone && this.episodicEffects[this.currentUndertone]) {\r\n            const episode = this.episodicEffects[this.currentUndertone];\r\n            const modifier = this.undertoneModifiers[this.currentUndertone];\r\n            const now = performance.now();\r\n            \r\n            // Check if it's time to trigger a new episode\r\n            if (!episode.active && now >= episode.nextTrigger) {\r\n                episode.active = true;\r\n                episode.startTime = now;\r\n                \r\n                // Set episode parameters based on undertone type\r\n                switch(this.currentUndertone) {\r\n                    case 'nervous':\r\n                        episode.duration = 500 + Math.random() * 500; // 0.5-1 second\r\n                        episode.intensity = 2 + Math.random(); // 2-3px flutter\r\n                        episode.nextTrigger = now + 3000 + Math.random() * 2000; // 3-5 seconds\r\n                        break;\r\n                    case 'confident':\r\n                        episode.duration = 1000 + Math.random() * 1000; // 1-2 seconds\r\n                        episode.intensity = 0.15; // 15% size expansion\r\n                        episode.nextTrigger = now + 4000 + Math.random() * 2000; // 4-6 seconds\r\n                        break;\r\n                    case 'tired':\r\n                        episode.duration = 1000 + Math.random() * 2000; // 1-3 seconds\r\n                        episode.intensity = 0.2; // 20% size reduction\r\n                        episode.nextTrigger = now + 5000 + Math.random() * 2000; // 5-7 seconds\r\n                        break;\r\n                    case 'intense':\r\n                        episode.duration = 500 + Math.random() * 500; // 0.5-1 second\r\n                        episode.intensity = 0.5; // 50% glow boost, 5% size shrink\r\n                        episode.nextTrigger = now + 3000 + Math.random() * 3000; // 3-6 seconds\r\n                        break;\r\n                    case 'subdued':\r\n                        episode.duration = 2000 + Math.random() * 1000; // 2-3 seconds\r\n                        episode.intensity = 0.3; // 30% glow dim, 10% size shrink\r\n                        episode.nextTrigger = now + 4000 + Math.random() * 3000; // 4-7 seconds\r\n                        break;\r\n                }\r\n            }\r\n            \r\n            // Apply episode effects if active\r\n            if (episode.active) {\r\n                const elapsed = now - episode.startTime;\r\n                \r\n                if (elapsed < episode.duration) {\r\n                    const progress = elapsed / episode.duration;\r\n                    \r\n                    // Apply different effects based on undertone\r\n                    switch(this.currentUndertone) {\r\n                        case 'nervous':\r\n                            // Quick shiver that settles\r\n                            const damping = 1 - progress;\r\n                            const frequency = 15;\r\n                            const flutter = Math.sin(progress * Math.PI * frequency) * damping;\r\n                            jitterX = flutter * episode.intensity;\r\n                            jitterY = flutter * episode.intensity * 0.7;\r\n                            break;\r\n                            \r\n                        case 'confident':\r\n                            // Smooth chest puff that settles\r\n                            const puffCurve = Math.sin(progress * Math.PI); // Smooth rise and fall\r\n                            coreRadius *= (1 + episode.intensity * puffCurve);\r\n                            glowRadius *= (1 + episode.intensity * 0.5 * puffCurve);\r\n                            break;\r\n                            \r\n                        case 'tired':\r\n                            // Drowsy sag with slow recovery\r\n                            const sagCurve = Math.sin(progress * Math.PI * 0.5); // Slow droop\r\n                            coreRadius *= (1 - episode.intensity * sagCurve);\r\n                            // Also affect vertical position slightly\r\n                            jitterY += sagCurve * 5; // Slight downward sag\r\n                            break;\r\n                            \r\n                        case 'intense':\r\n                            // Sharp contraction with glow surge\r\n                            const focusCurve = 1 - Math.cos(progress * Math.PI); // Quick in-out\r\n                            coreRadius *= (1 - 0.05 * focusCurve); // 5% shrink\r\n                            glowRadius *= (1 + episode.intensity * focusCurve); // 50% glow boost\r\n                            break;\r\n                            \r\n                        case 'subdued':\r\n                            // Gentle inward pull\r\n                            const withdrawCurve = Math.sin(progress * Math.PI * 0.5); // Slow pull\r\n                            coreRadius *= (1 - 0.1 * withdrawCurve); // 10% shrink\r\n                            glowRadius *= (1 - episode.intensity * withdrawCurve); // 30% glow dim\r\n                            break;\r\n                    }\r\n                } else {\r\n                    // Episode finished\r\n                    episode.active = false;\r\n                }\r\n            }\r\n        } else if (this.state.coreJitter || jitterAmount > 0) {\r\n            // Regular jitter for other emotions\r\n            const jitterStrength = Math.max(jitterAmount, this.state.coreJitter ? this.scaleValue(2) : 0);\r\n            jitterX = (Math.random() - 0.5) * jitterStrength;\r\n            jitterY = (Math.random() - 0.5) * jitterStrength;\r\n        }\r\n        \r\n        // Calculate positions with gaze offset\r\n        const coreX = centerX + this.state.gazeOffset.x + jitterX;\r\n        const coreY = centerY + this.state.gazeOffset.y + jitterY;\r\n        \r\n        // Check if brake is active and update rotation accordingly\r\n        const now = performance.now();\r\n\r\n        if (this.rotationBrake && this.rotationBrake.isBraking()) {\r\n            // Brake is active - let it control rotation\r\n            const brakeUpdate = this.rotationBrake.updateBrake(now);\r\n            if (brakeUpdate) {\r\n                this.state.manualRotation = brakeUpdate.rotation;\r\n                this.state.rotationSpeed = brakeUpdate.complete ? 0 : brakeUpdate.speed;\r\n            }\r\n        } else if (this.state.rotationSpeed !== 0) {\r\n            // Normal rotation update - just add velocity each frame (DEGREES)\r\n            this.state.manualRotation += this.state.rotationSpeed;\r\n        }\r\n\r\n        // Calculate total rotation (gestures + manual rotation)\r\n        // Convert manual rotation from degrees to radians for rendering\r\n        const totalRotation = rotationAngle + (this.state.manualRotation * Math.PI / 180);\r\n\r\n        // Apply rotation if present\r\n        if (totalRotation !== 0) {\r\n            this.ctx.save();\r\n            this.ctx.translate(coreX, coreY);\r\n            this.ctx.rotate(totalRotation);\r\n            this.ctx.translate(-coreX, -coreY);\r\n        }\r\n        \r\n        // Render glow with visual effects\r\n        if (isEffectActive('recording-glow', this.state)) {\r\n            // Recording takes precedence over normal glow\r\n            applyEffect('recording-glow', this.ctx, {\r\n                x: coreX,\r\n                y: coreY,\r\n                radius: glowRadius,\r\n                deltaTime\r\n            });\r\n        } else if (isEffectActive('zen-vortex', this.state)) {\r\n            // Zen vortex handles its own visuals\r\n            // Skip normal glow to prevent flash\r\n        } else {\r\n            // Normal glow with sleep dimming\r\n            if (this.state.sleeping || this.state.emotion === 'resting' || isEffectActive('sleeping', this.state)) {\r\n                this.ctx.save();\r\n                this.ctx.globalAlpha = glowOpacityMod;\r\n                this.glowRenderer.renderGlow(coreX, coreY, glowRadius, { intensity: effectiveGlowIntensity });\r\n                this.ctx.restore();\r\n            } else {\r\n                this.glowRenderer.renderGlow(coreX, coreY, glowRadius, { intensity: effectiveGlowIntensity });\r\n            }\r\n        }\r\n        \r\n        // Render flash wave if present\r\n        if (gestureTransforms && gestureTransforms.flashWave) {\r\n            const wave = gestureTransforms.flashWave;\r\n            const ctx = this.ctx;\r\n            \r\n            ctx.save();\r\n            ctx.globalCompositeOperation = 'lighter';\r\n            \r\n            // Create a ring gradient for the wave\r\n            const innerR = coreRadius * wave.innerRadius;\r\n            const outerR = coreRadius * wave.outerRadius;\r\n            \r\n            if (outerR > innerR) {\r\n                // Use cached gradient for flash wave\r\n                const gradient = gradientCache.getRadialGradient(\r\n                    ctx, coreX, coreY, innerR, coreX, coreY, outerR,\r\n                    [\r\n                        { offset: 0, color: 'rgba(255, 255, 255, 0)' },\r\n                        { offset: 0.2, color: `rgba(255, 255, 255, ${wave.intensity * 0.15})` },\r\n                        { offset: 0.5, color: `rgba(255, 255, 255, ${wave.intensity * 0.25})` }, // Peak in center\r\n                        { offset: 0.8, color: `rgba(255, 255, 255, ${wave.intensity * 0.15})` },\r\n                        { offset: 1, color: 'rgba(255, 255, 255, 0)' }\r\n                    ]\r\n                );\r\n\r\n                ctx.fillStyle = gradient;\r\n                ctx.beginPath();\r\n                ctx.arc(coreX, coreY, outerR, 0, Math.PI * 2);\r\n                ctx.arc(coreX, coreY, Math.max(0, innerR), 0, Math.PI * 2, true);\r\n                ctx.fill();\r\n            }\r\n            \r\n            ctx.restore();\r\n        }\r\n        \r\n        // Apply speaking pulse effect\r\n        if (isEffectActive('speaking-pulse', this.state)) {\r\n            applyEffect('speaking-pulse', this.ctx, {\r\n                x: coreX,\r\n                y: coreY,\r\n                radius: coreRadius,\r\n                audioLevel: this.state.audioLevel || 0,\r\n                deltaTime\r\n            });\r\n        }\r\n        \r\n        // Recording indicator will be drawn after all transforms are restored\r\n        \r\n        // Apply sleep opacity to core\r\n        if (this.state.sleeping || this.state.emotion === 'resting') {\r\n            this.ctx.globalAlpha = sleepOpacityMod;\r\n        }\r\n        \r\n        // Render core (will cover REC if they overlap)\r\n        // Delegate core rendering to CoreRenderer\r\n        // First update the shape morpher if available\r\n        let shapePoints = null;\r\n        let currentShadow = null;\r\n        if (this.shapeMorpher) {\r\n            this.shapeMorpher.update();\r\n            // Get the canvas points relative to center (0,0) since CoreRenderer will translate\r\n            shapePoints = this.shapeMorpher.getCanvasPoints(0, 0, coreRadius);\r\n            currentShadow = this.shapeMorpher.getCurrentShadow();\r\n        }\r\n        \r\n        // Render sun effects BEFORE core (so they appear behind)\r\n        let renderingSunEffects = false;\r\n        if (currentShadow && (currentShadow.type === 'sun' || currentShadow.type === 'solar-hybrid')) {\r\n            this.renderSunEffects(coreX, coreY, coreRadius, currentShadow);\r\n            renderingSunEffects = true;\r\n        }\r\n        \r\n        // Drop shadow removed - was causing dimming\r\n        \r\n        // Update core rotation based on BPM (like a record player)\r\n        // Only rotate if BPM is greater than 0 (rhythm is active)\r\n        // Shapes that should NOT rotate: moon, heart\r\n        \r\n        // Render the core shape with rotation\r\n        // Note: We already applied rotation to the canvas, but CoreRenderer does its own transform\r\n        // So we need to pass the rotation value to it\r\n        this.coreRenderer.renderCore(coreX, coreY, coreRadius, {\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            rotation: totalRotation,\r\n            shapePoints: shapePoints\r\n        });\r\n        \r\n        // Update and render sparkles BEFORE moon shadow so they don't cover it\r\n        if (this.specialEffects) {\r\n            this.specialEffects.update(deltaTime);\r\n            this.specialEffects.renderSparkles();\r\n        }\r\n        \r\n        // Check if we're dealing with solar transitions\r\n        const currentShape = this.shapeMorpher ? this.shapeMorpher.currentShape : null;\r\n        const targetShape = this.shapeMorpher ? this.shapeMorpher.targetShape : null;\r\n        const isTransitioningToSolar = this.shapeMorpher && targetShape === 'solar' && this.shapeMorpher.isTransitioning;\r\n        const isTransitioningFromSolar = this.shapeMorpher && currentShape === 'solar' && this.shapeMorpher.isTransitioning;\r\n        const isAtSolar = currentShadow && currentShadow.type === 'solar-hybrid';\r\n        \r\n        // Check specific transition directions\r\n        const isSolarToMoon = this.shapeMorpher && this.shapeMorpher.isTransitioning &&\r\n            currentShape === 'solar' && targetShape === 'moon';\r\n        const isMoonToSolar = this.shapeMorpher && this.shapeMorpher.isTransitioning &&\r\n            currentShape === 'moon' && targetShape === 'solar';\r\n        \r\n        // Render moon/lunar shadows AFTER core AND sparkles (as top overlay)\r\n        // Always render moon shadow EXCEPT when transitioning FROM moon TO solar\r\n        if (currentShadow && (currentShadow.type === 'crescent' || currentShadow.type === 'lunar') && \r\n            !isMoonToSolar) {\r\n            // Shadow is rendered in the already-rotated coordinate space\r\n            this.renderMoonShadow(coreX, coreY, coreRadius, currentShadow, shapePoints, false, 0);\r\n        }\r\n        \r\n        // For solar-hybrid, render lunar overlay on top of sun\r\n        // Skip when transitioning FROM solar TO moon (let moon's shadow handle it)\r\n        if (((isAtSolar && currentShadow.lunarOverlay) || isTransitioningToSolar || isTransitioningFromSolar) && \r\n            !isSolarToMoon) {\r\n            // Use the lunar overlay from solar definition\r\n            const lunarShadow = (isAtSolar && currentShadow.lunarOverlay) ? currentShadow.lunarOverlay : {\r\n                type: 'lunar',\r\n                coverage: 1.0,\r\n                color: 'rgba(0, 0, 0, 1.0)',\r\n                progression: 'center'\r\n            };\r\n            \r\n            // Calculate shadow offset for Bailey's Beads\r\n            let shadowOffsetX = 0;\r\n            let shadowOffsetY = 0;\r\n            let morphProgress = 0;\r\n            \r\n            if (this.shapeMorpher) {\r\n                morphProgress = this.shapeMorpher.getProgress();\r\n                const currentShape = this.shapeMorpher.currentShape;\r\n                const targetShape = this.shapeMorpher.targetShape;\r\n                const fromLunar = currentShape === 'lunar' || currentShape === 'eclipse';\r\n                const toLunar = targetShape === 'lunar' || targetShape === 'eclipse';\r\n                \r\n                const slideDistance = coreRadius * 2.5;\r\n                \r\n                if (isTransitioningToSolar && morphProgress < 1) {\r\n                    // Shadow sliding in from bottom-left\r\n                    shadowOffsetX = -slideDistance * (1 - morphProgress);\r\n                    shadowOffsetY = slideDistance * (1 - morphProgress);\r\n                } else if (isTransitioningFromSolar && morphProgress < 1) {\r\n                    // Shadow sliding out to top-right\r\n                    shadowOffsetX = slideDistance * morphProgress;\r\n                    shadowOffsetY = -slideDistance * morphProgress;\r\n                }\r\n            }\r\n            \r\n            // Render the shadow\r\n            this.renderMoonShadow(coreX, coreY, coreRadius, lunarShadow, shapePoints, true);\r\n            \r\n            // Render Bailey's Beads during transitions\r\n            // Show beads when transitioning TO solar (which will have rays) or FROM solar (which had rays)\r\n            // But only if we're actually rendering or about to render sun effects\r\n            const willHaveSunEffects = isTransitioningToSolar || renderingSunEffects;\r\n            \r\n            if ((isTransitioningToSolar || isTransitioningFromSolar) && willHaveSunEffects) {\r\n                this.renderBaileysBeads(coreX, coreY, coreRadius, shadowOffsetX, shadowOffsetY, morphProgress, isTransitioningToSolar, true);\r\n                \r\n                // Trigger chromatic aberration when shadow is near center\r\n                const shadowNearCenter = Math.abs(shadowOffsetX) < 30 && Math.abs(shadowOffsetY) < 30;\r\n                if (shadowNearCenter && this.specialEffects) {\r\n                    // Stronger aberration as shadow gets closer to center\r\n                    const distance = Math.sqrt(shadowOffsetX * shadowOffsetX + shadowOffsetY * shadowOffsetY);\r\n                    const intensity = Math.max(0.1, 0.5 * (1 - distance / 30));\r\n                    this.specialEffects.triggerChromaticAberration(intensity);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Reset alpha\r\n        if (this.state.sleeping || this.state.emotion === 'resting') {\r\n            this.ctx.globalAlpha = 1;\r\n        }\r\n        \r\n        // Restore context if rotated\r\n        if (totalRotation !== 0) {\r\n            this.ctx.restore();\r\n        }\r\n        \r\n        // Recording indicator is now handled by the recording-glow effect module\r\n        // which draws a small indicator in the corner\r\n        \r\n        // Add sleep indicator if sleeping\r\n        if (this.state.sleeping) {\r\n            this.renderSleepIndicator(centerX, centerY - glowRadius - this.scaleValue(20), deltaTime);\r\n        }\r\n        \r\n        // Restore original context AFTER all rendering is done\r\n        this.ctx = originalCtx;\r\n        \r\n        // Simple blit - chromatic aberration is now handled via CSS filters\r\n        originalCtx.drawImage(this.offscreenCanvas, 0, 0);\r\n        \r\n        // Draw recording indicator on TOP of everything, with no transforms\r\n        if (isEffectActive('recording-glow', this.state)) {\r\n            const recordingEffect = getEffect('recording-glow');\r\n            if (recordingEffect && recordingEffect.drawRecordingIndicator) {\r\n                // Use original context to draw on top of the blitted image\r\n                recordingEffect.drawRecordingIndicator(originalCtx, this.canvas.width, this.canvas.height);\r\n            }\r\n        }\r\n\r\n        // Performance marker: Frame end\r\n        const frameEndTime = performance.now();\r\n        const frameTime = frameEndTime - frameStartTime;\r\n        if (this.performanceMonitor) {\r\n            this.performanceMonitor.markFrameEnd();\r\n            this.performanceMonitor.recordFrameTime(frameTime);\r\n        }\r\n    }\r\n    \r\n    // renderGlow method removed - now handled by GlowRenderer module\r\n    \r\n    // getCachedGlow method removed - now handled by GlowRenderer module\r\n    \r\n    /**\r\n     * Render recording glow (pulsating red)\r\n     */\r\n    renderRecordingGlow(x, y, radius, intensity) {\r\n        // Get canvas dimensions with fallbacks\r\n        const canvasWidth = this.canvas?.width || 600;\r\n        const canvasHeight = this.canvas?.height || 600;\r\n        \r\n        // Limit radius to prevent clipping at canvas boundaries\r\n        const maxRadius = Math.min(radius, \r\n            x - 10,  // Distance to left edge\r\n            y - 10,  // Distance to top edge\r\n            canvasWidth - x - 10,  // Distance to right edge\r\n            canvasHeight - y - 10  // Distance to bottom edge\r\n        );\r\n        const safeRadius = Math.max(50, maxRadius); // Ensure minimum radius\r\n        \r\n        // Use cached gradient for the recording glow\r\n        const gradient = gradientCache.getRadialGradient(\r\n            this.ctx, x, y, 0, x, y, safeRadius,\r\n            [\r\n                { offset: 0, color: this.hexToRgba('#FF0000', 0.7 * intensity) },\r\n                { offset: 0.3, color: this.hexToRgba('#FF0000', 0.5 * intensity) },\r\n                { offset: 0.6, color: this.hexToRgba('#FF0000', 0.3 * intensity) },\r\n                { offset: 0.85, color: this.hexToRgba('#FF0000', 0.1 * intensity) }, // Fade earlier\r\n                { offset: 1, color: this.hexToRgba('#FF0000', 0) }\r\n            ]\r\n        );\r\n        \r\n        // Draw the recording glow\r\n        this.ctx.fillStyle = gradient;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, safeRadius, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n    }\r\n    \r\n\r\n    /**\r\n     * Render drop shadow for depth\r\n     */\r\n    renderDropShadow(x, y, radius, shapePoints) {\r\n        const ctx = this.ctx;\r\n        \r\n        // Skip shadow during rapid animations for better performance\r\n        const isAnimating = this.shapeMorpher && this.shapeMorpher.isTransitioning;\r\n        const hasAudioDeformation = this.shapeMorpher && \r\n                                   (this.shapeMorpher.audioDeformation > 0.1 || \r\n                                    this.shapeMorpher.vocalEnergy > 0.1);\r\n        \r\n        if (!hasAudioDeformation && (!isAnimating || this.shapeMorpher.morphProgress > 0.8)) {\r\n            ctx.save();\r\n            ctx.translate(x, y);\r\n            \r\n            const shadowOffset = this.scaleValue(2);\r\n            ctx.translate(0, shadowOffset);\r\n            \r\n            // Use simpler shadow for complex deformed shapes\r\n            if (shapePoints && shapePoints.length > 32) {\r\n                // Simple dark circle shadow when shape is complex\r\n                ctx.fillStyle = 'rgba(0, 0, 0, 0.15)';\r\n                ctx.beginPath();\r\n                ctx.arc(0, 0, radius * 1.05, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            } else {\r\n                // Shadow gradient - dark center fading to transparent\r\n                const shadowGradient = ctx.createRadialGradient(0, 0, radius * 0.7, 0, 0, radius * 1.2);\r\n                shadowGradient.addColorStop(0, 'rgba(0, 0, 0, 0.2)');\r\n                shadowGradient.addColorStop(0.8, 'rgba(0, 0, 0, 0.1)');\r\n                shadowGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n                \r\n                ctx.fillStyle = shadowGradient;\r\n                ctx.beginPath();\r\n                if (shapePoints) {\r\n                    // Scale points for shadow\r\n                    const scale = 1.1;\r\n                    const step = shapePoints.length > 20 ? 2 : 1; // Skip points for performance\r\n                    ctx.moveTo(shapePoints[0].x * scale, shapePoints[0].y * scale);\r\n                    for (let i = step; i < shapePoints.length; i += step) {\r\n                        ctx.lineTo(shapePoints[i].x * scale, shapePoints[i].y * scale);\r\n                    }\r\n                    ctx.closePath();\r\n                } else {\r\n                    ctx.arc(0, 0, radius * 1.1, 0, Math.PI * 2);\r\n                }\r\n                ctx.fill();\r\n            }\r\n            ctx.restore();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Render sun effects (corona, rays, etc)\r\n     */\r\n    renderSunEffects(x, y, radius, shadow) {\r\n        const ctx = this.ctx;\r\n        const time = Date.now() / 100;\r\n        \r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        \r\n        // 1. Surface texture - turbulent plasma\r\n        if (shadow.texture && (shadow.textureOpacity === undefined || shadow.textureOpacity > 0)) {\r\n            ctx.save();\r\n            ctx.globalCompositeOperation = 'screen';\r\n            ctx.globalAlpha = shadow.textureOpacity !== undefined ? shadow.textureOpacity : 1;\r\n            \r\n            const offset = time * 0.05 * (shadow.turbulence || 0.3) / 0.3;\r\n            const textureGradient = ctx.createRadialGradient(\r\n                Math.sin(offset) * radius * 0.15,\r\n                Math.cos(offset * 0.7) * radius * 0.15,\r\n                radius * 0.2,\r\n                0, 0, radius\r\n            );\r\n            textureGradient.addColorStop(0, 'rgba(255, 255, 200, 0)');\r\n            textureGradient.addColorStop(0.4, 'rgba(255, 200, 100, 0.1)');\r\n            textureGradient.addColorStop(0.7, 'rgba(255, 150, 50, 0.08)');\r\n            textureGradient.addColorStop(1, 'rgba(255, 100, 30, 0.05)');\r\n            \r\n            ctx.fillStyle = textureGradient;\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, radius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n            \r\n            ctx.restore();\r\n        }\r\n        \r\n        // 2. Bright corona layers\r\n        const coronaOpacity = shadow.coronaOpacity !== undefined ? shadow.coronaOpacity : 1;\r\n        if (coronaOpacity > 0) {\r\n            ctx.save();\r\n            ctx.globalCompositeOperation = 'screen';\r\n            \r\n            // Inner bright glow\r\n            const innerGlow = ctx.createRadialGradient(0, 0, radius * 0.5, 0, 0, radius * 1.1);\r\n            innerGlow.addColorStop(0, `rgba(255, 255, 255, ${0.8 * coronaOpacity})`);\r\n            innerGlow.addColorStop(0.3, `rgba(255, 250, 200, ${0.6 * coronaOpacity})`);\r\n            innerGlow.addColorStop(0.5, `rgba(255, 200, 100, ${0.4 * coronaOpacity})`);\r\n            innerGlow.addColorStop(0.7, `rgba(255, 150, 50, ${0.2 * coronaOpacity})`);\r\n            innerGlow.addColorStop(1, 'rgba(255, 100, 20, 0)');\r\n            \r\n            ctx.fillStyle = innerGlow;\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, radius * 1.1, 0, Math.PI * 2);\r\n            ctx.fill();\r\n            \r\n            // Outer corona with animation\r\n            for (let i = 0; i < 2; i++) {\r\n                const scale = 1.3 + i * 0.4;\r\n                const opacity = (0.35 - i * 0.15) * coronaOpacity;\r\n                const wobble = Math.sin(time * 0.1 + i) * 0.05;\r\n                \r\n                const coronaGradient = ctx.createRadialGradient(\r\n                    0, 0, radius * (0.9 + wobble), \r\n                    0, 0, radius * (scale + wobble)\r\n                );\r\n                coronaGradient.addColorStop(0, 'rgba(255, 255, 200, 0)');\r\n                coronaGradient.addColorStop(0.4, `rgba(255, 200, 100, ${opacity * 0.5})`);\r\n                coronaGradient.addColorStop(0.7, `rgba(255, 150, 50, ${opacity})`);\r\n                coronaGradient.addColorStop(0.9, `rgba(255, 100, 30, ${opacity * 0.5})`);\r\n                coronaGradient.addColorStop(1, 'rgba(255, 50, 10, 0)');\r\n                \r\n                ctx.fillStyle = coronaGradient;\r\n                ctx.beginPath();\r\n                ctx.arc(0, 0, radius * (scale + wobble), 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n            \r\n            ctx.restore();\r\n        }\r\n        \r\n        // 3. Optimized ethereal flame pennants - TONS of rays\r\n        if (shadow.flares) {\r\n            ctx.save();\r\n            \r\n            // Pre-calculate common values\r\n            const wave1 = Math.sin(time * 0.08);\r\n            const wave2 = Math.sin(time * 0.12);\r\n            const wave3 = Math.sin(time * 0.16);\r\n            \r\n            // Create single gradient for all flames\r\n            const grad = ctx.createLinearGradient(0, -radius, 0, -radius * 3);\r\n            grad.addColorStop(0, 'rgba(255, 255, 230, 0.4)');\r\n            grad.addColorStop(0.2, 'rgba(255, 220, 150, 0.25)');\r\n            grad.addColorStop(0.5, 'rgba(255, 180, 80, 0.15)');\r\n            grad.addColorStop(0.8, 'rgba(255, 120, 40, 0.08)');\r\n            grad.addColorStop(1, 'rgba(255, 60, 20, 0)');\r\n            \r\n            ctx.fillStyle = grad;\r\n            ctx.globalCompositeOperation = 'screen';\r\n            \r\n            // Single path for ALL flames\r\n            ctx.beginPath();\r\n            \r\n            // Helper function for flame shape\r\n            const addFlame = (angle, length, width, wave) => {\r\n                const cos = Math.cos(angle);\r\n                const sin = Math.sin(angle);\r\n                const baseX = cos * radius;\r\n                const baseY = sin * radius;\r\n                const tipX = cos * (radius + length);\r\n                const tipY = sin * (radius + length);\r\n                const perpX = -sin * width * 0.5;\r\n                const perpY = cos * width * 0.5;\r\n                const waveOffset = wave * width * 0.3;\r\n                \r\n                // Simple triangle with slight curve\r\n                ctx.moveTo(baseX - perpX, baseY - perpY);\r\n                ctx.quadraticCurveTo(\r\n                    (baseX + tipX) * 0.5 + perpX * waveOffset,\r\n                    (baseY + tipY) * 0.5 + perpY * waveOffset,\r\n                    tipX, tipY\r\n                );\r\n                ctx.quadraticCurveTo(\r\n                    (baseX + tipX) * 0.5 - perpX * waveOffset,\r\n                    (baseY + tipY) * 0.5 - perpY * waveOffset,\r\n                    baseX + perpX, baseY + perpY\r\n                );\r\n            };\r\n            \r\n            // Layer 1: Long primary rays (8)\r\n            for (let i = 0; i < 8; i++) {\r\n                const angle = (i / 8) * Math.PI * 2 + wave1 * 0.1;\r\n                const length = radius * (1.8 + Math.sin(time * 0.1 + i * 0.5) * 0.4);\r\n                const width = radius * 0.18;\r\n                const wave = Math.sin(time * 0.15 + i);\r\n                addFlame(angle, length, width, wave);\r\n            }\r\n            \r\n            // Layer 2: Medium rays between primaries (12)\r\n            for (let i = 0; i < 12; i++) {\r\n                const angle = ((i + 0.5) / 12) * Math.PI * 2 + wave2 * 0.08;\r\n                const length = radius * (1.2 + Math.sin(time * 0.13 + i * 0.7) * 0.3);\r\n                const width = radius * 0.12;\r\n                const wave = Math.sin(time * 0.18 + i * 1.2);\r\n                addFlame(angle, length, width, wave);\r\n            }\r\n            \r\n            // Layer 3: Short rays filling gaps (15)\r\n            for (let i = 0; i < 15; i++) {\r\n                const angle = (i / 15) * Math.PI * 2 + wave3 * 0.05;\r\n                const length = radius * (0.7 + Math.sin(time * 0.17 + i * 0.9) * 0.25);\r\n                const width = radius * 0.08;\r\n                const wave = Math.sin(time * 0.2 + i * 1.5);\r\n                addFlame(angle, length, width, wave);\r\n            }\r\n            \r\n            // Layer 4: Tiny rays for density (15)\r\n            for (let i = 0; i < 15; i++) {\r\n                const angle = ((i + 0.25) / 15) * Math.PI * 2;\r\n                const length = radius * (0.4 + Math.sin(time * 0.22 + i) * 0.2);\r\n                const width = radius * 0.06;\r\n                // Simple triangles for tiny rays\r\n                const cos = Math.cos(angle);\r\n                const sin = Math.sin(angle);\r\n                const baseX = cos * radius;\r\n                const baseY = sin * radius;\r\n                const tipX = cos * (radius + length);\r\n                const tipY = sin * (radius + length);\r\n                const perpX = -sin * width * 0.5;\r\n                const perpY = cos * width * 0.5;\r\n                \r\n                ctx.moveTo(baseX - perpX, baseY - perpY);\r\n                ctx.lineTo(tipX, tipY);\r\n                ctx.lineTo(baseX + perpX, baseY + perpY);\r\n            }\r\n            \r\n            // Single fill operation for all rays!\r\n            ctx.fill();\r\n            ctx.restore();\r\n        }\r\n        \r\n        // 4. Bright rim lighting\r\n        const rimGradient = ctx.createRadialGradient(0, 0, radius * 0.95, 0, 0, radius * 1.05);\r\n        rimGradient.addColorStop(0, 'rgba(255, 255, 255, 0)');\r\n        rimGradient.addColorStop(0.7, 'rgba(255, 255, 200, 0.2)');\r\n        rimGradient.addColorStop(0.9, 'rgba(255, 200, 100, 0.5)');\r\n        rimGradient.addColorStop(1, 'rgba(255, 150, 50, 0.3)');\r\n        \r\n        ctx.fillStyle = rimGradient;\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, radius * 1.05, 0, Math.PI * 2);\r\n        ctx.fill();\r\n        \r\n        ctx.restore();\r\n    }\r\n    \r\n    /**\r\n     * Render Bailey's Beads for solar eclipse\r\n     */\r\n    renderBaileysBeads(x, y, radius, shadowOffsetX, shadowOffsetY, morphProgress, isTransitioningToSolar, hasSunRays) {\r\n        const ctx = this.ctx;\r\n        \r\n        // NEVER show beads if there are no sun rays visible\r\n        if (!hasSunRays) {\r\n            this._beadStartTime = null;\r\n            return;\r\n        }\r\n        \r\n        // Check if this is a lunar-solar transition (shadow stays centered)\r\n        const isLunarSolarTransition = Math.abs(shadowOffsetX) < 1 && Math.abs(shadowOffsetY) < 1;\r\n        \r\n        // Show beads when shadow is approaching center OR for lunar-solar transitions\r\n        // Different thresholds for entering vs leaving\r\n        const threshold = isTransitioningToSolar ? 30 : 15; // Disappear faster when leaving\r\n        const shadowNearCenter = Math.abs(shadowOffsetX) < threshold && Math.abs(shadowOffsetY) < threshold;\r\n        \r\n        if (!shadowNearCenter && !isLunarSolarTransition) {\r\n            // Reset when not near center (unless it's lunar-solar)\r\n            this._beadStartTime = null;\r\n            return;\r\n        }\r\n        \r\n        // Generate different beads for entering vs leaving\r\n        const beadKey = isTransitioningToSolar ? 'entering' : 'leaving';\r\n        \r\n        // Check if we need to generate new beads (first time shadow centers for this transition)\r\n        if (!this._beadStartTime) {\r\n            const beadCount = Math.floor(Math.random() * 4) + 1; // 1-4 beads\r\n            \r\n            this._currentBeads = [];\r\n            \r\n            // Create beads with random order\r\n            const angles = [];\r\n            for (let i = 0; i < beadCount; i++) {\r\n                angles.push(Math.random() * Math.PI * 2);\r\n            }\r\n            \r\n            // Shuffle the order they'll appear\r\n            const order = Array.from({length: beadCount}, (_, i) => i);\r\n            for (let i = order.length - 1; i > 0; i--) {\r\n                const j = Math.floor(Math.random() * (i + 1));\r\n                [order[i], order[j]] = [order[j], order[i]];\r\n            }\r\n            \r\n            for (let i = 0; i < beadCount; i++) {\r\n                this._currentBeads.push({\r\n                    angle: angles[i],\r\n                    size: 3 + Math.random() * 5, // Random size 3-8\r\n                    order: order[i], // Order in sequence\r\n                    delay: order[i] * 200 // 200ms between each bead\r\n                });\r\n            }\r\n            \r\n            this._beadStartTime = Date.now();\r\n        }\r\n        \r\n        const elapsedTime = Date.now() - this._beadStartTime;\r\n        \r\n        // Render the beads as chromatic lens flares (one at a time)\r\n        const beads = this._currentBeads || [];\r\n        \r\n        beads.forEach(bead => {\r\n            // Check if this bead should be visible yet\r\n            if (elapsedTime < bead.delay) return;\r\n            \r\n            // Calculate fade in (300ms fade)\r\n            const beadAge = elapsedTime - bead.delay;\r\n            const fadeInDuration = 300;\r\n            const opacity = Math.min(1, beadAge / fadeInDuration);\r\n            \r\n            // Calculate bead position on the edge of the sun (not shadow)\r\n            const beadX = x + Math.cos(bead.angle) * radius;\r\n            const beadY = y + Math.sin(bead.angle) * radius;\r\n            \r\n            ctx.save();\r\n            ctx.translate(beadX, beadY);\r\n            ctx.globalAlpha = opacity;\r\n            \r\n            // Draw chromatic aberration lens flare\r\n            const size = this.scaleValue(bead.size);\r\n            \r\n            // Chromatic layers - RGB separated for aberration effect\r\n            const colors = [\r\n                { color: `rgba(255, 100, 100, ${0.6 * opacity})`, offset: -2 },  // Red\r\n                { color: `rgba(100, 255, 100, ${0.6 * opacity})`, offset: 0 },   // Green  \r\n                { color: `rgba(100, 100, 255, ${0.6 * opacity})`, offset: 2 }    // Blue\r\n            ];\r\n            \r\n            ctx.globalCompositeOperation = 'screen';\r\n            \r\n            colors.forEach(({ color, offset }) => {\r\n                // Create radial gradient for each color channel\r\n                const gradient = ctx.createRadialGradient(\r\n                    offset, offset, 0,\r\n                    offset, offset, size * 2\r\n                );\r\n                \r\n                gradient.addColorStop(0, color);\r\n                gradient.addColorStop(0.2, color.replace(`${0.6 * opacity}`, `${0.4 * opacity}`));\r\n                gradient.addColorStop(0.5, color.replace(`${0.6 * opacity}`, `${0.2 * opacity}`));\r\n                gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n                \r\n                ctx.fillStyle = gradient;\r\n                ctx.beginPath();\r\n                ctx.arc(offset, offset, size * 2, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            });\r\n            \r\n            // Add bright white core\r\n            ctx.globalCompositeOperation = 'lighter';\r\n            const coreGradient = ctx.createRadialGradient(0, 0, 0, 0, 0, size);\r\n            coreGradient.addColorStop(0, `rgba(255, 255, 255, ${opacity})`);\r\n            coreGradient.addColorStop(0.3, `rgba(255, 255, 255, ${0.5 * opacity})`);\r\n            coreGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n            \r\n            ctx.fillStyle = coreGradient;\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, size, 0, Math.PI * 2);\r\n            ctx.fill();\r\n            \r\n            ctx.restore();\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Render moon/lunar shadow overlay\r\n     * @param {boolean} isSolarOverlay - True if this is being called for solar eclipse effect\r\n     * @param {number} rotation - Rotation angle to apply\r\n     */\r\n    renderMoonShadow(x, y, radius, shadow, shapePoints, isSolarOverlay = false, rotation = 0) {\r\n        const ctx = this.ctx;\r\n        \r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        \r\n        // Don't apply rotation - we're already in rotated coordinate space\r\n        \r\n        if (shadow.type === 'crescent') {\r\n            // Crescent moon - smooth shadow without pixelation\r\n            \r\n            // Get morph progress to animate the shadow sliding in\r\n            let shadowProgress = 1.0; // Default to fully visible\r\n            let animatedOffset = shadow.offset || 0.7; // Default to the shadow's offset\r\n            \r\n            if (this.shapeMorpher) {\r\n                const morphProgress = this.shapeMorpher.getProgress();\r\n                const currentShape = this.shapeMorpher.currentShape;\r\n                const targetShape = this.shapeMorpher.targetShape;\r\n                \r\n                // Animate shadow sliding in when morphing TO moon (and shadow.offset is not being controlled)\r\n                if (targetShape === 'moon' && morphProgress !== undefined && morphProgress < 1 && !shadow.shadowX) {\r\n                    // Shadow slides in from the left\r\n                    shadowProgress = morphProgress;\r\n                    const baseOffset = 0.7;\r\n                    // Animate the offset - starts far left (-2) and slides to final position\r\n                    animatedOffset = -2 + (baseOffset + 2) * shadowProgress;\r\n                }\r\n                // FROM MOON TO ANY SHAPE - ShapeMorpher is already controlling via shadow.offset\r\n                // so we just use whatever offset is provided in the shadow object\r\n            }\r\n            // Calculate shadow offset - shadow rotates with the moon\r\n            const angleRad = (shadow.angle || -30) * Math.PI / 180;\r\n            const offsetX = Math.cos(angleRad) * radius * animatedOffset;\r\n            const offsetY = Math.sin(angleRad) * radius * animatedOffset;\r\n            \r\n            // Enable high quality rendering\r\n            ctx.imageSmoothingEnabled = true;\r\n            ctx.imageSmoothingQuality = 'high';\r\n            \r\n            // Clip to the moon shape\r\n            ctx.beginPath();\r\n            if (shapePoints) {\r\n                ctx.moveTo(shapePoints[0].x, shapePoints[0].y);\r\n                for (let i = 1; i < shapePoints.length; i++) {\r\n                    ctx.lineTo(shapePoints[i].x, shapePoints[i].y);\r\n                }\r\n                ctx.closePath();\r\n            } else {\r\n                ctx.arc(0, 0, radius, 0, Math.PI * 2);\r\n            }\r\n            ctx.clip();\r\n            \r\n            // Use a single smooth gradient for the entire shadow\r\n            const shadowGradient = ctx.createRadialGradient(\r\n                offsetX, offsetY, radius * 0.9,\r\n                offsetX, offsetY, radius * 1.1\r\n            );\r\n            \r\n            // More gradient stops for smoother transition\r\n            // Also fade opacity based on shadowProgress for smoother appearance\r\n            const baseCoverage = shadow.coverage !== undefined ? shadow.coverage : 0.85;\r\n            const shadowOpacity = Math.min(1, shadowProgress * 1.2) * (baseCoverage / 0.85);\r\n            shadowGradient.addColorStop(0, `rgba(0, 0, 0, ${1 * shadowOpacity})`);\r\n            shadowGradient.addColorStop(0.80, `rgba(0, 0, 0, ${1 * shadowOpacity})`);\r\n            shadowGradient.addColorStop(0.88, `rgba(0, 0, 0, ${0.98 * shadowOpacity})`);\r\n            shadowGradient.addColorStop(0.91, `rgba(0, 0, 0, ${0.95 * shadowOpacity})`);\r\n            shadowGradient.addColorStop(0.93, `rgba(0, 0, 0, ${0.9 * shadowOpacity})`);\r\n            shadowGradient.addColorStop(0.95, `rgba(0, 0, 0, ${0.8 * shadowOpacity})`);\r\n            shadowGradient.addColorStop(0.96, `rgba(0, 0, 0, ${0.65 * shadowOpacity})`);\r\n            shadowGradient.addColorStop(0.97, `rgba(0, 0, 0, ${0.45 * shadowOpacity})`);\r\n            shadowGradient.addColorStop(0.98, `rgba(0, 0, 0, ${0.25 * shadowOpacity})`);\r\n            shadowGradient.addColorStop(0.99, `rgba(0, 0, 0, ${0.1 * shadowOpacity})`);\r\n            shadowGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n            \r\n            ctx.fillStyle = shadowGradient;\r\n            ctx.beginPath();\r\n            // Always use a circular shadow - crescent effect only works with circles\r\n            ctx.arc(offsetX, offsetY, radius * 1.1, 0, Math.PI * 2);\r\n            ctx.fill();\r\n            \r\n        } else if (shadow.type === 'lunar') {\r\n            // Lunar eclipse - diffuse reddish shadow\r\n            const diffusion = shadow.diffusion !== undefined ? shadow.diffusion : 1;\r\n            const sharpness = 1 - diffusion;\r\n            \r\n            // Get morph progress to animate the shadow sliding in for solar\r\n            let shadowOffsetX = 0;\r\n            let shadowOffsetY = 0;\r\n            \r\n            if (this.shapeMorpher) {\r\n                const morphProgress = this.shapeMorpher.getProgress();\r\n                const currentShape = this.shapeMorpher.currentShape;\r\n                const targetShape = this.shapeMorpher.targetShape;\r\n                \r\n                // Don't skip animation for moon-solar transitions anymore\r\n                \r\n                // Animate shadow sliding in when morphing TO solar (for solar overlay)\r\n                if (isSolarOverlay && targetShape === 'solar' && morphProgress !== undefined && morphProgress < 1) {\r\n                    // Shadow slides in from bottom-left\r\n                    const slideDistance = radius * 2.5;\r\n                    // Start from bottom-left, move to center\r\n                    shadowOffsetX = -slideDistance * (1 - morphProgress);\r\n                    shadowOffsetY = slideDistance * (1 - morphProgress);\r\n                }\r\n                // Animate shadow sliding out when morphing FROM solar\r\n                else if (isSolarOverlay && currentShape === 'solar' && targetShape !== 'solar' && targetShape !== null && morphProgress !== undefined && morphProgress < 1) {\r\n                    // Shadow slides out to top-right\r\n                    const slideDistance = radius * 2.5;\r\n                    // Move from center to top-right\r\n                    shadowOffsetX = slideDistance * morphProgress;\r\n                    shadowOffsetY = -slideDistance * morphProgress;\r\n                }\r\n            }\r\n            \r\n            // Apply translation for shadow animation\r\n            ctx.translate(shadowOffsetX, shadowOffsetY);\r\n            \r\n            // For solar overlay, clip to the sun's core area only (not the corona)\r\n            if (isSolarOverlay) {\r\n                // Clip to a circle at the shadow's position that only covers the core\r\n                ctx.save();\r\n                ctx.beginPath();\r\n                // Create a clipping region that's the intersection of the sun and the shadow\r\n                ctx.arc(-shadowOffsetX, -shadowOffsetY, radius, 0, Math.PI * 2); // Sun position (inverse of shadow offset)\r\n                ctx.clip();\r\n            } else {\r\n                // Regular lunar clipping\r\n                ctx.beginPath();\r\n                ctx.arc(0, 0, radius, 0, Math.PI * 2);\r\n                ctx.clip();\r\n            }\r\n            \r\n            // Penumbra (diffuse outer shadow) - MUCH DARKER\r\n            const penumbraRadius = radius * (1.8 - sharpness * 0.5);\r\n            const penumbraGradient = ctx.createRadialGradient(\r\n                0, 0, radius * 0.2,\r\n                0, 0, penumbraRadius\r\n            );\r\n            \r\n            const baseOpacity = shadow.coverage || 0.9;\r\n            \r\n            // Use custom color if specified (for solar eclipse), otherwise use default lunar red\r\n            if (shadow.color && shadow.color.includes('0, 0, 0')) {\r\n                // Black shadow for solar eclipse\r\n                penumbraGradient.addColorStop(0, `rgba(0, 0, 0, ${baseOpacity})`);\r\n                penumbraGradient.addColorStop(0.3 + sharpness * 0.2, `rgba(0, 0, 0, ${baseOpacity * 0.95})`);\r\n                penumbraGradient.addColorStop(0.6 + sharpness * 0.2, `rgba(0, 0, 0, ${baseOpacity * 0.8})`);\r\n                penumbraGradient.addColorStop(0.85, `rgba(0, 0, 0, ${baseOpacity * 0.4})`);\r\n                penumbraGradient.addColorStop(1, `rgba(0, 0, 0, 0)`);\r\n            } else {\r\n                // Default reddish lunar eclipse colors\r\n                penumbraGradient.addColorStop(0, `rgba(10, 2, 0, ${baseOpacity})`);\r\n                penumbraGradient.addColorStop(0.3 + sharpness * 0.2, `rgba(20, 5, 0, ${baseOpacity * 0.95})`);\r\n                penumbraGradient.addColorStop(0.6 + sharpness * 0.2, `rgba(40, 10, 5, ${baseOpacity * 0.8})`);\r\n                penumbraGradient.addColorStop(0.85, `rgba(60, 15, 10, ${baseOpacity * 0.4})`);\r\n                penumbraGradient.addColorStop(1, `rgba(80, 20, 15, 0)`);\r\n            }\r\n            \r\n            ctx.fillStyle = penumbraGradient;\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, penumbraRadius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n            \r\n            // Umbra (sharp inner shadow) - only when sharp\r\n            if (sharpness > 0.3) {\r\n                const umbraRadius = radius * (0.8 + sharpness * 0.3);\r\n                const umbraGradient = ctx.createRadialGradient(\r\n                    0, 0, 0,\r\n                    0, 0, umbraRadius\r\n                );\r\n                \r\n                // Use black for solar eclipse, reddish for lunar\r\n                if (shadow.color && shadow.color.includes('0, 0, 0')) {\r\n                    umbraGradient.addColorStop(0, `rgba(0, 0, 0, ${baseOpacity})`);\r\n                    umbraGradient.addColorStop(0.5, `rgba(0, 0, 0, ${baseOpacity * 0.9})`);\r\n                    umbraGradient.addColorStop(0.8, `rgba(0, 0, 0, ${baseOpacity * 0.5})`);\r\n                    umbraGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n                } else {\r\n                    umbraGradient.addColorStop(0, `rgba(0, 0, 0, ${baseOpacity})`);\r\n                    umbraGradient.addColorStop(0.5, `rgba(10, 2, 0, ${baseOpacity * 0.9})`);\r\n                    umbraGradient.addColorStop(0.8, `rgba(20, 5, 0, ${baseOpacity * 0.5})`);\r\n                    umbraGradient.addColorStop(1, 'rgba(30, 8, 5, 0)');\r\n                }\r\n                \r\n                ctx.fillStyle = umbraGradient;\r\n                ctx.beginPath();\r\n                ctx.arc(0, 0, umbraRadius, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n        }\r\n        \r\n        // Restore extra save for solar overlay clipping\r\n        if (isSolarOverlay) {\r\n            ctx.restore();\r\n        }\r\n        \r\n        ctx.restore();\r\n    }\r\n    \r\n    /**\r\n     * Render zen meditation core with arc shape\r\n     */\r\n    renderZenCore(x, y, radius) {\r\n        this.ctx.save();\r\n        \r\n        // Apply shake offset if in awakening phase\r\n        if (this.state.shakeOffset) {\r\n            x += this.state.shakeOffset;\r\n        }\r\n        \r\n        // Apply drift Y if in awakening phase\r\n        if (this.state.driftY) {\r\n            y += this.state.driftY;\r\n        }\r\n        \r\n        this.ctx.translate(x, y);\r\n        \r\n        // Apply gesture rotation if present (for spin gesture)\r\n        if (this.gestureTransform && this.gestureTransform.rotation !== undefined) {\r\n            this.ctx.rotate(this.gestureTransform.rotation * Math.PI / 180);\r\n        }\r\n        \r\n        // Calculate zen energy pulsation (slow breathing effect)\r\n        const time = Date.now() / 1000; // Time in seconds\r\n        const basePulse = Math.sin(time * 0.5) * 0.5 + 1.5; // Base pulsation\r\n        \r\n        // Scale glow intensity based on transition phase\r\n        // Very dim during bloom/retract, bright when fully in zen\r\n        let glowIntensity = 0.1; // Start very dim\r\n        if (this.zenTransition.phase === 'in') {\r\n            // Full brightness when fully in zen\r\n            glowIntensity = 1.0;\r\n        } else if (this.zenTransition.phase === 'entering') {\r\n            // Gradually brighten only after lotus is mostly formed\r\n            glowIntensity = Math.max(0.1, (this.zenTransition.lotusMorph - 0.7) * 3.3); // Stay dim until 70% bloomed\r\n        } else if (this.zenTransition.phase === 'exiting') {\r\n            // Quickly dim when exiting\r\n            glowIntensity = Math.max(0.1, this.zenTransition.lotusMorph * 0.5);\r\n        }\r\n        const zenPulse = basePulse * glowIntensity; // Apply intensity scaling\r\n        \r\n        // Apply glow when lotus is morphing or fully formed\r\n        if (this.zenTransition.lotusMorph > 0) {\r\n            // Single smooth shadow glow \r\n            this.ctx.shadowBlur = this.scaleValue(100) * zenPulse;\r\n            this.ctx.shadowColor = `rgba(255, 223, 0, ${0.5 * zenPulse})`;\r\n            \r\n            // INNER RADIANCE GRADIENT - Much darker during transitions\r\n            const gradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, radius * 4);\r\n            \r\n            // During transitions, use much darker colors to see lotus\r\n            if (this.zenTransition.phase !== 'in') {\r\n                // Dark golden during transition - lotus will show as even darker cutout\r\n                gradient.addColorStop(0, `rgba(184, 134, 11, ${0.8})`); // Dark goldenrod core\r\n                gradient.addColorStop(0.3, `rgba(153, 101, 21, ${0.6})`); // Darker gold\r\n                gradient.addColorStop(0.6, `rgba(139, 69, 19, ${0.4})`); // Saddle brown\r\n                gradient.addColorStop(1, `rgba(101, 67, 33, 0)`); // Dark brown edge\r\n            } else {\r\n                // Full brightness only when fully in zen\r\n                gradient.addColorStop(0, `rgba(255, 255, 255, ${1.0 * zenPulse})`); // Pure white core\r\n                gradient.addColorStop(0.1, `rgba(255, 255, 240, ${1.0 * zenPulse})`); // Bright cream\r\n                gradient.addColorStop(0.2, `rgba(255, 250, 205, ${0.95 * zenPulse})`); // Warm light\r\n                gradient.addColorStop(0.35, `rgba(255, 240, 150, ${0.85 * zenPulse})`); // Bright gold\r\n                gradient.addColorStop(0.5, `rgba(255, 223, 0, ${0.7 * zenPulse})`); // Vibrant gold\r\n                gradient.addColorStop(0.65, `rgba(255, 215, 0, ${0.5 * zenPulse})`); // Fading gold\r\n                gradient.addColorStop(0.8, `rgba(255, 215, 0, ${0.3 * zenPulse})`); // Softer edge\r\n                gradient.addColorStop(0.9, `rgba(255, 215, 0, ${0.15 * zenPulse})`); // Very soft\r\n                gradient.addColorStop(0.95, `rgba(255, 215, 0, ${0.05 * zenPulse})`); // Almost gone\r\n                gradient.addColorStop(1, `rgba(255, 215, 0, 0)`); // Fully transparent edge\r\n            }\r\n            \r\n            this.ctx.fillStyle = gradient;\r\n            this.ctx.strokeStyle = `rgba(255, 255, 255, ${0.3})`; // Dimmer edge during transition\r\n            this.ctx.lineWidth = this.scaleValue(2);\r\n            \r\n            // STEP 1: Draw a circle with lotus cutout using evenodd fill rule\r\n            this.ctx.beginPath();\r\n            \r\n            // Draw outer circle (clockwise)\r\n            this.ctx.arc(0, 0, radius, 0, Math.PI * 2, false);\r\n            \r\n            // CLEAN LOTUS SILHOUETTE - matching reference image\r\n            const lotusSize = radius * 0.95; // Lotus fills nearly ALL of the orb\r\n            \r\n            // MORPHING LOTUS PETALS - animated based on lotusMorph value\r\n            const morph = this.zenTransition.lotusMorph;\r\n            const spread = this.zenTransition.petalSpread;\r\n            const smile = this.zenTransition.smileCurve;\r\n            \r\n            // Center/Top petal - morphs from small circle to full petal\r\n            // Only draw lotus if morph is significant (avoid tiny artifacts)\r\n            if (morph > 0.1) {\r\n                const centerPetalBase = radius * (0.05 + 0.15 * morph);\r\n                this.ctx.moveTo(0, centerPetalBase); // Start at base center\r\n                this.ctx.bezierCurveTo(\r\n                    -radius * (0.05 + 0.25 * morph * spread), radius * 0.1,    // Left control\r\n                    -radius * (0.05 + 0.3 * morph * spread), -radius * (0.1 + 0.4 * morph),  // Left control up\r\n                    0, -radius * (0.2 + 0.65 * morph)                // Top point\r\n                );\r\n                this.ctx.bezierCurveTo(\r\n                    radius * (0.05 + 0.3 * morph * spread), -radius * (0.1 + 0.4 * morph),   // Right control up\r\n                    radius * (0.05 + 0.25 * morph * spread), radius * 0.1,     // Right control\r\n                    0, centerPetalBase                 // Back to base\r\n                );\r\n                \r\n                if (morph > 0.3) { // Only show side petals after some morphing\r\n                const sidePetalAlpha = (morph - 0.3) / 0.7; // Fade in from 30% to 100%\r\n                \r\n                // Left petal - fades in and spreads\r\n                this.ctx.moveTo(-radius * 0.1 * sidePetalAlpha, radius * 0.2); \r\n                this.ctx.bezierCurveTo(\r\n                    -radius * (0.1 + 0.4 * sidePetalAlpha * spread), radius * 0.1,    \r\n                    -radius * (0.2 + 0.5 * sidePetalAlpha * spread), -radius * (0.1 + 0.2 * sidePetalAlpha),   \r\n                    -radius * (0.1 + 0.4 * sidePetalAlpha * spread), -radius * (0.2 + 0.45 * sidePetalAlpha)   \r\n                );\r\n                this.ctx.bezierCurveTo(\r\n                    -radius * (0.05 + 0.15 * sidePetalAlpha), -radius * (0.1 + 0.4 * sidePetalAlpha),   \r\n                    -radius * 0.05 * sidePetalAlpha, radius * 0.1,   \r\n                    -radius * 0.1 * sidePetalAlpha, radius * 0.2     \r\n                );\r\n                \r\n                // Right petal - fades in and spreads\r\n                this.ctx.moveTo(radius * 0.1 * sidePetalAlpha, radius * 0.2); \r\n                this.ctx.bezierCurveTo(\r\n                    radius * (0.1 + 0.4 * sidePetalAlpha * spread), radius * 0.1,     \r\n                    radius * (0.2 + 0.5 * sidePetalAlpha * spread), -radius * (0.1 + 0.2 * sidePetalAlpha),    \r\n                    radius * (0.1 + 0.4 * sidePetalAlpha * spread), -radius * (0.2 + 0.45 * sidePetalAlpha)    \r\n                );\r\n                this.ctx.bezierCurveTo(\r\n                    radius * (0.05 + 0.15 * sidePetalAlpha), -radius * (0.1 + 0.4 * sidePetalAlpha),    \r\n                    radius * 0.05 * sidePetalAlpha, radius * 0.1,    \r\n                    radius * 0.1 * sidePetalAlpha, radius * 0.2      \r\n                );\r\n            }\r\n            \r\n            // Bottom smile - morphs from straight to curved smile\r\n            if (smile > 0) {\r\n                const smileDepth = radius * 0.2 * smile; // How deep the smile curves\r\n                this.ctx.moveTo(-radius * 0.6, radius * (0.5 - 0.1 * smile));   // Corners rise with smile\r\n                this.ctx.quadraticCurveTo(\r\n                    0, radius * (0.5 + 0.1 * smile),     // Center dips for smile\r\n                    radius * 0.6, radius * (0.5 - 0.1 * smile)  // Right corner rises\r\n                );\r\n                }\r\n            }\r\n            \r\n            this.ctx.closePath();\r\n            \r\n            // Fill with gradient using evenodd rule to create the lotus cutout\r\n            this.ctx.fill('evenodd');\r\n            // Don't stroke the lotus cutout, only the outer circle\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(0, 0, radius, 0, Math.PI * 2);\r\n            this.ctx.stroke();\r\n            \r\n            // Only add additional glow layers when fully in zen, not during transitions\r\n            if (this.zenTransition.phase === 'in') {\r\n                // Additional EXPANSIVE glow layers for inner radiance\r\n                // Layer 1: BRILLIANT lotus core intensifier - from lower quarter\r\n                const lotusRadius = radius * 2.0; // Larger radius for more expansion\r\n                const arcHeight = this.zenTransition.arcHeight * radius; // Get arc height from transition state\r\n                const glowOriginY = radius * 0.5; // Lower quarter origin\r\n                const lotusGlow = this.ctx.createRadialGradient(0, glowOriginY, 0, 0, glowOriginY, lotusRadius * 1.2);\r\n                lotusGlow.addColorStop(0, `rgba(255, 255, 255, ${1.0 * zenPulse})`);\r\n                lotusGlow.addColorStop(0.25, `rgba(255, 252, 240, ${0.8 * zenPulse})`);\r\n                lotusGlow.addColorStop(0.5, `rgba(255, 245, 200, ${0.6 * zenPulse})`);\r\n                lotusGlow.addColorStop(0.75, `rgba(255, 235, 150, ${0.4 * zenPulse})`);\r\n                lotusGlow.addColorStop(1, 'rgba(255, 223, 0, 0)');\r\n                this.ctx.fillStyle = lotusGlow;\r\n                this.ctx.fill();\r\n                \r\n                // Layer 2: GAUSSIAN outer halo for smooth falloff\r\n                const outerHalo = this.ctx.createRadialGradient(0, -arcHeight/2, radius * 0.5, 0, -arcHeight/2, radius * 5);\r\n                outerHalo.addColorStop(0, 'rgba(255, 223, 0, 0)');\r\n                outerHalo.addColorStop(0.1, `rgba(255, 223, 0, ${0.25 * zenPulse})`);\r\n                outerHalo.addColorStop(0.2, `rgba(255, 220, 0, ${0.2 * zenPulse})`);\r\n                outerHalo.addColorStop(0.35, `rgba(255, 215, 0, ${0.15 * zenPulse})`);\r\n                outerHalo.addColorStop(0.5, `rgba(255, 215, 0, ${0.1 * zenPulse})`);\r\n                outerHalo.addColorStop(0.65, `rgba(255, 215, 0, ${0.06 * zenPulse})`);\r\n                outerHalo.addColorStop(0.8, `rgba(255, 215, 0, ${0.03 * zenPulse})`);\r\n                outerHalo.addColorStop(0.9, `rgba(255, 215, 0, ${0.01 * zenPulse})`);\r\n                outerHalo.addColorStop(1, 'rgba(255, 215, 0, 0)');\r\n                this.ctx.fillStyle = outerHalo;\r\n                this.ctx.fill();\r\n            }\r\n        } else {\r\n            // Draw horizontal line or circle during transition\r\n            // Start with very dim golden color that brightens with lotus\r\n            \r\n            // No glow during transition to prevent flash\r\n            this.ctx.shadowBlur = 0;\r\n            this.ctx.shadowColor = 'transparent';\r\n            \r\n            // Use very dim golden color during transition\r\n            const dimIntensity = 0.3; // Keep consistently dim during transition\r\n            this.ctx.fillStyle = `rgba(255, 215, 0, ${dimIntensity})`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(0, 0, radius, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            \r\n            // Very subtle gradient during transition to see lotus clearly\r\n            const coreGradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, radius);\r\n            coreGradient.addColorStop(0, `rgba(255, 255, 255, 0.2)`);\r\n            coreGradient.addColorStop(0.5, `rgba(255, 250, 230, 0.1)`);\r\n            coreGradient.addColorStop(1, 'rgba(255, 215, 0, 0)');\r\n            this.ctx.fillStyle = coreGradient;\r\n            this.ctx.fill();\r\n        }\r\n        \r\n        this.ctx.restore();\r\n    }\r\n    \r\n    /**\r\n     * Render speaking animation rings\r\n     */\r\n    renderSpeakingRings(centerX, centerY, coreRadius, deltaTime) {\r\n        return this.specialEffects.renderSpeakingRings(centerX, centerY, coreRadius, deltaTime);\r\n    }\r\n    \r\n    \r\n    // Recording rings method removed - now using pulsating glow instead\r\n    \r\n    /**\r\n     * Render recording indicator - stylized REC text only\r\n     */\r\n    renderRecordingIndicator(x, y) {\r\n        return this.specialEffects.renderRecordingIndicator(x, y);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Render sleep indicator (Z's) with cell-shaded style and gradient fade\r\n     */\r\n    renderSleepIndicator(x, y, deltaTime) {\r\n        return this.specialEffects.renderSleepIndicator(x, y, deltaTime);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Update animation timers\r\n     */\r\n    updateTimers(deltaTime) {\r\n        // Update breathing animation via BreathingAnimator\r\n        this.breathingAnimator.update(deltaTime, this.state.emotion, this.currentUndertone);\r\n        \r\n        // Update special breathing modifiers\r\n        if (this.state.emotion === 'zen') {\r\n            this.breathingAnimator.setBreathRateMultiplier(0.15);\r\n            this.breathingAnimator.setBreathDepthMultiplier(2.5);\r\n        } else if (this.state.sleeping) {\r\n            this.breathingAnimator.setBreathRateMultiplier(0.5);\r\n            this.breathingAnimator.setBreathDepthMultiplier(1.2);\r\n        } else {\r\n            this.breathingAnimator.setBreathRateMultiplier(1.0);\r\n            this.breathingAnimator.setBreathDepthMultiplier(1.0);\r\n        }\r\n        \r\n        // Apply irregular breathing for nervous/tired\r\n        this.breathingAnimator.setIrregularBreathing(this.state.breathIrregular);\r\n        \r\n        // Update blinking via EyeRenderer\r\n        this.eyeRenderer.setBlinkingEnabled(this.state.blinkingEnabled && !this.state.sleeping && this.state.emotion !== 'zen');\r\n        this.eyeRenderer.update(deltaTime);\r\n        \r\n        // Sync blinking state back to our state for compatibility\r\n        this.state.blinking = this.eyeRenderer.blinking;\r\n        \r\n        // Note: Idle detection is handled by IdleBehavior.js, not here\r\n    }\r\n    \r\n    /**\r\n     * Apply all undertone modifiers to current state\r\n     * @param {string|null|Object} undertone - Undertone name or weighted modifier object\r\n     */\r\n    applyUndertoneModifiers(undertone) {\r\n        // Handle weighted modifier from state machine\r\n        if (undertone && typeof undertone === 'object' && undertone.weight !== undefined) {\r\n            const weight = undertone.weight;\r\n            \r\n            // Apply weighted modifiers for smooth transitions\r\n            // Use default value of 1.0 if property is undefined\r\n            this.state.sizeMultiplier = 1.0 + ((undertone.sizeMultiplier || 1.0) - 1.0) * weight;\r\n            this.state.jitterAmount = (undertone.jitterAmount || 0) * weight;\r\n            this.state.episodicFlutter = weight > 0.5 ? (undertone.episodicFlutter || false) : false;\r\n            this.state.glowRadiusMult = 1.0 + ((undertone.glowRadiusMult || 1.0) - 1.0) * weight;\r\n            this.state.breathRateMult = 1.0 + ((undertone.breathRateMult || 1.0) - 1.0) * weight;\r\n            this.state.breathDepthMult = 1.0 + ((undertone.breathDepthMult || 1.0) - 1.0) * weight;\r\n            this.state.breathIrregular = weight > 0.5 ? (undertone.breathIrregular || false) : false;\r\n            this.state.particleRateMult = 1.0;\r\n            return;\r\n        }\r\n        \r\n        // String-based undertone handling\r\n        if (!undertone || !this.undertoneModifiers[undertone]) {\r\n            // Reset to defaults if no undertone\r\n            this.state.sizeMultiplier = 1.0;\r\n            this.state.jitterAmount = 0;\r\n            this.state.episodicFlutter = false;\r\n            this.state.glowRadiusMult = 1.0;\r\n            this.state.breathRateMult = 1.0;\r\n            this.state.breathDepthMult = 1.0;\r\n            this.state.breathIrregular = false;\r\n            this.state.particleRateMult = 1.0;\r\n            return;\r\n        }\r\n        \r\n        const modifier = this.undertoneModifiers[undertone];\r\n        \r\n        // Apply all modifiers directly\r\n        this.state.sizeMultiplier = modifier.sizeMultiplier;\r\n        this.state.jitterAmount = modifier.jitterAmount || 0;\r\n        this.state.episodicFlutter = modifier.episodicFlutter || false;\r\n        this.state.glowRadiusMult = modifier.glowRadiusMult;\r\n        this.state.breathRateMult = modifier.breathRateMult;\r\n        this.state.breathDepthMult = modifier.breathDepthMult;\r\n        this.state.breathIrregular = modifier.breathIrregular || false;\r\n        this.state.particleRateMult = 1.0;\r\n    }\r\n    \r\n    /**\r\n     * Apply undertone shifts to a color using saturation-based depth\r\n     * @param {string} baseColor - Base hex color\r\n     * @param {string|null|Object} undertone - Undertone name or weighted modifier object\r\n     * @returns {string} Modified hex color\r\n     * \r\n     * Undertone saturation creates visual depth:\r\n     * - INTENSE   : +60% saturation (electric, overwhelming)\r\n     * - CONFIDENT : +30% saturation (bold, present) \r\n     * - NERVOUS   : +15% saturation (slightly heightened)\r\n     * - CLEAR     :   0% saturation (normal midtone)\r\n     * - TIRED     : -20% saturation (washed out, fading)\r\n     * - SUBDUED   : -50% saturation (ghostly, withdrawn)\r\n     */\r\n    applyUndertoneToColor(baseColor, undertone) {\r\n        return this.colorUtilities.applyUndertoneToColor(baseColor, undertone);\r\n    }\r\n    \r\n    hexToRgb(hex) {\r\n        return this.colorUtilities.hexToRgb(hex);\r\n    }\r\n    \r\n    rgbToHsl(r, g, b) {\r\n        return this.colorUtilities.rgbToHsl(r, g, b);\r\n    }\r\n    \r\n    hslToHex(h, s, l) {\r\n        return this.colorUtilities.hslToHex(h, s, l);\r\n    }\r\n    \r\n    hexToRgba(hex, alpha = 1) {\r\n        const rgb = this.hexToRgb(hex);\r\n        if (!rgb) return `rgba(255, 255, 255, ${alpha})`;\r\n        return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${alpha})`;\r\n    }\r\n    \r\n    startColorTransition(targetColor, targetIntensity, duration = 1500) {\r\n        this.colorUtilities.currentColor = this.state.glowColor;\r\n        this.colorUtilities.currentIntensity = this.state.glowIntensity;\r\n        this.colorUtilities.startColorTransition(targetColor, targetIntensity, duration);\r\n        this.colorTransition = this.colorUtilities.colorTransition;\r\n    }\r\n    \r\n    updateColorTransition(deltaTime) {\r\n        const result = this.colorUtilities.updateColorTransition(deltaTime);\r\n        if (result) {\r\n            this.state.glowColor = result.color;\r\n            this.state.glowIntensity = result.intensity;\r\n            this.colorTransition = this.colorUtilities.colorTransition;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Update just the undertone without resetting emotion\r\n     */\r\n    updateUndertone(undertone) {\r\n        // Clear glow cache when undertone changes (colors will change)\r\n        if (this.state.undertone !== undertone) {\r\n            this.glowCache.clear();\r\n        }\r\n        \r\n        // Store undertone for color processing\r\n        this.state.undertone = undertone;\r\n        this.currentUndertone = undertone;\r\n        \r\n        // Get weighted undertone modifier from state machine if available\r\n        const weightedModifier = this.stateMachine && this.stateMachine.getWeightedUndertoneModifiers ? \r\n                                this.stateMachine.getWeightedUndertoneModifiers() : null;\r\n        \r\n        // Apply all undertone modifiers (visual, breathing only - no particles)\r\n        this.applyUndertoneModifiers(weightedModifier || undertone);\r\n        \r\n        // Update colors with the new undertone\r\n        if (this.state.emotion) {\r\n            const emotionConfig = getEmotion(this.state.emotion);\r\n            if (emotionConfig) {\r\n                const baseColor = emotionConfig.glowColor || this.config.defaultGlowColor;\r\n                const targetColor = this.applyUndertoneToColor(baseColor, weightedModifier || undertone);\r\n                \r\n                // Start color transition to new undertone color (faster for responsiveness)\r\n                this.startColorTransition(targetColor, 200); // 200ms transition\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set emotional state\r\n     */\r\n    setEmotionalState(emotion, properties, undertone = null) {\r\n        \r\n        // Clear glow cache when emotion or undertone changes (colors will change)\r\n        if (this.state.emotion !== emotion || this.state.undertone !== undertone) {\r\n            this.glowCache.clear();\r\n        }\r\n        \r\n        // Store undertone for color processing\r\n        this.state.undertone = undertone;\r\n        this.currentUndertone = undertone;\r\n        \r\n        // Get weighted undertone modifier from state machine if available\r\n        const weightedModifier = this.stateMachine && this.stateMachine.getWeightedUndertoneModifiers ? \r\n                                this.stateMachine.getWeightedUndertoneModifiers() : null;\r\n        \r\n        // Apply all undertone modifiers (visual, breathing, particles)\r\n        this.applyUndertoneModifiers(weightedModifier || undertone);\r\n        \r\n        // Get base color and apply undertone shifts\r\n        const baseColor = properties.glowColor || this.config.defaultGlowColor;\r\n        \r\n        // Get target color - for suspicion, use the dynamic color directly\r\n        let targetColor;\r\n        if (emotion === 'suspicion') {\r\n            // Use the dynamic color from properties (includes threat level)\r\n            targetColor = properties.glowColor || baseColor;\r\n        } else {\r\n            targetColor = this.applyUndertoneToColor(baseColor, weightedModifier || undertone);\r\n        }\r\n        \r\n        // Apply intensity modifier from undertone\r\n        const modifier = weightedModifier || (undertone ? this.undertoneModifiers[undertone] : null);\r\n        const baseIntensity = properties.glowIntensity || 1.0;\r\n        \r\n        // Get the glow multiplier - check for glowRadiusMult or use default of 1.0\r\n        let glowMult = 1.0;\r\n        if (modifier) {\r\n            if (weightedModifier) {\r\n                // For weighted modifiers, check if glowRadiusMult exists\r\n                // Check for NaN in weight calculation\r\n                const weight = modifier.weight || 0;\r\n                if (modifier.glowRadiusMult !== undefined && isFinite(modifier.glowRadiusMult) && isFinite(weight)) {\r\n                    glowMult = 1.0 + (modifier.glowRadiusMult - 1.0) * weight;\r\n                } else {\r\n                    glowMult = 1.0;\r\n                }\r\n            } else {\r\n                // For non-weighted modifiers, use glowRadiusMult if it exists\r\n                glowMult = modifier.glowRadiusMult !== undefined ? modifier.glowRadiusMult : 1.0;\r\n            }\r\n        }\r\n        \r\n        const targetIntensity = baseIntensity * glowMult;\r\n        \r\n        // Determine transition duration based on emotion\r\n        let duration = 1500; // Default 1.5s\r\n        if (emotion === 'anger' || emotion === 'fear') {\r\n            duration = 800; // Quick transitions for urgent emotions\r\n        } else if (emotion === 'sadness' || emotion === 'resting') {\r\n            duration = 2000; // Slower for calming emotions\r\n        } else if (emotion === 'zen') {\r\n            duration = 2000; // Zen gets special timing during lotus bloom\r\n        }\r\n        \r\n        // Update emotion state BEFORE handling transitions to avoid timing issues\r\n        const previousEmotion = this.state.emotion;\r\n        this.state.emotion = emotion;\r\n        \r\n        // Handle suspicion state\r\n        if (emotion === 'suspicion') {\r\n            this.state.isSuspicious = true;\r\n            // Store target squint amount, we'll animate to it\r\n            this.state.targetSquintAmount = properties && properties.coreSquint ? properties.coreSquint : 0.4;\r\n            if (this.state.squintAmount === undefined) {\r\n                this.state.squintAmount = 0; // Start from no squint\r\n            }\r\n            this.state.lastScanTime = Date.now();\r\n            this.state.scanPhase = 0;\r\n        } else {\r\n            this.state.isSuspicious = false;\r\n            this.state.targetSquintAmount = 0;\r\n            if (this.state.squintAmount === undefined) {\r\n                this.state.squintAmount = 0;\r\n            }\r\n        }\r\n        \r\n        // Handle zen state transitions specially\r\n        if (emotion === 'zen' && previousEmotion !== 'zen') {\r\n            // Entering zen - will handle its own color transition during lotus bloom\r\n            this.enterZenMode(targetColor, targetIntensity);\r\n        } else if (previousEmotion === 'zen' && emotion !== 'zen') {\r\n            // Exiting zen - will handle its own color transition during lotus close\r\n            this.exitZenMode(emotion, targetColor, targetIntensity);\r\n        } else {\r\n            // Standard color transition for all other state changes\r\n            this.startColorTransition(targetColor, targetIntensity, duration);\r\n        }\r\n        \r\n        // Apply breathing with undertone modifiers\r\n        const baseBreathRate = properties.breathRate || 1.0;\r\n        const baseBreathDepth = properties.breathDepth || this.config.breathingDepth;\r\n        this.state.breathRate = modifier ? baseBreathRate * modifier.breathRateMult : baseBreathRate;\r\n        this.state.breathDepth = modifier ? baseBreathDepth * modifier.breathDepthMult : baseBreathDepth;\r\n        \r\n        // Jitter combines emotion jitter with undertone jitter\r\n        this.state.coreJitter = properties.coreJitter || (modifier && modifier.jitterAmount > 0);\r\n        this.state.emotionEyeOpenness = properties.eyeOpenness;\r\n        this.state.emotionEyeArc = properties.eyeArc;\r\n    }\r\n    \r\n    /**\r\n     * Set BPM for rhythm features\r\n     * @param {number} bpm - Beats per minute\r\n     */\r\n    setBPM(bpm) {\r\n        // BPM-locked rotation has been removed\r\n        // This method is kept for other rhythm-related features\r\n    }\r\n\r\n    /**\r\n     * Set manual rotation speed\r\n     * @param {number} speed - Rotation speed in degrees per frame (like velocity)\r\n     */\r\n    setRotationSpeed(speed) {\r\n        // Direct degrees per frame, no conversion needed\r\n        this.state.rotationSpeed = speed;\r\n    }\r\n\r\n    /**\r\n     * Set manual rotation angle directly (for scratching)\r\n     * @param {number} angle - Rotation angle in DEGREES\r\n     */\r\n    setRotationAngle(angle) {\r\n        this.state.manualRotation = angle;\r\n    }\r\n    \r\n    /**\r\n     * Set gaze data from GazeTracker\r\n     * @param {Object} gazeData - Contains offset, proximity, and lock status\r\n     */\r\n    setGazeOffset(gazeData) {\r\n        // Handle both old format (just offset) and new format (full data)\r\n        if (typeof gazeData === 'object' && gazeData !== null) {\r\n            if (gazeData.hasOwnProperty('x') && gazeData.hasOwnProperty('y')) {\r\n                // Old format - just offset\r\n                this.state.gazeOffset = gazeData;\r\n            } else {\r\n                // New format - full gaze data\r\n                this.state.gazeOffset = gazeData.offset || { x: 0, y: 0 };\r\n                this.state.gazeIntensity = gazeData.proximity || 0;\r\n                this.state.gazeLocked = gazeData.isLocked || false;\r\n            }\r\n        }\r\n        \r\n        // Reset idle timer on interaction\r\n        this.idleTimer = 0;\r\n        if (this.isAsleep) {\r\n            this.wakeUp();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Get current orb position (center + gaze offset)\r\n     */\r\n    getCurrentOrbPosition() {\r\n        const logicalWidth = this.canvasManager.width;\r\n        const logicalHeight = this.canvasManager.height;\r\n        const centerX = logicalWidth / 2;\r\n        const centerY = logicalHeight / 2 - this.config.topOffset;\r\n        \r\n        return {\r\n            x: centerX + this.state.gazeOffset.x,\r\n            y: centerY + this.state.gazeOffset.y\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Sets a custom scale for the orb (used for breathing exercises)\r\n     * @param {number} scale - Scale factor (1.0 = normal)\r\n     */\r\n    setCustomScale(scale) {\r\n        this.state.customScale = scale;\r\n    }\r\n    \r\n    /**\r\n     * Start speaking animation\r\n     */\r\n    startSpeaking() {\r\n        this.state.speaking = true;\r\n        this.speakingRings = [];\r\n        this.ringSpawnTimer = 0;\r\n    }\r\n    \r\n    /**\r\n     * Stop speaking animation\r\n     */\r\n    stopSpeaking() {\r\n        this.state.speaking = false;\r\n        this.speakingRings = [];\r\n    }\r\n    \r\n    /**\r\n     * Enter sleep mode with animation\r\n     */\r\n    enterSleepMode() {\r\n        this.state.sleeping = true;\r\n        this.sleepZ = []; // Reset Z's\r\n        this.state.eyeOpenness = 1.0; // Start with eyes open\r\n        \r\n        // Initialize dimming values (start at full brightness)\r\n        this.state.sleepDimness = 1.0;\r\n        this.state.sleepScale = 1.0;\r\n        \r\n        // Force end any active blink\r\n        this.state.blinking = false;\r\n        \r\n        // Animate eye closing, then dimming\r\n        this.animateEyeClose();\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Animate eye closing for sleep, then dim\r\n     */\r\n    animateEyeClose() {\r\n        // Cancel any existing eye animations\r\n        if (this.loopCallbackIds.eyeClose) {\r\n            animationLoopManager.unregister(this.loopCallbackIds.eyeClose);\r\n            this.loopCallbackIds.eyeClose = null;\r\n        }\r\n        if (this.loopCallbackIds.eyeOpen) {\r\n            animationLoopManager.unregister(this.loopCallbackIds.eyeOpen);\r\n            this.loopCallbackIds.eyeOpen = null;\r\n        }\r\n        \r\n        const startTime = performance.now();\r\n        const eyeCloseDuration = 2000; // 2 seconds to close eyes\r\n        const dimDuration = 1000; // 1 second to dim after eyes close\r\n        \r\n        const animate = () => {\r\n            if (!this.state.sleeping) {\r\n                // Clean up loop callback ID\r\n                this.loopCallbackIds.eyeClose = null;\r\n                return; // Stop if woken up\r\n            }\r\n            \r\n            const elapsed = performance.now() - startTime;\r\n            \r\n            if (elapsed < eyeCloseDuration) {\r\n                // Phase 1: Close eyes\r\n                const progress = elapsed / eyeCloseDuration;\r\n                const eased = 1 - Math.pow(progress, 2);\r\n                this.state.eyeOpenness = 0.1 + eased * 0.9; // Close to 0.1 (nearly closed)\r\n                \r\n                // Keep full brightness during eye closing\r\n                this.state.sleepDimness = 1.0;\r\n                this.state.sleepScale = 1.0;\r\n                \r\n                // Continue animation on next frame\r\n            } else if (elapsed < eyeCloseDuration + dimDuration) {\r\n                // Phase 2: Dim the orb\r\n                const dimProgress = (elapsed - eyeCloseDuration) / dimDuration;\r\n                const dimEased = 1 - Math.pow(1 - dimProgress, 3); // Ease out cubic\r\n                \r\n                // Keep eyes closed\r\n                this.state.eyeOpenness = 0.1;\r\n                \r\n                // Animate dimming and scaling\r\n                this.state.sleepDimness = 1.0 - (dimEased * 0.4); // Dim to 0.6\r\n                this.state.sleepScale = 1.0 - (dimEased * 0.1); // Scale to 0.9\r\n                \r\n                // Continue animation on next frame\r\n            } else {\r\n                // Final state\r\n                this.state.eyeOpenness = 0.1;\r\n                this.state.sleepDimness = 0.6;\r\n                this.state.sleepScale = 0.9;\r\n                // Clean up loop callback ID\r\n                this.loopCallbackIds.eyeClose = null;\r\n            }\r\n        };\r\n\r\n        // Register with AnimationLoopManager\r\n        this.loopCallbackIds.eyeClose = animationLoopManager.register(\r\n            animate,\r\n            AnimationPriority.HIGH, // Eye animations are high priority\r\n            this\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Wake up from sleep with animation\r\n     */\r\n    wakeUp() {\r\n        if (!this.state.sleeping) return;\r\n        \r\n        this.state.sleeping = false;\r\n        this.state.breathRate = 1.0;\r\n        this.state.breathDepth = this.config.breathingDepth;\r\n        this.sleepZ = []; // Clear Z's\r\n        \r\n        // Reset blinking state\r\n        this.state.blinking = false;\r\n        // Blinking now handled by EyeRenderer\r\n        this.eyeRenderer.blinking = false;\r\n        this.eyeRenderer.blinkTimer = 0;\r\n        \r\n        // Animate eye opening\r\n        this.animateEyeOpen();\r\n        \r\n        // Quick shake animation\r\n        this.state.coreJitter = true;\r\n        setTimeout(() => {\r\n            this.state.coreJitter = false;\r\n        }, 200);\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Animate eye opening after wake - brighten first, then open eyes\r\n     */\r\n    animateEyeOpen() {\r\n        // Cancel any existing eye animations\r\n        if (this.loopCallbackIds.eyeOpen) {\r\n            animationLoopManager.unregister(this.loopCallbackIds.eyeOpen);\r\n            this.loopCallbackIds.eyeOpen = null;\r\n        }\r\n        if (this.loopCallbackIds.eyeClose) {\r\n            animationLoopManager.unregister(this.loopCallbackIds.eyeClose);\r\n            this.loopCallbackIds.eyeClose = null;\r\n        }\r\n        \r\n        const startTime = performance.now();\r\n        const brightenDuration = 500; // 0.5 seconds to brighten\r\n        const eyeOpenDuration = 1000; // 1 second to open eyes\r\n        \r\n        const animate = () => {\r\n            const elapsed = performance.now() - startTime;\r\n            \r\n            if (elapsed < brightenDuration) {\r\n                // Phase 1: Brighten the orb\r\n                const progress = elapsed / brightenDuration;\r\n                const eased = Math.sin(progress * Math.PI / 2); // Smooth acceleration\r\n                \r\n                // Animate brightening and scaling back\r\n                this.state.sleepDimness = 0.6 + (eased * 0.4); // Brighten from 0.6 to 1.0\r\n                this.state.sleepScale = 0.9 + (eased * 0.1); // Scale from 0.9 to 1.0\r\n                \r\n                // Keep eyes closed during brightening\r\n                this.state.eyeOpenness = 0.1;\r\n                \r\n                // Continue animation on next frame\r\n            } else if (elapsed < brightenDuration + eyeOpenDuration) {\r\n                // Phase 2: Open eyes\r\n                const eyeProgress = (elapsed - brightenDuration) / eyeOpenDuration;\r\n                const eyeEased = Math.sin(eyeProgress * Math.PI / 2); // Smooth acceleration\r\n                \r\n                // Keep full brightness\r\n                this.state.sleepDimness = 1.0;\r\n                this.state.sleepScale = 1.0;\r\n                \r\n                // Animate eye opening\r\n                this.state.eyeOpenness = 0.1 + eyeEased * 0.9; // Open from 0.1 to 1.0\r\n                \r\n                // Continue animation on next frame\r\n            } else {\r\n                // Final state\r\n                this.state.eyeOpenness = 1.0;\r\n                this.state.sleepDimness = 1.0;\r\n                this.state.sleepScale = 1.0;\r\n                // Clean up loop callback ID\r\n                this.loopCallbackIds.eyeOpen = null;\r\n            }\r\n        };\r\n\r\n        // Register with AnimationLoopManager\r\n        this.loopCallbackIds.eyeOpen = animationLoopManager.register(\r\n            animate,\r\n            AnimationPriority.HIGH, // Eye animations are high priority\r\n            this\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Enter zen meditation mode with animation\r\n     */\r\n    enterZenMode(targetColor, targetIntensity) {\r\n        // Cancel any existing zen animations\r\n        if (this.animationFrameIds.zenEnter) {\r\n            cancelAnimationFrame(this.animationFrameIds.zenEnter);\r\n            this.animationFrameIds.zenEnter = null;\r\n        }\r\n        if (this.animationFrameIds.zenExit) {\r\n            cancelAnimationFrame(this.animationFrameIds.zenExit);\r\n            this.animationFrameIds.zenExit = null;\r\n        }\r\n        \r\n        // Set to zen color with target intensity\r\n        this.state.glowColor = targetColor;\r\n        this.state.glowIntensity = targetIntensity; // Keep the glow\r\n        \r\n        // Cancel any active color transition\r\n        this.colorTransition.active = false;\r\n        \r\n        this.zenTransition = {\r\n            active: true,\r\n            phase: 'entering',\r\n            startTime: performance.now(),\r\n            previousEmotion: this.state.emotion,\r\n            targetEmotion: null,\r\n            scaleX: 1.0,\r\n            scaleY: 1.0,\r\n            arcHeight: 0,\r\n            lotusMorph: 0,     // 0 = no lotus, 1 = full lotus\r\n            petalSpread: 0,    // 0 = closed petals, 1 = full spread\r\n            smileCurve: 0      // 0 = no smile, 1 = full smile\r\n        };\r\n        \r\n        const animate = () => {\r\n            if (!this.zenTransition.active || this.zenTransition.phase !== 'entering') {\r\n                // Clean up loop callback ID\r\n                this.loopCallbackIds.zenEnter = null;\r\n                return;\r\n            }\r\n            \r\n            const elapsed = performance.now() - this.zenTransition.startTime;\r\n            const lotusMorphDuration = 400; // 0.4s for lotus to bloom - smooth transition\r\n            \r\n            if (elapsed < lotusMorphDuration) {\r\n                // Direct lotus blooming - no intro animation\r\n                const lotusProgress = elapsed / lotusMorphDuration;\r\n                const lotusEased = 1 - Math.pow(1 - lotusProgress, 2); // Ease out quad\r\n                \r\n                // Direct lotus bloom without arc or narrowing\r\n                this.zenTransition.scaleX = 1.0;\r\n                this.zenTransition.scaleY = 1.0;  // Full size\r\n                this.zenTransition.arcHeight = 0;  // No arc\r\n                \r\n                // Morph the lotus shape directly\r\n                this.zenTransition.lotusMorph = lotusEased; // 0 to 100%\r\n                this.zenTransition.petalSpread = lotusEased;\r\n                \r\n                // Smile appears gradually\r\n                this.zenTransition.smileCurve = Math.sin(lotusProgress * Math.PI / 2); // Smooth ease\r\n                \r\n                // Register with AnimationLoopManager\r\n        this.loopCallbackIds.zenEnter = animationLoopManager.register(\r\n            animate,\r\n            AnimationPriority.MEDIUM, // Zen animations are medium priority\r\n            this\r\n        );\r\n            } else {\r\n                // Final state - in meditation with full lotus, then start floating\r\n                this.zenTransition.phase = 'in';\r\n                this.zenTransition.scaleX = 1.0;\r\n                this.zenTransition.scaleY = 1.0;  // Full size\r\n                this.zenTransition.arcHeight = 0;  // No arc\r\n                this.zenTransition.lotusMorph = 1.0;\r\n                this.zenTransition.petalSpread = 1.0;\r\n                this.zenTransition.smileCurve = 1.0;\r\n                \r\n                // Set gentle vortex for zen state\r\n                this.state.zenVortexIntensity = 1.0;  // Can be adjusted: 0.5 = very gentle, 2.0 = strong\r\n                // Clean up loop callback ID\r\n                this.loopCallbackIds.zenEnter = null;\r\n            }\r\n        };\r\n        \r\n        // Register with AnimationLoopManager\r\n        this.loopCallbackIds.zenEnter = animationLoopManager.register(\r\n            animate,\r\n            AnimationPriority.MEDIUM, // Zen animations are medium priority\r\n            this\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Exit zen meditation mode with awakening animation\r\n     */\r\n    exitZenMode(targetEmotion, targetColor, targetIntensity) {\r\n        if (!this.zenTransition.active || this.zenTransition.phase !== 'in') return;\r\n        \r\n        // Cancel any existing zen animations\r\n        if (this.animationFrameIds.zenEnter) {\r\n            cancelAnimationFrame(this.animationFrameIds.zenEnter);\r\n            this.animationFrameIds.zenEnter = null;\r\n        }\r\n        if (this.animationFrameIds.zenExit) {\r\n            cancelAnimationFrame(this.animationFrameIds.zenExit);\r\n            this.animationFrameIds.zenExit = null;\r\n        }\r\n        \r\n        this.zenTransition.phase = 'exiting';\r\n        this.zenTransition.startTime = performance.now();\r\n        this.zenTransition.targetEmotion = targetEmotion;\r\n        \r\n        const animate = () => {\r\n            if (!this.zenTransition.active || this.zenTransition.phase !== 'exiting') {\r\n                // Clean up loop callback ID\r\n                this.loopCallbackIds.zenExit = null;\r\n                return;\r\n            }\r\n            \r\n            const elapsed = performance.now() - this.zenTransition.startTime;\r\n            const straightenDuration = 150; // 0.15s to straighten arc - FAST\r\n            const awakeDuration = 200; // 0.2s for awakening gestures - FAST\r\n            const expandDuration = 200; // 0.2s to expand back - FAST\r\n            const settleDuration = 100; // 0.1s for final settle - FAST\r\n            \r\n            if (elapsed < straightenDuration) {\r\n                // Phase 1: Lotus closing and arc straightening - start color transition\r\n                const progress = elapsed / straightenDuration;\r\n                const eased = 1 - Math.pow(1 - progress, 2);\r\n                \r\n                // Start color transition at beginning of exit\r\n                if (progress === 0 || !this.colorTransition.active) {\r\n                    this.startColorTransition(targetColor, targetIntensity, straightenDuration);\r\n                }\r\n                \r\n                this.zenTransition.arcHeight = 1.5 * (1 - eased); // Flatten arc from full height\r\n                \r\n                // Close lotus petals quickly\r\n                this.zenTransition.smileCurve = 1.0 * (1 - eased); // Smile fades first\r\n                if (progress > 0.3) {\r\n                    const petalProgress = (progress - 0.3) / 0.7;\r\n                    this.zenTransition.petalSpread = 1.0 * (1 - petalProgress); // Petals close\r\n                }\r\n                if (progress > 0.5) {\r\n                    const morphProgress = (progress - 0.5) / 0.5;\r\n                    this.zenTransition.lotusMorph = 1.0 * (1 - morphProgress); // Lotus disappears\r\n                }\r\n                \r\n                // Register with AnimationLoopManager\r\n        this.loopCallbackIds.zenExit = animationLoopManager.register(\r\n            animate,\r\n            AnimationPriority.MEDIUM, // Zen animations are medium priority\r\n            this\r\n        );\r\n            } else if (elapsed < straightenDuration + awakeDuration) {\r\n                // Phase 2: Awakening gestures\r\n                const awakeProgress = (elapsed - straightenDuration) / awakeDuration;\r\n                \r\n                // Lotus is fully closed by now\r\n                this.zenTransition.lotusMorph = 0;\r\n                this.zenTransition.petalSpread = 0;\r\n                this.zenTransition.smileCurve = 0;\r\n                \r\n                // Slow blink (0-0.3)\r\n                if (awakeProgress < 0.2) {\r\n                    const blinkProg = awakeProgress / 0.2;\r\n                    this.zenTransition.scaleY = 1.0 - (Math.sin(blinkProg * Math.PI) * 0.8);\r\n                }\r\n                // Gentle shake (0.3-0.6)\r\n                else if (awakeProgress < 0.6) {\r\n                    const shakeProg = (awakeProgress - 0.2) / 0.4;\r\n                    this.zenTransition.scaleY = 1.0;\r\n                    // Add small X offset for shake (will be applied in render)\r\n                    this.state.shakeOffset = Math.sin(shakeProg * Math.PI * 4) * 3;\r\n                }\r\n                // Upward drift with brighten (0.6-1.0)\r\n                else {\r\n                    const driftProg = (awakeProgress - 0.6) / 0.4;\r\n                    this.state.driftY = -10 * driftProg;\r\n                    this.state.glowIntensity = 1.0 + (0.5 * driftProg); // Brighten\r\n                }\r\n                \r\n                // Register with AnimationLoopManager\r\n        this.loopCallbackIds.zenExit = animationLoopManager.register(\r\n            animate,\r\n            AnimationPriority.MEDIUM, // Zen animations are medium priority\r\n            this\r\n        );\r\n            } else if (elapsed < straightenDuration + awakeDuration + expandDuration) {\r\n                // Phase 3: Horizontal expansion (sunrise)\r\n                const expandProgress = (elapsed - straightenDuration - awakeDuration) / expandDuration;\r\n                const expandEased = Math.sin(expandProgress * Math.PI / 2);\r\n                \r\n                this.zenTransition.scaleX = 1.0;\r\n                this.zenTransition.scaleY = 0.2 + (expandEased * 0.8); // Expand vertically back to 1.0 (sunrise)\r\n                this.state.driftY = -10 * (1 - expandProgress); // Return to center\r\n                this.state.glowIntensity = 1.5 - (0.5 * expandProgress); // Normal glow\r\n                \r\n                // Register with AnimationLoopManager\r\n        this.loopCallbackIds.zenExit = animationLoopManager.register(\r\n            animate,\r\n            AnimationPriority.MEDIUM, // Zen animations are medium priority\r\n            this\r\n        );\r\n            } else if (elapsed < straightenDuration + awakeDuration + expandDuration + settleDuration) {\r\n                // Phase 4: Final settle pulse\r\n                const settleProgress = (elapsed - straightenDuration - awakeDuration - expandDuration) / settleDuration;\r\n                const pulse = Math.sin(settleProgress * Math.PI);\r\n                \r\n                this.zenTransition.scaleX = 1.0 + (pulse * 0.05);\r\n                this.zenTransition.scaleY = 1.0 + (pulse * 0.05);\r\n                \r\n                // Register with AnimationLoopManager\r\n        this.loopCallbackIds.zenExit = animationLoopManager.register(\r\n            animate,\r\n            AnimationPriority.MEDIUM, // Zen animations are medium priority\r\n            this\r\n        );\r\n            } else {\r\n                // Complete - reset to normal\r\n                this.zenTransition.active = false;\r\n                this.zenTransition.phase = null;\r\n                this.zenTransition.scaleX = 1.0;\r\n                this.zenTransition.scaleY = 1.0;\r\n                this.zenTransition.arcHeight = 0;\r\n                this.zenTransition.lotusMorph = 0;\r\n                this.zenTransition.petalSpread = 0;\r\n                this.zenTransition.smileCurve = 0;\r\n                this.state.shakeOffset = 0;\r\n                this.state.driftY = 0;\r\n                // Clean up loop callback ID\r\n                this.loopCallbackIds.zenExit = null;\r\n            }\r\n        };\r\n        \r\n        // Register with AnimationLoopManager\r\n        this.loopCallbackIds.zenExit = animationLoopManager.register(\r\n            animate,\r\n            AnimationPriority.MEDIUM, // Zen animations are medium priority\r\n            this\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * Start recording mode\r\n     */\r\n    startRecording() {\r\n        this.state.recording = true;\r\n    }\r\n    \r\n    /**\r\n     * Stop recording mode\r\n     */\r\n    stopRecording() {\r\n        this.state.recording = false;\r\n    }\r\n    \r\n    /**\r\n     * Get random blink time (2-6 seconds)\r\n     */\r\n    \r\n    /**\r\n     * Set whether blinking is enabled\r\n     * @param {boolean} enabled - Whether blinking should be enabled\r\n     */\r\n    setBlinkingEnabled(enabled) {\r\n        this.state.blinkingEnabled = enabled;\r\n        if (!enabled) {\r\n            // If disabling blinking, immediately stop any current blink\r\n            this.state.blinking = false;\r\n            // Reset blinking via EyeRenderer\r\n            this.eyeRenderer.blinking = false;\r\n            this.eyeRenderer.blinkTimer = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set gaze tracking enabled state\r\n     * @param {boolean} enabled - Whether gaze tracking should be enabled\r\n     */\r\n    setGazeTracking(enabled) {\r\n        this.state.gazeTrackingEnabled = enabled;\r\n        if (enabled) {\r\n            // Start tracking mouse/touch position\r\n            if (!this.gazeTrackingInitialized) {\r\n                this.initGazeTracking();\r\n            }\r\n        } else {\r\n            // Reset gaze to center when disabled\r\n            this.state.gazeTarget = { x: 0, y: 0 };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize gaze tracking event listeners\r\n     */\r\n    initGazeTracking() {\r\n        // Always set up listeners once\r\n        if (this.gazeTrackingInitialized) return;\r\n\r\n        this.handleMouseMove = (e) => {\r\n            if (!this.state.gazeTrackingEnabled) return;\r\n\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            const centerX = rect.width / 2;\r\n            const centerY = rect.height / 2;\r\n            const x = e.clientX - rect.left - centerX;\r\n            const y = e.clientY - rect.top - centerY;\r\n\r\n            // Normalize to -1 to 1 range\r\n            this.state.gazeTarget = {\r\n                x: x / centerX,\r\n                y: y / centerY\r\n            };\r\n        };\r\n\r\n        this.handleTouchMove = (e) => {\r\n            if (!this.state.gazeTrackingEnabled) return;\r\n\r\n            if (e.touches.length > 0) {\r\n                const touch = e.touches[0];\r\n                const rect = this.canvas.getBoundingClientRect();\r\n                const centerX = rect.width / 2;\r\n                const centerY = rect.height / 2;\r\n                const x = touch.clientX - rect.left - centerX;\r\n                const y = touch.clientY - rect.top - centerY;\r\n\r\n                // Normalize to -1 to 1 range\r\n                this.state.gazeTarget = {\r\n                    x: x / centerX,\r\n                    y: y / centerY\r\n                };\r\n            }\r\n        };\r\n\r\n        document.addEventListener('mousemove', this.handleMouseMove);\r\n        document.addEventListener('touchmove', this.handleTouchMove);\r\n        this.gazeTrackingInitialized = true;\r\n    }\r\n\r\n    /**\r\n     * Clean up gaze tracking event listeners\r\n     */\r\n    cleanupGazeTracking() {\r\n        if (!this.gazeTrackingInitialized) return;\r\n\r\n        if (this.handleMouseMove) {\r\n            document.removeEventListener('mousemove', this.handleMouseMove);\r\n        }\r\n        if (this.handleTouchMove) {\r\n            document.removeEventListener('touchmove', this.handleTouchMove);\r\n        }\r\n        this.gazeTrackingInitialized = false;\r\n    }\r\n\r\n    /**\r\n     * Convert hex to rgba\r\n     */\r\n    hexToRgba(hex, alpha = 1) {\r\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        if (result) {\r\n            return `rgba(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}, ${alpha})`;\r\n        }\r\n        return `rgba(0, 0, 0, ${alpha})`;\r\n    }\r\n    \r\n    /**\r\n     * Set quality level for degradation manager compatibility\r\n     * @param {number} quality - Quality level (0-1)\r\n     */\r\n    setQualityLevel(quality) {\r\n        this.qualityLevel = Math.max(0, Math.min(1, quality));\r\n        \r\n        // Adjust rendering parameters based on quality\r\n        if (this.qualityLevel < 0.5) {\r\n            // Low quality mode\r\n            this.ctx.imageSmoothingEnabled = false;\r\n            this.state.breathDepth *= 0.5; // Reduce animation complexity\r\n        } else if (this.qualityLevel < 0.8) {\r\n            // Medium quality\r\n            this.ctx.imageSmoothingEnabled = true;\r\n            this.ctx.imageSmoothingQuality = 'medium';\r\n        } else {\r\n            // High quality\r\n            this.ctx.imageSmoothingEnabled = true;\r\n            this.ctx.imageSmoothingQuality = 'high';\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set quality reduction (for degradation manager)\r\n     * @param {boolean} enabled - Whether quality reduction is enabled\r\n     */\r\n    setQualityReduction(enabled) {\r\n        if (enabled) {\r\n            this.setQualityLevel(0.5);\r\n        } else {\r\n            this.setQualityLevel(1.0);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handle canvas context recovery\r\n     * @param {CanvasRenderingContext2D} newContext - New context after recovery\r\n     */\r\n    handleContextRecovery(newContext) {\r\n        this.ctx = newContext;\r\n    }\r\n    \r\n    /**\r\n     * Get the current undertone modifier for particle system\r\n     * @returns {Object|null} Current undertone modifier or null\r\n     */\r\n    getUndertoneModifier() {\r\n        // Use the new weighted method from state machine if available\r\n        if (this.stateMachine && this.stateMachine.getWeightedUndertoneModifiers) {\r\n            return this.stateMachine.getWeightedUndertoneModifiers();\r\n        }\r\n        \r\n        // Fallback to old method\r\n        if (!this.currentUndertone || !this.undertoneModifiers[this.currentUndertone]) {\r\n            return null;\r\n        }\r\n        return this.undertoneModifiers[this.currentUndertone];\r\n    }\r\n    \r\n    /**\r\n     * Apply all active gesture animations\r\n     * Returns combined transform object\r\n     */\r\n    // Gesture animations moved to GestureAnimator module\r\n    applyGestureAnimations() {\r\n        return this.gestureAnimator.applyGestureAnimations();\r\n    }\r\n      \r\n    /**\r\n     * Start a gesture animation - delegates to GestureAnimator\r\n     */\r\n    startGesture(gestureName) {\r\n        // Simply delegate to GestureAnimator\r\n        return this.gestureAnimator.startGesture(gestureName);\r\n    }\r\n    \r\n    /**\r\n     * Get current active gesture information for particle system\r\n     * @returns {Object|null} Current gesture with particleMotion and progress, or null\r\n     */\r\n    getCurrentGesture() {\r\n        // Delegate to GestureAnimator to get current gesture\r\n        return this.gestureAnimator.getCurrentGesture();\r\n    }\r\n    \r\n    // Individual start methods for each gesture - delegate to GestureAnimator\r\n    startBounce() { this.gestureAnimator.startBounce(); }\r\n    startPulse() { this.gestureAnimator.startPulse(); }\r\n    startShake() { this.gestureAnimator.startShake(); }\r\n    startSpin() { this.gestureAnimator.startSpin(); }\r\n    startNod() { this.gestureAnimator.startNod(); }\r\n    startTilt() { this.gestureAnimator.startTilt(); }\r\n    startExpand() { this.gestureAnimator.startExpand(); }\r\n    startContract() { this.gestureAnimator.startContract(); }\r\n    startFlash() { this.gestureAnimator.startFlash(); }\r\n    startDrift() { this.gestureAnimator.startDrift(); }\r\n    startStretch() { this.gestureAnimator.startStretch(); }\r\n    startGlow() { this.gestureAnimator.startGlow(); }\r\n    startFlicker() { this.gestureAnimator.startFlicker(); }\r\n    startVibrate() { this.gestureAnimator.startVibrate(); }\r\n    startOrbital() { this.gestureAnimator.startOrbital(); }\r\n    startHula() { this.gestureAnimator.startHula(); }\r\n    startWave() { this.gestureAnimator.startWave(); }\r\n    startBreathe() { this.gestureAnimator.startBreathe(); }\r\n    startMorph() { this.gestureAnimator.startMorph(); }\r\n    startSlowBlink() { this.gestureAnimator.startSlowBlink(); }\r\n    startLook() { this.gestureAnimator.startLook(); }\r\n    startSettle() { this.gestureAnimator.startSettle(); }\r\n    startBreathIn() { this.gestureAnimator.startBreathIn(); }\r\n    startBreathOut() { this.gestureAnimator.startBreathOut(); }\r\n    startBreathHold() { this.gestureAnimator.startBreathHold(); }\r\n    startBreathHoldEmpty() { this.gestureAnimator.startBreathHoldEmpty(); }\r\n    startJump() { this.gestureAnimator.startJump(); }\r\n    startSway() { this.gestureAnimator.startSway(); }\r\n    startFloat() { this.gestureAnimator.startFloat(); }\r\n    startRain() { this.gestureAnimator.startRain(); }\r\n    startRunningMan() { this.gestureAnimator.startRunningMan(); }\r\n    startCharleston() { this.gestureAnimator.startCharleston(); }\r\n\r\n    // Ambient dance animations\r\n    startGrooveSway(options) { this.ambientDanceAnimator.startAmbientAnimation('grooveSway', options); }\r\n    startGrooveBob(options) { this.ambientDanceAnimator.startAmbientAnimation('grooveBob', options); }\r\n    startGrooveFlow(options) { this.ambientDanceAnimator.startAmbientAnimation('grooveFlow', options); }\r\n    startGroovePulse(options) { this.ambientDanceAnimator.startAmbientAnimation('groovePulse', options); }\r\n    startGrooveStep(options) { this.ambientDanceAnimator.startAmbientAnimation('grooveStep', options); }\r\n    startSparkle() { this.gestureAnimator.startSparkle(); }\r\n    startShimmer() { this.gestureAnimator.startShimmer(); }\r\n    startWiggle() { this.gestureAnimator.startWiggle(); }\r\n    startGroove() { this.gestureAnimator.startGroove(); }\r\n    startPoint() { this.gestureAnimator.startPoint(); }\r\n    startLean() { this.gestureAnimator.startLean(); }\r\n    startReach() { this.gestureAnimator.startReach(); }\r\n    startHeadBob() { this.gestureAnimator.startHeadBob(); }\r\n    startOrbit() { this.gestureAnimator.startOrbit(); }\r\n    \r\n    /**\r\n     * Stop all active gestures - delegates to GestureAnimator\r\n     */\r\n    stopAllGestures() {\r\n        this.gestureAnimator.stopAllGestures();\r\n        this.currentGesture = null;\r\n    }\r\n    \r\n    /**\r\n     * Check if any gesture is active - delegates to GestureAnimator\r\n     */\r\n    isGestureActive() {\r\n        return Object.values(this.gestureAnimator.gestureAnimations).some(anim => anim.active);\r\n    }\r\n    \r\n    /**\r\n     * Clean up resources\r\n     */\r\n    destroy() {\r\n        // Cancel all animation frames to prevent memory leaks\r\n        for (const key in this.animationFrameIds) {\r\n            if (this.animationFrameIds[key]) {\r\n                cancelAnimationFrame(this.animationFrameIds[key]);\r\n                this.animationFrameIds[key] = null;\r\n            }\r\n        }\r\n        \r\n        // Clear animation states\r\n        this.colorTransition.active = false;\r\n        if (this.zenTransition) {\r\n            this.zenTransition.active = false;\r\n        }\r\n        \r\n        // Clear other resources\r\n        this.speakingRings = [];\r\n        \r\n        // Clear gesture compositor cache\r\n        if (this.gestureCompositor) {\r\n            this.gestureCompositor.clearCache();\r\n        }\r\n    }\r\n}\r\n\r\nexport default EmotiveRenderer;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                       ◐ ◑ ◒ ◓  GAZE TRACKER  ◓ ◒ ◑ ◐                       \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Gaze Tracker - Interactive Eye Following & Cursor Awareness\n * @author Emotive Engine Team\n * @version 2.1.0\n * @module GazeTracker\n * @changelog 2.1.0 - Cached canvas rect to eliminate reflows on mouse/touch moves\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Brings the orb to LIFE by making it aware of your cursor. Creates natural         \n * ║ eye-following behavior with smooth interpolation. When you move close,            \n * ║ the orb \"looks\" at you. Move away, and it relaxes back to center.                 \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 👁️ GAZE BEHAVIORS                                                                \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Smooth following with linear interpolation (lerp)                               \n * │ • Proximity-based engagement (closer = more response)                             \n * │ • Center lock when cursor is very close                                           \n * │ • Boundary constraints to keep pupils inside orb                                  \n * │ • Touch and mouse support                                                         \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎮 CONFIGURATION                                                                   \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • smoothing       : 0.1 (lerp factor, 0.05-0.15 recommended)                      \n * │ • maxOffset       : 0.3 (max gaze offset as % of core radius)                     \n * │ • lockDistance    : 30px (distance to trigger center lock)                        \n * │ • boundaryPadding : 0.8 (keep gaze within 80% of core)                            \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\nclass GazeTracker {\n    constructor(canvas, options = {}) {\n        this.canvas = canvas;\n        \n        // Configuration\n        this.config = {\n            smoothing: options.smoothing || 0.1,  // Lerp factor (0.05-0.15 recommended)\n            maxOffset: options.maxOffset || 0.3,  // Max gaze offset (30% of core radius)\n            lockDistance: options.lockDistance || 30,  // Pixels from center to trigger lock\n            enabled: options.enabled !== false,\n            boundaryPadding: options.boundaryPadding || 0.8  // Keep gaze within 80% of core\n        };\n        \n        // State\n        this.canvasCenter = { x: 0, y: 0 };\n        this.mousePos = { x: 0, y: 0 };  // Will be initialized to center after updateCanvasCenter\n        this.targetGaze = { x: 0, y: 0 };\n        this.currentGaze = { x: 0, y: 0 };\n        this.isLocked = false;\n        this.proximity = 0;  // 0-1 value for how close cursor is\n        \n        // Cache canvas rect to avoid reflows\n        this.cachedRect = null;\n        \n        // Touch state\n        this.touches = new Map();\n        this.primaryTouch = null;\n        \n        // Bind event handlers\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\n        this.handleTouchStart = this.handleTouchStart.bind(this);\n        this.handleTouchMove = this.handleTouchMove.bind(this);\n        this.handleTouchEnd = this.handleTouchEnd.bind(this);\n        \n        // Interaction callback\n        this.onInteraction = null;\n        \n        // Initialize\n        this.updateCanvasCenter();\n        this.attachEventListeners();\n        \n        // Handle canvas resize\n        this.resizeObserver = new ResizeObserver(() => {\n            this.updateCanvasCenter();\n        });\n        this.resizeObserver.observe(this.canvas);\n    }\n    \n    /**\n     * Update canvas center point\n     */\n    updateCanvasCenter() {\n        // Cache the rect to avoid repeated reflows\n        this.cachedRect = this.canvas.getBoundingClientRect();\n        this.canvasCenter = {\n            x: this.cachedRect.width / 2,\n            y: this.cachedRect.height / 2\n        };\n        // Initialize mouse position to center if not set\n        if (this.mousePos.x === 0 && this.mousePos.y === 0) {\n            this.mousePos = { x: this.canvasCenter.x, y: this.canvasCenter.y };\n        }\n    }\n    \n    /**\n     * Attach event listeners\n     */\n    attachEventListeners() {\n        if (!this.config.enabled) return;\n        \n        // Mouse events\n        this.canvas.addEventListener('mousemove', this.handleMouseMove);\n        this.canvas.addEventListener('mouseleave', this.handleMouseLeave);\n        \n        // Touch events\n        this.canvas.addEventListener('touchstart', this.handleTouchStart, { passive: true });\n        this.canvas.addEventListener('touchmove', this.handleTouchMove, { passive: true });\n        this.canvas.addEventListener('touchend', this.handleTouchEnd, { passive: true });\n        this.canvas.addEventListener('touchcancel', this.handleTouchEnd, { passive: true });\n    }\n    \n    /**\n     * Handle mouse movement\n     */\n    handleMouseMove(event) {\n        // Use cached rect to avoid reflow on every mouse move\n        const rect = this.cachedRect || this.canvas.getBoundingClientRect();\n        this.mousePos = {\n            x: event.clientX - rect.left,\n            y: event.clientY - rect.top\n        };\n        this.updateTargetGaze();\n        \n        // Notify of interaction\n        if (this.onInteraction) {\n            this.onInteraction('mouse');\n        }\n    }\n    \n    /**\n     * Handle mouse leave\n     */\n    handleMouseLeave() {\n        // Return gaze to center when mouse leaves\n        this.targetGaze = { x: 0, y: 0 };\n        this.isLocked = false;\n        this.proximity = 0;\n        // Reset mouse position to center when leaving\n        this.mousePos = { x: this.canvasCenter.x, y: this.canvasCenter.y };\n    }\n    \n    /**\n     * Handle touch start\n     */\n    handleTouchStart(event) {\n        for (const touch of event.changedTouches) {\n            this.touches.set(touch.identifier, {\n                x: touch.clientX,\n                y: touch.clientY\n            });\n            \n            // Set first touch as primary\n            if (!this.primaryTouch && this.touches.size === 1) {\n                this.primaryTouch = touch.identifier;\n            }\n        }\n        \n        if (this.primaryTouch !== null) {\n            this.updateTouchPosition(event.touches);\n        }\n    }\n    \n    /**\n     * Handle touch move\n     */\n    handleTouchMove(event) {\n        for (const touch of event.changedTouches) {\n            if (this.touches.has(touch.identifier)) {\n                this.touches.set(touch.identifier, {\n                    x: touch.clientX,\n                    y: touch.clientY\n                });\n            }\n        }\n        \n        if (this.primaryTouch !== null) {\n            this.updateTouchPosition(event.touches);\n            \n            // Notify of interaction\n            if (this.onInteraction) {\n                this.onInteraction('touch');\n            }\n        }\n    }\n    \n    /**\n     * Handle touch end\n     */\n    handleTouchEnd(event) {\n        for (const touch of event.changedTouches) {\n            this.touches.delete(touch.identifier);\n            \n            // Reset primary touch if it ended\n            if (touch.identifier === this.primaryTouch) {\n                this.primaryTouch = null;\n                \n                // Select new primary touch if available\n                if (this.touches.size > 0) {\n                    this.primaryTouch = this.touches.keys().next().value;\n                } else {\n                    // No touches left, return to center\n                    this.handleMouseLeave();\n                }\n            }\n        }\n    }\n    \n    /**\n     * Update position from touch\n     */\n    updateTouchPosition(touches) {\n        for (const touch of touches) {\n            if (touch.identifier === this.primaryTouch) {\n                // Use cached rect to avoid reflow on every touch move\n                const rect = this.cachedRect || this.canvas.getBoundingClientRect();\n                this.mousePos = {\n                    x: touch.clientX - rect.left,\n                    y: touch.clientY - rect.top\n                };\n                this.updateTargetGaze();\n                break;\n            }\n        }\n    }\n    \n    /**\n     * Calculate target gaze position based on mouse/touch position\n     */\n    updateTargetGaze() {\n        // Calculate vector from center to mouse\n        const dx = this.mousePos.x - this.canvasCenter.x;\n        const dy = this.mousePos.y - this.canvasCenter.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        // Calculate proximity (0-1, closer = higher)\n        const maxDistance = Math.min(this.canvasCenter.x, this.canvasCenter.y);\n        this.proximity = Math.max(0, 1 - (distance / maxDistance));\n        \n        // Check for gaze lock (very close to center)\n        this.isLocked = distance < this.config.lockDistance;\n        \n        if (this.isLocked) {\n            // When locked, gaze moves more dramatically\n            this.targetGaze = {\n                x: dx * this.config.maxOffset * 2,\n                y: dy * this.config.maxOffset * 2\n            };\n        } else {\n            // Normal gaze following with boundary constraints\n            const maxOffset = Math.min(this.canvasCenter.x, this.canvasCenter.y) * this.config.maxOffset;\n            \n            if (distance > 0) {\n                // Normalize and apply max offset\n                const factor = Math.min(1, distance / maxDistance);\n                this.targetGaze = {\n                    x: (dx / distance) * maxOffset * factor * this.config.boundaryPadding,\n                    y: (dy / distance) * maxOffset * factor * this.config.boundaryPadding\n                };\n            } else {\n                this.targetGaze = { x: 0, y: 0 };\n            }\n        }\n    }\n    \n    /**\n     * Update gaze position with smooth interpolation\n     * @param {number} deltaTime - Time since last update in ms\n     */\n    update(deltaTime) {\n        if (!this.config.enabled) return;\n        \n        // Smooth interpolation towards target\n        const smoothing = 1 - Math.pow(1 - this.config.smoothing, deltaTime / 16.67); // Normalize to 60fps\n        \n        this.currentGaze.x += (this.targetGaze.x - this.currentGaze.x) * smoothing;\n        this.currentGaze.y += (this.targetGaze.y - this.currentGaze.y) * smoothing;\n        \n        // Add micro jitter when locked for liveliness\n        if (this.isLocked) {\n            const jitter = 0.5;\n            this.currentGaze.x += (Math.random() - 0.5) * jitter;\n            this.currentGaze.y += (Math.random() - 0.5) * jitter;\n        }\n    }\n    \n    /**\n     * Get current gaze offset for rendering\n     * @param {number} coreRadius - The radius of the core\n     * @returns {Object} Gaze offset {x, y}\n     */\n    getGazeOffset(coreRadius) {\n        return {\n            x: this.currentGaze.x,\n            y: this.currentGaze.y\n        };\n    }\n    \n    /**\n     * Get current state\n     * @returns {Object} Current gaze state\n     */\n    getState() {\n        return {\n            gaze: { ...this.currentGaze },\n            target: { ...this.targetGaze },\n            proximity: this.proximity,\n            isLocked: this.isLocked,\n            isActive: this.config.enabled\n        };\n    }\n    \n    /**\n     * Enable gaze tracking\n     */\n    enable() {\n        if (!this.config.enabled) {\n            this.config.enabled = true;\n            this.attachEventListeners();\n        }\n    }\n    \n    /**\n     * Disable gaze tracking\n     */\n    disable() {\n        if (this.config.enabled) {\n            this.config.enabled = false;\n            this.detachEventListeners();\n            this.targetGaze = { x: 0, y: 0 };\n        }\n    }\n    \n    /**\n     * Detach event listeners\n     */\n    detachEventListeners() {\n        this.canvas.removeEventListener('mousemove', this.handleMouseMove);\n        this.canvas.removeEventListener('mouseleave', this.handleMouseLeave);\n        this.canvas.removeEventListener('touchstart', this.handleTouchStart);\n        this.canvas.removeEventListener('touchmove', this.handleTouchMove);\n        this.canvas.removeEventListener('touchend', this.handleTouchEnd);\n        this.canvas.removeEventListener('touchcancel', this.handleTouchEnd);\n    }\n    \n    /**\n     * Set interaction callback\n     * @param {Function} callback - Function to call on interaction\n     */\n    setInteractionCallback(callback) {\n        this.onInteraction = callback;\n    }\n    \n    /**\n     * Clean up resources\n     */\n    destroy() {\n        this.detachEventListeners();\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n        this.touches.clear();\n    }\n}\n\nexport default GazeTracker;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                       ◐ ◑ ◒ ◓  IDLE BEHAVIOR  ◓ ◒ ◑ ◐                       \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Idle Behavior - Organic Life Through Subtle Animations\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module IdleBehavior\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Makes the orb feel ALIVE even when you're not interacting. Random blinks,         \n * ║ subtle swaying, gentle breathing - all the little unconscious movements           \n * ║ that make something feel like it has a soul rather than just code.                \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 😴 IDLE ANIMATIONS                                                                \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Blinking     : Random intervals (3-7 seconds)                                   \n * │ • Swaying      : Subtle drift (20-40 second intervals)                            \n * │ • Breathing    : Continuous gentle pulsing                                        \n * │ • Sleep Mode   : After timeout (default: never)                                   \n * │ • Weight Shift : Occasional position adjustments                                  \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ ⏱️ TIMING CONFIGURATION                                                             \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ BEHAVIOR       MIN TIME    MAX TIME    DURATION                                  \n * │ Blinking       3000ms      7000ms      150ms                                     \n * │ Swaying        20000ms     40000ms     4000ms                                    \n * │ Sleep          Infinity    -            -                                        \n * │ Breathing      continuous  -            0.25 rad/s                               \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\nclass IdleBehavior {\n    constructor(options = {}) {\n        // Configuration\n        this.config = {\n            blinkInterval: options.blinkInterval || { min: 3000, max: 7000 }, // ms - less frequent\n            blinkDuration: options.blinkDuration || 150, // ms\n            swayInterval: options.swayInterval || { min: 20000, max: 40000 }, // ms - very infrequent weight shifts\n            swayDuration: options.swayDuration || 4000, // ms - very slow, smooth transition\n            swayIntensity: options.swayIntensity || 1.5, // pixels - extremely subtle drift\n            sleepTimeout: options.sleepTimeout !== undefined ? options.sleepTimeout : Infinity, // Default: never auto-sleep\n            breathingSpeed: options.breathingSpeed || 0.25, // radians per second\n            breathingDepth: options.breathingDepth || 0.1, // 10% size variation\n            enabled: options.enabled !== false\n        };\n        \n        // State\n        this.state = {\n            isBlinking: false,\n            isSwaying: false,\n            isAsleep: false,\n            breathingPhase: 0,\n            breathRate: 1.0,\n            breathDepth: this.config.breathingDepth\n        };\n        \n        // Timers\n        this.timers = {\n            idle: 0,\n            blink: 0,\n            sway: 0,\n            swayProgress: 0,  // 0 to 1 progress through sway animation\n            nextBlink: this.getRandomInterval('blink'),\n            nextSway: this.getRandomInterval('sway')\n        };\n        \n        // Sway state - smooth weight shift\n        this.swayOffset = { x: 0, y: 0 };\n        this.swayTarget = { x: 0, y: 0 };\n        this.swayStart = { x: 0, y: 0 };\n        \n        // Callbacks\n        this.callbacks = {\n            onBlink: null,\n            onSway: null,\n            onSleep: null,\n            onWake: null\n        };\n        \n    }\n    \n    /**\n     * Update idle behaviors\n     * @param {number} deltaTime - Time since last update in ms\n     */\n    update(deltaTime) {\n        if (!this.config.enabled) return;\n        \n        // Update breathing\n        this.updateBreathing(deltaTime);\n        \n        // Update idle timer\n        this.timers.idle += deltaTime;\n        \n        // Check for sleep\n        if (!this.state.isAsleep && this.timers.idle >= this.config.sleepTimeout) {\n            this.enterSleep();\n        }\n        \n        // Update blinking (only when awake)\n        if (!this.state.isAsleep) {\n            this.updateBlinking(deltaTime);\n        }\n        \n        // Update swaying (only when awake)\n        if (!this.state.isAsleep) {\n            this.updateSwaying(deltaTime);\n        }\n    }\n    \n    /**\n     * Update breathing animation\n     */\n    updateBreathing(deltaTime) {\n        const speed = this.config.breathingSpeed * this.state.breathRate;\n        this.state.breathingPhase += (speed * deltaTime) / 1000;\n        \n        // Keep phase in reasonable range\n        if (this.state.breathingPhase > Math.PI * 2) {\n            this.state.breathingPhase -= Math.PI * 2;\n        }\n    }\n    \n    /**\n     * Update blinking behavior\n     */\n    updateBlinking(deltaTime) {\n        // Check if blinking is disabled\n        if (!this.isBlinkingEnabled()) {\n            return;\n        }\n        \n        if (!this.state.isBlinking) {\n            // Wait for next blink\n            this.timers.blink += deltaTime;\n            if (this.timers.blink >= this.timers.nextBlink) {\n                this.startBlink();\n            }\n        } else {\n            // Currently blinking\n            this.timers.blink += deltaTime;\n            if (this.timers.blink >= this.config.blinkDuration) {\n                this.endBlink();\n            }\n        }\n    }\n    \n    /**\n     * Update swaying behavior (smooth weight shift)\n     */\n    updateSwaying(deltaTime) {\n        if (!this.state.isSwaying) {\n            // Wait for next sway\n            this.timers.sway += deltaTime;\n            if (this.timers.sway >= this.timers.nextSway) {\n                this.startSway();\n            }\n        } else {\n            // Currently swaying - smooth interpolation\n            this.timers.sway += deltaTime;\n            const progress = Math.min(this.timers.sway / this.config.swayDuration, 1);\n            \n            // Use sine wave for smooth in-out easing\n            const easedProgress = (Math.sin((progress - 0.5) * Math.PI) + 1) / 2;\n            \n            // Interpolate between start and target positions\n            this.swayOffset.x = this.swayStart.x + (this.swayTarget.x - this.swayStart.x) * easedProgress;\n            this.swayOffset.y = this.swayStart.y + (this.swayTarget.y - this.swayStart.y) * easedProgress;\n            \n            if (progress >= 1) {\n                this.endSway();\n            }\n        }\n    }\n    \n    /**\n     * Start a blink\n     */\n    startBlink() {\n        this.state.isBlinking = true;\n        this.timers.blink = 0;\n        \n        if (this.callbacks.onBlink) {\n            this.callbacks.onBlink({ phase: 'start' });\n        }\n    }\n    \n    /**\n     * End a blink\n     */\n    endBlink() {\n        this.state.isBlinking = false;\n        this.timers.blink = 0;\n        this.timers.nextBlink = this.getRandomInterval('blink');\n        \n        if (this.callbacks.onBlink) {\n            this.callbacks.onBlink({ phase: 'end' });\n        }\n    }\n    \n    /**\n     * Start a sway (smooth weight shift)\n     */\n    startSway() {\n        this.state.isSwaying = true;\n        this.timers.sway = 0;\n        \n        // Save current position as start\n        this.swayStart = { ...this.swayOffset };\n        \n        // Generate subtle target offset - like shifting weight\n        // Favor horizontal movement (side to side weight shift)\n        const angle = Math.random() * Math.PI * 2;\n        const distance = this.config.swayIntensity * (0.5 + Math.random() * 0.5);\n        this.swayTarget = {\n            x: Math.cos(angle) * distance * 1.5,  // Slightly more horizontal\n            y: Math.sin(angle) * distance * 0.5   // Less vertical\n        };\n        \n        if (this.callbacks.onSway) {\n            this.callbacks.onSway({ \n                phase: 'start',\n                offset: this.swayOffset\n            });\n        }\n    }\n    \n    /**\n     * End a sway\n     */\n    endSway() {\n        this.state.isSwaying = false;\n        this.timers.sway = 0;\n        this.timers.nextSway = this.getRandomInterval('sway');\n        \n        // Start position for next sway is current position\n        this.swayStart = { ...this.swayOffset };\n        \n        if (this.callbacks.onSway) {\n            this.callbacks.onSway({ \n                phase: 'end',\n                offset: this.swayOffset\n            });\n        }\n    }\n    \n    /**\n     * Enter sleep mode\n     */\n    enterSleep() {\n        this.state.isAsleep = true;\n        this.state.breathRate = 0.5; // Slower breathing\n        this.state.breathDepth = 0.15; // Deeper breaths\n        \n        // Force end any active blink\n        if (this.state.isBlinking) {\n            this.state.isBlinking = false;\n            this.timers.blink = 0;\n            if (this.callbacks.onBlink) {\n                this.callbacks.onBlink({ phase: 'end' });\n            }\n        }\n        \n        \n        if (this.callbacks.onSleep) {\n            this.callbacks.onSleep();\n        }\n    }\n    \n    /**\n     * Wake up from sleep\n     */\n    wakeUp() {\n        if (!this.state.isAsleep) return;\n        \n        this.state.isAsleep = false;\n        this.state.breathRate = 1.0;\n        this.state.breathDepth = this.config.breathingDepth;\n        this.timers.idle = 0; // Reset idle timer\n        \n        \n        // Trigger a shake animation\n        if (this.callbacks.onWake) {\n            this.callbacks.onWake();\n        }\n        \n        // Quick twitch series for wake animation\n        this.performWakeAnimation();\n    }\n    \n    /**\n     * Perform wake-up animation\n     */\n    performWakeAnimation() {\n        // Gentle stretch animation when waking\n        const stretchOffset = {\n            x: this.config.swayIntensity * 0.5,\n            y: -this.config.swayIntensity  // Slight upward stretch\n        };\n        \n        // Animate from current position to stretch and back\n        this.swayStart = { ...this.swayOffset };\n        this.swayTarget = stretchOffset;\n        this.state.isSwaying = true;\n        this.timers.sway = 0;\n        \n        if (this.callbacks.onSway) {\n            this.callbacks.onSway({ \n                phase: 'wake',\n                offset: this.swayOffset\n            });\n        }\n        \n        // Return to neutral after stretch\n        setTimeout(() => {\n            this.swayStart = { ...this.swayOffset };\n            this.swayTarget = { x: 0, y: 0 };\n            this.timers.sway = 0;\n        }, 1000);\n    }\n    \n    /**\n     * Reset idle timer (called on user interaction)\n     */\n    resetIdleTimer() {\n        this.timers.idle = 0;\n        if (this.state.isAsleep) {\n            this.wakeUp();\n        }\n    }\n    \n    /**\n     * Enable or disable blinking\n     * @param {boolean} enabled - Whether blinking should be enabled\n     */\n    setBlinkingEnabled(enabled) {\n        this.config.blinkingEnabled = enabled;\n        if (!enabled && this.state.isBlinking) {\n            // If currently blinking, finish the blink\n            this.endBlink();\n        }\n    }\n    \n    /**\n     * Check if blinking is enabled\n     * @returns {boolean} Whether blinking is enabled\n     */\n    isBlinkingEnabled() {\n        return this.config.blinkingEnabled !== false;\n    }\n    \n    /**\n     * Get breathing factor for current phase\n     * @returns {number} Breathing factor (0.9 - 1.1 typically)\n     */\n    getBreathingFactor() {\n        return 1 + Math.sin(this.state.breathingPhase) * this.state.breathDepth * this.state.breathRate;\n    }\n    \n    /**\n     * Get blink progress (0-1)\n     * @returns {number} Blink progress\n     */\n    getBlinkProgress() {\n        if (!this.state.isBlinking) return 0;\n        return Math.min(this.timers.blink / this.config.blinkDuration, 1);\n    }\n    \n    /**\n     * Get current sway offset\n     * @returns {Object} Sway offset {x, y}\n     */\n    getSwayOffset() {\n        return this.swayOffset || { x: 0, y: 0 };\n    }\n    \n    /**\n     * Get random interval for behavior\n     */\n    getRandomInterval(type) {\n        const interval = this.config[`${type}Interval`];\n        return interval.min + Math.random() * (interval.max - interval.min);\n    }\n    \n    /**\n     * Set callback for behavior events\n     */\n    setCallback(event, callback) {\n        if (this.callbacks.hasOwnProperty(event)) {\n            this.callbacks[event] = callback;\n        }\n    }\n    \n    /**\n     * Get current state\n     */\n    getState() {\n        return {\n            ...this.state,\n            breathingFactor: this.getBreathingFactor(),\n            blinkProgress: this.getBlinkProgress(),\n            swayOffset: this.getSwayOffset()\n        };\n    }\n    \n    /**\n     * Enable idle behaviors\n     */\n    enable() {\n        this.config.enabled = true;\n    }\n    \n    /**\n     * Disable idle behaviors\n     */\n    disable() {\n        this.config.enabled = false;\n        this.state.isBlinking = false;\n        this.state.isSwaying = false;\n        this.swayOffset = { x: 0, y: 0 };\n    }\n    \n    /**\n     * Clean up\n     */\n    destroy() {\n        this.callbacks = {\n            onBlink: null,\n            onSway: null,\n            onSleep: null,\n            onWake: null\n        };\n    }\n}\n\nexport default IdleBehavior;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                      ♪ ♫ ♬ ♭  MUSIC THEORY SYSTEM  ♭ ♬ ♫ ♪                      \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Music Theory System - Musical Intelligence & Harmonic Generation\n * @author Emotive Engine Team\n * @version 1.0.0\n * @module MusicTheory\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ The MUSICAL BRAIN of the system. Provides comprehensive music theory utilities    \n * ║ for generating scales, chords, progressions, and harmonic relationships that      \n * ║ respond to emotional states and user interactions.                                \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎼 MUSIC THEORY FEATURES                                                          \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Note frequency calculation (Equal Temperament)                                  \n * │ • Scale generation (Major, Minor, Modal, Exotic)                                  \n * │ • Chord construction (Triads, 7ths, Extensions)                                   \n * │ • Circle of Fifths navigation                                                     \n * │ • Interval relationships                                                          \n * │ • Chord progression generation                                                    \n * │ • Key signature management                                                        \n * │ • Emotion-to-mode mapping                                                         \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\nclass MusicTheory {\n    constructor() {\n        // A4 = 440Hz standard tuning\n        this.A4_FREQUENCY = 440;\n        \n        // Note names in chromatic scale\n        this.NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n        \n        // Interval definitions (in semitones)\n        this.INTERVALS = {\n            unison: 0,\n            minorSecond: 1,\n            majorSecond: 2,\n            minorThird: 3,\n            majorThird: 4,\n            perfectFourth: 5,\n            tritone: 6,\n            perfectFifth: 7,\n            minorSixth: 8,\n            majorSixth: 9,\n            minorSeventh: 10,\n            majorSeventh: 11,\n            octave: 12\n        };\n        \n        // Scale patterns (in semitones from root)\n        this.SCALES = {\n            // Traditional scales\n            major: [0, 2, 4, 5, 7, 9, 11],\n            naturalMinor: [0, 2, 3, 5, 7, 8, 10],\n            harmonicMinor: [0, 2, 3, 5, 7, 8, 11],\n            melodicMinor: [0, 2, 3, 5, 7, 9, 11],\n            \n            // Modes\n            ionian: [0, 2, 4, 5, 7, 9, 11],      // Major\n            dorian: [0, 2, 3, 5, 7, 9, 10],      // Minor with raised 6th\n            phrygian: [0, 1, 3, 5, 7, 8, 10],    // Spanish/Flamenco feel\n            lydian: [0, 2, 4, 6, 7, 9, 11],      // Dreamy, ethereal\n            mixolydian: [0, 2, 4, 5, 7, 9, 10],  // Bluesy major\n            aeolian: [0, 2, 3, 5, 7, 8, 10],     // Natural minor\n            locrian: [0, 1, 3, 5, 6, 8, 10],     // Diminished, unstable\n            \n            // Pentatonic scales\n            majorPentatonic: [0, 2, 4, 7, 9],\n            minorPentatonic: [0, 3, 5, 7, 10],\n            \n            // Exotic scales\n            blues: [0, 3, 5, 6, 7, 10],\n            chromatic: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n            wholeHalfDiminished: [0, 2, 3, 5, 6, 8, 9, 11],\n            arabic: [0, 1, 4, 5, 7, 8, 11],       // Hijaz scale\n            japanese: [0, 1, 5, 7, 8],            // Hirajoshi scale\n            hungarian: [0, 2, 3, 6, 7, 8, 11],    // Hungarian minor\n            bebopMajor: [0, 2, 4, 5, 7, 8, 9, 11] // Jazz bebop\n        };\n        \n        // Chord patterns (intervals from root)\n        this.CHORDS = {\n            // Triads\n            major: [0, 4, 7],\n            minor: [0, 3, 7],\n            diminished: [0, 3, 6],\n            augmented: [0, 4, 8],\n            sus2: [0, 2, 7],\n            sus4: [0, 5, 7],\n            \n            // Seventh chords\n            maj7: [0, 4, 7, 11],\n            min7: [0, 3, 7, 10],\n            dom7: [0, 4, 7, 10],\n            min7b5: [0, 3, 6, 10],\n            dim7: [0, 3, 6, 9],\n            \n            // Extended chords\n            maj9: [0, 4, 7, 11, 14],\n            min9: [0, 3, 7, 10, 14],\n            dom9: [0, 4, 7, 10, 14],\n            add9: [0, 4, 7, 14],\n            maj11: [0, 4, 7, 11, 14, 17],\n            min11: [0, 3, 7, 10, 14, 17],\n            maj13: [0, 4, 7, 11, 14, 17, 21],\n            min13: [0, 3, 7, 10, 14, 17, 21]\n        };\n        \n        // Emotion to musical mode mapping\n        this.EMOTION_MODES = {\n            excited: {\n                scale: 'lydian',\n                tempo: 140,\n                dynamics: 'forte',\n                articulation: 'staccato'\n            },\n            calm: {\n                scale: 'major',\n                tempo: 60,\n                dynamics: 'piano',\n                articulation: 'legato'\n            },\n            curious: {\n                scale: 'mixolydian',\n                tempo: 100,\n                dynamics: 'mezzoForte',\n                articulation: 'tenuto'\n            },\n            sleepy: {\n                scale: 'aeolian',\n                tempo: 50,\n                dynamics: 'pianissimo',\n                articulation: 'legato'\n            },\n            alert: {\n                scale: 'dorian',\n                tempo: 120,\n                dynamics: 'forte',\n                articulation: 'marcato'\n            },\n            pleased: {\n                scale: 'majorPentatonic',\n                tempo: 90,\n                dynamics: 'mezzoForte',\n                articulation: 'legato'\n            },\n            confused: {\n                scale: 'wholeHalfDiminished',\n                tempo: 80,\n                dynamics: 'mezzoPiano',\n                articulation: 'rubato'\n            },\n            energetic: {\n                scale: 'bebopMajor',\n                tempo: 160,\n                dynamics: 'fortissimo',\n                articulation: 'staccato'\n            },\n            melancholy: {\n                scale: 'harmonicMinor',\n                tempo: 70,\n                dynamics: 'mezzoPiano',\n                articulation: 'legato'\n            },\n            playful: {\n                scale: 'blues',\n                tempo: 110,\n                dynamics: 'mezzoForte',\n                articulation: 'swing'\n            }\n        };\n        \n        // Common chord progressions\n        this.PROGRESSIONS = {\n            // Pop/Rock progressions\n            I_V_vi_IV: [1, 5, 6, 4],           // Most common pop progression\n            I_IV_V: [1, 4, 5],                 // Classic rock/blues\n            ii_V_I: [2, 5, 1],                 // Jazz standard\n            I_vi_IV_V: [1, 6, 4, 5],           // 50s doo-wop\n            vi_IV_I_V: [6, 4, 1, 5],           // Alternative pop\n            \n            // Jazz progressions\n            I_VI_ii_V: [1, 6, 2, 5],           // Rhythm changes A\n            iii_vi_ii_V: [3, 6, 2, 5],         // Turnaround\n            I_ii_iii_IV: [1, 2, 3, 4],         // Modal jazz\n            \n            // Blues progressions\n            I_I_I_I_IV_IV_I_I_V_IV_I_V: [1, 1, 1, 1, 4, 4, 1, 1, 5, 4, 1, 5], // 12-bar blues\n            \n            // Modal progressions\n            i_VII_VI_VII: [1, 7, 6, 7],        // Aeolian vamp\n            I_II_IV_I: [1, 2, 4, 1],           // Lydian progression\n        };\n    }\n    \n    /**\n     * Convert note name to MIDI note number\n     * @param {string} note - Note name (e.g., 'C4', 'A#3')\n     * @returns {number} MIDI note number\n     */\n    noteToMidi(note) {\n        const noteName = note.slice(0, -1);\n        const octave = parseInt(note.slice(-1));\n        const noteIndex = this.NOTES.indexOf(noteName);\n        \n        if (noteIndex === -1) {\n            throw new Error(`Invalid note: ${note}`);\n        }\n        \n        // C4 = MIDI 60\n        return (octave + 1) * 12 + noteIndex;\n    }\n    \n    /**\n     * Convert MIDI note number to frequency\n     * @param {number} midiNote - MIDI note number\n     * @returns {number} Frequency in Hz\n     */\n    midiToFrequency(midiNote) {\n        // f = 440 * 2^((n - 69) / 12)\n        return this.A4_FREQUENCY * Math.pow(2, (midiNote - 69) / 12);\n    }\n    \n    /**\n     * Convert note name to frequency\n     * @param {string} note - Note name (e.g., 'C4', 'A#3')\n     * @returns {number} Frequency in Hz\n     */\n    noteToFrequency(note) {\n        return this.midiToFrequency(this.noteToMidi(note));\n    }\n    \n    /**\n     * Generate a scale from a root note\n     * @param {string} root - Root note (e.g., 'C4')\n     * @param {string} scaleType - Scale type from SCALES\n     * @returns {Array} Array of frequencies\n     */\n    generateScale(root, scaleType = 'major') {\n        const scale = this.SCALES[scaleType];\n        if (!scale) {\n            throw new Error(`Unknown scale type: ${scaleType}`);\n        }\n        \n        const rootMidi = this.noteToMidi(root);\n        return scale.map(interval => this.midiToFrequency(rootMidi + interval));\n    }\n    \n    /**\n     * Generate a chord from a root note\n     * @param {string} root - Root note (e.g., 'C4')\n     * @param {string} chordType - Chord type from CHORDS\n     * @returns {Array} Array of frequencies\n     */\n    generateChord(root, chordType = 'major') {\n        const chord = this.CHORDS[chordType];\n        if (!chord) {\n            throw new Error(`Unknown chord type: ${chordType}`);\n        }\n        \n        const rootMidi = this.noteToMidi(root);\n        return chord.map(interval => this.midiToFrequency(rootMidi + interval));\n    }\n    \n    /**\n     * Generate a chord progression\n     * @param {string} key - Key center (e.g., 'C4')\n     * @param {string} scaleType - Scale type for the key\n     * @param {Array} progression - Array of scale degrees\n     * @returns {Array} Array of chord arrays\n     */\n    generateProgression(key, scaleType = 'major', progression = this.PROGRESSIONS.I_V_vi_IV) {\n        const scale = this.generateScale(key, scaleType);\n        const chords = [];\n        \n        for (const degree of progression) {\n            const chordRoot = scale[(degree - 1) % scale.length];\n            \n            // Determine chord quality based on scale degree\n            let chordType = 'major';\n            if (scaleType === 'major') {\n                if (degree === 2 || degree === 3 || degree === 6) {\n                    chordType = 'minor';\n                } else if (degree === 7) {\n                    chordType = 'diminished';\n                }\n            } else if (scaleType === 'naturalMinor') {\n                if (degree === 1 || degree === 4 || degree === 5) {\n                    chordType = 'minor';\n                } else if (degree === 2) {\n                    chordType = 'diminished';\n                } else {\n                    chordType = 'major';\n                }\n            }\n            \n            // Convert frequency back to note for chord generation\n            const midiNote = Math.round(12 * Math.log2(chordRoot / this.A4_FREQUENCY) + 69);\n            const octave = Math.floor(midiNote / 12) - 1;\n            const noteIndex = midiNote % 12;\n            const noteName = this.NOTES[noteIndex] + octave;\n            \n            chords.push({\n                degree,\n                root: chordRoot,\n                frequencies: this.generateChord(noteName, chordType),\n                type: chordType\n            });\n        }\n        \n        return chords;\n    }\n    \n    /**\n     * Get musical parameters for an emotion\n     * @param {string} emotion - Emotion name\n     * @returns {Object} Musical parameters\n     */\n    getEmotionMusic(emotion) {\n        return this.EMOTION_MODES[emotion] || this.EMOTION_MODES.calm;\n    }\n    \n    /**\n     * Generate Circle of Fifths progression\n     * @param {string} startNote - Starting note\n     * @param {number} steps - Number of steps around the circle\n     * @param {boolean} clockwise - Direction (true = sharps, false = flats)\n     * @returns {Array} Array of note names\n     */\n    circleOfFifths(startNote = 'C', steps = 12, clockwise = true) {\n        const noteBase = startNote.replace(/\\d/, '');\n        let currentIndex = this.NOTES.indexOf(noteBase);\n        const notes = [startNote];\n        \n        for (let i = 1; i < steps; i++) {\n            // Perfect fifth = 7 semitones (clockwise) or 5 semitones (counter-clockwise)\n            currentIndex = clockwise ? \n                (currentIndex + 7) % 12 : \n                (currentIndex + 5) % 12;\n            \n            notes.push(this.NOTES[currentIndex]);\n        }\n        \n        return notes;\n    }\n    \n    /**\n     * Analyze interval between two notes\n     * @param {string} note1 - First note\n     * @param {string} note2 - Second note\n     * @returns {Object} Interval information\n     */\n    analyzeInterval(note1, note2) {\n        const midi1 = this.noteToMidi(note1);\n        const midi2 = this.noteToMidi(note2);\n        const semitones = Math.abs(midi2 - midi1);\n        \n        // Find interval name\n        let intervalName = 'unknown';\n        for (const [name, value] of Object.entries(this.INTERVALS)) {\n            if (value === semitones % 12) {\n                intervalName = name;\n                break;\n            }\n        }\n        \n        return {\n            semitones,\n            intervalName,\n            octaves: Math.floor(semitones / 12),\n            consonant: [0, 3, 4, 5, 7, 8, 9, 12].includes(semitones % 12),\n            ratio: this.getIntervalRatio(semitones % 12)\n        };\n    }\n    \n    /**\n     * Get frequency ratio for an interval\n     * @param {number} semitones - Number of semitones\n     * @returns {string} Simplified ratio\n     */\n    getIntervalRatio(semitones) {\n        const ratios = {\n            0: '1:1',    // Unison\n            1: '16:15',  // Minor second\n            2: '9:8',    // Major second\n            3: '6:5',    // Minor third\n            4: '5:4',    // Major third\n            5: '4:3',    // Perfect fourth\n            6: '45:32',  // Tritone\n            7: '3:2',    // Perfect fifth\n            8: '8:5',    // Minor sixth\n            9: '5:3',    // Major sixth\n            10: '16:9',  // Minor seventh\n            11: '15:8',  // Major seventh\n            12: '2:1'    // Octave\n        };\n        \n        return ratios[semitones] || 'complex';\n    }\n    \n    /**\n     * Generate a melody based on parameters\n     * @param {Object} params - Melody parameters\n     * @returns {Array} Array of note objects with timing\n     */\n    generateMelody(params = {}) {\n        const {\n            key = 'C4',\n            scale = 'major',\n            length = 8,\n            stepProbability = 0.7,  // Probability of stepwise motion\n            restProbability = 0.1    // Probability of rest\n        } = params;\n        \n        const scaleNotes = this.generateScale(key, scale);\n        const melody = [];\n        let currentIndex = 0;\n        \n        for (let i = 0; i < length; i++) {\n            // Decide if this is a rest\n            if (Math.random() < restProbability) {\n                melody.push({ frequency: 0, duration: 0.25, isRest: true });\n                continue;\n            }\n            \n            // Decide step size\n            let nextIndex;\n            if (Math.random() < stepProbability) {\n                // Stepwise motion\n                const direction = Math.random() < 0.5 ? -1 : 1;\n                nextIndex = Math.max(0, Math.min(scaleNotes.length - 1, currentIndex + direction));\n            } else {\n                // Leap\n                const leap = Math.floor(Math.random() * 3) + 2; // 2-4 scale degrees\n                const direction = Math.random() < 0.5 ? -1 : 1;\n                nextIndex = Math.max(0, Math.min(scaleNotes.length - 1, currentIndex + (leap * direction)));\n            }\n            \n            currentIndex = nextIndex;\n            \n            // Random duration\n            const durations = [0.25, 0.5, 0.75, 1];\n            const duration = durations[Math.floor(Math.random() * durations.length)];\n            \n            melody.push({\n                frequency: scaleNotes[currentIndex],\n                duration,\n                isRest: false\n            });\n        }\n        \n        return melody;\n    }\n}\n\nexport default MusicTheory;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                      ♬ ♭ ♮ ♯  HARMONIC SYSTEM  ♯ ♮ ♭ ♬                      \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Harmonic System - Real-time Musical Intelligence\n * @author Emotive Engine Team\n * @version 1.0.0\n * @module HarmonicSystem\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ The CONDUCTOR of musical experiences. Orchestrates the music theory system with   \n * ║ the sound engine to create emotionally-responsive, harmonically-rich audio that   \n * ║ adapts in real-time to mascot states and user interactions.                       \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎭 HARMONIC FEATURES                                                              \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Real-time harmonic generation                                                   \n * │ • Emotion-driven key modulation                                                   \n * │ • Adaptive tempo and dynamics                                                     \n * │ • Gesture-to-chord mapping                                                        \n * │ • Harmonic tension and release                                                    \n * │ • Polyrhythmic patterns                                                           \n * │ • Voice leading and smooth transitions                                            \n * │ • Ambient pad generation                                                          \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\nimport MusicTheory from './MusicTheory.js';\n\nclass HarmonicSystem {\n    constructor(audioContext) {\n        this.audioContext = audioContext;\n        this.musicTheory = new MusicTheory();\n        \n        // Current musical state\n        this.currentKey = 'C4';\n        this.currentScale = 'major';\n        this.currentTempo = 120; // BPM\n        this.currentEmotion = 'calm';\n        \n        // Active voices (oscillators and gains)\n        this.voices = new Map();\n        \n        // Harmonic layers\n        this.layers = {\n            bass: { active: false, gain: 0.3 },\n            chord: { active: false, gain: 0.2 },\n            melody: { active: false, gain: 0.4 },\n            pad: { active: false, gain: 0.15 }\n        };\n        \n        // Master output\n        this.masterGain = this.audioContext.createGain();\n        this.masterGain.gain.value = 0.5;\n        this.masterGain.connect(this.audioContext.destination);\n        \n        // Effects chain\n        this.reverb = this.createReverb();\n        this.delay = this.createDelay();\n        this.filter = this.createFilter();\n        \n        // Connect effects\n        this.filter.connect(this.delay);\n        this.delay.connect(this.reverb);\n        this.reverb.connect(this.masterGain);\n        \n        // Dry signal path\n        this.dryGain = this.audioContext.createGain();\n        this.dryGain.gain.value = 0.7;\n        this.dryGain.connect(this.masterGain);\n        \n        // Wet signal path\n        this.wetGain = this.audioContext.createGain();\n        this.wetGain.gain.value = 0.3;\n        this.wetGain.connect(this.filter);\n        \n        // Rhythm tracking\n        this.nextNoteTime = 0;\n        this.noteResolution = 0; // 0 = 16th, 1 = 8th, 2 = quarter\n        this.noteLength = 0.05; // Length of \"beep\" (staccato)\n        \n        // Sequence tracking\n        this.currentChordIndex = 0;\n        this.currentMelodyNote = 0;\n        this.progression = null;\n        \n        // Performance optimization\n        this.isPlaying = false;\n        this.lookahead = 25.0; // How frequently to call scheduling function (ms)\n        this.scheduleAheadTime = 0.1; // How far ahead to schedule audio (sec)\n    }\n    \n    /**\n     * Create reverb effect using convolver\n     */\n    createReverb() {\n        const convolver = this.audioContext.createConvolver();\n        const length = this.audioContext.sampleRate * 2; // 2 second reverb\n        const impulse = this.audioContext.createBuffer(2, length, this.audioContext.sampleRate);\n        \n        for (let channel = 0; channel < 2; channel++) {\n            const channelData = impulse.getChannelData(channel);\n            for (let i = 0; i < length; i++) {\n                // Exponential decay\n                channelData[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / length, 2);\n            }\n        }\n        \n        convolver.buffer = impulse;\n        return convolver;\n    }\n    \n    /**\n     * Create delay effect\n     */\n    createDelay() {\n        const delay = this.audioContext.createDelay(1.0);\n        delay.delayTime.value = 0.15; // 150ms delay\n        \n        const feedback = this.audioContext.createGain();\n        feedback.gain.value = 0.3;\n        \n        delay.connect(feedback);\n        feedback.connect(delay);\n        \n        return delay;\n    }\n    \n    /**\n     * Create filter for tone shaping\n     */\n    createFilter() {\n        const filter = this.audioContext.createBiquadFilter();\n        filter.type = 'lowpass';\n        filter.frequency.value = 2000;\n        filter.Q.value = 1;\n        return filter;\n    }\n    \n    /**\n     * Update emotion and adapt musical parameters\n     */\n    setEmotion(emotion) {\n        this.currentEmotion = emotion;\n        const musicParams = this.musicTheory.getEmotionMusic(emotion);\n        \n        // Update scale and tempo\n        this.currentScale = musicParams.scale;\n        this.currentTempo = musicParams.tempo;\n        \n        // Adapt filter based on emotion\n        const filterSettings = {\n            excited: { freq: 4000, Q: 2 },\n            calm: { freq: 1500, Q: 0.7 },\n            curious: { freq: 2500, Q: 1.5 },\n            sleepy: { freq: 800, Q: 0.5 },\n            alert: { freq: 3000, Q: 1.8 },\n            energetic: { freq: 5000, Q: 2.5 }\n        };\n        \n        const settings = filterSettings[emotion] || { freq: 2000, Q: 1 };\n        this.filter.frequency.exponentialRampToValueAtTime(\n            settings.freq,\n            this.audioContext.currentTime + 0.5\n        );\n        this.filter.Q.linearRampToValueAtTime(\n            settings.Q,\n            this.audioContext.currentTime + 0.5\n        );\n        \n        // Generate new progression for this emotion\n        this.generateEmotionProgression();\n    }\n    \n    /**\n     * Generate chord progression based on current emotion\n     */\n    generateEmotionProgression() {\n        const progressionMap = {\n            excited: 'I_V_vi_IV',\n            calm: 'I_vi_IV_V',\n            curious: 'ii_V_I',\n            sleepy: 'vi_IV_I_V',\n            alert: 'I_IV_V',\n            energetic: 'I_V_vi_IV'\n        };\n        \n        const progressionType = progressionMap[this.currentEmotion] || 'I_V_vi_IV';\n        this.progression = this.musicTheory.generateProgression(\n            this.currentKey,\n            this.currentScale,\n            this.musicTheory.PROGRESSIONS[progressionType]\n        );\n    }\n    \n    /**\n     * Play a chord with voice leading\n     */\n    playChord(frequencies, duration = 1.0, attack = 0.01) {\n        const startTime = this.audioContext.currentTime;\n        const chordGain = this.audioContext.createGain();\n        \n        // ADSR envelope\n        chordGain.gain.setValueAtTime(0, startTime);\n        chordGain.gain.linearRampToValueAtTime(this.layers.chord.gain, startTime + attack);\n        chordGain.gain.exponentialRampToValueAtTime(0.01, startTime + duration);\n        \n        // Connect to wet/dry mix\n        chordGain.connect(this.dryGain);\n        chordGain.connect(this.wetGain);\n        \n        // Create oscillators for each note\n        const oscillators = frequencies.map((freq, index) => {\n            const osc = this.audioContext.createOscillator();\n            osc.frequency.value = freq;\n            \n            // Different waveforms for different voices\n            if (index === 0) osc.type = 'sine';        // Root\n            else if (index === 1) osc.type = 'triangle'; // Third\n            else osc.type = 'sawtooth';                // Fifth and extensions\n            \n            // Slight detuning for richness\n            osc.detune.value = (Math.random() - 0.5) * 10;\n            \n            osc.connect(chordGain);\n            osc.start(startTime);\n            osc.stop(startTime + duration);\n            \n            return osc;\n        });\n        \n        // Store for potential manipulation\n        const chordId = `chord_${Date.now()}`;\n        this.voices.set(chordId, { oscillators, gain: chordGain });\n        \n        // Cleanup\n        setTimeout(() => {\n            this.voices.delete(chordId);\n        }, (duration + 0.1) * 1000);\n    }\n    \n    /**\n     * Play a melodic sequence\n     */\n    playMelody(notes, baseTime = 0) {\n        const startTime = baseTime || this.audioContext.currentTime;\n        let currentTime = startTime;\n        \n        notes.forEach((note, index) => {\n            if (note.isRest) {\n                currentTime += note.duration;\n                return;\n            }\n            \n            const osc = this.audioContext.createOscillator();\n            const noteGain = this.audioContext.createGain();\n            \n            osc.frequency.value = note.frequency;\n            osc.type = 'sine';\n            \n            // Vibrato for expressiveness\n            const vibrato = this.audioContext.createOscillator();\n            const vibratoGain = this.audioContext.createGain();\n            vibrato.frequency.value = 5; // 5 Hz vibrato\n            vibratoGain.gain.value = 5; // 5 cents depth\n            \n            vibrato.connect(vibratoGain);\n            vibratoGain.connect(osc.frequency);\n            \n            // Note envelope\n            noteGain.gain.setValueAtTime(0, currentTime);\n            noteGain.gain.linearRampToValueAtTime(this.layers.melody.gain, currentTime + 0.01);\n            noteGain.gain.exponentialRampToValueAtTime(0.01, currentTime + note.duration * 0.9);\n            \n            osc.connect(noteGain);\n            noteGain.connect(this.dryGain);\n            noteGain.connect(this.wetGain);\n            \n            osc.start(currentTime);\n            osc.stop(currentTime + note.duration);\n            vibrato.start(currentTime);\n            vibrato.stop(currentTime + note.duration);\n            \n            currentTime += note.duration;\n        });\n    }\n    \n    /**\n     * Create ambient pad layer\n     */\n    createPad(frequency, duration = 4.0) {\n        const startTime = this.audioContext.currentTime;\n        const voices = 4; // Number of detuned voices\n        const padGain = this.audioContext.createGain();\n        \n        // Slow attack and release for pad\n        padGain.gain.setValueAtTime(0, startTime);\n        padGain.gain.linearRampToValueAtTime(this.layers.pad.gain, startTime + 1.0);\n        padGain.gain.linearRampToValueAtTime(this.layers.pad.gain, startTime + duration - 1.0);\n        padGain.gain.linearRampToValueAtTime(0, startTime + duration);\n        \n        padGain.connect(this.wetGain); // Pads sound better with effects\n        \n        for (let i = 0; i < voices; i++) {\n            const osc = this.audioContext.createOscillator();\n            osc.frequency.value = frequency;\n            osc.type = 'sawtooth';\n            \n            // Detune each voice\n            osc.detune.value = (i - voices / 2) * 15;\n            \n            // Individual voice gain for stereo spread\n            const voiceGain = this.audioContext.createGain();\n            voiceGain.gain.value = 1 / voices;\n            \n            // Add slow LFO for movement\n            const lfo = this.audioContext.createOscillator();\n            const lfoGain = this.audioContext.createGain();\n            lfo.frequency.value = 0.2 + (i * 0.1); // Slightly different LFO rates\n            lfoGain.gain.value = 10; // Subtle pitch modulation\n            \n            lfo.connect(lfoGain);\n            lfoGain.connect(osc.frequency);\n            \n            osc.connect(voiceGain);\n            voiceGain.connect(padGain);\n            \n            osc.start(startTime);\n            osc.stop(startTime + duration);\n            lfo.start(startTime);\n            lfo.stop(startTime + duration);\n        }\n    }\n    \n    /**\n     * Map gesture to musical response\n     */\n    playGestureSound(gesture) {\n        const gestureMap = {\n            breathe: () => {\n                // Breathing creates slow, expanding chords\n                const chord = this.musicTheory.generateChord(this.currentKey, 'maj7');\n                this.playChord(chord, 2.0, 0.5);\n                this.createPad(chord[0] / 2, 3.0); // Sub bass pad\n            },\n            \n            excited: () => {\n                // Excited creates ascending arpeggios\n                const scale = this.musicTheory.generateScale(this.currentKey, 'lydian');\n                const arpeggio = scale.map((freq, i) => ({\n                    frequency: freq,\n                    duration: 0.1,\n                    isRest: false\n                }));\n                this.playMelody(arpeggio);\n            },\n            \n            wave: () => {\n                // Wave creates a glissando effect\n                const startFreq = this.musicTheory.noteToFrequency(this.currentKey);\n                const endFreq = startFreq * 2; // Octave up\n                \n                const osc = this.audioContext.createOscillator();\n                const gain = this.audioContext.createGain();\n                \n                osc.frequency.setValueAtTime(startFreq, this.audioContext.currentTime);\n                osc.frequency.exponentialRampToValueAtTime(endFreq, this.audioContext.currentTime + 0.5);\n                osc.frequency.exponentialRampToValueAtTime(startFreq, this.audioContext.currentTime + 1.0);\n                \n                gain.gain.setValueAtTime(0, this.audioContext.currentTime);\n                gain.gain.linearRampToValueAtTime(0.3, this.audioContext.currentTime + 0.1);\n                gain.gain.linearRampToValueAtTime(0.3, this.audioContext.currentTime + 0.9);\n                gain.gain.linearRampToValueAtTime(0, this.audioContext.currentTime + 1.0);\n                \n                osc.connect(gain);\n                gain.connect(this.wetGain);\n                \n                osc.start();\n                osc.stop(this.audioContext.currentTime + 1.0);\n            },\n            \n            morph: () => {\n                // Morph creates harmonic morphing between chords\n                const chord1 = this.musicTheory.generateChord(this.currentKey, 'minor');\n                const chord2 = this.musicTheory.generateChord(this.currentKey, 'major');\n                \n                // Play first chord\n                this.playChord(chord1, 0.5);\n                \n                // Morph to second chord\n                setTimeout(() => {\n                    this.playChord(chord2, 1.0);\n                }, 400);\n            },\n            \n            jump: () => {\n                // Jump creates staccato chord stabs\n                const chord = this.musicTheory.generateChord(this.currentKey, 'dom7');\n                for (let i = 0; i < 3; i++) {\n                    setTimeout(() => {\n                        this.playChord(chord.map(f => f * Math.pow(2, i/12)), 0.1, 0.001);\n                    }, i * 100);\n                }\n            },\n            \n            curious: () => {\n                // Curious creates questioning melodic phrases\n                const melody = this.musicTheory.generateMelody({\n                    key: this.currentKey,\n                    scale: 'mixolydian',\n                    length: 5,\n                    stepProbability: 0.3\n                });\n                this.playMelody(melody);\n            }\n        };\n        \n        const soundFunction = gestureMap[gesture];\n        if (soundFunction) {\n            soundFunction();\n        }\n    }\n    \n    /**\n     * Start background harmony generation\n     */\n    startHarmony() {\n        if (this.isPlaying) return;\n        \n        this.isPlaying = true;\n        this.currentChordIndex = 0;\n        this.nextNoteTime = this.audioContext.currentTime;\n        \n        // Generate initial progression\n        this.generateEmotionProgression();\n        \n        // Start the scheduling loop\n        this.scheduleHarmony();\n    }\n    \n    /**\n     * Schedule harmony playback\n     */\n    scheduleHarmony() {\n        if (!this.isPlaying) return;\n        \n        // Schedule notes that need to play in the next interval\n        while (this.nextNoteTime < this.audioContext.currentTime + this.scheduleAheadTime) {\n            // Play current chord in progression\n            if (this.progression && this.layers.chord.active) {\n                const chord = this.progression[this.currentChordIndex];\n                this.playChord(chord.frequencies, 0.5);\n                \n                // Advance to next chord\n                this.currentChordIndex = (this.currentChordIndex + 1) % this.progression.length;\n            }\n            \n            // Generate and play bass line\n            if (this.layers.bass.active && this.progression) {\n                const bassNote = this.progression[this.currentChordIndex].frequencies[0] / 2;\n                this.playBassNote(bassNote, 0.25);\n            }\n            \n            // Advance time based on tempo\n            const secondsPerBeat = 60.0 / this.currentTempo;\n            this.nextNoteTime += 0.25 * secondsPerBeat; // 16th notes\n        }\n        \n        // Continue scheduling\n        setTimeout(() => this.scheduleHarmony(), this.lookahead);\n    }\n    \n    /**\n     * Play a bass note\n     */\n    playBassNote(frequency, duration) {\n        const osc = this.audioContext.createOscillator();\n        const gain = this.audioContext.createGain();\n        \n        osc.frequency.value = frequency;\n        osc.type = 'sine';\n        \n        gain.gain.setValueAtTime(0, this.audioContext.currentTime);\n        gain.gain.linearRampToValueAtTime(this.layers.bass.gain, this.audioContext.currentTime + 0.01);\n        gain.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration);\n        \n        osc.connect(gain);\n        gain.connect(this.dryGain);\n        \n        osc.start();\n        osc.stop(this.audioContext.currentTime + duration);\n    }\n    \n    /**\n     * Stop harmony generation\n     */\n    stopHarmony() {\n        this.isPlaying = false;\n    }\n    \n    /**\n     * Set layer active state\n     */\n    setLayerActive(layer, active) {\n        if (this.layers[layer]) {\n            this.layers[layer].active = active;\n        }\n    }\n    \n    /**\n     * Set master volume\n     */\n    setMasterVolume(volume) {\n        this.masterGain.gain.exponentialRampToValueAtTime(\n            Math.max(0.01, volume),\n            this.audioContext.currentTime + 0.1\n        );\n    }\n    \n    /**\n     * Set wet/dry mix for effects\n     */\n    setEffectsMix(wetness) {\n        const dry = 1 - wetness;\n        this.dryGain.gain.linearRampToValueAtTime(dry, this.audioContext.currentTime + 0.1);\n        this.wetGain.gain.linearRampToValueAtTime(wetness, this.audioContext.currentTime + 0.1);\n    }\n}\n\nexport default HarmonicSystem;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                       ◐ ◑ ◒ ◓  SOUND SYSTEM  ◓ ◒ ◑ ◐                       \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Sound System - Web Audio API Integration for Emotional Audio\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module SoundSystem\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Adds the VOICE of emotion through sound. Generates ambient tones that match       \n * ║ emotional states and plays gesture sound effects. Uses Web Audio API for          \n * ║ programmatic sound generation - no external audio files needed!                   \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎵 AUDIO FEATURES                                                                  \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Emotional ambient tones (frequency based on emotion)                            \n * │ • Gesture sound effects (pops, sweeps, chimes)                                    \n * │ • Volume control with fade in/out                                                 \n * │ • Warning throttling to reduce console spam                                       \n * │ • Graceful degradation if Web Audio unavailable                                   \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎼 EMOTIONAL TONE MAPPING                                                          \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ EMOTION        FREQUENCY    WAVEFORM    VOLUME                                   \n * │ neutral        220Hz        sine        0.1                                      \n * │ joy            440Hz        sine        0.15                                     \n * │ sadness        110Hz        sine        0.08                                     \n * │ anger          330Hz        sawtooth    0.2                                      \n * │ fear           550Hz        square      0.12                                     \n * │ love           262Hz        sine        0.12                                     \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\nimport HarmonicSystem from './HarmonicSystem.js';\n\nexport class SoundSystem {\n  constructor() {\n    this.context = null;\n    this.isEnabled = false;\n    this.isInitialized = false;\n    \n    // Audio nodes\n    this.nodes = {\n      master: null,      // Master gain node\n      ambient: null,     // Ambient oscillator for emotional tones\n      effects: null      // Effects gain node for gesture sounds\n    };\n    \n    // Harmonic system for musical intelligence\n    this.harmonicSystem = null;\n    this.useHarmonicSystem = false; // Toggle between old and new system\n    \n    // Track warning frequency to reduce spam\n    this.warningTimestamps = {};\n    this.warningThrottle = 5000; // Only show same warning every 5 seconds\n    \n    // Current ambient oscillator\n    this.currentOscillator = null;\n    this.currentGain = null;\n    \n    // Default settings\n    this.masterVolume = 0.5;\n    this.ambientVolume = 0.1;\n    \n    // Emotional tone mappings\n    this.emotionalTones = new Map([\n      ['neutral', { frequency: 220, waveform: 'sine', volume: 0.1 }],\n      ['joy', { frequency: 440, waveform: 'triangle', volume: 0.15 }],\n      ['sadness', { frequency: 165, waveform: 'sine', volume: 0.08 }],\n      ['anger', { frequency: 330, waveform: 'sawtooth', volume: 0.12 }],\n      ['fear', { frequency: 880, waveform: 'square', volume: 0.09 }],\n      ['surprise', { frequency: 660, waveform: 'triangle', volume: 0.13 }],\n      ['disgust', { frequency: 110, waveform: 'sawtooth', volume: 0.07 }],\n      ['love', { frequency: 528, waveform: 'sine', volume: 0.11 }]\n    ]);\n  }\n\n  /**\n   * Initialize Web Audio API and create node architecture\n   * @returns {boolean} Success status\n   */\n  async initialize() {\n    try {\n      // Check for Web Audio API support\n      const AudioContextClass = window.AudioContext || window.webkitAudioContext;\n      if (!AudioContextClass) {\n        // SoundSystem: Web Audio API not supported, continuing without audio\n        return false;\n      }\n\n      // Create audio context\n      this.context = new AudioContextClass();\n      \n      // Initialize harmonic system\n      this.harmonicSystem = new HarmonicSystem(this.context);\n      \n      // Handle suspended context (required by browser autoplay policies)\n      if (this.context.state === 'suspended') {\n        // Will be resumed on first user interaction\n        // SoundSystem: AudioContext suspended, will resume on user interaction\n      }\n\n      // Create master gain node with default volume\n      this.nodes.master = this.context.createGain();\n      this.nodes.master.gain.setValueAtTime(this.masterVolume, this.context.currentTime);\n      this.nodes.master.connect(this.context.destination);\n\n      // Create effects gain node for gesture sounds\n      this.nodes.effects = this.context.createGain();\n      this.nodes.effects.gain.setValueAtTime(1.0, this.context.currentTime);\n      this.nodes.effects.connect(this.nodes.master);\n\n      this.isEnabled = true;\n      this.isInitialized = true;\n      \n      // SoundSystem: Successfully initialized Web Audio API\n      return true;\n\n    } catch (error) {\n      // SoundSystem: Failed to initialize Web Audio API\n      this.isEnabled = false;\n      return false;\n    }\n  }\n\n  /**\n   * Resume audio context if suspended (call on user interaction)\n   */\n  async resumeContext() {\n    if (this.context && this.context.state === 'suspended') {\n      try {\n        await this.context.resume();\n        // Silently resume without logging\n      } catch (error) {\n        // Silently fail - this is expected before user interaction\n      }\n    }\n  }\n\n  /**\n   * Set master volume for all audio output\n   * @param {number} volume - Volume level (0.0 to 1.0)\n   * @param {string} currentEmotion - Current emotion for ambient tone volume update\n   */\n  setMasterVolume(volume, currentEmotion = null) {\n    this.masterVolume = Math.max(0, Math.min(1, volume));\n    \n    if (this.isEnabled && this.nodes.master) {\n      this.nodes.master.gain.setValueAtTime(\n        this.masterVolume, \n        this.context.currentTime\n      );\n\n      // Update ambient tone volume if active\n      if (currentEmotion) {\n        this.updateAmbientVolume(currentEmotion);\n      }\n    }\n  }\n\n  /**\n   * Get current master volume\n   * @returns {number} Current master volume\n   */\n  getMasterVolume() {\n    return this.masterVolume;\n  }\n\n  /**\n   * Check if sound system is available and enabled\n   * @returns {boolean} Availability status\n   */\n  isAvailable() {\n    return this.isEnabled && this.isInitialized;\n  }\n  \n  /**\n   * Enable or disable the harmonic music system\n   * @param {boolean} enabled - Whether to enable harmonic system\n   */\n  setHarmonicMode(enabled) {\n    this.useHarmonicSystem = enabled;\n    \n    if (enabled && this.harmonicSystem) {\n      // Stop simple ambient tone when switching to harmonic mode\n      this.stopAmbientTone();\n      // SoundSystem: Switched to harmonic music mode\n    } else if (!enabled && this.harmonicSystem) {\n      // Stop harmonic system when switching back\n      this.harmonicSystem.stopHarmony();\n      // SoundSystem: Switched to simple sound mode\n    }\n  }\n  \n  /**\n   * Start harmonic background music\n   */\n  startHarmony() {\n    if (this.harmonicSystem && this.useHarmonicSystem && this.isAvailable()) {\n      this.harmonicSystem.startHarmony();\n    }\n  }\n  \n  /**\n   * Stop harmonic background music\n   */\n  stopHarmony() {\n    if (this.harmonicSystem) {\n      this.harmonicSystem.stopHarmony();\n    }\n  }\n  \n  /**\n   * Set harmonic layer active state\n   * @param {string} layer - Layer name (bass, chord, melody, pad)\n   * @param {boolean} active - Whether layer should be active\n   */\n  setHarmonicLayer(layer, active) {\n    if (this.harmonicSystem) {\n      this.harmonicSystem.setLayerActive(layer, active);\n    }\n  }\n  \n  /**\n   * Set harmonic effects mix\n   * @param {number} wetness - Wet/dry mix (0-1)\n   */\n  setHarmonicEffects(wetness) {\n    if (this.harmonicSystem) {\n      this.harmonicSystem.setEffectsMix(wetness);\n    }\n  }\n\n  /**\n   * Clean up audio resources\n   */\n  cleanup() {\n    try {\n      // Stop current ambient oscillator\n      if (this.currentOscillator) {\n        this.currentOscillator.stop();\n        this.currentOscillator = null;\n      }\n      \n      if (this.currentGain) {\n        this.currentGain = null;\n      }\n\n      // Close audio context\n      if (this.context && this.context.state !== 'closed') {\n        this.context.close();\n      }\n\n      // SoundSystem: Cleaned up audio resources\n    } catch (error) {\n      // SoundSystem: Error during cleanup\n    } finally {\n      // Always reset state regardless of errors\n      this.context = null;\n      this.nodes = { master: null, ambient: null, effects: null };\n      this.currentOscillator = null;\n      this.currentGain = null;\n      this.isEnabled = false;\n      this.isInitialized = false;\n    }\n  }\n\n  /**\n   * Get emotional tone configuration for given emotion\n   * @param {string} emotion - Emotion name\n   * @returns {Object|null} Tone configuration or null if not found\n   */\n  getEmotionalTone(emotion) {\n    return this.emotionalTones.get(emotion) || null;\n  }\n\n  /**\n   * Start ambient emotional tone for given emotion\n   * @param {string} emotion - Emotion name\n   * @param {number} transitionDuration - Transition duration in milliseconds (default: 500)\n   */\n  setAmbientTone(emotion, transitionDuration = 500) {\n    if (!this.isAvailable()) {\n      return;\n    }\n\n    // Use harmonic system if enabled\n    if (this.useHarmonicSystem && this.harmonicSystem) {\n      this.harmonicSystem.setEmotion(emotion);\n      return;\n    }\n\n    const toneConfig = this.getEmotionalTone(emotion);\n    if (!toneConfig) {\n      // SoundSystem: Unknown emotion, cannot set ambient tone\n      return;\n    }\n\n    try {\n      // Resume context if suspended\n      this.resumeContext();\n\n      const currentTime = this.context.currentTime;\n      const transitionTime = transitionDuration / 1000; // Convert to seconds\n\n      // Stop current oscillator with fade out\n      if (this.currentOscillator && this.currentGain) {\n        this.currentGain.gain.exponentialRampToValueAtTime(0.001, currentTime + transitionTime * 0.5);\n        this.currentOscillator.stop(currentTime + transitionTime * 0.5);\n      }\n\n      // Create new oscillator and gain for the new tone\n      const oscillator = this.context.createOscillator();\n      const gainNode = this.context.createGain();\n\n      // Configure oscillator\n      oscillator.type = toneConfig.waveform;\n      oscillator.frequency.setValueAtTime(toneConfig.frequency, currentTime);\n\n      // Configure gain with smooth transition\n      const targetVolume = toneConfig.volume * this.masterVolume;\n      gainNode.gain.setValueAtTime(0.001, currentTime); // Start silent\n      gainNode.gain.exponentialRampToValueAtTime(targetVolume, currentTime + transitionTime);\n\n      // Connect nodes\n      oscillator.connect(gainNode);\n      gainNode.connect(this.nodes.master);\n\n      // Start oscillator\n      oscillator.start(currentTime);\n\n      // Store references\n      this.currentOscillator = oscillator;\n      this.currentGain = gainNode;\n\n      // SoundSystem: Started ambient tone\n\n    } catch (error) {\n      // SoundSystem: Failed to set ambient tone\n    }\n  }\n\n  /**\n   * Stop current ambient tone\n   * @param {number} fadeOutDuration - Fade out duration in milliseconds (default: 500)\n   */\n  stopAmbientTone(fadeOutDuration = 500) {\n    if (!this.isAvailable() || !this.currentOscillator) {\n      return;\n    }\n\n    try {\n      const currentTime = this.context.currentTime;\n      const fadeTime = fadeOutDuration / 1000; // Convert to seconds\n\n      // Fade out current tone\n      if (this.currentGain) {\n        this.currentGain.gain.exponentialRampToValueAtTime(0.001, currentTime + fadeTime);\n      }\n\n      // Stop oscillator after fade\n      this.currentOscillator.stop(currentTime + fadeTime);\n\n      // Clear references\n      this.currentOscillator = null;\n      this.currentGain = null;\n\n      // SoundSystem: Stopped ambient tone\n\n    } catch (error) {\n      // SoundSystem: Failed to stop ambient tone\n    }\n  }\n\n  /**\n   * Update ambient tone volume based on master volume changes\n   * @param {string} currentEmotion - Current emotion for volume calculation\n   */\n  updateAmbientVolume(currentEmotion) {\n    if (!this.isAvailable() || !this.currentGain || !currentEmotion) {\n      return;\n    }\n\n    const toneConfig = this.getEmotionalTone(currentEmotion);\n    if (!toneConfig) {\n      return;\n    }\n\n    try {\n      const targetVolume = toneConfig.volume * this.masterVolume;\n      const currentTime = this.context.currentTime;\n      \n      this.currentGain.gain.exponentialRampToValueAtTime(targetVolume, currentTime + 0.1);\n    } catch (error) {\n      // SoundSystem: Failed to update ambient volume\n    }\n  }\n\n  /**\n   * Play gesture sound effect with frequency envelope\n   * @param {string} gestureId - Gesture identifier\n   * @param {string} emotionalContext - Current emotion for intensity modifiers\n   */\n  playGestureSound(gestureId, emotionalContext = 'neutral') {\n    if (!this.isAvailable()) {\n      return;\n    }\n\n    // Use harmonic system if enabled\n    if (this.useHarmonicSystem && this.harmonicSystem) {\n      this.harmonicSystem.playGestureSound(gestureId);\n      return;\n    }\n\n    const soundConfig = this.getGestureSoundConfig(gestureId);\n    if (!soundConfig) {\n      // Throttled warning for unknown gestures\n      this.throttledWarn(`Unknown gesture \"${gestureId}\", cannot play sound`, `gesture_${gestureId}`);\n      return;\n    }\n\n    try {\n      // Resume context if suspended\n      this.resumeContext();\n\n      const currentTime = this.context.currentTime;\n      const duration = soundConfig.duration / 1000; // Convert to seconds\n\n      // Apply emotional modifiers\n      const modifiers = this.getEmotionalModifiers(emotionalContext);\n      const baseVolume = soundConfig.volume * this.masterVolume * modifiers.intensity;\n\n      // Create oscillator and gain for the effect\n      const oscillator = this.context.createOscillator();\n      const gainNode = this.context.createGain();\n\n      // Configure oscillator\n      oscillator.type = soundConfig.waveform;\n\n      // Apply frequency envelope\n      this.applyFrequencyEnvelope(oscillator, soundConfig.frequencyEnvelope, currentTime, duration);\n\n      // Apply volume envelope\n      this.applyVolumeEnvelope(gainNode, soundConfig.volumeEnvelope, currentTime, duration, baseVolume);\n\n      // Connect nodes\n      oscillator.connect(gainNode);\n      gainNode.connect(this.nodes.effects);\n\n      // Start and stop oscillator\n      oscillator.start(currentTime);\n      oscillator.stop(currentTime + duration);\n\n      // SoundSystem: Playing gesture sound\n\n    } catch (error) {\n      // SoundSystem: Failed to play gesture sound\n    }\n  }\n\n  /**\n   * Get gesture sound configuration\n   * @param {string} gestureId - Gesture identifier\n   * @returns {Object|null} Sound configuration or null if not found\n   */\n  getGestureSoundConfig(gestureId) {\n    const gestureSounds = new Map([\n      ['bounce', {\n        duration: 100,\n        waveform: 'triangle',\n        volume: 0.3,\n        frequencyEnvelope: [\n          { time: 0, frequency: 200 },\n          { time: 0.5, frequency: 400 },\n          { time: 1, frequency: 300 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 1.0 },\n          { time: 0.1, volume: 0.8 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['pulse', {\n        duration: 300,\n        waveform: 'sine',\n        volume: 0.25,\n        frequencyEnvelope: [\n          { time: 0, frequency: 300 },\n          { time: 0.5, frequency: 450 },\n          { time: 1, frequency: 300 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.0 },\n          { time: 0.3, volume: 1.0 },\n          { time: 0.7, volume: 1.0 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['shake', {\n        duration: 200,\n        waveform: 'sawtooth',\n        volume: 0.2,\n        frequencyEnvelope: [\n          { time: 0, frequency: 150 },\n          { time: 0.25, frequency: 200 },\n          { time: 0.5, frequency: 150 },\n          { time: 0.75, frequency: 200 },\n          { time: 1, frequency: 150 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.8 },\n          { time: 0.5, volume: 1.0 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['spin', {\n        duration: 600,\n        waveform: 'triangle',\n        volume: 0.35,\n        frequencyEnvelope: [\n          { time: 0, frequency: 220 },\n          { time: 0.3, frequency: 440 },\n          { time: 0.7, frequency: 660 },\n          { time: 1, frequency: 330 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.0 },\n          { time: 0.2, volume: 1.0 },\n          { time: 0.8, volume: 0.8 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['nod', {\n        duration: 150,\n        waveform: 'sine',\n        volume: 0.15,\n        frequencyEnvelope: [\n          { time: 0, frequency: 180 },\n          { time: 0.5, frequency: 220 },\n          { time: 1, frequency: 180 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.5 },\n          { time: 0.3, volume: 1.0 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['tilt', {\n        duration: 200,\n        waveform: 'triangle',\n        volume: 0.18,\n        frequencyEnvelope: [\n          { time: 0, frequency: 250 },\n          { time: 0.6, frequency: 350 },\n          { time: 1, frequency: 280 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.0 },\n          { time: 0.4, volume: 1.0 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['expand', {\n        duration: 500,\n        waveform: 'sine',\n        volume: 0.4,\n        frequencyEnvelope: [\n          { time: 0, frequency: 200 },\n          { time: 0.7, frequency: 500 },\n          { time: 1, frequency: 400 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.0 },\n          { time: 0.3, volume: 1.0 },\n          { time: 0.9, volume: 0.8 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['contract', {\n        duration: 400,\n        waveform: 'triangle',\n        volume: 0.22,\n        frequencyEnvelope: [\n          { time: 0, frequency: 400 },\n          { time: 0.8, frequency: 200 },\n          { time: 1, frequency: 180 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 1.0 },\n          { time: 0.6, volume: 0.8 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['flash', {\n        duration: 200,\n        waveform: 'square',\n        volume: 0.3,\n        frequencyEnvelope: [\n          { time: 0, frequency: 800 },\n          { time: 0.1, frequency: 1200 },\n          { time: 0.2, frequency: 800 },\n          { time: 1, frequency: 600 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.0 },\n          { time: 0.05, volume: 1.0 },\n          { time: 0.15, volume: 0.3 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['wave', {\n        duration: 400,\n        waveform: 'sine',\n        volume: 0.25,\n        frequencyEnvelope: [\n          { time: 0, frequency: 300 },\n          { time: 0.3, frequency: 500 },\n          { time: 0.6, frequency: 400 },\n          { time: 1, frequency: 350 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.0 },\n          { time: 0.2, volume: 0.8 },\n          { time: 0.7, volume: 0.6 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['breathe', {\n        duration: 800,  // Slightly shorter for more impact\n        waveform: 'triangle',  // Changed from sine for more harmonics\n        volume: 0.6,  // Much louder\n        frequencyEnvelope: [\n          { time: 0, frequency: 300 },\n          { time: 0.3, frequency: 500 },\n          { time: 0.5, frequency: 600 },\n          { time: 0.7, frequency: 400 },\n          { time: 1, frequency: 250 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.2 },  // Start with some volume\n          { time: 0.2, volume: 1.0 }, // Quick attack\n          { time: 0.5, volume: 0.9 }, // Strong sustain\n          { time: 0.8, volume: 0.7 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['morph', {\n        duration: 600,\n        waveform: 'triangle',\n        volume: 0.3,\n        frequencyEnvelope: [\n          { time: 0, frequency: 100 },\n          { time: 0.2, frequency: 300 },\n          { time: 0.5, frequency: 600 },\n          { time: 0.8, frequency: 400 },\n          { time: 1, frequency: 200 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.5 },\n          { time: 0.3, volume: 1.0 },\n          { time: 0.7, volume: 0.8 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['jump', {\n        duration: 250,\n        waveform: 'square',\n        volume: 0.35,\n        frequencyEnvelope: [\n          { time: 0, frequency: 200 },\n          { time: 0.2, frequency: 600 },\n          { time: 0.4, frequency: 800 },\n          { time: 0.8, frequency: 400 },\n          { time: 1, frequency: 100 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.8 },\n          { time: 0.1, volume: 1.0 },\n          { time: 0.3, volume: 0.6 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['drift', {\n        duration: 800,\n        waveform: 'sine',\n        volume: 0.12,\n        frequencyEnvelope: [\n          { time: 0, frequency: 160 },\n          { time: 0.4, frequency: 240 },\n          { time: 0.8, frequency: 200 },\n          { time: 1, frequency: 180 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.0 },\n          { time: 0.2, volume: 1.0 },\n          { time: 0.8, volume: 0.8 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['wave', {\n        duration: 400,\n        waveform: 'sine',\n        volume: 0.25,\n        frequencyEnvelope: [\n          { time: 0, frequency: 200 },\n          { time: 0.25, frequency: 300 },\n          { time: 0.5, frequency: 250 },\n          { time: 0.75, frequency: 280 },\n          { time: 1, frequency: 200 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.0 },\n          { time: 0.2, volume: 0.8 },\n          { time: 0.8, volume: 0.8 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['breathe', {\n        duration: 3500,  // Match gesture duration\n        waveform: 'sine',\n        volume: 0.2,\n        // Deep, calming breath sound - low frequencies\n        frequencyEnvelope: [\n          { time: 0, frequency: 80 },    // Start low (exhale)\n          { time: 0.4, frequency: 150 },  // Rise during inhale\n          { time: 0.5, frequency: 160 },  // Peak at full inhale\n          { time: 0.9, frequency: 100 },  // Fall during exhale\n          { time: 1, frequency: 80 }      // Back to low\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.3 },     // Quiet start\n          { time: 0.4, volume: 0.8 },   // Louder inhale\n          { time: 0.5, volume: 0.7 },   // Hold\n          { time: 0.9, volume: 0.6 },   // Quieter exhale\n          { time: 1, volume: 0.2 }      // Fade out\n        ]\n      }],\n      ['flicker', {\n        duration: 300,\n        waveform: 'square',\n        volume: 0.2,\n        frequencyEnvelope: [\n          { time: 0, frequency: 600 },\n          { time: 0.1, frequency: 400 },\n          { time: 0.2, frequency: 800 },\n          { time: 0.3, frequency: 300 },\n          { time: 0.5, frequency: 700 },\n          { time: 1, frequency: 500 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 1.0 },\n          { time: 0.1, volume: 0.2 },\n          { time: 0.2, volume: 0.9 },\n          { time: 0.3, volume: 0.3 },\n          { time: 0.5, volume: 0.8 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['vibrate', {\n        duration: 250,\n        waveform: 'sawtooth',\n        volume: 0.3,\n        frequencyEnvelope: [\n          { time: 0, frequency: 100 },\n          { time: 0.1, frequency: 150 },\n          { time: 0.2, frequency: 100 },\n          { time: 0.3, frequency: 150 },\n          { time: 0.4, frequency: 100 },\n          { time: 0.5, frequency: 150 },\n          { time: 0.6, frequency: 100 },\n          { time: 0.7, frequency: 150 },\n          { time: 1, frequency: 80 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 1.0 },\n          { time: 0.8, volume: 1.0 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['glow', {\n        duration: 600,\n        waveform: 'sine',\n        volume: 0.15,\n        frequencyEnvelope: [\n          { time: 0, frequency: 300 },\n          { time: 0.5, frequency: 500 },\n          { time: 1, frequency: 400 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.0 },\n          { time: 0.3, volume: 1.0 },\n          { time: 0.7, volume: 1.0 },\n          { time: 1, volume: 0.0 }\n        ]\n      }],\n      ['stretch', {\n        duration: 450,\n        waveform: 'triangle',\n        volume: 0.2,\n        frequencyEnvelope: [\n          { time: 0, frequency: 250 },\n          { time: 0.3, frequency: 180 },\n          { time: 0.7, frequency: 320 },\n          { time: 1, frequency: 250 }\n        ],\n        volumeEnvelope: [\n          { time: 0, volume: 0.6 },\n          { time: 0.2, volume: 1.0 },\n          { time: 0.8, volume: 0.9 },\n          { time: 1, volume: 0.0 }\n        ]\n      }]\n    ]);\n\n    return gestureSounds.get(gestureId) || null;\n  }\n\n  /**\n   * Apply frequency envelope to oscillator\n   * @param {OscillatorNode} oscillator - Web Audio oscillator\n   * @param {Array} envelope - Frequency envelope points\n   * @param {number} startTime - Start time in audio context\n   * @param {number} duration - Total duration in seconds\n   */\n  applyFrequencyEnvelope(oscillator, envelope, startTime, duration) {\n    envelope.forEach(point => {\n      const time = startTime + (point.time * duration);\n      oscillator.frequency.linearRampToValueAtTime(point.frequency, time);\n    });\n  }\n\n  /**\n   * Apply volume envelope to gain node\n   * @param {GainNode} gainNode - Web Audio gain node\n   * @param {Array} envelope - Volume envelope points\n   * @param {number} startTime - Start time in audio context\n   * @param {number} duration - Total duration in seconds\n   * @param {number} baseVolume - Base volume level\n   */\n  applyVolumeEnvelope(gainNode, envelope, startTime, duration, baseVolume) {\n    envelope.forEach((point, index) => {\n      const time = startTime + (point.time * duration);\n      const volume = point.volume * baseVolume;\n      \n      if (index === 0) {\n        gainNode.gain.setValueAtTime(volume, time);\n      } else {\n        gainNode.gain.linearRampToValueAtTime(volume, time);\n      }\n    });\n  }\n\n  /**\n   * Get emotional modifiers for gesture sounds\n   * @param {string} emotion - Current emotion\n   * @returns {Object} Modifier values\n   */\n  getEmotionalModifiers(emotion) {\n    const modifiers = new Map([\n      ['neutral', { intensity: 1.0, speed: 1.0 }],\n      ['joy', { intensity: 1.3, speed: 1.2 }],\n      ['sadness', { intensity: 0.6, speed: 0.8 }],\n      ['anger', { intensity: 1.5, speed: 1.4 }],\n      ['fear', { intensity: 0.8, speed: 1.3 }],\n      ['surprise', { intensity: 1.4, speed: 1.5 }],\n      ['disgust', { intensity: 0.7, speed: 0.9 }],\n      ['love', { intensity: 1.1, speed: 0.9 }]\n    ]);\n\n    return modifiers.get(emotion) || modifiers.get('neutral');\n  }\n\n  /**\n   * Enable/disable quality reduction for performance\n   * @param {boolean} enabled - Whether to reduce quality\n   */\n  setQualityReduction(enabled) {\n    this.qualityReduction = enabled;\n    \n    if (enabled && this.audioContext) {\n      // Reduce audio quality for performance\n      // Lower sample rate if possible\n      if (this.audioContext.sampleRate > 22050) {\n        // Audio quality reduced for performance\n      }\n      // Reduce active oscillators\n      this.maxOscillators = 2;\n    } else {\n      // Restore full quality\n      this.maxOscillators = 4;\n    }\n  }\n  \n  /**\n   * Check if Web Audio API is supported in current browser\n   * @returns {boolean} Support status\n   */\n  static isSupported() {\n    return !!(window.AudioContext || window.webkitAudioContext);\n  }\n  \n  /**\n   * Throttled warning to reduce console spam\n   * @param {string} message - Warning message\n   * @param {string} key - Unique key for this warning type\n   */\n  throttledWarn(message, key) {\n    const now = Date.now();\n    const lastWarning = this.warningTimestamps[key] || 0;\n    \n    if (now - lastWarning > this.warningThrottle) {\n      // SoundSystem warning\n      this.warningTimestamps[key] = now;\n    }\n  }\n}","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                     ◐ ◑ ◒ ◓  SIMPLE FPS COUNTER  ◓ ◒ ◑ ◐                     \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Simple FPS Counter - Accurate Frame Rate Measurement\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module SimpleFPSCounter\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ The SPEEDOMETER of the engine. Accurately measures frames per second using        \n * ║ a rolling timestamp array. Shows exactly how smooth the animation is running.     \n * ║ Critical for performance monitoring and automatic quality degradation.            \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 📊 FPS CALCULATION METHOD                                                         \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Stores timestamps from the last second                                          \n * │ • Counts frames within 1000ms window                                              \n * │ • More accurate than delta time averaging                                         \n * │ • Updates every frame for real-time monitoring                                    \n * │ • Based on 2025 best practices for JavaScript FPS                                 \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ ⚡ PERFORMANCE TARGETS                                                             \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • 60 FPS   : Smooth animation (16.67ms per frame)                                 \n * │ • 30 FPS   : Acceptable minimum (33.33ms per frame)                               \n * │ • < 30 FPS : Triggers quality degradation                                         \n * │ • < 15 FPS : Critical performance issues                                          \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ═══════════════════════════════════════════════════════════════════════════════════\n */\nclass SimpleFPSCounter {\n    constructor() {\n        // Array to store timestamps from the last second\n        this.timestamps = [];\n        \n        // Current FPS value\n        this.fps = 0;\n        \n        // Smoothed FPS for display (to reduce jitter)\n        this.smoothedFPS = 0;\n        this.smoothingFactor = 0.9; // Higher = more smoothing\n        \n        // Frame time tracking\n        this.lastFrameTime = 0;\n        this.frameTime = 0;\n        \n        // Average frame time over last N frames\n        this.frameTimes = [];\n        this.maxFrameTimeSamples = 10;\n        this.averageFrameTime = 0;\n    }\n    \n    /**\n     * Update FPS calculation with new frame\n     * Call this in your animation loop with the timestamp from requestAnimationFrame\n     * @param {number} timestamp - High resolution timestamp from requestAnimationFrame\n     */\n    update(timestamp) {\n        // Remove timestamps older than 1 second\n        while (this.timestamps.length > 0 && this.timestamps[0] <= timestamp - 1000) {\n            this.timestamps.shift();\n        }\n        \n        // Add current timestamp\n        this.timestamps.push(timestamp);\n        \n        // FPS is the number of frames in the last second\n        this.fps = this.timestamps.length;\n        \n        // Apply smoothing to reduce display jitter\n        if (this.smoothedFPS === 0) {\n            this.smoothedFPS = this.fps;\n        } else {\n            this.smoothedFPS = this.smoothedFPS * this.smoothingFactor + \n                               this.fps * (1 - this.smoothingFactor);\n        }\n        \n        // Calculate frame time\n        if (this.lastFrameTime > 0) {\n            this.frameTime = timestamp - this.lastFrameTime;\n            \n            // Track frame times for averaging\n            this.frameTimes.push(this.frameTime);\n            if (this.frameTimes.length > this.maxFrameTimeSamples) {\n                this.frameTimes.shift();\n            }\n            \n            // Calculate average frame time\n            if (this.frameTimes.length > 0) {\n                const sum = this.frameTimes.reduce((a, b) => a + b, 0);\n                this.averageFrameTime = sum / this.frameTimes.length;\n            }\n        }\n        this.lastFrameTime = timestamp;\n    }\n    \n    /**\n     * Get current FPS\n     * @returns {number} Current FPS (integer)\n     */\n    getFPS() {\n        return Math.round(this.fps);\n    }\n    \n    /**\n     * Get smoothed FPS for display\n     * @returns {number} Smoothed FPS (integer)\n     */\n    getSmoothedFPS() {\n        return Math.round(this.smoothedFPS);\n    }\n    \n    /**\n     * Get last frame time in milliseconds\n     * @returns {number} Frame time in ms\n     */\n    getFrameTime() {\n        return this.frameTime;\n    }\n    \n    /**\n     * Get average frame time over recent frames\n     * @returns {number} Average frame time in ms\n     */\n    getAverageFrameTime() {\n        return this.averageFrameTime;\n    }\n    \n    /**\n     * Reset the FPS counter\n     */\n    reset() {\n        this.timestamps = [];\n        this.fps = 0;\n        this.smoothedFPS = 0;\n        this.lastFrameTime = 0;\n        this.frameTime = 0;\n        this.frameTimes = [];\n        this.averageFrameTime = 0;\n    }\n    \n    /**\n     * Get all metrics\n     * @returns {Object} Object containing all FPS metrics\n     */\n    getMetrics() {\n        return {\n            fps: this.getFPS(),\n            smoothedFPS: this.getSmoothedFPS(),\n            frameTime: this.getFrameTime(),\n            averageFrameTime: this.getAverageFrameTime(),\n            // Performance status based on FPS\n            status: this.fps >= 55 ? 'good' : this.fps >= 30 ? 'okay' : 'poor'\n        };\n    }\n}\n\nexport default SimpleFPSCounter;","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE\r\n *  └─○═╝\r\n *                    ◐ ◑ ◒ ◓  ANIMATION CONTROLLER  ◓ ◒ ◑ ◐\r\n *\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Animation Controller - Main Loop & Performance Management\r\n * @author Emotive Engine Team\r\n * @version 2.0.0\r\n * @module AnimationController\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                                   PURPOSE                                         \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ The HEARTBEAT of the Emotive Engine. Manages the main animation loop,             \r\n * ║ coordinates all subsystems, monitors performance, and ensures smooth              \r\n * ║ frame rates through adaptive quality control.                                     \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 🎬 CORE RESPONSIBILITIES                                                          \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • Main requestAnimationFrame loop management                                      \r\n * │ • Frame timing and deltaTime calculation                                          \r\n * │ • Performance monitoring and FPS tracking                                         \r\n * │ • Adaptive quality degradation when performance drops                             \r\n * │ • Subsystem update coordination (render, particles, state)                        \r\n * │ • Visibility and pause state handling                                             \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ ⚡ PERFORMANCE FEATURES                                                           \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • Dynamic FPS targeting (15, 30, 45, 60 FPS)                                      \r\n * │ • Frame skipping for consistent timing                                            \r\n * │ • Automatic quality reduction when FPS drops                                      \r\n * │ • Recovery system when performance improves                                       \r\n * │ • Memory leak detection and prevention                                            \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 🔧 CONFIGURATION OPTIONS                                                          \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • targetFPS         : Desired frame rate (default: 60)                            \r\n * │ • enableDegradation : Allow quality reduction (default: true)                     \r\n * │ • performanceMode   : 'adaptive' | 'fixed' | 'maximum'                           \r\n * │ • monitoringInterval: Performance check frequency (default: 1000ms)               \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ ❌ CRITICAL - DO NOT MODIFY                                                       \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ ✗ Frame timing logic       → Breaks animation smoothness                         \r\n * │ ✗ Update order            → Causes render/state desync                           \r\n * │ ✗ Performance thresholds   → May cause excessive degradation                     \r\n * │ ✗ Memory cleanup          → Creates memory leaks                                 \r\n * │ ✗ RAF loop management     → Breaks entire animation system                       \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                          SUBSYSTEM UPDATE ORDER                                   \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ 1. Performance monitoring (FPS calculation)                                       \r\n * ║ 2. State machine update (emotions, transitions)                                   \r\n * ║ 3. Gesture processing (animation progress)                                        \r\n * ║ 4. Particle system update (movement, spawning)                                    \r\n * ║ 5. Renderer update (draw orb and particles)                                       \r\n * ║ 6. Cleanup and memory management                                                  \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * ════════════════════════════════════════════════════════════════════════════════════\r\n */\r\n\r\nimport PerformanceMonitor from './PerformanceMonitor.js';\r\nimport SimpleFPSCounter from './SimpleFPSCounter.js';\r\nimport { animationLoopManager, AnimationPriority } from './AnimationLoopManager.js';\r\n\r\nclass AnimationController {\r\n    constructor(errorBoundary, config = {}) {\r\n        this.errorBoundary = errorBoundary;\r\n        this.config = config;\r\n        this.config.targetFPS = config.targetFPS || 60;\r\n        \r\n        // Animation state\r\n        this.isRunning = false;\r\n        this.animationFrameId = null;\r\n        this.loopCallbackId = null; // For AnimationLoopManager\r\n        this.lastFrameTime = 0;\r\n        this.deltaTime = 0;\r\n        this.isPaused = false;\r\n        \r\n        // Set up visibility change handling\r\n        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\r\n        if (typeof document !== 'undefined') {\r\n            document.addEventListener('visibilitychange', this.handleVisibilityChange);\r\n        }\r\n        \r\n        // PerformanceMonitor DISABLED - no FPS interference\r\n        this.performanceMonitor = null;\r\n        /* \r\n        this.performanceMonitor = new PerformanceMonitor(config);\r\n        this.performanceMonitor.setEventCallback((event, data) => {\r\n            this.emit(event, data);\r\n        });\r\n        */\r\n        \r\n        // Simple FPS counter for accurate display\r\n        this.fpsCounter = new SimpleFPSCounter();\r\n        \r\n        // Subsystem references (injected via setSubsystems)\r\n        this.subsystems = {};\r\n        \r\n        // Event callback for external integration\r\n        this.eventCallback = null;\r\n        \r\n        // Reference to parent EmotiveMascot for audio level updates\r\n        this.parentMascot = null;\r\n        \r\n    }\r\n\r\n    /**\r\n     * Injects subsystem dependencies\r\n     * @param {Object} subsystems - Object containing all required subsystems\r\n     */\r\n    setSubsystems(subsystems) {\r\n        this.subsystems = {\r\n            stateMachine: subsystems.stateMachine,\r\n            particleSystem: subsystems.particleSystem,\r\n            renderer: subsystems.renderer,\r\n            soundSystem: subsystems.soundSystem,\r\n            canvasManager: subsystems.canvasManager\r\n        };\r\n        \r\n        // Validate required subsystems\r\n        const required = ['stateMachine', 'particleSystem', 'renderer'];\r\n        for (const system of required) {\r\n            if (!this.subsystems[system]) {\r\n                throw new Error(`Required subsystem '${system}' not provided`);\r\n            }\r\n        }\r\n        \r\n        // PerformanceMonitor disabled\r\n        if (this.performanceMonitor) {\r\n            this.performanceMonitor.setSubsystems(this.subsystems);\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * Sets the event callback for external integration\r\n     * @param {Function} callback - Function to call for event emission\r\n     */\r\n    setEventCallback(callback) {\r\n        if (typeof callback !== 'function') {\r\n            throw new Error('Event callback must be a function');\r\n        }\r\n        this.eventCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Sets the parent EmotiveMascot reference for audio level updates\r\n     * @param {EmotiveMascot} mascot - Parent mascot instance\r\n     */\r\n    setParentMascot(mascot) {\r\n        this.parentMascot = mascot;\r\n    }\r\n\r\n    /**\r\n     * Emits an event through the callback if available\r\n     * @param {string} event - Event name\r\n     * @param {*} data - Event data\r\n     */\r\n    emit(event, data = null) {\r\n        if (this.eventCallback) {\r\n            this.eventCallback(event, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the animation loop\r\n     * @returns {boolean} Success status\r\n     */\r\n    start() {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (this.isRunning) {\r\n                return false;\r\n            }\r\n\r\n            if (!this.subsystems.stateMachine) {\r\n                throw new Error('Cannot start animation without subsystems configured');\r\n            }\r\n            \r\n            // Initialize animation state\r\n            this.isRunning = true;\r\n            this.lastFrameTime = performance.now();\r\n            \r\n            // Resume audio context if available\r\n            if (this.subsystems.soundSystem && this.subsystems.soundSystem.isAvailable()) {\r\n                this.subsystems.soundSystem.resumeContext();\r\n            }\r\n\r\n            // Register with AnimationLoopManager instead of direct RAF\r\n            this.loopCallbackId = animationLoopManager.register(\r\n                (deltaTime, timestamp) => this.animate(deltaTime, timestamp),\r\n                AnimationPriority.CRITICAL, // Main render loop is critical priority\r\n                this\r\n            );\r\n\r\n            // Emit start event\r\n            this.emit('animationStarted', { targetFPS: this.targetFPS });\r\n            \r\n            return true;\r\n        }, 'animation-start')();\r\n    }\r\n\r\n    /**\r\n     * Stops the animation loop\r\n     * @returns {boolean} Success status\r\n     */\r\n    stop() {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (!this.isRunning) {\r\n                return false;\r\n            }\r\n            \r\n            // Stop animation loop\r\n            this.isRunning = false;\r\n\r\n            // Unregister from AnimationLoopManager\r\n            if (this.loopCallbackId) {\r\n                animationLoopManager.unregister(this.loopCallbackId);\r\n                this.loopCallbackId = null;\r\n            }\r\n\r\n            // Clean up old RAF if it exists (for backwards compatibility)\r\n            if (this.animationFrameId) {\r\n                cancelAnimationFrame(this.animationFrameId);\r\n                this.animationFrameId = null;\r\n            }\r\n\r\n\r\n            \r\n            // Stop all active gestures\r\n            if (this.subsystems.renderer && this.subsystems.renderer.stopAllGestures) {\r\n                this.subsystems.renderer.stopAllGestures();\r\n            }\r\n            \r\n            // Stop ambient audio\r\n            if (this.subsystems.soundSystem && this.subsystems.soundSystem.isAvailable()) {\r\n                this.subsystems.soundSystem.stopAmbientTone();\r\n            }\r\n            \r\n            // Clear particles\r\n            if (this.subsystems.particleSystem) {\r\n                this.subsystems.particleSystem.clear();\r\n            }\r\n            \r\n            // Emit stop event\r\n            this.emit('animationStopped');\r\n            \r\n            return true;\r\n        }, 'animation-stop')();\r\n    }\r\n\r\n    /**\r\n     * Handles document visibility changes to pause/resume animation\r\n     */\r\n    handleVisibilityChange() {\r\n        if (document.hidden) {\r\n            // Tab became hidden - pause animation\r\n            this.isPaused = true;\r\n            \r\n            // Only reset accumulator, don't clear existing particles\r\n            if (this.subsystems?.particleSystem) {\r\n                this.subsystems.particleSystem.resetAccumulator();\r\n            }\r\n        } else {\r\n            // Tab became visible - resume animation smoothly\r\n            if (this.isPaused) {\r\n                this.isPaused = false;\r\n                // Reset the last frame time to current time to avoid huge delta\r\n                this.lastFrameTime = performance.now();\r\n                // Reset accumulator to prevent burst spawning\r\n                if (this.subsystems?.particleSystem) {\r\n                    this.subsystems.particleSystem.resetAccumulator();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Main animation loop with deltaTime calculation and performance monitoring\r\n     * Now called by AnimationLoopManager with centralized frame timing\r\n     * @param {number} deltaTime - Time since last frame from loop manager\r\n     * @param {number} timestamp - Current timestamp from loop manager\r\n     */\r\n    animate(deltaTime, timestamp) {\r\n        if (!this.isRunning || this.isPaused) return;\r\n\r\n        this.errorBoundary.wrap(() => {\r\n            // Use deltaTime from AnimationLoopManager if provided, else calculate\r\n            const currentTime = timestamp || performance.now();\r\n            this.deltaTime = deltaTime || (currentTime - this.lastFrameTime);\r\n            \r\n            // Cap deltaTime to prevent physics instability\r\n            // Use a consistent cap of 50ms (20 FPS minimum)\r\n            const skipParticleSpawn = this.deltaTime > 33; // Skip spawning if under 30fps\r\n            \r\n            if (this.deltaTime > 50) {\r\n                // Large gap detected - cap and reset accumulator\r\n                this.deltaTime = 50;\r\n                // Reset the accumulator to prevent burst spawning\r\n                if (this.subsystems?.particleSystem) {\r\n                    this.subsystems.particleSystem.resetAccumulator();\r\n                }\r\n            }\r\n            \r\n            // Store skip flag for particle system\r\n            if (this.subsystems?.particleSystem) {\r\n                this.subsystems.particleSystem.skipSpawnThisFrame = skipParticleSpawn;\r\n            }\r\n            \r\n            this.lastFrameTime = currentTime;\r\n            \r\n            // PerformanceMonitor disabled\r\n            if (this.performanceMonitor) {\r\n                this.performanceMonitor.startFrame(currentTime);\r\n            }\r\n            \r\n            // Update simple FPS counter\r\n            this.fpsCounter.update(currentTime);\r\n            \r\n            // Update all subsystems with integrated deltaTime\r\n            this.update(this.deltaTime);\r\n            \r\n            // Render the current frame\r\n            this.render();\r\n            \r\n            // PerformanceMonitor disabled\r\n            if (this.performanceMonitor) {\r\n                this.performanceMonitor.endFrame(performance.now());\r\n            }\r\n\r\n            // AnimationLoopManager now handles the loop scheduling\r\n            // No need to call requestAnimationFrame here\r\n\r\n        }, 'animation-loop')();\r\n    }\r\n\r\n    /**\r\n     * Updates all subsystems\r\n     * @param {number} deltaTime - Time since last frame in milliseconds\r\n     */\r\n    update(deltaTime) {\r\n        this.errorBoundary.wrap(() => {\r\n            const currentTime = performance.now();\r\n            \r\n            // Update state machine\r\n            if (this.subsystems.stateMachine) {\r\n                this.subsystems.stateMachine.update(deltaTime);\r\n            }\r\n            \r\n            // Gesture updates now handled by renderer\r\n            \r\n            // Update parent mascot for audio level monitoring\r\n            if (this.parentMascot && typeof this.parentMascot.update === 'function') {\r\n                this.parentMascot.update(deltaTime);\r\n            }\r\n            \r\n            // Only handle particles here if NOT in classic rendering mode\r\n            // Classic mode handles its own particles in EmotiveMascot.render()\r\n            const isClassicMode = this.parentMascot?.config?.renderingStyle === 'classic';\r\n            \r\n            if (!isClassicMode) {\r\n                // Get current emotional properties and center for particle system (advanced mode only)\r\n                if (this.subsystems.particleSystem && this.subsystems.stateMachine && this.subsystems.canvasManager) {\r\n                    const emotionalProps = this.subsystems.stateMachine.getCurrentEmotionalProperties();\r\n                    const center = this.subsystems.canvasManager.getCenter();\r\n                    \r\n                    // Get current gesture info from renderer if available\r\n                    let gestureMotion = null;\r\n                    let gestureProgress = 0;\r\n                    \r\n                    if (this.subsystems.renderer && this.subsystems.renderer.getCurrentGesture) {\r\n                        const currentGesture = this.subsystems.renderer.getCurrentGesture();\r\n                        if (currentGesture && currentGesture.particleMotion) {\r\n                            gestureMotion = currentGesture.particleMotion;\r\n                            gestureProgress = currentGesture.progress || 0;\r\n                        }\r\n                    }\r\n                    \r\n                    // Update particle system with current emotional context\r\n                    this.subsystems.particleSystem.spawn(\r\n                        emotionalProps.particleBehavior,\r\n                        this.subsystems.stateMachine.getCurrentState().emotion,\r\n                        emotionalProps.particleRate,\r\n                        center.x,\r\n                        center.y,\r\n                        deltaTime\r\n                    );\r\n                    \r\n                    // Update particles with gesture motion if available\r\n                    this.subsystems.particleSystem.update(deltaTime, center.x, center.y, gestureMotion, gestureProgress);\r\n                }\r\n            }\r\n            \r\n            // PerformanceMonitor disabled\r\n            if (this.performanceMonitor) {\r\n                this.performanceMonitor.updateMetrics({\r\n                    particleCount: this.subsystems.particleSystem?.getActiveParticleCount?.() || 0,\r\n                    gestureQueueLength: 0,\r\n                    audioLatency: this.subsystems.soundSystem?.getLatency?.() || 0\r\n                });\r\n            }\r\n            \r\n        }, 'subsystem-update')();\r\n    }\r\n\r\n    /**\r\n     * Renders the current frame\r\n     */\r\n    render() {\r\n        this.errorBoundary.wrap(() => {\r\n            // Call parent mascot's render method if available\r\n            if (this.parentMascot && typeof this.parentMascot.render === 'function') {\r\n                this.parentMascot.render();\r\n            } else if (this.subsystems.renderer) {\r\n                // Fallback to direct renderer call\r\n                this.subsystems.renderer.render();\r\n            }\r\n        }, 'frame-render')();\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Gets current performance metrics (delegated to PerformanceMonitor)\r\n     * @returns {Object} Performance data\r\n     */\r\n    getPerformanceMetrics() {\r\n        // PerformanceMonitor disabled - use simple FPS counter only\r\n        const fpsMetrics = this.fpsCounter ? this.fpsCounter.getMetrics() : {};\r\n        return {\r\n            fps: fpsMetrics.fps || 60,\r\n            instantFps: fpsMetrics.smoothedFPS || 60,\r\n            frameTime: fpsMetrics.frameTime || 16.67,\r\n            averageFrameTime: fpsMetrics.averageFrameTime || 16.67,\r\n            isRunning: this.isRunning,\r\n            deltaTime: this.deltaTime\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Sets the target FPS (delegated to PerformanceMonitor)\r\n     * @param {number} fps - Target FPS value\r\n     */\r\n    setTargetFPS(fps) {\r\n        // DISABLED - no FPS changes allowed\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Gets the target FPS\r\n     * @returns {number} Target FPS value\r\n     */\r\n    get targetFPS() {\r\n        return this.config.targetFPS || 60;\r\n    }\r\n\r\n    /**\r\n     * Checks if the animation is currently running\r\n     * @returns {boolean} Running status\r\n     */\r\n    isAnimating() {\r\n        return this.isRunning;\r\n    }\r\n\r\n    /**\r\n     * Destroys the animation controller and cleans up resources\r\n     */\r\n    destroy() {\r\n        this.stop();\r\n        \r\n        // Remove visibility change listener\r\n        if (typeof document !== 'undefined') {\r\n            document.removeEventListener('visibilitychange', this.handleVisibilityChange);\r\n        }\r\n        \r\n        // Destroy performance monitor\r\n        if (this.performanceMonitor) {\r\n            this.performanceMonitor.destroy();\r\n            this.performanceMonitor = null;\r\n        }\r\n        \r\n        // Clear subsystem references\r\n        this.subsystems = {};\r\n        this.eventCallback = null;\r\n        \r\n    }\r\n}\r\n\r\nexport default AnimationController;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                   ◐ ◑ ◒ ◓  AUDIO LEVEL PROCESSOR  ◓ ◒ ◑ ◐                   \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Audio Level Processor - Real-time Audio Analysis & Reactivity\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module AudioLevelProcessor\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Analyzes real-time audio input to make the mascot react to speech and sound.      \n * ║ Detects volume spikes, tracks audio history, and triggers emotional responses      \n * ║ based on audio levels. Makes the orb \"listen\" and respond to your voice!          \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎤 AUDIO ANALYSIS FEATURES                                                        \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Real-time RMS level calculation                                                 \n * │ • Volume spike detection with cooldown                                            \n * │ • Audio level history tracking                                                    \n * │ • Frequency analysis via FFT                                                      \n * │ • Smooth level transitions                                                        \n * │ • Microphone permission handling                                                  \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 📊 PROCESSING PIPELINE                                                            \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ 1. Microphone → getUserMedia()                                                    \n * │ 2. MediaStream → AudioContext                                                     \n * │ 3. AudioContext → AnalyserNode                                                    \n * │ 4. AnalyserNode → Frequency Data (FFT)                                            \n * │ 5. Frequency Data → RMS Calculation                                               \n * │ 6. RMS → Spike Detection & Level Events                                           \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ ⚡ SPIKE DETECTION                                                                \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Threshold: Current level > average * spikeThreshold                            \n * │ • Cooldown: Minimum interval between spikes (default: 1000ms)                    \n * │ • Triggers: \"nod\" gesture for speech acknowledgment                              \n * │ • Sensitivity: Configurable via spikeThreshold (1.5 = 50% above average)         \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🔧 CONFIGURATION                                                                   \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ PARAMETER              DEFAULT    DESCRIPTION                                     \n * │ spikeThreshold         1.5        Multiplier for spike detection                  \n * │ minimumSpikeLevel      0.1        Minimum level to trigger spike                  \n * │ spikeMinInterval       1000       Cooldown between spikes (ms)                   \n * │ historySize            10         Audio level history buffer size                 \n * │ smoothingTimeConstant  0.8        FFT smoothing (0=none, 1=max)                  \n * │ fftSize                256        FFT bin size for frequency analysis             \n * │ levelUpdateThrottle    100        Throttle for level update events (ms)          \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 📡 EVENTS                                                                          \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • levelUpdate  : Emitted when audio level changes (throttled)                     \n * │ • volumeSpike  : Emitted when spike detected (with cooldown)                      \n * │ • error        : Emitted on processing errors                                     \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                USAGE EXAMPLE                                      \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ const processor = new AudioLevelProcessor({                                       \n * ║     spikeThreshold: 1.5,                                                          \n * ║     spikeMinInterval: 500                                                         \n * ║ });                                                                                \n * ║                                                                                    \n * ║ processor.on('volumeSpike', (level) => {                                          \n * ║     mascot.triggerGesture('nod');  // React to speech                            \n * ║ });                                                                                \n * ║                                                                                    \n * ║ processor.on('levelUpdate', (level) => {                                          \n * ║     mascot.setAudioLevel(level);   // Smooth breathing with speech               \n * ║ });                                                                                \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\nexport class AudioLevelProcessor {\n    constructor(config = {}) {\n        // Configuration with defaults\n        this.config = {\n            spikeThreshold: config.spikeThreshold || 1.5,\n            minimumSpikeLevel: config.minimumSpikeLevel || 0.1,\n            spikeMinInterval: config.spikeMinInterval || 1000, // ms between spikes\n            historySize: config.historySize || 10,\n            smoothingTimeConstant: config.smoothingTimeConstant || 0.8,\n            fftSize: config.fftSize || 256,\n            levelUpdateThrottle: config.levelUpdateThrottle || 100, // ms\n            ...config\n        };\n        \n        // Audio context and analysis\n        this.audioContext = null;\n        this.analyser = null;\n        this.dataArray = null;\n        \n        // Audio level state\n        this.currentLevel = 0;\n        this.levelHistory = [];\n        this.isActive = false;\n        \n        // Spike detection state\n        this.lastVolumeSpike = 0;\n        \n        // Event throttling\n        this.lastLevelEmit = 0;\n        \n        // Event callbacks\n        this.callbacks = {\n            levelUpdate: null,\n            volumeSpike: null,\n            error: null\n        };\n    }\n\n    /**\n     * Initialize audio level processing with provided audio context\n     * @param {AudioContext} audioContext - Web Audio API context\n     * @returns {boolean} Success status\n     */\n    initialize(audioContext) {\n        try {\n            if (!audioContext) {\n                throw new Error('AudioContext is required for audio level processing');\n            }\n            \n            // Validate AudioContext\n            if (typeof audioContext.createAnalyser !== 'function') {\n                throw new Error('Invalid AudioContext provided');\n            }\n            \n            // Store audio context\n            this.audioContext = audioContext;\n            \n            // Create audio analyser for level monitoring\n            this.analyser = audioContext.createAnalyser();\n            this.analyser.fftSize = this.config.fftSize;\n            this.analyser.smoothingTimeConstant = this.config.smoothingTimeConstant;\n            \n            // Create data array for frequency analysis\n            this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n            \n            // Initialize state\n            this.currentLevel = 0;\n            this.levelHistory = [];\n            this.lastVolumeSpike = 0;\n            this.isActive = true;\n            \n            // Resume audio context if suspended\n            if (audioContext.state === 'suspended') {\n                audioContext.resume().catch(error => {\n                    this.emitError('Failed to resume AudioContext', error);\n                });\n            }\n            \n            return true;\n            \n        } catch (error) {\n            this.emitError('Failed to initialize AudioLevelProcessor', error);\n            return false;\n        }\n    }\n\n    /**\n     * Clean up audio level processing resources\n     */\n    cleanup() {\n        try {\n            // Reset state\n            this.isActive = false;\n            this.currentLevel = 0;\n            this.levelHistory = [];\n            this.lastVolumeSpike = 0;\n            this.lastLevelEmit = 0;\n            \n            // Clear references\n            this.audioContext = null;\n            this.analyser = null;\n            this.dataArray = null;\n            \n            \n        } catch (error) {\n            this.emitError('Error during AudioLevelProcessor cleanup', error);\n        }\n    }\n\n    /**\n     * Update audio level from analyser (called each frame)\n     * @param {number} deltaTime - Time since last frame in milliseconds\n     */\n    updateAudioLevel(deltaTime = 16) {\n        if (!this.isActive || !this.analyser || !this.dataArray) {\n            return;\n        }\n        \n        try {\n            // Get frequency data from analyser\n            this.analyser.getByteFrequencyData(this.dataArray);\n            \n            // Calculate RMS (Root Mean Square) for accurate level detection\n            const rms = this.calculateRMS();\n            \n            // Update current level with normalization and amplification\n            this.currentLevel = Math.min(1, rms * 2); // Amplify for better sensitivity\n            \n            // Update audio level history for spike detection\n            this.updateLevelHistory();\n            \n            // Check for volume spikes and trigger events\n            this.detectVolumeSpikes();\n            \n            // Emit throttled level update events\n            this.emitLevelUpdate();\n            \n        } catch (error) {\n            this.emitError('Error updating audio level', error);\n            this.currentLevel = 0;\n        }\n    }\n\n    /**\n     * Calculate RMS (Root Mean Square) from frequency data\n     * @returns {number} RMS value normalized to 0-1 range\n     */\n    calculateRMS() {\n        if (!this.dataArray || this.dataArray.length === 0) {\n            return 0;\n        }\n        \n        let sumSquares = 0;\n        \n        // Calculate sum of squares for all frequency bins\n        for (let i = 0; i < this.dataArray.length; i++) {\n            const normalized = this.dataArray[i] / 255; // Normalize to 0-1\n            sumSquares += normalized * normalized;\n        }\n        \n        // Return RMS value\n        return Math.sqrt(sumSquares / this.dataArray.length);\n    }\n\n    /**\n     * Update audio level history for spike detection analysis\n     */\n    updateLevelHistory() {\n        // Add current level to history\n        this.levelHistory.push(this.currentLevel);\n        \n        // Maintain history size limit\n        if (this.levelHistory.length > this.config.historySize) {\n            this.levelHistory.shift();\n        }\n    }\n\n    /**\n     * Detect volume spikes and emit events for gesture triggering\n     */\n    detectVolumeSpikes() {\n        // Need sufficient history for spike detection\n        if (this.levelHistory.length < 5) {\n            return;\n        }\n        \n        const currentTime = performance.now();\n        \n        // Prevent too frequent spike detection\n        if (currentTime - this.lastVolumeSpike < this.config.spikeMinInterval) {\n            return;\n        }\n        \n        // Calculate average of previous levels (excluding current)\n        const previousLevels = this.levelHistory.slice(0, -1);\n        const averagePrevious = previousLevels.reduce((sum, level) => sum + level, 0) / previousLevels.length;\n        \n        // Check for volume spike conditions\n        const isSpike = this.currentLevel >= averagePrevious * this.config.spikeThreshold &&\n                       averagePrevious >= this.config.minimumSpikeLevel &&\n                       this.currentLevel >= this.config.minimumSpikeLevel * 2;\n        \n        if (isSpike) {\n            this.lastVolumeSpike = currentTime;\n            \n            // Emit volume spike event with detailed information\n            this.emitVolumeSpike({\n                level: this.currentLevel,\n                previousAverage: averagePrevious,\n                spikeRatio: this.currentLevel / averagePrevious,\n                timestamp: currentTime,\n                threshold: this.config.spikeThreshold,\n                minimumLevel: this.config.minimumSpikeLevel\n            });\n            \n        }\n    }\n\n    /**\n     * Clear audio level history\n     */\n    clearHistory() {\n        this.levelHistory = [];\n    }\n\n    /**\n     * Get current audio level\n     * @returns {number} Current audio level (0-1)\n     */\n    getCurrentLevel() {\n        return this.currentLevel;\n    }\n\n    /**\n     * Get audio level history\n     * @returns {Array<number>} Array of recent audio levels\n     */\n    getLevelHistory() {\n        return [...this.levelHistory]; // Return copy to prevent external modification\n    }\n\n    /**\n     * Get analyser node for external audio source connection\n     * @returns {AnalyserNode|null} Web Audio analyser node\n     */\n    getAnalyser() {\n        return this.analyser;\n    }\n\n    /**\n     * Get current frequency data as array\n     * @returns {Uint8Array|null} Frequency data array\n     */\n    getFrequencyData() {\n        if (!this.dataArray) {\n            return null;\n        }\n        \n        // Return copy of current frequency data\n        return new Uint8Array(this.dataArray);\n    }\n\n    /**\n     * Check if audio level processing is active\n     * @returns {boolean} Active status\n     */\n    isProcessingActive() {\n        return this.isActive;\n    }\n\n    /**\n     * Set callback for audio level updates\n     * @param {Function} callback - Callback function receiving level data\n     */\n    onLevelUpdate(callback) {\n        if (typeof callback === 'function') {\n            this.callbacks.levelUpdate = callback;\n        } else {\n            throw new Error('Level update callback must be a function');\n        }\n    }\n\n    /**\n     * Set callback for volume spike events\n     * @param {Function} callback - Callback function receiving spike data\n     */\n    onVolumeSpike(callback) {\n        if (typeof callback === 'function') {\n            this.callbacks.volumeSpike = callback;\n        } else {\n            throw new Error('Volume spike callback must be a function');\n        }\n    }\n\n    /**\n     * Set callback for error events\n     * @param {Function} callback - Callback function receiving error data\n     */\n    onError(callback) {\n        if (typeof callback === 'function') {\n            this.callbacks.error = callback;\n        } else {\n            throw new Error('Error callback must be a function');\n        }\n    }\n\n    /**\n     * Remove all event callbacks\n     */\n    removeAllCallbacks() {\n        this.callbacks = {\n            levelUpdate: null,\n            volumeSpike: null,\n            error: null\n        };\n    }\n\n    /**\n     * Update configuration settings\n     * @param {Object} newConfig - New configuration options\n     */\n    updateConfig(newConfig) {\n        this.config = { ...this.config, ...newConfig };\n        \n        // Update analyser settings if active\n        if (this.analyser) {\n            if (newConfig.fftSize) {\n                this.analyser.fftSize = this.config.fftSize;\n                this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n            }\n            \n            if (newConfig.smoothingTimeConstant !== undefined) {\n                this.analyser.smoothingTimeConstant = this.config.smoothingTimeConstant;\n            }\n        }\n        \n    }\n\n    /**\n     * Get current configuration\n     * @returns {Object} Current configuration object\n     */\n    getConfig() {\n        return { ...this.config }; // Return copy to prevent external modification\n    }\n\n    /**\n     * Get processing statistics\n     * @returns {Object} Statistics object\n     */\n    getStats() {\n        return {\n            isActive: this.isActive,\n            currentLevel: this.currentLevel,\n            historySize: this.levelHistory.length,\n            maxHistorySize: this.config.historySize,\n            lastSpikeTime: this.lastVolumeSpike,\n            timeSinceLastSpike: this.lastVolumeSpike > 0 ? performance.now() - this.lastVolumeSpike : 0,\n            averageLevel: this.levelHistory.length > 0 ? \n                this.levelHistory.reduce((sum, level) => sum + level, 0) / this.levelHistory.length : 0\n        };\n    }\n\n    /**\n     * Emit throttled audio level update event\n     */\n    emitLevelUpdate() {\n        const currentTime = performance.now();\n        \n        // Throttle level update events\n        if (currentTime - this.lastLevelEmit < this.config.levelUpdateThrottle) {\n            return;\n        }\n        \n        this.lastLevelEmit = currentTime;\n        \n        if (this.callbacks.levelUpdate) {\n            try {\n                this.callbacks.levelUpdate({\n                    level: this.currentLevel,\n                    rawData: this.getFrequencyData(),\n                    timestamp: currentTime,\n                    history: this.getLevelHistory()\n                });\n            } catch (error) {\n            }\n        }\n    }\n\n    /**\n     * Emit volume spike event\n     * @param {Object} spikeData - Spike detection data\n     */\n    emitVolumeSpike(spikeData) {\n        if (this.callbacks.volumeSpike) {\n            try {\n                this.callbacks.volumeSpike(spikeData);\n            } catch (error) {\n            }\n        }\n    }\n\n    /**\n     * Emit error event\n     * @param {string} message - Error message\n     * @param {Error} error - Original error object\n     */\n    emitError(message, error) {\n        \n        if (this.callbacks.error) {\n            try {\n                this.callbacks.error({\n                    message,\n                    error,\n                    timestamp: performance.now()\n                });\n            } catch (callbackError) {\n            }\n        }\n    }\n\n    /**\n     * Check if Web Audio API is supported\n     * @returns {boolean} Support status\n     */\n    static isSupported() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n}\n\nexport default AudioLevelProcessor;","/**\n * Event Manager\n * Centralized event listener management to prevent memory leaks\n *\n * @module core/EventManager\n * @version 1.0.0\n */\n\n/**\n * Manages all event listeners to ensure proper cleanup\n */\nexport class EventManager {\n    constructor() {\n        // Track all registered listeners\n        this.listeners = new Map();\n\n        // Track listener groups for batch operations\n        this.groups = new Map();\n\n        // Auto-cleanup on page unload\n        this.setupUnloadHandler();\n\n        // Stats\n        this.stats = {\n            registered: 0,\n            removed: 0,\n            active: 0\n        };\n    }\n\n    /**\n     * Register an event listener\n     * @param {EventTarget} target - Event target (element, window, document, etc.)\n     * @param {string} eventType - Event type (click, resize, etc.)\n     * @param {Function} handler - Event handler function\n     * @param {Object} options - addEventListener options\n     * @param {string} group - Optional group name for batch operations\n     * @returns {string} Listener ID for later removal\n     */\n    addEventListener(target, eventType, handler, options = {}, group = 'default') {\n        // Generate unique ID\n        const id = this.generateId();\n\n        // Create listener info\n        const listenerInfo = {\n            id,\n            target,\n            eventType,\n            handler,\n            options,\n            group,\n            active: true\n        };\n\n        // Store listener\n        this.listeners.set(id, listenerInfo);\n\n        // Add to group\n        if (!this.groups.has(group)) {\n            this.groups.set(group, new Set());\n        }\n        this.groups.get(group).add(id);\n\n        // Actually add the listener\n        target.addEventListener(eventType, handler, options);\n\n        // Update stats\n        this.stats.registered++;\n        this.stats.active++;\n\n        return id;\n    }\n\n    /**\n     * Remove an event listener by ID\n     * @param {string} id - Listener ID\n     * @returns {boolean} Success status\n     */\n    removeEventListener(id) {\n        const listenerInfo = this.listeners.get(id);\n\n        if (!listenerInfo || !listenerInfo.active) {\n            return false;\n        }\n\n        // Remove the actual listener\n        listenerInfo.target.removeEventListener(\n            listenerInfo.eventType,\n            listenerInfo.handler,\n            listenerInfo.options\n        );\n\n        // Mark as inactive\n        listenerInfo.active = false;\n\n        // Remove from group\n        const group = this.groups.get(listenerInfo.group);\n        if (group) {\n            group.delete(id);\n            if (group.size === 0) {\n                this.groups.delete(listenerInfo.group);\n            }\n        }\n\n        // Remove from listeners map\n        this.listeners.delete(id);\n\n        // Update stats\n        this.stats.removed++;\n        this.stats.active--;\n\n        return true;\n    }\n\n    /**\n     * Remove all listeners in a group\n     * @param {string} group - Group name\n     * @returns {number} Number of listeners removed\n     */\n    removeGroup(group) {\n        const groupSet = this.groups.get(group);\n\n        if (!groupSet) {\n            return 0;\n        }\n\n        let removed = 0;\n\n        for (const id of groupSet) {\n            if (this.removeEventListener(id)) {\n                removed++;\n            }\n        }\n\n        return removed;\n    }\n\n    /**\n     * Remove all listeners for a specific target\n     * @param {EventTarget} target - Event target\n     * @returns {number} Number of listeners removed\n     */\n    removeAllForTarget(target) {\n        let removed = 0;\n\n        for (const [id, info] of this.listeners.entries()) {\n            if (info.target === target && info.active) {\n                if (this.removeEventListener(id)) {\n                    removed++;\n                }\n            }\n        }\n\n        return removed;\n    }\n\n    /**\n     * Remove all listeners of a specific type\n     * @param {string} eventType - Event type\n     * @returns {number} Number of listeners removed\n     */\n    removeAllOfType(eventType) {\n        let removed = 0;\n\n        for (const [id, info] of this.listeners.entries()) {\n            if (info.eventType === eventType && info.active) {\n                if (this.removeEventListener(id)) {\n                    removed++;\n                }\n            }\n        }\n\n        return removed;\n    }\n\n    /**\n     * Remove all listeners\n     * @returns {number} Number of listeners removed\n     */\n    removeAll() {\n        let removed = 0;\n\n        for (const [id, info] of this.listeners.entries()) {\n            if (info.active) {\n                if (this.removeEventListener(id)) {\n                    removed++;\n                }\n            }\n        }\n\n        return removed;\n    }\n\n    /**\n     * Create a bound listener that auto-removes\n     * @param {EventTarget} target - Event target\n     * @param {string} eventType - Event type\n     * @param {Function} handler - Event handler\n     * @param {Object} options - Options\n     * @returns {Object} Controller with remove method\n     */\n    createAutoRemove(target, eventType, handler, options = {}) {\n        const id = this.addEventListener(target, eventType, handler, options);\n\n        return {\n            id,\n            remove: () => this.removeEventListener(id)\n        };\n    }\n\n    /**\n     * Add listener that fires only once\n     * @param {EventTarget} target - Event target\n     * @param {string} eventType - Event type\n     * @param {Function} handler - Event handler\n     * @param {Object} options - Options\n     * @returns {string} Listener ID\n     */\n    once(target, eventType, handler, options = {}) {\n        const wrappedHandler = (event) => {\n            handler(event);\n            this.removeEventListener(id);\n        };\n\n        const id = this.addEventListener(target, eventType, wrappedHandler, options);\n\n        return id;\n    }\n\n    /**\n     * Debounced event listener\n     * @param {EventTarget} target - Event target\n     * @param {string} eventType - Event type\n     * @param {Function} handler - Event handler\n     * @param {number} delay - Debounce delay in ms\n     * @param {Object} options - Options\n     * @returns {string} Listener ID\n     */\n    debounced(target, eventType, handler, delay = 250, options = {}) {\n        let timeoutId;\n\n        const debouncedHandler = (event) => {\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(() => handler(event), delay);\n        };\n\n        return this.addEventListener(target, eventType, debouncedHandler, options);\n    }\n\n    /**\n     * Throttled event listener\n     * @param {EventTarget} target - Event target\n     * @param {string} eventType - Event type\n     * @param {Function} handler - Event handler\n     * @param {number} limit - Throttle limit in ms\n     * @param {Object} options - Options\n     * @returns {string} Listener ID\n     */\n    throttled(target, eventType, handler, limit = 100, options = {}) {\n        let inThrottle = false;\n\n        const throttledHandler = (event) => {\n            if (!inThrottle) {\n                handler(event);\n                inThrottle = true;\n                setTimeout(() => {\n                    inThrottle = false;\n                }, limit);\n            }\n        };\n\n        return this.addEventListener(target, eventType, throttledHandler, options);\n    }\n\n    /**\n     * Setup auto-cleanup on page unload\n     * @private\n     */\n    setupUnloadHandler() {\n        if (typeof window === 'undefined') return;\n\n        const cleanup = () => {\n            this.removeAll();\n        };\n\n        // Use both for maximum compatibility\n        window.addEventListener('beforeunload', cleanup);\n        window.addEventListener('unload', cleanup);\n    }\n\n    /**\n     * Generate unique ID\n     * @private\n     * @returns {string} Unique ID\n     */\n    generateId() {\n        return `listener_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    /**\n     * Get statistics\n     * @returns {Object} Statistics\n     */\n    getStats() {\n        return {\n            ...this.stats,\n            groups: this.groups.size,\n            listeners: this.listeners.size\n        };\n    }\n\n    /**\n     * Get active listeners for debugging\n     * @returns {Array} Active listener info\n     */\n    getActiveListeners() {\n        const active = [];\n\n        for (const [id, info] of this.listeners.entries()) {\n            if (info.active) {\n                active.push({\n                    id,\n                    eventType: info.eventType,\n                    group: info.group,\n                    target: info.target.constructor.name\n                });\n            }\n        }\n\n        return active;\n    }\n\n    /**\n     * Check for potential memory leaks\n     * @returns {Object} Leak analysis\n     */\n    analyzeLeaks() {\n        const analysis = {\n            totalListeners: this.listeners.size,\n            activeListeners: this.stats.active,\n            inactiveButNotRemoved: 0,\n            byTarget: new Map(),\n            byType: new Map(),\n            potentialLeaks: []\n        };\n\n        for (const [id, info] of this.listeners.entries()) {\n            // Count by target\n            const targetName = info.target.constructor.name;\n            analysis.byTarget.set(\n                targetName,\n                (analysis.byTarget.get(targetName) || 0) + 1\n            );\n\n            // Count by type\n            analysis.byType.set(\n                info.eventType,\n                (analysis.byType.get(info.eventType) || 0) + 1\n            );\n\n            // Check for inactive but not removed\n            if (!info.active) {\n                analysis.inactiveButNotRemoved++;\n                analysis.potentialLeaks.push({\n                    id,\n                    eventType: info.eventType,\n                    target: targetName\n                });\n            }\n        }\n\n        // Convert maps to objects for easier reading\n        analysis.byTarget = Object.fromEntries(analysis.byTarget);\n        analysis.byType = Object.fromEntries(analysis.byType);\n\n        return analysis;\n    }\n\n    /**\n     * Clean up inactive listeners\n     * @returns {number} Number cleaned\n     */\n    cleanup() {\n        let cleaned = 0;\n\n        for (const [id, info] of this.listeners.entries()) {\n            if (!info.active) {\n                this.listeners.delete(id);\n                cleaned++;\n            }\n        }\n\n        return cleaned;\n    }\n}\n\n// Create singleton instance\nexport const eventManager = new EventManager();\n\n// Export for convenience\nexport default eventManager;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                   ◐ ◑ ◒ ◓  ACCESSIBILITY MANAGER  ◓ ◒ ◑ ◐                   \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Accessibility Manager - Inclusive Design & A11y Support\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module AccessibilityManager\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Makes the Emotive Engine accessible to EVERYONE. Handles reduced motion,          \n * ║ screen readers, keyboard navigation, color blindness, and more.                   \n * ║ Because emotional expression should be universal.                                 \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ ♿ ACCESSIBILITY FEATURES                                                         \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Reduced Motion     : Respects prefers-reduced-motion                            \n * │ • High Contrast      : Enhanced visibility mode                                   \n * │ • Screen Readers     : ARIA labels and live announcements                         \n * │ • Keyboard Nav       : Full keyboard control support                              \n * │ • Focus Indicators   : Clear visual focus states                                  \n * │ • Color Blind Modes  : Protanopia, Deuteranopia, Tritanopia                       \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎨 COLOR BLIND MODES                                                              \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • none         : Standard colors                                                  \n * │ • protanopia   : Red-blind friendly palette                                       \n * │ • deuteranopia : Green-blind friendly palette                                     \n * │ • tritanopia   : Blue-blind friendly palette                                      \n * │ • highContrast : Maximum contrast (black/white/yellow)                            \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ ⌨️ KEYBOARD CONTROLS                                                              \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Tab/Shift+Tab : Navigate between elements                                      \n * │ • Enter/Space   : Activate focused element                                        \n * │ • Arrow Keys    : Directional navigation                                          \n * │ • Escape        : Cancel/close operations                                         \n * │ • Numbers 1-9   : Quick emotion selection                                         \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 📢 SCREEN READER SUPPORT                                                          \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • ARIA Labels      : Descriptive labels for all elements                          \n * │ • Live Regions     : Real-time state announcements                                \n * │ • Role Attributes  : Semantic HTML roles                                          \n * │ • State Changes    : Announced through live region                                \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🔧 CONFIGURATION OPTIONS                                                          \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • enableReducedMotion      : Honor system preference (default: true)              \n * │ • enableHighContrast       : Allow high contrast mode (default: true)             \n * │ • enableScreenReaderSupport: ARIA and announcements (default: true)               \n * │ • enableKeyboardNavigation : Keyboard controls (default: true)                    \n * │ • announceStateChanges     : Announce emotion changes (default: true)             \n * │ • colorBlindMode          : Color adjustment mode (default: 'none')              \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ ⚠️  IMPORTANT CONSIDERATIONS                                                      \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Always test with screen readers (NVDA, JAWS, VoiceOver)                         \n * │ • Validate color contrasts meet WCAG 2.1 AA standards                             \n * │ • Ensure all interactive elements are keyboard accessible                         \n * │ • Provide alternative text for visual-only information                            \n * │ • Test with browser zoom at 200% and 400%                                        \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                         IMPLEMENTING ACCESSIBILITY                                \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ const a11y = new AccessibilityManager({                                           \n * ║     colorBlindMode: 'protanopia',                                                 \n * ║     announceStateChanges: true                                                    \n * ║ });                                                                                \n * ║                                                                                    \n * ║ // Announce emotion change                                                        \n * ║ a11y.announceStateChange('Emotion changed to joy');                               \n * ║                                                                                    \n * ║ // Apply reduced motion                                                           \n * ║ if (a11y.shouldReduceMotion()) {                                                  \n * ║     // Use simpler animations                                                     \n * ║ }                                                                                  \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport class AccessibilityManager {\n    constructor(config = {}) {\n        this.config = {\n            enableReducedMotion: config.enableReducedMotion !== false,\n            enableHighContrast: config.enableHighContrast !== false,\n            enableScreenReaderSupport: config.enableScreenReaderSupport !== false,\n            enableKeyboardNavigation: config.enableKeyboardNavigation !== false,\n            enableFocusIndicators: config.enableFocusIndicators !== false,\n            announceStateChanges: config.announceStateChanges !== false,\n            colorBlindMode: config.colorBlindMode || 'none', // none, protanopia, deuteranopia, tritanopia\n            ...config\n        };\n        \n        // Accessibility state\n        this.reducedMotionPreferred = false;\n        this.highContrastEnabled = false;\n        this.screenReaderActive = false;\n        this.keyboardNavigationActive = false;\n        this.currentColorBlindMode = this.config.colorBlindMode;\n        \n        // Focus management\n        this.focusableElements = new Map();\n        this.currentFocusIndex = -1;\n        this.focusHistory = [];\n        \n        // ARIA live region for announcements\n        this.liveRegion = null;\n        this.announcementQueue = [];\n        \n        // Color schemes for different accessibility needs\n        this.colorSchemes = {\n            normal: null, // Will be set from current colors\n            highContrast: {\n                primary: '#FFFFFF',\n                secondary: '#000000',\n                accent: '#FFFF00',\n                background: '#000000',\n                particles: '#FFFFFF'\n            },\n            protanopia: { // Red-blind\n                primary: '#0066CC',\n                secondary: '#FFCC00',\n                accent: '#00CCFF',\n                background: '#1A1A1A',\n                particles: '#66CCFF'\n            },\n            deuteranopia: { // Green-blind\n                primary: '#0099FF',\n                secondary: '#FF9900',\n                accent: '#FF00FF',\n                background: '#1A1A1A',\n                particles: '#9966FF'\n            },\n            tritanopia: { // Blue-blind\n                primary: '#FF0066',\n                secondary: '#00FF66',\n                accent: '#FF6600',\n                background: '#1A1A1A',\n                particles: '#FFCC00'\n            }\n        };\n        \n        // Pattern overlays for color-blind modes\n        this.patterns = {\n            dots: 'dots',\n            stripes: 'stripes',\n            crosshatch: 'crosshatch',\n            solid: 'solid'\n        };\n        \n        // Emotional state patterns for color-blind users\n        this.statePatterns = {\n            idle: this.patterns.solid,\n            happy: this.patterns.dots,\n            excited: this.patterns.stripes,\n            calm: this.patterns.solid,\n            curious: this.patterns.crosshatch,\n            frustrated: this.patterns.stripes,\n            sad: this.patterns.dots,\n            neutral: this.patterns.solid\n        };\n        \n        // Initialize accessibility features\n        this.initialize();\n    }\n    \n    /**\n     * Initialize accessibility features\n     */\n    initialize() {\n        // Detect user preferences\n        this.detectUserPreferences();\n        \n        // Set up ARIA live region\n        this.setupLiveRegion();\n        \n        // Set up keyboard navigation if enabled\n        if (this.config.enableKeyboardNavigation) {\n            this.setupKeyboardNavigation();\n        }\n        \n        // Listen for preference changes\n        this.setupPreferenceListeners();\n        \n    }\n    \n    /**\n     * Detect user accessibility preferences\n     */\n    detectUserPreferences() {\n        // Detect reduced motion preference\n        if (this.config.enableReducedMotion && window.matchMedia) {\n            const motionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n            this.reducedMotionPreferred = motionQuery.matches;\n        }\n        \n        // Detect high contrast preference\n        if (this.config.enableHighContrast && window.matchMedia) {\n            const contrastQuery = window.matchMedia('(prefers-contrast: high)');\n            this.highContrastEnabled = contrastQuery.matches;\n            \n            // Also check for Windows high contrast mode\n            if (!this.highContrastEnabled) {\n                const windowsHCQuery = window.matchMedia('(-ms-high-contrast: active)');\n                this.highContrastEnabled = windowsHCQuery.matches;\n            }\n        }\n        \n        // Detect screen reader (heuristic approach)\n        this.detectScreenReader();\n    }\n    \n    /**\n     * Detect if a screen reader is likely active\n     */\n    detectScreenReader() {\n        // Check for ARIA attributes being actively used\n        const hasAriaLive = document.querySelector('[aria-live]');\n        const hasAriaAtomic = document.querySelector('[aria-atomic]');\n        \n        // Check for screen reader specific attributes\n        const hasRole = document.querySelector('[role=\"application\"]');\n        \n        // Check user agent for assistive technology hints\n        const userAgent = navigator.userAgent.toLowerCase();\n        const hasATHints = userAgent.includes('nvda') || \n                          userAgent.includes('jaws') || \n                          userAgent.includes('voiceover');\n        \n        this.screenReaderActive = !!(hasAriaLive || hasAriaAtomic || hasRole || hasATHints);\n    }\n    \n    /**\n     * Set up ARIA live region for announcements\n     */\n    setupLiveRegion() {\n        if (!this.config.enableScreenReaderSupport) return;\n        \n        // Create live region if it doesn't exist\n        this.liveRegion = document.getElementById('mascot-announcements');\n        if (!this.liveRegion) {\n            this.liveRegion = document.createElement('div');\n            this.liveRegion.id = 'mascot-announcements';\n            this.liveRegion.setAttribute('aria-live', 'polite');\n            this.liveRegion.setAttribute('aria-atomic', 'true');\n            this.liveRegion.style.position = 'absolute';\n            this.liveRegion.style.left = '-10000px';\n            this.liveRegion.style.width = '1px';\n            this.liveRegion.style.height = '1px';\n            this.liveRegion.style.overflow = 'hidden';\n            document.body.appendChild(this.liveRegion);\n        }\n    }\n    \n    /**\n     * Set up keyboard navigation\n     */\n    setupKeyboardNavigation() {\n        document.addEventListener('keydown', this.handleKeyDown.bind(this));\n        document.addEventListener('keyup', this.handleKeyUp.bind(this));\n    }\n    \n    /**\n     * Set up listeners for preference changes\n     */\n    setupPreferenceListeners() {\n        if (window.matchMedia) {\n            // Listen for reduced motion changes\n            const motionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n            motionQuery.addListener((e) => {\n                this.reducedMotionPreferred = e.matches;\n                this.onPreferenceChange('reducedMotion', e.matches);\n            });\n            \n            // Listen for high contrast changes\n            const contrastQuery = window.matchMedia('(prefers-contrast: high)');\n            contrastQuery.addListener((e) => {\n                this.highContrastEnabled = e.matches;\n                this.onPreferenceChange('highContrast', e.matches);\n            });\n        }\n    }\n    \n    /**\n     * Handle keyboard navigation\n     * @param {KeyboardEvent} event - Keyboard event\n     */\n    handleKeyDown(event) {\n        if (!this.config.enableKeyboardNavigation) return;\n        \n        switch (event.key) {\n            case 'Tab':\n                event.preventDefault();\n                this.navigateFocus(event.shiftKey ? -1 : 1);\n                break;\n            case 'Enter':\n            case ' ':\n                this.activateCurrentFocus();\n                break;\n            case 'Escape':\n                this.clearFocus();\n                break;\n            case 'ArrowLeft':\n            case 'ArrowRight':\n            case 'ArrowUp':\n            case 'ArrowDown':\n                this.handleArrowNavigation(event.key);\n                break;\n        }\n        \n        this.keyboardNavigationActive = true;\n    }\n    \n    /**\n     * Handle key up events\n     * @param {KeyboardEvent} event - Keyboard event\n     */\n    handleKeyUp(event) {\n        // Could be used for specific key release actions\n    }\n    \n    /**\n     * Navigate focus between elements\n     * @param {number} direction - Direction to navigate (1 or -1)\n     */\n    navigateFocus(direction) {\n        const focusableArray = Array.from(this.focusableElements.values());\n        if (focusableArray.length === 0) return;\n        \n        this.currentFocusIndex += direction;\n        \n        // Wrap around\n        if (this.currentFocusIndex < 0) {\n            this.currentFocusIndex = focusableArray.length - 1;\n        } else if (this.currentFocusIndex >= focusableArray.length) {\n            this.currentFocusIndex = 0;\n        }\n        \n        const element = focusableArray[this.currentFocusIndex];\n        this.setFocus(element);\n        \n        // Announce focus change\n        if (element.label) {\n            this.announce(`Focused on ${element.label}`);\n        }\n    }\n    \n    /**\n     * Handle arrow key navigation\n     * @param {string} key - Arrow key pressed\n     */\n    handleArrowNavigation(key) {\n        // This would be implemented based on spatial navigation needs\n        const directions = {\n            'ArrowLeft': { x: -1, y: 0 },\n            'ArrowRight': { x: 1, y: 0 },\n            'ArrowUp': { x: 0, y: -1 },\n            'ArrowDown': { x: 0, y: 1 }\n        };\n        \n        const direction = directions[key];\n        if (direction && this.onArrowNavigation) {\n            this.onArrowNavigation(direction);\n        }\n    }\n    \n    /**\n     * Register a focusable element\n     * @param {string} id - Element identifier\n     * @param {Object} element - Element properties\n     */\n    registerFocusableElement(id, element) {\n        this.focusableElements.set(id, {\n            id,\n            label: element.label || id,\n            bounds: element.bounds || null,\n            action: element.action || null,\n            type: element.type || 'button'\n        });\n    }\n    \n    /**\n     * Unregister a focusable element\n     * @param {string} id - Element identifier\n     */\n    unregisterFocusableElement(id) {\n        this.focusableElements.delete(id);\n    }\n    \n    /**\n     * Set focus on an element\n     * @param {Object} element - Element to focus\n     */\n    setFocus(element) {\n        if (this.onFocusChange) {\n            this.onFocusChange(element);\n        }\n        \n        this.focusHistory.push(element.id);\n        if (this.focusHistory.length > 10) {\n            this.focusHistory.shift();\n        }\n    }\n    \n    /**\n     * Clear current focus\n     */\n    clearFocus() {\n        this.currentFocusIndex = -1;\n        if (this.onFocusChange) {\n            this.onFocusChange(null);\n        }\n        \n        this.announce('Focus cleared');\n    }\n    \n    /**\n     * Activate the currently focused element\n     */\n    activateCurrentFocus() {\n        const focusableArray = Array.from(this.focusableElements.values());\n        if (this.currentFocusIndex >= 0 && this.currentFocusIndex < focusableArray.length) {\n            const element = focusableArray[this.currentFocusIndex];\n            if (element.action) {\n                element.action();\n                this.announce(`Activated ${element.label}`);\n            }\n        }\n    }\n    \n    /**\n     * Announce a message to screen readers\n     * @param {string} message - Message to announce\n     * @param {string} priority - Priority level (polite, assertive)\n     */\n    announce(message, priority = 'polite') {\n        if (!this.config.enableScreenReaderSupport || !this.liveRegion) return;\n        \n        // Queue the announcement\n        this.announcementQueue.push({ message, priority });\n        \n        // Process queue\n        this.processAnnouncementQueue();\n    }\n    \n    /**\n     * Process announcement queue\n     */\n    processAnnouncementQueue() {\n        if (this.announcementQueue.length === 0) return;\n        \n        const { message, priority } = this.announcementQueue.shift();\n        \n        // Update live region\n        this.liveRegion.setAttribute('aria-live', priority);\n        this.liveRegion.textContent = message;\n        \n        // Clear after a delay to allow screen reader to announce\n        setTimeout(() => {\n            if (this.liveRegion) {\n                this.liveRegion.textContent = '';\n            }\n            \n            // Process next announcement if any\n            if (this.announcementQueue.length > 0) {\n                this.processAnnouncementQueue();\n            }\n        }, 100);\n    }\n    \n    /**\n     * Get adjusted animation settings based on accessibility preferences\n     * @param {Object} originalSettings - Original animation settings\n     * @returns {Object} Adjusted settings\n     */\n    getAnimationSettings(originalSettings = {}) {\n        if (!this.reducedMotionPreferred) {\n            return originalSettings;\n        }\n        \n        // Reduce or disable animations for users who prefer reduced motion\n        return {\n            ...originalSettings,\n            duration: originalSettings.duration ? originalSettings.duration * 0.5 : 0,\n            iterations: 1,\n            easing: 'linear',\n            particlesEnabled: false,\n            complexAnimations: false,\n            autoPlay: false\n        };\n    }\n    \n    /**\n     * Get adjusted color scheme based on accessibility preferences\n     * @param {Object} originalColors - Original color scheme\n     * @returns {Object} Adjusted colors\n     */\n    getColorScheme(originalColors = {}) {\n        // Store original colors if not set\n        if (!this.colorSchemes.normal) {\n            this.colorSchemes.normal = { ...originalColors };\n        }\n        \n        // Apply high contrast if needed\n        if (this.highContrastEnabled) {\n            return this.colorSchemes.highContrast;\n        }\n        \n        // Apply color blind mode if set\n        if (this.currentColorBlindMode !== 'none' && this.colorSchemes[this.currentColorBlindMode]) {\n            return this.colorSchemes[this.currentColorBlindMode];\n        }\n        \n        return originalColors;\n    }\n    \n    /**\n     * Get pattern for current state (for color blind users)\n     * @param {string} state - Current emotional state\n     * @returns {string} Pattern identifier\n     */\n    getStatePattern(state) {\n        if (this.currentColorBlindMode === 'none') {\n            return this.patterns.solid;\n        }\n        \n        return this.statePatterns[state] || this.patterns.solid;\n    }\n    \n    /**\n     * Apply pattern overlay to canvas\n     * @param {CanvasRenderingContext2D} ctx - Canvas context\n     * @param {string} pattern - Pattern type\n     * @param {Object} bounds - Area to apply pattern\n     */\n    applyPatternOverlay(ctx, pattern, bounds) {\n        if (pattern === this.patterns.solid) return;\n        \n        ctx.save();\n        \n        const patternCanvas = document.createElement('canvas');\n        const patternCtx = patternCanvas.getContext('2d');\n        \n        switch (pattern) {\n            case this.patterns.dots:\n                this.createDotPattern(patternCtx, patternCanvas);\n                break;\n            case this.patterns.stripes:\n                this.createStripePattern(patternCtx, patternCanvas);\n                break;\n            case this.patterns.crosshatch:\n                this.createCrosshatchPattern(patternCtx, patternCanvas);\n                break;\n        }\n        \n        const canvasPattern = ctx.createPattern(patternCanvas, 'repeat');\n        ctx.fillStyle = canvasPattern;\n        ctx.globalAlpha = 0.3; // Semi-transparent overlay\n        ctx.fillRect(bounds.x, bounds.y, bounds.width, bounds.height);\n        \n        ctx.restore();\n    }\n    \n    /**\n     * Create dot pattern\n     * @param {CanvasRenderingContext2D} ctx - Pattern canvas context\n     * @param {HTMLCanvasElement} canvas - Pattern canvas\n     */\n    createDotPattern(ctx, canvas) {\n        canvas.width = 10;\n        canvas.height = 10;\n        \n        ctx.fillStyle = 'white';\n        ctx.beginPath();\n        ctx.arc(5, 5, 2, 0, Math.PI * 2);\n        ctx.fill();\n    }\n    \n    /**\n     * Create stripe pattern\n     * @param {CanvasRenderingContext2D} ctx - Pattern canvas context\n     * @param {HTMLCanvasElement} canvas - Pattern canvas\n     */\n    createStripePattern(ctx, canvas) {\n        canvas.width = 10;\n        canvas.height = 10;\n        \n        ctx.strokeStyle = 'white';\n        ctx.lineWidth = 2;\n        ctx.beginPath();\n        ctx.moveTo(0, 10);\n        ctx.lineTo(10, 0);\n        ctx.stroke();\n    }\n    \n    /**\n     * Create crosshatch pattern\n     * @param {CanvasRenderingContext2D} ctx - Pattern canvas context\n     * @param {HTMLCanvasElement} canvas - Pattern canvas\n     */\n    createCrosshatchPattern(ctx, canvas) {\n        canvas.width = 10;\n        canvas.height = 10;\n        \n        ctx.strokeStyle = 'white';\n        ctx.lineWidth = 1;\n        \n        // Diagonal lines\n        ctx.beginPath();\n        ctx.moveTo(0, 10);\n        ctx.lineTo(10, 0);\n        ctx.stroke();\n        \n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(10, 10);\n        ctx.stroke();\n    }\n    \n    /**\n     * Set color blind mode\n     * @param {string} mode - Color blind mode\n     */\n    setColorBlindMode(mode) {\n        const validModes = ['none', 'protanopia', 'deuteranopia', 'tritanopia'];\n        if (!validModes.includes(mode)) {\n            return;\n        }\n        \n        this.currentColorBlindMode = mode;\n        this.announce(`Color blind mode set to ${mode}`);\n        \n        if (this.onColorSchemeChange) {\n            this.onColorSchemeChange(this.getColorScheme());\n        }\n    }\n    \n    /**\n     * Get accessibility status report\n     * @returns {Object} Accessibility status\n     */\n    getStatus() {\n        return {\n            reducedMotion: this.reducedMotionPreferred,\n            highContrast: this.highContrastEnabled,\n            screenReader: this.screenReaderActive,\n            keyboardNavigation: this.keyboardNavigationActive,\n            colorBlindMode: this.currentColorBlindMode,\n            focusedElement: this.currentFocusIndex >= 0 ? \n                Array.from(this.focusableElements.values())[this.currentFocusIndex] : null,\n            registeredElements: this.focusableElements.size\n        };\n    }\n    \n    /**\n     * Handle preference change\n     * @param {string} preference - Preference that changed\n     * @param {*} value - New value\n     */\n    onPreferenceChange(preference, value) {\n        \n        // Notify about the change\n        this.announce(`${preference} is now ${value ? 'enabled' : 'disabled'}`);\n        \n        // Trigger callbacks if set\n        if (preference === 'reducedMotion' && this.onReducedMotionChange) {\n            this.onReducedMotionChange(value);\n        }\n        \n        if (preference === 'highContrast' && this.onHighContrastChange) {\n            this.onHighContrastChange(value);\n        }\n    }\n    \n    /**\n     * Create ARIA description for mascot state\n     * @param {Object} state - Current mascot state\n     * @returns {string} ARIA description\n     */\n    createStateDescription(state) {\n        const descriptions = {\n            idle: 'Mascot is idle and gently breathing',\n            happy: 'Mascot is happy and bouncing',\n            excited: 'Mascot is excited with particles flying',\n            calm: 'Mascot is calm and peaceful',\n            curious: 'Mascot is curious and looking around',\n            frustrated: 'Mascot is frustrated and shaking',\n            sad: 'Mascot is sad and drooping',\n            neutral: 'Mascot is in a neutral state'\n        };\n        \n        return descriptions[state.emotional] || 'Mascot is active';\n    }\n    \n    /**\n     * Destroy accessibility manager\n     */\n    destroy() {\n        // Remove event listeners\n        document.removeEventListener('keydown', this.handleKeyDown);\n        document.removeEventListener('keyup', this.handleKeyUp);\n        \n        // Remove live region\n        if (this.liveRegion && this.liveRegion.parentNode) {\n            this.liveRegion.parentNode.removeChild(this.liveRegion);\n        }\n        \n        // Clear data\n        this.focusableElements.clear();\n        this.announcementQueue = [];\n        this.focusHistory = [];\n        \n    }\n}\n\nexport default AccessibilityManager;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                  ◐ ◑ ◒ ◓  MOBILE OPTIMIZATION  ◓ ◒ ◑ ◐                  \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Mobile Optimization - Touch & Mobile Device Support\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module MobileOptimization\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ Makes the orb TOUCHABLE and mobile-friendly. Handles all the quirks of           \n * ║ mobile browsers, touch events, viewport changes, and battery optimization.        \n * ║ Ensures smooth performance even on low-end phones.                               \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 📱 MOBILE FEATURES                                                                 \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Touch event handling (tap, swipe, pinch)                                        \n * │ • Viewport resize handling                                                        \n * │ • Orientation change detection                                                    \n * │ • Battery-aware performance                                                       \n * │ • Reduced particle count on mobile                                                \n * │ • Touch-friendly interaction zones                                                \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport class MobileOptimization {\n    constructor(config = {}) {\n        this.config = {\n            enableTouchOptimization: config.enableTouchOptimization !== false,\n            enableViewportHandling: config.enableViewportHandling !== false,\n            enableBatteryOptimization: config.enableBatteryOptimization !== false,\n            enableOrientationSupport: config.enableOrientationSupport !== false,\n            enableResponsiveScaling: config.enableResponsiveScaling !== false,\n            touchSensitivity: config.touchSensitivity || 1.0,\n            doubleTapDelay: config.doubleTapDelay || 300,\n            swipeThreshold: config.swipeThreshold || 50,\n            pinchThreshold: config.pinchThreshold || 0.1,\n            ...config\n        };\n        \n        // Device detection\n        this.isMobile = this.detectMobile();\n        this.isTablet = this.detectTablet();\n        this.isTouchDevice = this.detectTouch();\n        this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\n        this.isAndroid = /Android/.test(navigator.userAgent);\n        \n        // Touch state\n        this.touches = new Map();\n        this.lastTouchTime = 0;\n        this.lastTapTime = 0;\n        this.tapCount = 0;\n        this.touchStartPosition = null;\n        this.isPinching = false;\n        this.isRotating = false;\n        this.lastPinchDistance = 0;\n        this.lastRotation = 0;\n        \n        // Gesture recognition\n        this.currentGesture = null;\n        this.gestureStartTime = 0;\n        this.gestureHistory = [];\n        \n        // Viewport state\n        this.viewportSize = { width: window.innerWidth, height: window.innerHeight };\n        this.orientation = this.getOrientation();\n        this.pixelRatio = window.devicePixelRatio || 1;\n        this.lastViewportChange = 0;\n        \n        // Battery state\n        this.batteryLevel = 1.0;\n        this.isCharging = true;\n        this.lowPowerMode = false;\n        \n        // Performance adjustments for mobile\n        this.mobilePerformanceSettings = {\n            reducedParticles: this.isMobile,\n            simplifiedAnimations: this.isMobile,\n            lowerFrameRate: this.isMobile,\n            reducedEffects: this.isMobile || this.isTablet,\n            targetFPS: this.isMobile ? 30 : 60,\n            maxParticles: this.isMobile ? 20 : 50\n        };\n        \n        // Canvas optimization\n        this.canvasScale = 1.0;\n        this.useOffscreenCanvas = this.supportsOffscreenCanvas();\n        \n        // Event handlers bound to this\n        this.handleTouchStart = this.handleTouchStart.bind(this);\n        this.handleTouchMove = this.handleTouchMove.bind(this);\n        this.handleTouchEnd = this.handleTouchEnd.bind(this);\n        this.handleTouchCancel = this.handleTouchCancel.bind(this);\n        this.handleOrientationChange = this.handleOrientationChange.bind(this);\n        this.handleViewportChange = this.handleViewportChange.bind(this);\n        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n        \n        // Initialize\n        this.initialize();\n    }\n    \n    /**\n     * Initialize mobile optimization\n     */\n    initialize() {\n        if (this.config.enableTouchOptimization && this.isTouchDevice) {\n            this.setupTouchHandlers();\n        }\n        \n        if (this.config.enableViewportHandling) {\n            this.setupViewportHandlers();\n        }\n        \n        if (this.config.enableBatteryOptimization) {\n            this.setupBatteryMonitoring();\n        }\n        \n        if (this.config.enableOrientationSupport) {\n            this.setupOrientationHandlers();\n        }\n        \n        // Apply initial optimizations\n        this.applyMobileOptimizations();\n    }\n    \n    /**\n     * Detect if device is mobile\n     * @returns {boolean} True if mobile device\n     */\n    detectMobile() {\n        const userAgent = navigator.userAgent.toLowerCase();\n        const mobileKeywords = ['android', 'iphone', 'ipod', 'windows phone', 'blackberry'];\n        \n        // Check user agent\n        const isMobileUA = mobileKeywords.some(keyword => userAgent.includes(keyword));\n        \n        // Check screen size\n        const isMobileSize = window.innerWidth <= 768;\n        \n        // Check for touch and small screen\n        const hasTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n        \n        return isMobileUA || (isMobileSize && hasTouch);\n    }\n    \n    /**\n     * Detect if device is tablet\n     * @returns {boolean} True if tablet device\n     */\n    detectTablet() {\n        const userAgent = navigator.userAgent.toLowerCase();\n        const isIPad = /ipad/.test(userAgent);\n        const isAndroidTablet = /android/.test(userAgent) && !/mobile/.test(userAgent);\n        const isWindowsTablet = /windows/.test(userAgent) && /touch/.test(userAgent);\n        \n        // Check screen size for tablet range\n        const isTabletSize = window.innerWidth > 768 && window.innerWidth <= 1024;\n        const hasTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n        \n        return isIPad || isAndroidTablet || isWindowsTablet || (isTabletSize && hasTouch);\n    }\n    \n    /**\n     * Detect touch support\n     * @returns {boolean} True if touch is supported\n     */\n    detectTouch() {\n        return 'ontouchstart' in window || \n               navigator.maxTouchPoints > 0 || \n               navigator.msMaxTouchPoints > 0;\n    }\n    \n    /**\n     * Check if offscreen canvas is supported\n     * @returns {boolean} True if OffscreenCanvas is supported\n     */\n    supportsOffscreenCanvas() {\n        return typeof OffscreenCanvas !== 'undefined';\n    }\n    \n    /**\n     * Set up touch event handlers\n     */\n    setupTouchHandlers() {\n        const canvas = this.getCanvas();\n        if (!canvas) return;\n        \n        // Prevent default touch behaviors\n        canvas.style.touchAction = 'none';\n        canvas.style.userSelect = 'none';\n        canvas.style.webkitUserSelect = 'none';\n        \n        // Add touch event listeners\n        canvas.addEventListener('touchstart', this.handleTouchStart, { passive: false });\n        canvas.addEventListener('touchmove', this.handleTouchMove, { passive: false });\n        canvas.addEventListener('touchend', this.handleTouchEnd, { passive: false });\n        canvas.addEventListener('touchcancel', this.handleTouchCancel, { passive: false });\n        \n        // Prevent context menu on long press\n        canvas.addEventListener('contextmenu', (e) => e.preventDefault());\n    }\n    \n    /**\n     * Set up viewport change handlers\n     */\n    setupViewportHandlers() {\n        window.addEventListener('resize', this.handleViewportChange);\n        window.addEventListener('orientationchange', this.handleOrientationChange);\n        \n        // Handle visibility changes for battery optimization\n        document.addEventListener('visibilitychange', this.handleVisibilityChange);\n        \n        // Handle viewport meta changes\n        this.setupViewportMeta();\n    }\n    \n    /**\n     * Set up viewport meta tag for mobile\n     */\n    setupViewportMeta() {\n        let viewportMeta = document.querySelector('meta[name=\"viewport\"]');\n        \n        if (!viewportMeta) {\n            viewportMeta = document.createElement('meta');\n            viewportMeta.name = 'viewport';\n            document.head.appendChild(viewportMeta);\n        }\n        \n        // Set optimal viewport for mobile\n        viewportMeta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';\n    }\n    \n    /**\n     * Set up battery monitoring\n     */\n    async setupBatteryMonitoring() {\n        if (!navigator.getBattery) return;\n        \n        try {\n            const battery = await navigator.getBattery();\n            \n            this.batteryLevel = battery.level;\n            this.isCharging = battery.charging;\n            \n            // Listen for battery changes\n            battery.addEventListener('levelchange', () => {\n                this.batteryLevel = battery.level;\n                this.onBatteryChange();\n            });\n            \n            battery.addEventListener('chargingchange', () => {\n                this.isCharging = battery.charging;\n                this.onBatteryChange();\n            });\n            \n            // Initial battery optimization\n            this.onBatteryChange();\n        } catch (error) {\n        }\n    }\n    \n    /**\n     * Set up orientation change handlers\n     */\n    setupOrientationHandlers() {\n        if (window.DeviceOrientationEvent) {\n            window.addEventListener('deviceorientation', (event) => {\n                this.handleDeviceOrientation(event);\n            });\n        }\n    }\n    \n    /**\n     * Handle touch start\n     * @param {TouchEvent} event - Touch event\n     */\n    handleTouchStart(event) {\n        event.preventDefault();\n        \n        const now = Date.now();\n        this.gestureStartTime = now;\n        \n        // Store all touches\n        for (const touch of event.touches) {\n            this.touches.set(touch.identifier, {\n                id: touch.identifier,\n                startX: touch.clientX,\n                startY: touch.clientY,\n                currentX: touch.clientX,\n                currentY: touch.clientY,\n                startTime: now\n            });\n        }\n        \n        // Handle different touch counts\n        if (event.touches.length === 1) {\n            this.handleSingleTouchStart(event.touches[0]);\n        } else if (event.touches.length === 2) {\n            this.handleMultiTouchStart(event.touches);\n        }\n        \n        // Emit touch event\n        this.emitTouchEvent('touchStart', {\n            touches: Array.from(this.touches.values()),\n            timestamp: now\n        });\n    }\n    \n    /**\n     * Handle single touch start\n     * @param {Touch} touch - Touch object\n     */\n    handleSingleTouchStart(touch) {\n        const now = Date.now();\n        \n        // Check for double tap\n        if (now - this.lastTapTime < this.config.doubleTapDelay) {\n            this.tapCount++;\n        } else {\n            this.tapCount = 1;\n        }\n        \n        this.lastTapTime = now;\n        this.touchStartPosition = { x: touch.clientX, y: touch.clientY };\n    }\n    \n    /**\n     * Handle multi-touch start\n     * @param {TouchList} touches - Touch list\n     */\n    handleMultiTouchStart(touches) {\n        if (touches.length === 2) {\n            // Initialize pinch/rotate\n            const touch1 = touches[0];\n            const touch2 = touches[1];\n            \n            this.lastPinchDistance = this.getDistance(\n                touch1.clientX, touch1.clientY,\n                touch2.clientX, touch2.clientY\n            );\n            \n            this.lastRotation = this.getAngle(\n                touch1.clientX, touch1.clientY,\n                touch2.clientX, touch2.clientY\n            );\n            \n            this.isPinching = true;\n        }\n    }\n    \n    /**\n     * Handle touch move\n     * @param {TouchEvent} event - Touch event\n     */\n    handleTouchMove(event) {\n        event.preventDefault();\n        \n        // Update touch positions\n        for (const touch of event.touches) {\n            const storedTouch = this.touches.get(touch.identifier);\n            if (storedTouch) {\n                storedTouch.currentX = touch.clientX;\n                storedTouch.currentY = touch.clientY;\n            }\n        }\n        \n        // Handle gestures based on touch count\n        if (event.touches.length === 1) {\n            this.handleSingleTouchMove(event.touches[0]);\n        } else if (event.touches.length === 2) {\n            this.handleMultiTouchMove(event.touches);\n        }\n        \n        // Emit touch event\n        this.emitTouchEvent('touchMove', {\n            touches: Array.from(this.touches.values()),\n            gesture: this.currentGesture\n        });\n    }\n    \n    /**\n     * Handle single touch move\n     * @param {Touch} touch - Touch object\n     */\n    handleSingleTouchMove(touch) {\n        const storedTouch = this.touches.get(touch.identifier);\n        if (!storedTouch) return;\n        \n        const deltaX = touch.clientX - storedTouch.startX;\n        const deltaY = touch.clientY - storedTouch.startY;\n        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n        \n        // Detect swipe gesture\n        if (distance > this.config.swipeThreshold) {\n            const angle = Math.atan2(deltaY, deltaX) * 180 / Math.PI;\n            \n            if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                this.currentGesture = deltaX > 0 ? 'swipeRight' : 'swipeLeft';\n            } else {\n                this.currentGesture = deltaY > 0 ? 'swipeDown' : 'swipeUp';\n            }\n        } else {\n            this.currentGesture = 'pan';\n        }\n    }\n    \n    /**\n     * Handle multi-touch move\n     * @param {TouchList} touches - Touch list\n     */\n    handleMultiTouchMove(touches) {\n        if (touches.length !== 2) return;\n        \n        const touch1 = touches[0];\n        const touch2 = touches[1];\n        \n        // Calculate pinch\n        const currentDistance = this.getDistance(\n            touch1.clientX, touch1.clientY,\n            touch2.clientX, touch2.clientY\n        );\n        \n        const pinchDelta = currentDistance - this.lastPinchDistance;\n        const pinchRatio = currentDistance / this.lastPinchDistance;\n        \n        if (Math.abs(pinchDelta) > this.config.pinchThreshold) {\n            this.currentGesture = pinchRatio > 1 ? 'pinchOut' : 'pinchIn';\n            \n            // Emit pinch event\n            this.emitTouchEvent('pinch', {\n                scale: pinchRatio,\n                delta: pinchDelta\n            });\n        }\n        \n        // Calculate rotation\n        const currentRotation = this.getAngle(\n            touch1.clientX, touch1.clientY,\n            touch2.clientX, touch2.clientY\n        );\n        \n        const rotationDelta = currentRotation - this.lastRotation;\n        \n        if (Math.abs(rotationDelta) > 5) { // 5 degree threshold\n            this.currentGesture = 'rotate';\n            \n            // Emit rotation event\n            this.emitTouchEvent('rotate', {\n                angle: currentRotation,\n                delta: rotationDelta\n            });\n        }\n        \n        this.lastPinchDistance = currentDistance;\n        this.lastRotation = currentRotation;\n    }\n    \n    /**\n     * Handle touch end\n     * @param {TouchEvent} event - Touch event\n     */\n    handleTouchEnd(event) {\n        event.preventDefault();\n        \n        const now = Date.now();\n        \n        // Process ended touches\n        for (const touch of event.changedTouches) {\n            const storedTouch = this.touches.get(touch.identifier);\n            \n            if (storedTouch) {\n                const duration = now - storedTouch.startTime;\n                const deltaX = storedTouch.currentX - storedTouch.startX;\n                const deltaY = storedTouch.currentY - storedTouch.startY;\n                const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n                \n                // Detect tap\n                if (duration < 300 && distance < 10) {\n                    if (this.tapCount === 2) {\n                        this.emitTouchEvent('doubleTap', {\n                            x: storedTouch.currentX,\n                            y: storedTouch.currentY\n                        });\n                        this.tapCount = 0;\n                    } else {\n                        this.emitTouchEvent('tap', {\n                            x: storedTouch.currentX,\n                            y: storedTouch.currentY\n                        });\n                    }\n                }\n                \n                // Detect long press\n                if (duration > 500 && distance < 10) {\n                    this.emitTouchEvent('longPress', {\n                        x: storedTouch.currentX,\n                        y: storedTouch.currentY\n                    });\n                }\n                \n                this.touches.delete(touch.identifier);\n            }\n        }\n        \n        // Reset gesture state\n        if (event.touches.length === 0) {\n            this.currentGesture = null;\n            this.isPinching = false;\n            this.isRotating = false;\n        }\n        \n        // Emit touch end event\n        this.emitTouchEvent('touchEnd', {\n            gesture: this.currentGesture,\n            duration: now - this.gestureStartTime\n        });\n    }\n    \n    /**\n     * Handle touch cancel\n     * @param {TouchEvent} event - Touch event\n     */\n    handleTouchCancel(event) {\n        // Clear all touches\n        this.touches.clear();\n        this.currentGesture = null;\n        this.isPinching = false;\n        this.isRotating = false;\n        \n        this.emitTouchEvent('touchCancel', {});\n    }\n    \n    /**\n     * Handle orientation change\n     * @param {Event} event - Orientation change event\n     */\n    handleOrientationChange(event) {\n        this.orientation = this.getOrientation();\n        \n        // Emit orientation change event\n        this.emitTouchEvent('orientationChange', {\n            orientation: this.orientation,\n            angle: window.orientation || 0\n        });\n        \n        // Apply orientation-specific optimizations\n        this.applyOrientationOptimizations();\n    }\n    \n    /**\n     * Handle device orientation\n     * @param {DeviceOrientationEvent} event - Device orientation event\n     */\n    handleDeviceOrientation(event) {\n        // Could be used for gyroscope-based interactions\n        const { alpha, beta, gamma } = event;\n        \n        this.emitTouchEvent('deviceOrientation', {\n            alpha, // Z axis rotation\n            beta,  // X axis rotation\n            gamma  // Y axis rotation\n        });\n    }\n    \n    /**\n     * Handle viewport change\n     * @param {Event} event - Resize event\n     */\n    handleViewportChange(event) {\n        const now = Date.now();\n        \n        // Debounce viewport changes\n        if (now - this.lastViewportChange < 100) return;\n        \n        this.lastViewportChange = now;\n        this.viewportSize = {\n            width: window.innerWidth,\n            height: window.innerHeight\n        };\n        \n        // Update pixel ratio\n        this.pixelRatio = window.devicePixelRatio || 1;\n        \n        // Emit viewport change event\n        this.emitTouchEvent('viewportChange', {\n            size: this.viewportSize,\n            pixelRatio: this.pixelRatio,\n            orientation: this.getOrientation()\n        });\n        \n        // Apply responsive scaling\n        if (this.config.enableResponsiveScaling) {\n            this.applyResponsiveScaling();\n        }\n    }\n    \n    /**\n     * Handle visibility change\n     * @param {Event} event - Visibility change event\n     */\n    handleVisibilityChange(event) {\n        const isVisible = !document.hidden;\n        \n        this.emitTouchEvent('visibilityChange', {\n            visible: isVisible\n        });\n        \n        // Apply optimizations based on visibility\n        if (!isVisible && this.config.enableBatteryOptimization) {\n            // Reduce performance when app is in background\n            this.applyBackgroundOptimizations();\n        } else {\n            // Restore performance when app is visible\n            this.restorePerformance();\n        }\n    }\n    \n    /**\n     * Get current orientation\n     * @returns {string} Orientation (portrait or landscape)\n     */\n    getOrientation() {\n        return window.innerWidth > window.innerHeight ? 'landscape' : 'portrait';\n    }\n    \n    /**\n     * Get distance between two points\n     * @param {number} x1 - First X coordinate\n     * @param {number} y1 - First Y coordinate\n     * @param {number} x2 - Second X coordinate\n     * @param {number} y2 - Second Y coordinate\n     * @returns {number} Distance\n     */\n    getDistance(x1, y1, x2, y2) {\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    \n    /**\n     * Get angle between two points\n     * @param {number} x1 - First X coordinate\n     * @param {number} y1 - First Y coordinate\n     * @param {number} x2 - Second X coordinate\n     * @param {number} y2 - Second Y coordinate\n     * @returns {number} Angle in degrees\n     */\n    getAngle(x1, y1, x2, y2) {\n        return Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n    }\n    \n    /**\n     * Apply mobile optimizations\n     */\n    applyMobileOptimizations() {\n        if (!this.isMobile && !this.isTablet) return;\n        \n        const optimizations = {\n            ...this.mobilePerformanceSettings,\n            canvasScale: this.calculateOptimalCanvasScale(),\n            useWebGL: false, // Disable WebGL on mobile for battery\n            useOffscreenCanvas: this.useOffscreenCanvas\n        };\n        \n        // Emit optimization settings\n        this.emitTouchEvent('mobileOptimizations', optimizations);\n        \n        return optimizations;\n    }\n    \n    /**\n     * Apply orientation-specific optimizations\n     */\n    applyOrientationOptimizations() {\n        const isLandscape = this.orientation === 'landscape';\n        \n        const optimizations = {\n            layoutMode: isLandscape ? 'horizontal' : 'vertical',\n            particleDirection: isLandscape ? 'horizontal' : 'vertical',\n            uiScale: isLandscape ? 0.8 : 1.0\n        };\n        \n        this.emitTouchEvent('orientationOptimizations', optimizations);\n        \n        return optimizations;\n    }\n    \n    /**\n     * Apply responsive scaling\n     */\n    applyResponsiveScaling() {\n        const baseWidth = 375; // iPhone 6/7/8 width as base\n        const scaleFactor = Math.min(\n            this.viewportSize.width / baseWidth,\n            2.0 // Max scale factor\n        );\n        \n        this.canvasScale = scaleFactor;\n        \n        this.emitTouchEvent('responsiveScale', {\n            scale: this.canvasScale,\n            viewport: this.viewportSize\n        });\n        \n        return this.canvasScale;\n    }\n    \n    /**\n     * Apply background optimizations for battery saving\n     */\n    applyBackgroundOptimizations() {\n        const optimizations = {\n            targetFPS: 5, // Very low FPS in background\n            particlesEnabled: false,\n            animationsEnabled: false,\n            audioEnabled: false\n        };\n        \n        this.emitTouchEvent('backgroundOptimizations', optimizations);\n        \n        return optimizations;\n    }\n    \n    /**\n     * Restore performance settings\n     */\n    restorePerformance() {\n        const settings = this.applyMobileOptimizations();\n        \n        this.emitTouchEvent('performanceRestore', settings);\n        \n        return settings;\n    }\n    \n    /**\n     * Handle battery change\n     */\n    onBatteryChange() {\n        this.lowPowerMode = this.batteryLevel < 0.2 && !this.isCharging;\n        \n        if (this.lowPowerMode) {\n            // Apply low power optimizations\n            const optimizations = {\n                targetFPS: 15,\n                maxParticles: 5,\n                reducedEffects: true,\n                audioEnabled: false\n            };\n            \n            this.emitTouchEvent('lowPowerMode', {\n                batteryLevel: this.batteryLevel,\n                isCharging: this.isCharging,\n                optimizations\n            });\n        }\n    }\n    \n    /**\n     * Calculate optimal canvas scale for device\n     * @returns {number} Scale factor\n     */\n    calculateOptimalCanvasScale() {\n        // Balance between quality and performance\n        if (this.isMobile) {\n            return Math.min(this.pixelRatio, 2); // Cap at 2x for mobile\n        } else if (this.isTablet) {\n            return Math.min(this.pixelRatio, 2.5); // Slightly higher for tablets\n        }\n        \n        return this.pixelRatio; // Full resolution for desktop\n    }\n    \n    /**\n     * Get canvas element\n     * @returns {HTMLCanvasElement} Canvas element\n     */\n    getCanvas() {\n        // This would be set by the main application\n        return this.canvas || document.querySelector('canvas');\n    }\n    \n    /**\n     * Set canvas element\n     * @param {HTMLCanvasElement} canvas - Canvas element\n     */\n    setCanvas(canvas) {\n        this.canvas = canvas;\n        \n        if (this.config.enableTouchOptimization && this.isTouchDevice) {\n            this.setupTouchHandlers();\n        }\n    }\n    \n    /**\n     * Emit touch event\n     * @param {string} eventType - Event type\n     * @param {Object} data - Event data\n     */\n    emitTouchEvent(eventType, data) {\n        if (this.onTouchEvent) {\n            this.onTouchEvent(eventType, data);\n        }\n    }\n    \n    /**\n     * Get mobile optimization status\n     * @returns {Object} Status report\n     */\n    getStatus() {\n        return {\n            device: {\n                isMobile: this.isMobile,\n                isTablet: this.isTablet,\n                isTouchDevice: this.isTouchDevice,\n                isIOS: this.isIOS,\n                isAndroid: this.isAndroid\n            },\n            viewport: {\n                size: this.viewportSize,\n                orientation: this.orientation,\n                pixelRatio: this.pixelRatio,\n                canvasScale: this.canvasScale\n            },\n            battery: {\n                level: this.batteryLevel,\n                isCharging: this.isCharging,\n                lowPowerMode: this.lowPowerMode\n            },\n            touch: {\n                activeTouches: this.touches.size,\n                currentGesture: this.currentGesture,\n                isPinching: this.isPinching,\n                isRotating: this.isRotating\n            },\n            performance: this.mobilePerformanceSettings\n        };\n    }\n    \n    /**\n     * Destroy mobile optimization\n     */\n    destroy() {\n        const canvas = this.getCanvas();\n        \n        if (canvas) {\n            canvas.removeEventListener('touchstart', this.handleTouchStart);\n            canvas.removeEventListener('touchmove', this.handleTouchMove);\n            canvas.removeEventListener('touchend', this.handleTouchEnd);\n            canvas.removeEventListener('touchcancel', this.handleTouchCancel);\n        }\n        \n        window.removeEventListener('resize', this.handleViewportChange);\n        window.removeEventListener('orientationchange', this.handleOrientationChange);\n        document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n        \n        this.touches.clear();\n        this.gestureHistory = [];\n        \n    }\n}\n\nexport default MobileOptimization;","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                      ◐ ◑ ◒ ◓  PLUGIN SYSTEM  ◓ ◒ ◑ ◐                      \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Plugin System - Extensible Architecture for Custom Behaviors\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module PluginSystem\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ The EXPANSION SLOT for creativity. Allows developers to extend the mascot         \n * ║ with custom emotions, gestures, particles, and behaviors without modifying        \n * ║ core code. Build your own emotional expressions!                                  \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🔌 PLUGIN TYPES                                                                    \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • emotion  : Add custom emotional states                                          \n * │ • gesture  : Define new gesture animations                                        \n * │ • particle : Create custom particle behaviors                                     \n * │ • audio    : Add sound effects and tones                                          \n * │ • renderer : Modify rendering pipeline                                            \n * │ • behavior : Add complex behavioral patterns                                      \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🎯 LIFECYCLE HOOKS                                                                 \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • init()     : Called when plugin is registered                                   \n * │ • update()   : Called every frame                                                 \n * │ • render()   : Called during render phase                                         \n * │ • destroy()  : Called when plugin is unregistered                                 \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\nexport class PluginSystem {\n    constructor(config = {}) {\n        this.config = {\n            enablePlugins: config.enablePlugins !== false,\n            validatePlugins: config.validatePlugins !== false,\n            sandboxPlugins: config.sandboxPlugins !== false,\n            maxPlugins: config.maxPlugins || 50,\n            pluginTimeout: config.pluginTimeout || 5000,\n            allowOverrides: config.allowOverrides !== false,\n            ...config\n        };\n        \n        // Plugin registry\n        this.plugins = new Map();\n        this.pluginTypes = ['emotion', 'gesture', 'particle', 'audio', 'renderer', 'animation'];\n        this.pluginsByType = new Map(this.pluginTypes.map(type => [type, new Set()]));\n        \n        // Plugin dependencies\n        this.dependencies = new Map();\n        this.dependencyGraph = new Map();\n        \n        // Plugin lifecycle states\n        this.pluginStates = new Map();\n        this.loadingPlugins = new Set();\n        this.activePlugins = new Set();\n        \n        // Plugin hooks\n        this.hooks = new Map([\n            ['beforeInit', new Set()],\n            ['afterInit', new Set()],\n            ['beforeUpdate', new Set()],\n            ['afterUpdate', new Set()],\n            ['beforeRender', new Set()],\n            ['afterRender', new Set()],\n            ['beforeDestroy', new Set()],\n            ['afterDestroy', new Set()]\n        ]);\n        \n        // Plugin API exposed to plugins\n        this.pluginAPI = this.createPluginAPI();\n        \n        // Conflict resolution\n        this.conflicts = new Map();\n        this.resolutionStrategies = {\n            'override': this.overrideConflict.bind(this),\n            'merge': this.mergeConflict.bind(this),\n            'reject': this.rejectConflict.bind(this),\n            'queue': this.queueConflict.bind(this)\n        };\n        \n        // Plugin validation schemas\n        this.validationSchemas = this.createValidationSchemas();\n        \n        // Sandbox environment for plugins\n        this.sandbox = null;\n        if (this.config.sandboxPlugins) {\n            this.sandbox = this.createSandbox();\n        }\n        \n        // PluginSystem initialized\n    }\n    \n    /**\n     * Create plugin API exposed to plugins\n     * @returns {Object} Plugin API\n     */\n    createPluginAPI() {\n        return {\n            // Core functionality\n            registerHook: this.registerHook.bind(this),\n            emit: this.emitPluginEvent.bind(this),\n            on: this.onPluginEvent.bind(this),\n            \n            // Access to other plugins\n            getPlugin: this.getPlugin.bind(this),\n            hasPlugin: this.hasPlugin.bind(this),\n            \n            // Utilities\n            log: this.logFromPlugin.bind(this),\n            error: this.errorFromPlugin.bind(this),\n            \n            // State management\n            setState: this.setPluginState.bind(this),\n            getState: this.getPluginState.bind(this),\n            \n            // Configuration\n            getConfig: () => ({ ...this.config }),\n            \n            // Version info\n            version: '1.0.0'\n        };\n    }\n    \n    /**\n     * Create validation schemas for different plugin types\n     * @returns {Map} Validation schemas\n     */\n    createValidationSchemas() {\n        const schemas = new Map();\n        \n        // Base schema for all plugins\n        const baseSchema = {\n            name: { type: 'string', required: true },\n            version: { type: 'string', required: true },\n            type: { type: 'string', required: true, enum: this.pluginTypes },\n            description: { type: 'string', required: false },\n            author: { type: 'string', required: false },\n            dependencies: { type: 'array', required: false },\n            conflicts: { type: 'array', required: false },\n            init: { type: 'function', required: true },\n            destroy: { type: 'function', required: true }\n        };\n        \n        // Emotion plugin schema\n        schemas.set('emotion', {\n            ...baseSchema,\n            emotion: {\n                type: 'object',\n                required: true,\n                properties: {\n                    name: { type: 'string', required: true },\n                    color: { type: 'string', required: true },\n                    particleColor: { type: 'string', required: false },\n                    animation: { type: 'object', required: true },\n                    transitions: { type: 'object', required: false }\n                }\n            },\n            updateEmotion: { type: 'function', required: true },\n            renderEmotion: { type: 'function', required: false }\n        });\n        \n        // Gesture plugin schema\n        schemas.set('gesture', {\n            ...baseSchema,\n            gesture: {\n                type: 'object',\n                required: true,\n                properties: {\n                    name: { type: 'string', required: true },\n                    duration: { type: 'number', required: true },\n                    keyframes: { type: 'array', required: true },\n                    compatibility: { type: 'object', required: false }\n                }\n            },\n            executeGesture: { type: 'function', required: true },\n            canExecute: { type: 'function', required: false }\n        });\n        \n        // Particle plugin schema\n        schemas.set('particle', {\n            ...baseSchema,\n            particle: {\n                type: 'object',\n                required: true,\n                properties: {\n                    name: { type: 'string', required: true },\n                    maxParticles: { type: 'number', required: false },\n                    behavior: { type: 'function', required: true },\n                    render: { type: 'function', required: true }\n                }\n            },\n            updateParticles: { type: 'function', required: true },\n            spawnParticle: { type: 'function', required: false }\n        });\n        \n        // Audio plugin schema\n        schemas.set('audio', {\n            ...baseSchema,\n            audio: {\n                type: 'object',\n                required: true,\n                properties: {\n                    name: { type: 'string', required: true },\n                    sounds: { type: 'object', required: true },\n                    effects: { type: 'array', required: false }\n                }\n            },\n            playSound: { type: 'function', required: true },\n            processAudio: { type: 'function', required: false }\n        });\n        \n        return schemas;\n    }\n    \n    /**\n     * Create sandbox environment for plugin execution\n     * @returns {Object} Sandbox environment\n     */\n    createSandbox() {\n        // Create a limited execution environment\n        const sandbox = {\n            // Safe global objects\n            Math: Math,\n            Date: Date,\n            JSON: JSON,\n            \n            // Limited console\n            console: {\n                log: (...args) => null,\n                warn: (...args) => null,\n                error: (...args) => null\n            },\n            \n            // No access to window, document, or other globals\n            window: undefined,\n            document: undefined,\n            localStorage: undefined,\n            sessionStorage: undefined,\n            fetch: undefined,\n            XMLHttpRequest: undefined,\n            \n            // Plugin API\n            api: this.pluginAPI\n        };\n        \n        return sandbox;\n    }\n    \n    /**\n     * Register a plugin\n     * @param {Object} plugin - Plugin to register\n     * @returns {boolean} Success status\n     */\n    async registerPlugin(plugin) {\n        if (!this.config.enablePlugins) {\n            // Plugins are disabled\n            return false;\n        }\n        \n        // Check plugin limit\n        if (this.plugins.size >= this.config.maxPlugins) {\n            // Maximum plugin limit reached\n            return false;\n        }\n        \n        // Validate plugin\n        if (this.config.validatePlugins) {\n            const validation = this.validatePlugin(plugin);\n            if (!validation.valid) {\n                // Plugin validation failed\n                return false;\n            }\n        }\n        \n        // Check for conflicts\n        const conflicts = this.checkConflicts(plugin);\n        if (conflicts.length > 0 && !this.config.allowOverrides) {\n            // Plugin conflicts detected\n            return false;\n        }\n        \n        // Resolve dependencies\n        const dependencies = await this.resolveDependencies(plugin);\n        if (!dependencies.resolved) {\n            // Plugin dependencies not met\n            return false;\n        }\n        \n        // Initialize plugin in sandbox if enabled\n        try {\n            this.loadingPlugins.add(plugin.name);\n            \n            const context = this.config.sandboxPlugins ? this.sandbox : window;\n            const initialized = await this.initializePlugin(plugin, context);\n            \n            if (!initialized) {\n                throw new Error('Plugin initialization failed');\n            }\n            \n            // Register plugin\n            this.plugins.set(plugin.name, plugin);\n            this.pluginsByType.get(plugin.type).add(plugin.name);\n            this.pluginStates.set(plugin.name, 'active');\n            this.activePlugins.add(plugin.name);\n            \n            // Store dependencies\n            if (plugin.dependencies) {\n                this.dependencies.set(plugin.name, plugin.dependencies);\n                this.updateDependencyGraph(plugin.name, plugin.dependencies);\n            }\n            \n            // Register hooks if provided\n            if (plugin.hooks) {\n                Object.entries(plugin.hooks).forEach(([hook, handler]) => {\n                    this.registerHook(hook, handler, plugin.name);\n                });\n            }\n            \n            // Plugin registered\n            \n            // Emit registration event\n            this.emitPluginEvent('pluginRegistered', {\n                name: plugin.name,\n                type: plugin.type,\n                version: plugin.version\n            });\n            \n            return true;\n            \n        } catch (error) {\n            // Failed to register plugin\n            return false;\n        } finally {\n            this.loadingPlugins.delete(plugin.name);\n        }\n    }\n    \n    /**\n     * Validate a plugin against its schema\n     * @param {Object} plugin - Plugin to validate\n     * @returns {Object} Validation result\n     */\n    validatePlugin(plugin) {\n        const errors = [];\n        \n        // Check required base properties\n        if (!plugin.name || typeof plugin.name !== 'string') {\n            errors.push('Plugin must have a valid name');\n        }\n        \n        if (!plugin.type || !this.pluginTypes.includes(plugin.type)) {\n            errors.push(`Plugin type must be one of: ${this.pluginTypes.join(', ')}`);\n        }\n        \n        if (!plugin.version || typeof plugin.version !== 'string') {\n            errors.push('Plugin must have a version');\n        }\n        \n        if (typeof plugin.init !== 'function') {\n            errors.push('Plugin must have an init function');\n        }\n        \n        if (typeof plugin.destroy !== 'function') {\n            errors.push('Plugin must have a destroy function');\n        }\n        \n        // Validate type-specific schema\n        if (plugin.type && this.validationSchemas.has(plugin.type)) {\n            const schema = this.validationSchemas.get(plugin.type);\n            const typeErrors = this.validateAgainstSchema(plugin, schema);\n            errors.push(...typeErrors);\n        }\n        \n        return {\n            valid: errors.length === 0,\n            errors\n        };\n    }\n    \n    /**\n     * Validate object against schema\n     * @param {Object} obj - Object to validate\n     * @param {Object} schema - Schema to validate against\n     * @returns {Array} Array of errors\n     */\n    validateAgainstSchema(obj, schema) {\n        const errors = [];\n        \n        Object.entries(schema).forEach(([key, rules]) => {\n            if (rules.required && !(key in obj)) {\n                errors.push(`Missing required property: ${key}`);\n            }\n            \n            if (key in obj) {\n                const value = obj[key];\n                \n                if (rules.type && typeof value !== rules.type) {\n                    errors.push(`Property ${key} must be of type ${rules.type}`);\n                }\n                \n                if (rules.enum && !rules.enum.includes(value)) {\n                    errors.push(`Property ${key} must be one of: ${rules.enum.join(', ')}`);\n                }\n                \n                if (rules.properties && typeof value === 'object') {\n                    const subErrors = this.validateAgainstSchema(value, rules.properties);\n                    errors.push(...subErrors.map(e => `${key}.${e}`));\n                }\n            }\n        });\n        \n        return errors;\n    }\n    \n    /**\n     * Check for plugin conflicts\n     * @param {Object} plugin - Plugin to check\n     * @returns {Array} Array of conflicts\n     */\n    checkConflicts(plugin) {\n        const conflicts = [];\n        \n        // Check explicit conflicts\n        if (plugin.conflicts) {\n            plugin.conflicts.forEach(conflictName => {\n                if (this.plugins.has(conflictName)) {\n                    conflicts.push(conflictName);\n                }\n            });\n        }\n        \n        // Check type-specific conflicts\n        if (plugin.type === 'emotion' || plugin.type === 'gesture') {\n            // Check for name collisions\n            this.plugins.forEach((existingPlugin) => {\n                if (existingPlugin.type === plugin.type) {\n                    const existingName = existingPlugin[plugin.type]?.name;\n                    const newName = plugin[plugin.type]?.name;\n                    \n                    if (existingName === newName) {\n                        conflicts.push(`${plugin.type} name collision: ${newName}`);\n                    }\n                }\n            });\n        }\n        \n        return conflicts;\n    }\n    \n    /**\n     * Resolve plugin dependencies\n     * @param {Object} plugin - Plugin to resolve dependencies for\n     * @returns {Object} Resolution result\n     */\n    async resolveDependencies(plugin) {\n        if (!plugin.dependencies || plugin.dependencies.length === 0) {\n            return { resolved: true, missing: [] };\n        }\n        \n        const missing = [];\n        \n        for (const dep of plugin.dependencies) {\n            // Check if dependency is already loaded\n            if (!this.plugins.has(dep)) {\n                // Try to load dependency\n                const loaded = await this.tryLoadDependency(dep);\n                if (!loaded) {\n                    missing.push(dep);\n                }\n            }\n        }\n        \n        return {\n            resolved: missing.length === 0,\n            missing\n        };\n    }\n    \n    /**\n     * Try to load a dependency\n     * @param {string} dependencyName - Dependency name\n     * @returns {boolean} Success status\n     */\n    async tryLoadDependency(dependencyName) {\n        // This would attempt to load the dependency\n        // For now, just check if it exists\n        return this.plugins.has(dependencyName);\n    }\n    \n    /**\n     * Update dependency graph\n     * @param {string} pluginName - Plugin name\n     * @param {Array} dependencies - Dependencies\n     */\n    updateDependencyGraph(pluginName, dependencies) {\n        this.dependencyGraph.set(pluginName, new Set(dependencies));\n        \n        // Update reverse dependencies\n        dependencies.forEach(dep => {\n            if (!this.dependencyGraph.has(dep)) {\n                this.dependencyGraph.set(dep, new Set());\n            }\n        });\n    }\n    \n    /**\n     * Initialize a plugin\n     * @param {Object} plugin - Plugin to initialize\n     * @param {Object} context - Execution context\n     * @returns {boolean} Success status\n     */\n    async initializePlugin(plugin, context) {\n        try {\n            // Set timeout for initialization\n            const timeout = new Promise((_, reject) => {\n                setTimeout(() => reject(new Error('Plugin initialization timeout')), this.config.pluginTimeout);\n            });\n            \n            // Initialize plugin\n            const init = plugin.init.bind(context);\n            const result = await Promise.race([\n                init(this.pluginAPI),\n                timeout\n            ]);\n            \n            return result !== false;\n        } catch (error) {\n            // Plugin initialization error\n            return false;\n        }\n    }\n    \n    /**\n     * Unregister a plugin\n     * @param {string} pluginName - Name of plugin to unregister\n     * @returns {boolean} Success status\n     */\n    async unregisterPlugin(pluginName) {\n        const plugin = this.plugins.get(pluginName);\n        if (!plugin) {\n            // Plugin not found\n            return false;\n        }\n        \n        // Check for dependent plugins\n        const dependents = this.getDependentPlugins(pluginName);\n        if (dependents.length > 0) {\n            // Cannot unregister plugin - required by dependents\n            return false;\n        }\n        \n        try {\n            // Call destroy method\n            if (typeof plugin.destroy === 'function') {\n                await plugin.destroy();\n            }\n            \n            // Remove from registries\n            this.plugins.delete(pluginName);\n            this.pluginsByType.get(plugin.type).delete(pluginName);\n            this.pluginStates.delete(pluginName);\n            this.activePlugins.delete(pluginName);\n            this.dependencies.delete(pluginName);\n            this.dependencyGraph.delete(pluginName);\n            \n            // Remove hooks\n            this.hooks.forEach(hookSet => {\n                hookSet.forEach(hook => {\n                    if (hook.pluginName === pluginName) {\n                        hookSet.delete(hook);\n                    }\n                });\n            });\n            \n            // Plugin unregistered\n            \n            // Emit unregistration event\n            this.emitPluginEvent('pluginUnregistered', { name: pluginName });\n            \n            return true;\n        } catch (error) {\n            // Failed to unregister plugin\n            return false;\n        }\n    }\n    \n    /**\n     * Get plugins dependent on a given plugin\n     * @param {string} pluginName - Plugin name\n     * @returns {Array} Array of dependent plugin names\n     */\n    getDependentPlugins(pluginName) {\n        const dependents = [];\n        \n        this.dependencies.forEach((deps, name) => {\n            if (deps.includes(pluginName)) {\n                dependents.push(name);\n            }\n        });\n        \n        return dependents;\n    }\n    \n    /**\n     * Register a hook handler\n     * @param {string} hookName - Hook name\n     * @param {Function} handler - Handler function\n     * @param {string} pluginName - Plugin name\n     */\n    registerHook(hookName, handler, pluginName) {\n        if (!this.hooks.has(hookName)) {\n            this.hooks.set(hookName, new Set());\n        }\n        \n        this.hooks.get(hookName).add({\n            handler,\n            pluginName\n        });\n    }\n    \n    /**\n     * Execute hooks for a given event\n     * @param {string} hookName - Hook name\n     * @param {*} data - Data to pass to hooks\n     * @returns {Array} Results from hooks\n     */\n    async executeHooks(hookName, data) {\n        const hooks = this.hooks.get(hookName);\n        if (!hooks || hooks.size === 0) return [];\n        \n        const results = [];\n        \n        for (const hook of hooks) {\n            try {\n                const result = await hook.handler(data);\n                results.push({ pluginName: hook.pluginName, result });\n            } catch (error) {\n                // Hook error in plugin\n            }\n        }\n        \n        return results;\n    }\n    \n    /**\n     * Get a plugin by name\n     * @param {string} pluginName - Plugin name\n     * @returns {Object} Plugin or null\n     */\n    getPlugin(pluginName) {\n        return this.plugins.get(pluginName) || null;\n    }\n    \n    /**\n     * Check if a plugin exists\n     * @param {string} pluginName - Plugin name\n     * @returns {boolean} True if plugin exists\n     */\n    hasPlugin(pluginName) {\n        return this.plugins.has(pluginName);\n    }\n    \n    /**\n     * Get plugins by type\n     * @param {string} type - Plugin type\n     * @returns {Array} Array of plugins\n     */\n    getPluginsByType(type) {\n        const pluginNames = this.pluginsByType.get(type);\n        if (!pluginNames) return [];\n        \n        return Array.from(pluginNames).map(name => this.plugins.get(name));\n    }\n    \n    /**\n     * Enable a plugin\n     * @param {string} pluginName - Plugin name\n     */\n    enablePlugin(pluginName) {\n        if (!this.plugins.has(pluginName)) return;\n        \n        this.pluginStates.set(pluginName, 'active');\n        this.activePlugins.add(pluginName);\n        \n        const plugin = this.plugins.get(pluginName);\n        if (plugin.onEnable) {\n            plugin.onEnable();\n        }\n        \n        this.emitPluginEvent('pluginEnabled', { name: pluginName });\n    }\n    \n    /**\n     * Disable a plugin\n     * @param {string} pluginName - Plugin name\n     */\n    disablePlugin(pluginName) {\n        if (!this.plugins.has(pluginName)) return;\n        \n        // Check dependents\n        const dependents = this.getDependentPlugins(pluginName);\n        if (dependents.length > 0) {\n            // Disabling plugin will affect dependents\n        }\n        \n        this.pluginStates.set(pluginName, 'disabled');\n        this.activePlugins.delete(pluginName);\n        \n        const plugin = this.plugins.get(pluginName);\n        if (plugin.onDisable) {\n            plugin.onDisable();\n        }\n        \n        this.emitPluginEvent('pluginDisabled', { name: pluginName });\n    }\n    \n    /**\n     * Emit plugin event\n     * @param {string} eventName - Event name\n     * @param {*} data - Event data\n     */\n    emitPluginEvent(eventName, data) {\n        // This would integrate with the main event system\n        if (this.onPluginEvent) {\n            this.onPluginEvent(eventName, data);\n        }\n    }\n    \n    /**\n     * Listen for plugin events\n     * @param {string} eventName - Event name\n     * @param {Function} handler - Event handler\n     */\n    onPluginEvent(eventName, handler) {\n        // This would integrate with the main event system\n        // Placeholder for event listening\n    }\n    \n    /**\n     * Log from plugin context\n     * @param {string} pluginName - Plugin name\n     * @param {...*} args - Log arguments\n     */\n    logFromPlugin(pluginName, ...args) {\n        // Plugin log message\n    }\n    \n    /**\n     * Error from plugin context\n     * @param {string} pluginName - Plugin name\n     * @param {...*} args - Error arguments\n     */\n    errorFromPlugin(pluginName, ...args) {\n        // Plugin error message\n    }\n    \n    /**\n     * Set plugin state\n     * @param {string} pluginName - Plugin name\n     * @param {string} key - State key\n     * @param {*} value - State value\n     */\n    setPluginState(pluginName, key, value) {\n        if (!this.pluginStates.has(pluginName)) {\n            this.pluginStates.set(pluginName, {});\n        }\n        \n        const state = this.pluginStates.get(pluginName);\n        if (typeof state === 'object') {\n            state[key] = value;\n        }\n    }\n    \n    /**\n     * Get plugin state\n     * @param {string} pluginName - Plugin name\n     * @param {string} key - State key\n     * @returns {*} State value\n     */\n    getPluginState(pluginName, key) {\n        const state = this.pluginStates.get(pluginName);\n        if (typeof state === 'object') {\n            return state[key];\n        }\n        return undefined;\n    }\n    \n    /**\n     * Conflict resolution strategies\n     */\n    overrideConflict(existing, incoming) {\n        return incoming; // New plugin overrides existing\n    }\n    \n    mergeConflict(existing, incoming) {\n        return { ...existing, ...incoming }; // Merge properties\n    }\n    \n    rejectConflict(existing, incoming) {\n        return existing; // Keep existing, reject new\n    }\n    \n    queueConflict(existing, incoming) {\n        return [existing, incoming]; // Queue both\n    }\n    \n    /**\n     * Get plugin system status\n     * @returns {Object} Status report\n     */\n    getStatus() {\n        return {\n            enabled: this.config.enablePlugins,\n            totalPlugins: this.plugins.size,\n            activePlugins: this.activePlugins.size,\n            loadingPlugins: this.loadingPlugins.size,\n            pluginsByType: Object.fromEntries(\n                Array.from(this.pluginsByType.entries()).map(([type, plugins]) => [type, plugins.size])\n            ),\n            hooks: Object.fromEntries(\n                Array.from(this.hooks.entries()).map(([hook, handlers]) => [hook, handlers.size])\n            )\n        };\n    }\n    \n    /**\n     * Destroy plugin system\n     */\n    async destroy() {\n        // Unregister all plugins\n        const pluginNames = Array.from(this.plugins.keys());\n        \n        for (const name of pluginNames) {\n            await this.unregisterPlugin(name);\n        }\n        \n        // Clear all data\n        this.plugins.clear();\n        this.pluginsByType.clear();\n        this.dependencies.clear();\n        this.dependencyGraph.clear();\n        this.pluginStates.clear();\n        this.activePlugins.clear();\n        this.loadingPlugins.clear();\n        this.hooks.clear();\n        this.conflicts.clear();\n        \n        // PluginSystem destroyed\n    }\n}\n\nexport default PluginSystem;","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE\r\n *  └─○═╝                                                                             \r\n *                 ◐ ◑ ◒ ◓  BROWSER COMPATIBILITY  ◓ ◒ ◑ ◐                 \r\n *                                                                                    \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Browser Compatibility - Feature Detection & Graceful Degradation\r\n * @author Emotive Engine Team\r\n * @version 2.0.0\r\n * @module BrowserCompatibility\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                                   PURPOSE                                         \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ The COMPATIBILITY LAYER of the engine. Ensures the Emotive Engine runs           \r\n * ║ smoothly across all modern browsers by detecting features, providing              \r\n * ║ polyfills, and enabling graceful degradation when features are missing.           \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 🌐 BROWSER FEATURES                                                               \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • Web Audio API detection and fallbacks                                           \r\n * │ • Canvas 2D context recovery and management                                       \r\n * │ • RequestAnimationFrame polyfills                                                 \r\n * │ • Device pixel ratio handling                                                     \r\n * │ • Performance API detection                                                       \r\n * │ • Media device capabilities                                                       \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ════════════════════════════════════════════════════════════════════════════════════\r\n */\r\n\r\n/**\r\n * Feature detection utilities\r\n */\r\nexport class FeatureDetection {\r\n    constructor() {\r\n        // Cache detection results to avoid repeated expensive checks\r\n        if (FeatureDetection._cachedFeatures) {\r\n            this.features = FeatureDetection._cachedFeatures;\r\n            this.capabilities = FeatureDetection._cachedCapabilities;\r\n            return;\r\n        }\r\n        \r\n        this.features = {\r\n            webAudio: this.detectWebAudio(),\r\n            canvas2d: this.detectCanvas2D(),\r\n            requestAnimationFrame: this.detectRequestAnimationFrame(),\r\n            devicePixelRatio: this.detectDevicePixelRatio(),\r\n            audioContext: this.detectAudioContext(),\r\n            mediaDevices: this.detectMediaDevices(),\r\n            performance: this.detectPerformance(),\r\n            intersectionObserver: this.detectIntersectionObserver()\r\n        };\r\n        \r\n        this.capabilities = this.assessCapabilities();\r\n        \r\n        // Cache results for future instantiations\r\n        FeatureDetection._cachedFeatures = this.features;\r\n        FeatureDetection._cachedCapabilities = this.capabilities;\r\n    }\r\n\r\n    /**\r\n     * Detect Web Audio API support\r\n     * @returns {boolean} True if Web Audio API is supported\r\n     */\r\n    detectWebAudio() {\r\n        try {\r\n            return !!(window.AudioContext || window.webkitAudioContext);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detect Canvas 2D support\r\n     * @returns {boolean} True if Canvas 2D is supported\r\n     */\r\n    detectCanvas2D() {\r\n        try {\r\n            const canvas = document.createElement('canvas');\r\n            return !!(canvas.getContext && canvas.getContext('2d'));\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detect requestAnimationFrame support\r\n     * @returns {boolean} True if requestAnimationFrame is supported\r\n     */\r\n    detectRequestAnimationFrame() {\r\n        return !!(window.requestAnimationFrame || \r\n                 window.webkitRequestAnimationFrame || \r\n                 window.mozRequestAnimationFrame || \r\n                 window.oRequestAnimationFrame || \r\n                 window.msRequestAnimationFrame);\r\n    }\r\n\r\n    /**\r\n     * Detect device pixel ratio support\r\n     * @returns {boolean} True if devicePixelRatio is supported\r\n     */\r\n    detectDevicePixelRatio() {\r\n        return typeof window.devicePixelRatio === 'number';\r\n    }\r\n\r\n    /**\r\n     * Detect AudioContext support (more specific than Web Audio)\r\n     * @returns {boolean} True if AudioContext is supported\r\n     */\r\n    detectAudioContext() {\r\n        try {\r\n            const AudioContextClass = window.AudioContext || window.webkitAudioContext;\r\n            if (!AudioContextClass) return false;\r\n            \r\n            // Don't create a test context - just check if the class exists\r\n            // Creating contexts is expensive and has limits\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detect MediaDevices API support\r\n     * @returns {boolean} True if MediaDevices API is supported\r\n     */\r\n    detectMediaDevices() {\r\n        return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\r\n    }\r\n\r\n    /**\r\n     * Detect Performance API support\r\n     * @returns {boolean} True if Performance API is supported\r\n     */\r\n    detectPerformance() {\r\n        return !!(window.performance && window.performance.now);\r\n    }\r\n\r\n    /**\r\n     * Detect Intersection Observer support\r\n     * @returns {boolean} True if Intersection Observer is supported\r\n     */\r\n    detectIntersectionObserver() {\r\n        return typeof window.IntersectionObserver === 'function';\r\n    }\r\n\r\n    /**\r\n     * Assess overall browser capabilities\r\n     * @returns {Object} Capability assessment\r\n     */\r\n    assessCapabilities() {\r\n        const score = Object.values(this.features).filter(Boolean).length;\r\n        const total = Object.keys(this.features).length;\r\n        const percentage = (score / total) * 100;\r\n\r\n        let level = 'basic';\r\n        if (percentage >= 90) level = 'full';\r\n        else if (percentage >= 70) level = 'good';\r\n        else if (percentage >= 50) level = 'limited';\r\n\r\n        return {\r\n            score,\r\n            total,\r\n            percentage,\r\n            level,\r\n            recommendations: this.getRecommendations(level)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get recommendations based on capability level\r\n     * @param {string} level - Capability level\r\n     * @returns {Array<string>} Array of recommendations\r\n     */\r\n    getRecommendations(level) {\r\n        const recommendations = [];\r\n\r\n        if (!this.features.webAudio) {\r\n            recommendations.push('Audio features will be disabled');\r\n        }\r\n        if (!this.features.requestAnimationFrame) {\r\n            recommendations.push('Animation will use setTimeout fallback');\r\n        }\r\n        if (!this.features.performance) {\r\n            recommendations.push('Performance monitoring will be limited');\r\n        }\r\n        if (level === 'basic') {\r\n            recommendations.push('Consider using minimal build for better performance');\r\n        }\r\n\r\n        return recommendations;\r\n    }\r\n\r\n    /**\r\n     * Get all detected features\r\n     * @returns {Object} Feature detection results\r\n     */\r\n    getFeatures() {\r\n        return { ...this.features };\r\n    }\r\n\r\n    /**\r\n     * Get capability assessment\r\n     * @returns {Object} Capability assessment\r\n     */\r\n    getCapabilities() {\r\n        return { ...this.capabilities };\r\n    }\r\n}\r\n\r\n/**\r\n * Polyfill manager for missing browser features\r\n */\r\nexport class PolyfillManager {\r\n    constructor() {\r\n        this.polyfills = new Map();\r\n        this.applied = new Set();\r\n    }\r\n\r\n    /**\r\n     * Register a polyfill\r\n     * @param {string} feature - Feature name\r\n     * @param {Function} polyfillFn - Polyfill function\r\n     */\r\n    register(feature, polyfillFn) {\r\n        this.polyfills.set(feature, polyfillFn);\r\n    }\r\n\r\n    /**\r\n     * Apply a specific polyfill\r\n     * @param {string} feature - Feature name\r\n     * @returns {boolean} True if polyfill was applied\r\n     */\r\n    apply(feature) {\r\n        if (this.applied.has(feature)) {\r\n            return true; // Already applied\r\n        }\r\n\r\n        const polyfillFn = this.polyfills.get(feature);\r\n        if (!polyfillFn) {\r\n            // No polyfill registered for feature\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            polyfillFn();\r\n            this.applied.add(feature);\r\n            // Applied polyfill for feature\r\n            return true;\r\n        } catch (error) {\r\n            // Failed to apply polyfill for feature\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply all registered polyfills\r\n     * @returns {Array<string>} Array of successfully applied polyfills\r\n     */\r\n    applyAll() {\r\n        const applied = [];\r\n        for (const feature of this.polyfills.keys()) {\r\n            if (this.apply(feature)) {\r\n                applied.push(feature);\r\n            }\r\n        }\r\n        return applied;\r\n    }\r\n\r\n    /**\r\n     * Check if a polyfill has been applied\r\n     * @param {string} feature - Feature name\r\n     * @returns {boolean} True if polyfill has been applied\r\n     */\r\n    isApplied(feature) {\r\n        return this.applied.has(feature);\r\n    }\r\n}\r\n\r\n/**\r\n * RequestAnimationFrame polyfill\r\n */\r\nexport function polyfillRequestAnimationFrame() {\r\n    if (window.requestAnimationFrame) return;\r\n\r\n    // Try vendor prefixes first\r\n    window.requestAnimationFrame = \r\n        window.webkitRequestAnimationFrame ||\r\n        window.mozRequestAnimationFrame ||\r\n        window.oRequestAnimationFrame ||\r\n        window.msRequestAnimationFrame ||\r\n        function(callback) {\r\n            return window.setTimeout(function() {\r\n                callback(Date.now());\r\n            }, 1000 / 60); // 60 FPS fallback\r\n        };\r\n\r\n    window.cancelAnimationFrame = \r\n        window.webkitCancelAnimationFrame ||\r\n        window.mozCancelAnimationFrame ||\r\n        window.oCancelAnimationFrame ||\r\n        window.msCancelAnimationFrame ||\r\n        function(id) {\r\n            window.clearTimeout(id);\r\n        };\r\n}\r\n\r\n/**\r\n * Performance.now polyfill\r\n */\r\nexport function polyfillPerformanceNow() {\r\n    if (window.performance && window.performance.now) return;\r\n\r\n    if (!window.performance) {\r\n        window.performance = {};\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    window.performance.now = function() {\r\n        return Date.now() - startTime;\r\n    };\r\n}\r\n\r\n/**\r\n * Web Audio API polyfill (basic fallback)\r\n */\r\nexport function polyfillWebAudio() {\r\n    if (window.AudioContext || window.webkitAudioContext) return;\r\n\r\n    // Create a minimal AudioContext-like interface\r\n    window.AudioContext = function() {\r\n        this.state = 'suspended';\r\n        this.sampleRate = 44100;\r\n        this.currentTime = 0;\r\n        this.destination = {\r\n            connect: function() {},\r\n            disconnect: function() {}\r\n        };\r\n\r\n        this.createGain = function() {\r\n            return {\r\n                gain: { value: 1 },\r\n                connect: function() {},\r\n                disconnect: function() {}\r\n            };\r\n        };\r\n\r\n        this.createOscillator = function() {\r\n            return {\r\n                frequency: { value: 440 },\r\n                type: 'sine',\r\n                start: function() {},\r\n                stop: function() {},\r\n                connect: function() {},\r\n                disconnect: function() {}\r\n            };\r\n        };\r\n\r\n        this.createAnalyser = function() {\r\n            return {\r\n                fftSize: 2048,\r\n                frequencyBinCount: 1024,\r\n                getByteFrequencyData: function(array) {\r\n                    // Fill with zeros\r\n                    for (let i = 0; i < array.length; i++) {\r\n                        array[i] = 0;\r\n                    }\r\n                },\r\n                connect: function() {},\r\n                disconnect: function() {}\r\n            };\r\n        };\r\n\r\n        this.resume = function() {\r\n            this.state = 'running';\r\n            return Promise.resolve();\r\n        };\r\n\r\n        this.suspend = function() {\r\n            this.state = 'suspended';\r\n            return Promise.resolve();\r\n        };\r\n\r\n        this.close = function() {\r\n            this.state = 'closed';\r\n            return Promise.resolve();\r\n        };\r\n    };\r\n\r\n    // Web Audio API not supported - using fallback implementation\r\n}\r\n\r\n/**\r\n * Canvas context recovery utilities\r\n */\r\nexport class CanvasContextRecovery {\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n        this.context = null;\r\n        this.isContextLost = false;\r\n        this.recoveryCallbacks = [];\r\n        \r\n        this.setupContextLossHandling();\r\n    }\r\n\r\n    /**\r\n     * Set up context loss and recovery handling\r\n     */\r\n    setupContextLossHandling() {\r\n        this.canvas.addEventListener('webglcontextlost', (event) => {\r\n            event.preventDefault();\r\n            this.isContextLost = true;\r\n            // Canvas context lost\r\n        });\r\n\r\n        this.canvas.addEventListener('webglcontextrestored', () => {\r\n            this.isContextLost = false;\r\n            this.context = this.canvas.getContext('2d');\r\n            // Canvas context restored\r\n            \r\n            // Execute recovery callbacks\r\n            this.recoveryCallbacks.forEach(callback => {\r\n                try {\r\n                    callback(this.context);\r\n                } catch (error) {\r\n                    // Context recovery callback failed\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the canvas context with recovery handling\r\n     * @returns {CanvasRenderingContext2D|null} Canvas context or null if lost\r\n     */\r\n    getContext() {\r\n        if (this.isContextLost) {\r\n            return null;\r\n        }\r\n\r\n        if (!this.context) {\r\n            try {\r\n                this.context = this.canvas.getContext('2d');\r\n            } catch (error) {\r\n                // Failed to get canvas context\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return this.context;\r\n    }\r\n\r\n    /**\r\n     * Add a callback to execute when context is recovered\r\n     * @param {Function} callback - Recovery callback\r\n     */\r\n    onRecovery(callback) {\r\n        this.recoveryCallbacks.push(callback);\r\n    }\r\n\r\n    /**\r\n     * Check if context is currently lost\r\n     * @returns {boolean} True if context is lost\r\n     */\r\n    isLost() {\r\n        return this.isContextLost;\r\n    }\r\n\r\n    /**\r\n     * Attempt to recover the context manually\r\n     * @returns {boolean} True if recovery was successful\r\n     */\r\n    recover() {\r\n        if (!this.isContextLost) {\r\n            return true;\r\n        }\r\n\r\n        try {\r\n            this.context = this.canvas.getContext('2d');\r\n            if (this.context) {\r\n                this.isContextLost = false;\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            // Manual context recovery failed\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Browser-specific optimization manager\r\n */\r\nexport class BrowserOptimizations {\r\n    constructor() {\r\n        // Cache browser detection\r\n        if (BrowserOptimizations._cachedBrowser) {\r\n            this.browser = BrowserOptimizations._cachedBrowser;\r\n            this.optimizations = BrowserOptimizations._cachedOptimizations;\r\n            return;\r\n        }\r\n        \r\n        this.browser = this.detectBrowser();\r\n        this.optimizations = new Map();\r\n        this.setupOptimizations();\r\n        \r\n        // Cache for future instances\r\n        BrowserOptimizations._cachedBrowser = this.browser;\r\n        BrowserOptimizations._cachedOptimizations = this.optimizations;\r\n    }\r\n\r\n    /**\r\n     * Detect the current browser\r\n     * @returns {Object} Browser information\r\n     */\r\n    detectBrowser() {\r\n        const userAgent = navigator.userAgent;\r\n        \r\n        let name = 'unknown';\r\n        let version = 'unknown';\r\n        \r\n        if (userAgent.includes('Chrome')) {\r\n            name = 'chrome';\r\n            const match = userAgent.match(/Chrome\\/(\\d+)/);\r\n            version = match ? match[1] : 'unknown';\r\n        } else if (userAgent.includes('Firefox')) {\r\n            name = 'firefox';\r\n            const match = userAgent.match(/Firefox\\/(\\d+)/);\r\n            version = match ? match[1] : 'unknown';\r\n        } else if (userAgent.includes('Safari') && !userAgent.includes('Chrome')) {\r\n            name = 'safari';\r\n            const match = userAgent.match(/Version\\/(\\d+)/);\r\n            version = match ? match[1] : 'unknown';\r\n        } else if (userAgent.includes('Edge')) {\r\n            name = 'edge';\r\n            const match = userAgent.match(/Edge\\/(\\d+)/);\r\n            version = match ? match[1] : 'unknown';\r\n        }\r\n\r\n        return { name, version, userAgent };\r\n    }\r\n\r\n    /**\r\n     * Set up browser-specific optimizations\r\n     */\r\n    setupOptimizations() {\r\n        // Chrome optimizations\r\n        this.optimizations.set('chrome', {\r\n            preferredAnimationMethod: 'requestAnimationFrame',\r\n            audioContextOptions: { latencyHint: 'interactive' },\r\n            canvasOptimizations: ['willReadFrequently'],\r\n            particleLimit: 50\r\n        });\r\n\r\n        // Firefox optimizations\r\n        this.optimizations.set('firefox', {\r\n            preferredAnimationMethod: 'requestAnimationFrame',\r\n            audioContextOptions: { latencyHint: 'balanced' },\r\n            canvasOptimizations: [],\r\n            particleLimit: 40\r\n        });\r\n\r\n        // Safari optimizations\r\n        this.optimizations.set('safari', {\r\n            preferredAnimationMethod: 'requestAnimationFrame',\r\n            audioContextOptions: { latencyHint: 'playback' },\r\n            canvasOptimizations: [],\r\n            particleLimit: 30\r\n        });\r\n\r\n        // Edge optimizations\r\n        this.optimizations.set('edge', {\r\n            preferredAnimationMethod: 'requestAnimationFrame',\r\n            audioContextOptions: { latencyHint: 'interactive' },\r\n            canvasOptimizations: ['willReadFrequently'],\r\n            particleLimit: 45\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get optimizations for the current browser\r\n     * @returns {Object} Browser-specific optimizations\r\n     */\r\n    getOptimizations() {\r\n        return this.optimizations.get(this.browser.name) || this.optimizations.get('chrome');\r\n    }\r\n\r\n    /**\r\n     * Get browser information\r\n     * @returns {Object} Browser information\r\n     */\r\n    getBrowser() {\r\n        return { ...this.browser };\r\n    }\r\n\r\n    /**\r\n     * Apply canvas optimizations\r\n     * @param {HTMLCanvasElement} canvas - Canvas element\r\n     * @param {CanvasRenderingContext2D} context - Canvas context\r\n     */\r\n    applyCanvasOptimizations(canvas, context) {\r\n        const opts = this.getOptimizations();\r\n        \r\n        if (opts.canvasOptimizations.includes('willReadFrequently')) {\r\n            try {\r\n                // Re-get context with optimization hint\r\n                const optimizedContext = canvas.getContext('2d', { willReadFrequently: true });\r\n                if (optimizedContext) {\r\n                    // Applied willReadFrequently optimization\r\n                }\r\n            } catch (error) {\r\n                // Failed to apply canvas optimization\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get recommended particle limit for current browser\r\n     * @returns {number} Recommended particle limit\r\n     */\r\n    getRecommendedParticleLimit() {\r\n        return this.getOptimizations().particleLimit;\r\n    }\r\n\r\n    /**\r\n     * Get audio context options for current browser\r\n     * @returns {Object} Audio context options\r\n     */\r\n    getAudioContextOptions() {\r\n        return this.getOptimizations().audioContextOptions;\r\n    }\r\n}\r\n\r\n/**\r\n * Initialize all polyfills and compatibility features\r\n * @returns {Object} Initialization results\r\n */\r\nlet _initializationCache = null;\r\n\r\nexport function initializeBrowserCompatibility() {\r\n    // Return cached result if already initialized\r\n    if (_initializationCache) {\r\n        return _initializationCache;\r\n    }\r\n    \r\n    const featureDetection = new FeatureDetection();\r\n    const polyfillManager = new PolyfillManager();\r\n    const browserOptimizations = new BrowserOptimizations();\r\n\r\n    // Register polyfills\r\n    polyfillManager.register('requestAnimationFrame', polyfillRequestAnimationFrame);\r\n    polyfillManager.register('performanceNow', polyfillPerformanceNow);\r\n    polyfillManager.register('webAudio', polyfillWebAudio);\r\n\r\n    // Apply necessary polyfills based on feature detection\r\n    const appliedPolyfills = [];\r\n    \r\n    if (!featureDetection.features.requestAnimationFrame) {\r\n        if (polyfillManager.apply('requestAnimationFrame')) {\r\n            appliedPolyfills.push('requestAnimationFrame');\r\n        }\r\n    }\r\n    \r\n    if (!featureDetection.features.performance) {\r\n        if (polyfillManager.apply('performanceNow')) {\r\n            appliedPolyfills.push('performanceNow');\r\n        }\r\n    }\r\n    \r\n    if (!featureDetection.features.webAudio) {\r\n        if (polyfillManager.apply('webAudio')) {\r\n            appliedPolyfills.push('webAudio');\r\n        }\r\n    }\r\n\r\n    // Cache the result\r\n    _initializationCache = {\r\n        featureDetection,\r\n        polyfillManager,\r\n        browserOptimizations,\r\n        appliedPolyfills,\r\n        capabilities: featureDetection.getCapabilities(),\r\n        browser: browserOptimizations.getBrowser()\r\n    };\r\n    \r\n    return _initializationCache;\r\n}\r\n\r\n// Create singleton instance lazily\r\nlet _browserCompatibilityInstance = null;\r\n\r\nexport function getBrowserCompatibility() {\r\n    if (!_browserCompatibilityInstance) {\r\n        _browserCompatibilityInstance = initializeBrowserCompatibility();\r\n    }\r\n    return _browserCompatibilityInstance;\r\n}\r\n\r\n// Export getter for backward compatibility\r\nexport const browserCompatibility = getBrowserCompatibility();","/**\n * ═══════════════════════════════════════════════════════════════════════════════════════\n *  ╔═○─┐ emotive\n *    ●●  ENGINE\n *  └─○═╝                                                                             \n *                      ◐ ◑ ◒ ◓  DEBUGGER  ◓ ◒ ◑ ◐                      \n *                                                                                    \n * ═══════════════════════════════════════════════════════════════════════════════════════\n *\n * @fileoverview Debugger - Enhanced Logging & Performance Profiling\n * @author Emotive Engine Team\n * @version 2.0.0\n * @module Debugger\n * \n * ╔═══════════════════════════════════════════════════════════════════════════════════\n * ║                                   PURPOSE                                         \n * ╠═══════════════════════════════════════════════════════════════════════════════════\n * ║ The DIAGNOSTIC CENTER of the engine. Provides comprehensive debugging tools,      \n * ║ performance profiling, memory tracking, and runtime diagnostics to ensure         \n * ║ smooth operation and help developers optimize their implementations.              \n * ╚═══════════════════════════════════════════════════════════════════════════════════\n *\n * ┌───────────────────────────────────────────────────────────────────────────────────\n * │ 🐛 DEBUG FEATURES                                                                 \n * ├───────────────────────────────────────────────────────────────────────────────────\n * │ • Multi-level logging (NONE, ERROR, WARN, INFO, DEBUG, TRACE)                     \n * │ • Performance profiling with timing metrics                                       \n * │ • Memory usage tracking and leak detection                                        \n * │ • Error tracking and stack trace capture                                          \n * │ • Runtime capability detection                                                    \n * │ • Visual debugging overlays                                                       \n * └───────────────────────────────────────────────────────────────────────────────────\n *\n * ════════════════════════════════════════════════════════════════════════════════════\n */\n\n/**\n * Debug levels for controlling log output\n */\nexport const DebugLevel = {\n    NONE: 0,\n    ERROR: 1,\n    WARN: 2,\n    INFO: 3,\n    DEBUG: 4,\n    TRACE: 5\n};\n\n/**\n * Enhanced debugger with performance profiling and error tracking\n */\nexport class EmotiveDebugger {\n    constructor(config = {}) {\n        this.config = {\n            enabled: config.enabled !== false,\n            level: config.level || DebugLevel.INFO,\n            enableProfiling: config.enableProfiling !== false,\n            enableErrorTracking: config.enableErrorTracking !== false,\n            enableMemoryTracking: config.enableMemoryTracking !== false,\n            maxLogEntries: config.maxLogEntries || 1000,\n            maxProfileEntries: config.maxProfileEntries || 500,\n            ...config\n        };\n\n        // Log storage\n        this.logs = [];\n        this.errors = [];\n        this.profiles = new Map();\n        this.memorySnapshots = [];\n        \n        // Performance tracking\n        this.frameTimings = [];\n        this.maxFrameTimings = 120; // 2 seconds at 60fps\n        \n        // Error tracking\n        this.errorCounts = new Map();\n        this.lastErrors = new Map();\n        \n        // Feature detection for debugging capabilities\n        this.capabilities = {\n            performance: typeof performance !== 'undefined' && performance.now,\n            memory: typeof performance !== 'undefined' && performance.memory,\n            console: typeof console !== 'undefined',\n            stackTrace: typeof Error !== 'undefined'\n        };\n\n        // Initialize\n        this.startTime = this.now();\n        this.setupErrorHandling();\n        \n        if (this.config.enabled) {\n            this.log('DEBUG', 'EmotiveDebugger initialized', {\n                config: this.config,\n                capabilities: this.capabilities\n            });\n        }\n    }\n\n    /**\n     * Get current high-resolution timestamp\n     * @returns {number} Timestamp in milliseconds\n     */\n    now() {\n        if (this.capabilities.performance) {\n            return performance.now();\n        }\n        return Date.now() - this.startTime;\n    }\n\n    /**\n     * Set up global error handling\n     */\n    setupErrorHandling() {\n        if (!this.config.enableErrorTracking || typeof window === 'undefined') {\n            return;\n        }\n\n        // Capture unhandled errors\n        window.addEventListener('error', (event) => {\n            this.trackError('UNHANDLED_ERROR', event.error || new Error(event.message), {\n                filename: event.filename,\n                lineno: event.lineno,\n                colno: event.colno\n            });\n        });\n\n        // Capture unhandled promise rejections\n        window.addEventListener('unhandledrejection', (event) => {\n            this.trackError('UNHANDLED_REJECTION', event.reason, {\n                promise: event.promise\n            });\n        });\n    }\n\n    /**\n     * Log a message with specified level\n     * @param {string} level - Log level\n     * @param {string} message - Log message\n     * @param {*} data - Additional data\n     */\n    log(level, message, data = null) {\n        if (!this.config.enabled) return;\n\n        const levelValue = DebugLevel[level] || DebugLevel.INFO;\n        if (levelValue > this.config.level) return;\n\n        const timestamp = this.now();\n        const logEntry = {\n            timestamp,\n            level,\n            message,\n            data,\n            stackTrace: this.getStackTrace()\n        };\n\n        // Store log entry\n        this.logs.push(logEntry);\n        if (this.logs.length > this.config.maxLogEntries) {\n            this.logs.shift();\n        }\n\n        // Console output\n        if (this.capabilities.console) {\n            const consoleMethod = this.getConsoleMethod(level);\n            const timeStr = `[${(timestamp / 1000).toFixed(3)}s]`;\n            \n            if (data) {\n                consoleMethod(`${timeStr} [${level}] ${message}`, data);\n            } else {\n                consoleMethod(`${timeStr} [${level}] ${message}`);\n            }\n        }\n    }\n\n    /**\n     * Get appropriate console method for log level\n     * @param {string} level - Log level\n     * @returns {Function} Console method\n     */\n    getConsoleMethod(level) {\n        switch (level) {\n            case 'ERROR': return (() => {}).bind(console);\n            case 'WARN': return (() => {}).bind(console);\n            case 'DEBUG': return (() => {}).bind(console);\n            case 'TRACE': return (() => {}).bind(console);\n            default: return (() => {}).bind(console);\n        }\n    }\n\n    /**\n     * Get current stack trace\n     * @returns {string|null} Stack trace or null if not available\n     */\n    getStackTrace() {\n        if (!this.capabilities.stackTrace) return null;\n        \n        try {\n            throw new Error();\n        } catch (e) {\n            return e.stack;\n        }\n    }\n\n    /**\n     * Track an error with context\n     * @param {string} type - Error type\n     * @param {Error} error - Error object\n     * @param {Object} context - Additional context\n     */\n    trackError(type, error, context = {}) {\n        if (!this.config.enableErrorTracking) return;\n\n        const timestamp = this.now();\n        const errorEntry = {\n            timestamp,\n            type,\n            message: error.message || String(error),\n            stack: error.stack,\n            context,\n            count: 1\n        };\n\n        // Update error counts\n        const errorKey = `${type}:${error.message}`;\n        if (this.errorCounts.has(errorKey)) {\n            this.errorCounts.set(errorKey, this.errorCounts.get(errorKey) + 1);\n            errorEntry.count = this.errorCounts.get(errorKey);\n        } else {\n            this.errorCounts.set(errorKey, 1);\n        }\n\n        // Store error\n        this.errors.push(errorEntry);\n        this.lastErrors.set(type, errorEntry);\n\n        // Log error\n        this.log('ERROR', `${type}: ${error.message}`, {\n            error: errorEntry,\n            context\n        });\n    }\n\n    /**\n     * Start profiling a named operation\n     * @param {string} name - Profile name\n     * @param {Object} metadata - Additional metadata\n     */\n    startProfile(name, metadata = {}) {\n        if (!this.config.enableProfiling) return;\n\n        const profile = {\n            name,\n            startTime: this.now(),\n            metadata,\n            samples: [],\n            isActive: true\n        };\n\n        this.profiles.set(name, profile);\n        this.log('TRACE', `Started profiling: ${name}`, metadata);\n    }\n\n    /**\n     * Add a sample to an active profile\n     * @param {string} name - Profile name\n     * @param {string} label - Sample label\n     * @param {*} data - Sample data\n     */\n    profileSample(name, label, data = null) {\n        if (!this.config.enableProfiling) return;\n\n        const profile = this.profiles.get(name);\n        if (!profile || !profile.isActive) return;\n\n        const sample = {\n            timestamp: this.now(),\n            label,\n            data,\n            relativeTime: this.now() - profile.startTime\n        };\n\n        profile.samples.push(sample);\n    }\n\n    /**\n     * End profiling and get results\n     * @param {string} name - Profile name\n     * @returns {Object|null} Profile results or null if not found\n     */\n    endProfile(name) {\n        if (!this.config.enableProfiling) return null;\n\n        const profile = this.profiles.get(name);\n        if (!profile || !profile.isActive) return null;\n\n        profile.endTime = this.now();\n        profile.duration = profile.endTime - profile.startTime;\n        profile.isActive = false;\n\n        // Calculate statistics\n        profile.stats = this.calculateProfileStats(profile);\n\n        this.log('TRACE', `Ended profiling: ${name}`, {\n            duration: profile.duration,\n            samples: profile.samples.length,\n            stats: profile.stats\n        });\n\n        // Limit stored profiles\n        if (this.profiles.size > this.config.maxProfileEntries) {\n            const oldestKey = this.profiles.keys().next().value;\n            this.profiles.delete(oldestKey);\n        }\n\n        return { ...profile };\n    }\n\n    /**\n     * Calculate statistics for a profile\n     * @param {Object} profile - Profile data\n     * @returns {Object} Profile statistics\n     */\n    calculateProfileStats(profile) {\n        if (profile.samples.length === 0) {\n            return { sampleCount: 0 };\n        }\n\n        const durations = [];\n        for (let i = 1; i < profile.samples.length; i++) {\n            durations.push(profile.samples[i].relativeTime - profile.samples[i - 1].relativeTime);\n        }\n\n        if (durations.length === 0) {\n            return { sampleCount: profile.samples.length };\n        }\n\n        const sum = durations.reduce((a, b) => a + b, 0);\n        const avg = sum / durations.length;\n        const min = Math.min(...durations);\n        const max = Math.max(...durations);\n\n        return {\n            sampleCount: profile.samples.length,\n            avgSampleDuration: avg,\n            minSampleDuration: min,\n            maxSampleDuration: max,\n            totalDuration: profile.duration\n        };\n    }\n\n    /**\n     * Track frame timing for performance analysis\n     * @param {number} frameTime - Frame time in milliseconds\n     */\n    trackFrameTiming(frameTime) {\n        if (!this.config.enableProfiling) return;\n\n        this.frameTimings.push({\n            timestamp: this.now(),\n            frameTime,\n            fps: 1000 / frameTime\n        });\n\n        if (this.frameTimings.length > this.maxFrameTimings) {\n            this.frameTimings.shift();\n        }\n    }\n\n    /**\n     * Take a memory snapshot (if supported)\n     * @param {string} label - Snapshot label\n     */\n    takeMemorySnapshot(label = 'snapshot') {\n        if (!this.config.enableMemoryTracking || !this.capabilities.memory) return;\n\n        const snapshot = {\n            timestamp: this.now(),\n            label,\n            memory: {\n                usedJSHeapSize: performance.memory.usedJSHeapSize,\n                totalJSHeapSize: performance.memory.totalJSHeapSize,\n                jsHeapSizeLimit: performance.memory.jsHeapSizeLimit\n            }\n        };\n\n        this.memorySnapshots.push(snapshot);\n        \n        // Limit snapshots\n        if (this.memorySnapshots.length > 100) {\n            this.memorySnapshots.shift();\n        }\n\n        this.log('DEBUG', `Memory snapshot: ${label}`, snapshot.memory);\n    }\n\n    /**\n     * Get comprehensive debug report\n     * @returns {Object} Debug report\n     */\n    getDebugReport() {\n        const report = {\n            timestamp: this.now(),\n            uptime: this.now() - 0,\n            config: this.config,\n            capabilities: this.capabilities,\n            \n            // Logs\n            logCount: this.logs.length,\n            recentLogs: this.logs.slice(-10),\n            \n            // Errors\n            errorCount: this.errors.length,\n            uniqueErrors: this.errorCounts.size,\n            recentErrors: this.errors.slice(-5),\n            errorCounts: Object.fromEntries(this.errorCounts),\n            \n            // Profiles\n            activeProfiles: Array.from(this.profiles.values()).filter(p => p.isActive).length,\n            completedProfiles: Array.from(this.profiles.values()).filter(p => !p.isActive).length,\n            \n            // Performance\n            frameTimings: this.getFrameTimingStats(),\n            \n            // Memory\n            memorySnapshots: this.memorySnapshots.slice(-5)\n        };\n\n        return report;\n    }\n\n    /**\n     * Get frame timing statistics\n     * @returns {Object} Frame timing stats\n     */\n    getFrameTimingStats() {\n        if (this.frameTimings.length === 0) {\n            return { sampleCount: 0 };\n        }\n\n        const frameTimes = this.frameTimings.map(f => f.frameTime);\n        const fps = this.frameTimings.map(f => f.fps);\n\n        return {\n            sampleCount: this.frameTimings.length,\n            avgFrameTime: frameTimes.reduce((a, b) => a + b, 0) / frameTimes.length,\n            minFrameTime: Math.min(...frameTimes),\n            maxFrameTime: Math.max(...frameTimes),\n            avgFPS: fps.reduce((a, b) => a + b, 0) / fps.length,\n            minFPS: Math.min(...fps),\n            maxFPS: Math.max(...fps)\n        };\n    }\n\n    /**\n     * Export debug data for external analysis\n     * @returns {Object} Exportable debug data\n     */\n    exportDebugData() {\n        return {\n            metadata: {\n                exportTime: Date.now(),\n                debuggerUptime: this.now(),\n                config: this.config,\n                capabilities: this.capabilities\n            },\n            logs: [...this.logs],\n            errors: [...this.errors],\n            profiles: Object.fromEntries(this.profiles),\n            frameTimings: [...this.frameTimings],\n            memorySnapshots: [...this.memorySnapshots],\n            errorCounts: Object.fromEntries(this.errorCounts)\n        };\n    }\n\n    /**\n     * Clear all debug data\n     */\n    clear() {\n        this.logs = [];\n        this.errors = [];\n        this.profiles.clear();\n        this.frameTimings = [];\n        this.memorySnapshots = [];\n        this.errorCounts.clear();\n        this.lastErrors.clear();\n        \n        this.log('INFO', 'Debug data cleared');\n    }\n\n    /**\n     * Destroy the debugger and clean up\n     */\n    destroy() {\n        this.clear();\n        this.config.enabled = false;\n        \n        // Remove event listeners if we added them\n        if (typeof window !== 'undefined') {\n            // Note: In a real implementation, we'd need to store references to remove them\n            // For now, just disable the debugger\n        }\n    }\n}\n\n/**\n * Runtime feature detection and capability reporting\n */\nexport class RuntimeCapabilities {\n    constructor() {\n        this.capabilities = this.detectCapabilities();\n        this.performance = this.measurePerformance();\n    }\n\n    /**\n     * Detect runtime capabilities\n     * @returns {Object} Capability detection results\n     */\n    detectCapabilities() {\n        const caps = {\n            // JavaScript features\n            es6: this.detectES6(),\n            es2017: this.detectES2017(),\n            modules: this.detectModules(),\n            \n            // Browser APIs\n            webGL: this.detectWebGL(),\n            webGL2: this.detectWebGL2(),\n            webWorkers: this.detectWebWorkers(),\n            serviceWorkers: this.detectServiceWorkers(),\n            \n            // Performance APIs\n            performanceObserver: this.detectPerformanceObserver(),\n            intersectionObserver: this.detectIntersectionObserver(),\n            resizeObserver: this.detectResizeObserver(),\n            \n            // Storage\n            localStorage: this.detectLocalStorage(),\n            sessionStorage: this.detectSessionStorage(),\n            indexedDB: this.detectIndexedDB(),\n            \n            // Network\n            fetch: this.detectFetch(),\n            webSockets: this.detectWebSockets(),\n            \n            // Device capabilities\n            touchEvents: this.detectTouchEvents(),\n            pointerEvents: this.detectPointerEvents(),\n            deviceOrientation: this.detectDeviceOrientation(),\n            \n            // Graphics\n            canvas2d: this.detectCanvas2D(),\n            canvasFilters: this.detectCanvasFilters(),\n            offscreenCanvas: this.detectOffscreenCanvas()\n        };\n\n        return caps;\n    }\n\n    detectES6() {\n        try {\n            // Check for arrow functions and classes without eval\n            return typeof Symbol !== 'undefined' && \n                   typeof Promise !== 'undefined' && \n                   typeof Map !== 'undefined' && \n                   typeof Set !== 'undefined';\n        } catch (e) {\n            return false;\n        }\n    }\n\n    detectES2017() {\n        try {\n            // Check for async/await support\n            return typeof async !== 'undefined' || \n                   (function() { \n                       try { \n                           return Function('return async function(){}')().constructor.name === 'AsyncFunction'; \n                       } catch(e) { \n                           return false; \n                       } \n                   })();\n        } catch (e) {\n            return false;\n        }\n    }\n\n    detectModules() {\n        try {\n            return typeof document !== 'undefined' && 'noModule' in document.createElement('script');\n        } catch (e) {\n            return false;\n        }\n    }\n\n    detectWebGL() {\n        try {\n            const canvas = document.createElement('canvas');\n            return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n        } catch (e) {\n            return false;\n        }\n    }\n\n    detectWebGL2() {\n        try {\n            const canvas = document.createElement('canvas');\n            return !!canvas.getContext('webgl2');\n        } catch (e) {\n            return false;\n        }\n    }\n\n    detectWebWorkers() {\n        return typeof Worker !== 'undefined';\n    }\n\n    detectServiceWorkers() {\n        return 'serviceWorker' in navigator;\n    }\n\n    detectPerformanceObserver() {\n        return typeof PerformanceObserver !== 'undefined';\n    }\n\n    detectIntersectionObserver() {\n        return typeof IntersectionObserver !== 'undefined';\n    }\n\n    detectResizeObserver() {\n        return typeof ResizeObserver !== 'undefined';\n    }\n\n    detectLocalStorage() {\n        try {\n            return typeof localStorage !== 'undefined' && localStorage !== null;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    detectSessionStorage() {\n        try {\n            return typeof sessionStorage !== 'undefined' && sessionStorage !== null;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    detectIndexedDB() {\n        return typeof indexedDB !== 'undefined';\n    }\n\n    detectFetch() {\n        return typeof fetch !== 'undefined';\n    }\n\n    detectWebSockets() {\n        return typeof WebSocket !== 'undefined';\n    }\n\n    detectTouchEvents() {\n        return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n    }\n\n    detectPointerEvents() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    detectDeviceOrientation() {\n        return 'ondeviceorientation' in window;\n    }\n\n    detectCanvas2D() {\n        try {\n            const canvas = document.createElement('canvas');\n            return !!canvas.getContext('2d');\n        } catch (e) {\n            return false;\n        }\n    }\n\n    detectCanvasFilters() {\n        try {\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            return 'filter' in ctx;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    detectOffscreenCanvas() {\n        return typeof OffscreenCanvas !== 'undefined';\n    }\n\n    /**\n     * Measure basic performance characteristics\n     * @returns {Object} Performance measurements\n     */\n    measurePerformance() {\n        const measurements = {};\n\n        // Measure JavaScript execution speed\n        const start = performance.now();\n        let sum = 0;\n        for (let i = 0; i < 100000; i++) {\n            sum += Math.random();\n        }\n        measurements.jsExecutionSpeed = performance.now() - start;\n\n        // Measure canvas performance\n        try {\n            const canvas = document.createElement('canvas');\n            canvas.width = 100;\n            canvas.height = 100;\n            const ctx = canvas.getContext('2d');\n            \n            const canvasStart = performance.now();\n            for (let i = 0; i < 1000; i++) {\n                ctx.fillRect(Math.random() * 100, Math.random() * 100, 10, 10);\n            }\n            measurements.canvasPerformance = performance.now() - canvasStart;\n        } catch (e) {\n            measurements.canvasPerformance = null;\n        }\n\n        return measurements;\n    }\n\n    /**\n     * Get all capabilities\n     * @returns {Object} All detected capabilities\n     */\n    getCapabilities() {\n        return { ...this.capabilities };\n    }\n\n    /**\n     * Get performance measurements\n     * @returns {Object} Performance measurements\n     */\n    getPerformance() {\n        return { ...this.performance };\n    }\n\n    /**\n     * Generate capability report\n     * @returns {Object} Comprehensive capability report\n     */\n    generateReport() {\n        const supportedFeatures = Object.entries(this.capabilities)\n            .filter(([, supported]) => supported)\n            .map(([feature]) => feature);\n\n        const unsupportedFeatures = Object.entries(this.capabilities)\n            .filter(([, supported]) => !supported)\n            .map(([feature]) => feature);\n\n        const supportPercentage = (supportedFeatures.length / Object.keys(this.capabilities).length) * 100;\n\n        return {\n            timestamp: Date.now(),\n            userAgent: navigator.userAgent,\n            supportedFeatures,\n            unsupportedFeatures,\n            supportPercentage: Math.round(supportPercentage),\n            performance: this.performance,\n            recommendations: this.generateRecommendations(supportPercentage)\n        };\n    }\n\n    /**\n     * Generate recommendations based on capabilities\n     * @param {number} supportPercentage - Percentage of supported features\n     * @returns {Array<string>} Recommendations\n     */\n    generateRecommendations(supportPercentage) {\n        const recommendations = [];\n\n        if (supportPercentage < 50) {\n            recommendations.push('Consider using the minimal build for better compatibility');\n        }\n\n        if (!this.capabilities.webGL) {\n            recommendations.push('WebGL not supported - advanced graphics features unavailable');\n        }\n\n        if (!this.capabilities.webWorkers) {\n            recommendations.push('Web Workers not supported - background processing unavailable');\n        }\n\n        if (!this.capabilities.fetch) {\n            recommendations.push('Fetch API not supported - consider using XMLHttpRequest polyfill');\n        }\n\n        if (this.performance.jsExecutionSpeed > 50) {\n            recommendations.push('Slow JavaScript execution detected - consider performance optimizations');\n        }\n\n        if (this.performance.canvasPerformance > 100) {\n            recommendations.push('Slow canvas performance detected - consider reducing visual complexity');\n        }\n\n        return recommendations;\n    }\n}\n\n// Create singleton instances for convenience\nexport const emotiveDebugger = new EmotiveDebugger({\n    enabled: typeof window !== 'undefined' && window.location && window.location.search.includes('debug=true'),\n    level: DebugLevel.INFO\n});\n\nexport const runtimeCapabilities = new RuntimeCapabilities();","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Shape Definitions\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Static shape definitions for immediate loading\r\n * @author Emotive Engine Team\r\n * @module shapes/shapeDefinitions\r\n */\r\n\r\n/**\r\n * Generate circle points\r\n */\r\nfunction generateCircle(numPoints) {\r\n    const points = [];\r\n    for (let i = 0; i < numPoints; i++) {\r\n        const angle = (i / numPoints) * Math.PI * 2;\r\n        points.push({\r\n            x: 0.5 + Math.cos(angle) * 0.5,\r\n            y: 0.5 + Math.sin(angle) * 0.5\r\n        });\r\n    }\r\n    return points;\r\n}\r\n\r\n/**\r\n * Generate heart shape\r\n */\r\nfunction generateHeart(numPoints) {\r\n    const points = [];\r\n    for (let i = 0; i < numPoints; i++) {\r\n        const t = (i / numPoints) * Math.PI * 2;\r\n\r\n        // Heart parametric equations\r\n        const x = 16 * Math.pow(Math.sin(t), 3);\r\n        const y = -(13 * Math.cos(t) - 5 * Math.cos(2 * t) -\r\n                  2 * Math.cos(3 * t) - Math.cos(4 * t));\r\n\r\n        // Normalize and scale\r\n        points.push({\r\n            x: 0.5 + x / 32,\r\n            y: 0.5 + y / 32\r\n        });\r\n    }\r\n    return points;\r\n}\r\n\r\n/**\r\n * Generate moon shape - keep it as a circle\r\n * The crescent effect should be done with visual shadows, not shape morphing\r\n */\r\nfunction generateMoon(numPoints) {\r\n    // Moon should stay as a circle - the crescent is a visual effect\r\n    return generateCircle(numPoints);\r\n}\r\n\r\n/**\r\n * Generate star shape - proper 5-pointed star\r\n */\r\nfunction generateStar(numPoints, starPoints = 5) {\r\n    const points = [];\r\n    const outerRadius = 0.5;\r\n    const innerRadius = outerRadius * 0.382; // Golden ratio for perfect star\r\n    \r\n    // Generate the 10 vertices (5 outer, 5 inner)\r\n    const vertices = [];\r\n    const angleStep = (Math.PI * 2) / starPoints; // 72 degrees between star points\r\n    const halfAngleStep = angleStep / 2; // 36 degrees offset for inner points\r\n    \r\n    for (let i = 0; i < starPoints; i++) {\r\n        // Outer point (star tip)\r\n        const outerAngle = (i * angleStep) - Math.PI / 2; // Start from top\r\n        vertices.push({\r\n            x: 0.5 + Math.cos(outerAngle) * outerRadius,\r\n            y: 0.5 + Math.sin(outerAngle) * outerRadius\r\n        });\r\n        \r\n        // Inner point (valley) - offset by half the angle\r\n        const innerAngle = outerAngle + halfAngleStep;\r\n        vertices.push({\r\n            x: 0.5 + Math.cos(innerAngle) * innerRadius,\r\n            y: 0.5 + Math.sin(innerAngle) * innerRadius\r\n        });\r\n    }\r\n    \r\n    // Now interpolate points along the star perimeter\r\n    for (let i = 0; i < numPoints; i++) {\r\n        const t = i / numPoints;\r\n        const vertexCount = vertices.length;\r\n        \r\n        // Which edge are we on?\r\n        const edgeFloat = t * vertexCount;\r\n        const edgeIndex = Math.floor(edgeFloat) % vertexCount;\r\n        const nextIndex = (edgeIndex + 1) % vertexCount;\r\n        const edgeProgress = edgeFloat - Math.floor(edgeFloat);\r\n        \r\n        // Linear interpolation between vertices\r\n        const v1 = vertices[edgeIndex];\r\n        const v2 = vertices[nextIndex];\r\n        \r\n        points.push({\r\n            x: v1.x + (v2.x - v1.x) * edgeProgress,\r\n            y: v1.y + (v2.y - v1.y) * edgeProgress\r\n        });\r\n    }\r\n    \r\n    return points;\r\n}\r\n\r\n/**\r\n * Generate sun shape - just a circle, rays are visual effects only\r\n */\r\nfunction generateSun(numPoints, numRays = 12) {\r\n    // Sun is just a circle - the rays are rendered as effects, not part of the shape\r\n    return generateCircle(numPoints);\r\n}\r\n\r\n\r\n/**\r\n * Generate suspicion shape (sly grin)\r\n */\r\nfunction generateSuspicion(numPoints) {\r\n    const points = [];\r\n    for (let i = 0; i < numPoints; i++) {\r\n        const t = (i / numPoints) * Math.PI * 2;\r\n        \r\n        let x, y;\r\n        if (t < Math.PI) {\r\n            // Right side - outer arc of the grin\r\n            x = Math.cos(t) * 0.45;\r\n            y = Math.sin(t) * 0.45;\r\n        } else {\r\n            // Left side - inner arc for the mischievous smile\r\n            const innerT = Math.PI * 2 - t;\r\n            x = Math.cos(innerT) * 0.25 - 0.1;\r\n            y = Math.sin(innerT) * 0.35;\r\n        }\r\n        \r\n        points.push({\r\n            x: 0.5 + x,\r\n            y: 0.5 + y\r\n        });\r\n    }\r\n    return points;\r\n}\r\n\r\n/**\r\n * Generate square shape\r\n */\r\nfunction generateSquare(numPoints) {\r\n    const points = [];\r\n    const pointsPerSide = Math.floor(numPoints / 4);\r\n    \r\n    for (let side = 0; side < 4; side++) {\r\n        for (let i = 0; i < pointsPerSide; i++) {\r\n            const t = i / pointsPerSide;\r\n            let x, y;\r\n            \r\n            switch (side) {\r\n                case 0: // Top\r\n                    x = -0.5 + t;\r\n                    y = -0.5;\r\n                    break;\r\n                case 1: // Right\r\n                    x = 0.5;\r\n                    y = -0.5 + t;\r\n                    break;\r\n                case 2: // Bottom\r\n                    x = 0.5 - t;\r\n                    y = 0.5;\r\n                    break;\r\n                case 3: // Left\r\n                    x = -0.5;\r\n                    y = 0.5 - t;\r\n                    break;\r\n            }\r\n            \r\n            points.push({\r\n                x: 0.5 + x * 0.8,\r\n                y: 0.5 + y * 0.8\r\n            });\r\n        }\r\n    }\r\n    return points;\r\n}\r\n\r\n/**\r\n * Generate triangle shape\r\n */\r\nfunction generateTriangle(numPoints) {\r\n    const points = [];\r\n    \r\n    const vertices = [\r\n        { x: 0, y: -0.5 },           // Top\r\n        { x: -0.433, y: 0.25 },      // Bottom left\r\n        { x: 0.433, y: 0.25 }        // Bottom right\r\n    ];\r\n    \r\n    // Calculate perimeter of triangle\r\n    const sides = [\r\n        Math.sqrt(Math.pow(vertices[1].x - vertices[0].x, 2) + Math.pow(vertices[1].y - vertices[0].y, 2)),\r\n        Math.sqrt(Math.pow(vertices[2].x - vertices[1].x, 2) + Math.pow(vertices[2].y - vertices[1].y, 2)),\r\n        Math.sqrt(Math.pow(vertices[0].x - vertices[2].x, 2) + Math.pow(vertices[0].y - vertices[2].y, 2))\r\n    ];\r\n    const perimeter = sides[0] + sides[1] + sides[2];\r\n    \r\n    // Distribute points based on side length\r\n    const pointsPerSide = sides.map(s => Math.round(numPoints * s / perimeter));\r\n    \r\n    // Adjust for rounding errors\r\n    const totalPoints = pointsPerSide.reduce((a, b) => a + b, 0);\r\n    if (totalPoints < numPoints) {\r\n        pointsPerSide[0] += numPoints - totalPoints;\r\n    }\r\n    \r\n    // Generate points along each edge\r\n    for (let side = 0; side < 3; side++) {\r\n        const v1 = vertices[side];\r\n        const v2 = vertices[(side + 1) % 3];\r\n        const sidePoints = pointsPerSide[side];\r\n        \r\n        for (let i = 0; i < sidePoints; i++) {\r\n            // Don't duplicate the corner point\r\n            if (i === sidePoints - 1 && side < 2) continue;\r\n            \r\n            const t = i / sidePoints;\r\n            const x = v1.x + (v2.x - v1.x) * t;\r\n            const y = v1.y + (v2.y - v1.y) * t;\r\n            \r\n            points.push({\r\n                x: 0.5 + x * 0.9,\r\n                y: 0.5 + y * 0.9\r\n            });\r\n        }\r\n    }\r\n    \r\n    // Ensure we have exactly numPoints\r\n    while (points.length < numPoints) {\r\n        points.push(points[points.length - 1]);\r\n    }\r\n    while (points.length > numPoints) {\r\n        points.pop();\r\n    }\r\n    \r\n    return points;\r\n}\r\n\r\n/**\r\n * Shape definitions with their properties\r\n */\r\nexport const SHAPE_DEFINITIONS = {\r\n    circle: {\r\n        points: generateCircle(64),\r\n        shadow: { type: 'none' }\r\n    },\r\n    heart: {\r\n        points: generateHeart(64),\r\n        shadow: { type: 'none' }\r\n    },\r\n    star: {\r\n        points: generateStar(64, 5),\r\n        shadow: { type: 'none' }\r\n    },\r\n    sun: {\r\n        points: generateSun(64, 12),\r\n        shadow: {\r\n            type: 'sun',\r\n            corona: true,\r\n            intensity: 1.5,\r\n            flares: true,\r\n            texture: true,\r\n            turbulence: 0.3\r\n        }\r\n    },\r\n    moon: {\r\n        points: generateMoon(64),\r\n        shadow: {\r\n            type: 'crescent',\r\n            coverage: 0.85,\r\n            angle: -30,\r\n            softness: 0.05,\r\n            offset: 0.7\r\n        }\r\n    },\r\n    lunar: {\r\n        points: generateCircle(64),\r\n        shadow: {\r\n            type: 'lunar',\r\n            coverage: 0.7,\r\n            color: 'rgba(80, 20, 0, 0.8)',\r\n            progression: 'center'\r\n        }\r\n    },\r\n    suspicion: {\r\n        points: generateSuspicion(64),\r\n        shadow: { type: 'none' }\r\n    },\r\n    eclipse: {\r\n        points: generateCircle(64),\r\n        shadow: {\r\n            type: 'lunar',\r\n            coverage: 0.7,\r\n            color: 'rgba(80, 20, 0, 0.8)'\r\n        }\r\n    },\r\n    square: {\r\n        points: generateSquare(64),\r\n        shadow: { type: 'none' }\r\n    },\r\n    triangle: {\r\n        points: generateTriangle(64),\r\n        shadow: { type: 'none' }\r\n    },\r\n    solar: {\r\n        points: generateSun(64, 12),\r\n        shadow: {\r\n            type: 'solar-hybrid',\r\n            // Sun properties (rendered first)\r\n            corona: true,\r\n            intensity: 1.5,\r\n            flares: true,\r\n            texture: true,\r\n            turbulence: 0.3,\r\n            // Lunar shadow overlay (rendered on top) - BLACK for solar eclipse\r\n            lunarOverlay: {\r\n                type: 'lunar',\r\n                coverage: 1.0,  // Full coverage for total eclipse\r\n                color: 'rgba(0, 0, 0, 1.0)',  // Pure black shadow\r\n                progression: 'center'\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default SHAPE_DEFINITIONS;","/**\r\n * ArrayPool - Reusable array pool to reduce garbage collection\r\n * @module ArrayPool\r\n */\r\n\r\nclass ArrayPool {\r\n    constructor() {\r\n        this.pools = new Map(); // Key: size, Value: array of available arrays\r\n        this.inUse = new Set(); // Track arrays currently in use\r\n    }\r\n\r\n    /**\r\n     * Get an array from the pool or create a new one\r\n     * @param {number} size - Size of array needed\r\n     * @param {string} type - Type of array ('float32', 'array', 'uint8')\r\n     * @returns {Array|Float32Array|Uint8Array}\r\n     */\r\n    acquire(size, type = 'array') {\r\n        const key = `${type}_${size}`;\r\n        \r\n        if (!this.pools.has(key)) {\r\n            this.pools.set(key, []);\r\n        }\r\n        \r\n        const pool = this.pools.get(key);\r\n        \r\n        // Try to get from pool\r\n        if (pool.length > 0) {\r\n            const array = pool.pop();\r\n            this.inUse.add(array);\r\n            return array;\r\n        }\r\n        \r\n        // Create new array if pool is empty\r\n        let newArray;\r\n        switch (type) {\r\n            case 'float32':\r\n                newArray = new Float32Array(size);\r\n                break;\r\n            case 'uint8':\r\n                newArray = new Uint8Array(size);\r\n                break;\r\n            default:\r\n                newArray = new Array(size).fill(0);\r\n        }\r\n        \r\n        this.inUse.add(newArray);\r\n        return newArray;\r\n    }\r\n\r\n    /**\r\n     * Return an array to the pool\r\n     * @param {Array|Float32Array|Uint8Array} array - Array to return\r\n     */\r\n    release(array) {\r\n        if (!this.inUse.has(array)) {\r\n            return; // Not from this pool\r\n        }\r\n        \r\n        this.inUse.delete(array);\r\n        \r\n        // Determine type and size\r\n        let type = 'array';\r\n        if (array instanceof Float32Array) type = 'float32';\r\n        else if (array instanceof Uint8Array) type = 'uint8';\r\n        \r\n        const size = array.length;\r\n        const key = `${type}_${size}`;\r\n        \r\n        // Clear the array\r\n        if (type === 'array') {\r\n            array.fill(0);\r\n        } else {\r\n            array.fill(0);\r\n        }\r\n        \r\n        // Return to pool\r\n        if (!this.pools.has(key)) {\r\n            this.pools.set(key, []);\r\n        }\r\n        \r\n        const pool = this.pools.get(key);\r\n        if (pool.length < 10) { // Keep max 10 arrays of each size\r\n            pool.push(array);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all pools\r\n     */\r\n    clear() {\r\n        this.pools.clear();\r\n        this.inUse.clear();\r\n    }\r\n}\r\n\r\n// Create singleton instance\r\nconst arrayPool = new ArrayPool();\r\n\r\nexport default arrayPool;","/**\n * AudioDeformer - Handles audio-based shape deformation\n * @module core/morpher/AudioDeformer\n */\n\nexport class AudioDeformer {\n    constructor(morpher) {\n        this.morpher = morpher;\n        \n        // Audio deformation state\n        this.audioDeformation = 0;\n        this.vocalEnergy = 0;\n        this.vocalEffectActive = false;\n        this.beatGlitchIntensity = 0;\n        this.glitchPoints = [];\n        \n        // Frequency analysis\n        this.bassEnergy = 0;\n        this.vocalPresence = 0;\n        this.highFreqEnergy = 0;\n        \n        // Transient detection\n        this.transientActive = false;\n        this.transientStrength = 0;\n        this.transientDecay = 0.92;\n        this.transientHoldTime = 8;\n        this.transientHoldCounter = 0;\n    }\n\n    /**\n     * Apply audio deformation to shape points\n     * @param {Array} points - Shape points to deform\n     * @returns {Array} Deformed points\n     */\n    applyAudioDeformation(points) {\n        // Validate points\n        if (!points || points.length === 0) {\n            return this.morpher.generateFallbackCircle();\n        }\n        \n        // Get fresh frequency data if analyzer is available\n        if (this.morpher.audioAnalyzer && this.morpher.audioAnalyzer.currentFrequencies && this.morpher.audioAnalyzer.currentFrequencies.length > 0) {\n            this.morpher.frequencyData = [...this.morpher.audioAnalyzer.currentFrequencies];\n            \n            \n            // We have 32 frequency bands (0-31) that cover the full spectrum\n            // Approximate mapping: each band covers ~750 Hz (24000 Hz / 32 bands)\n            // Band 0-1: Sub-bass\n            // Band 2-4: Bass\n            // Band 5-15: Midrange\n            // Band 16-25: Upper mids/presence\n            // Band 26-31: Treble\n            \n            // BASS THUMP DETECTION: Only trigger on meaty kicks\n            let currentBassEnergy = 0;\n            let bassCount = 0;\n            \n            // Focus on low bass (bands 0-2) for the real thumps\n            for (let i = 0; i <= 2 && i < this.morpher.frequencyData.length; i++) {\n                currentBassEnergy += this.morpher.frequencyData[i];\n                bassCount++;\n            }\n            if (bassCount > 0) {\n                currentBassEnergy /= bassCount;\n            }\n            \n            // Initialize bass thump detection\n            if (!this.morpher.bassPeakHistory) {\n                this.morpher.bassPeakHistory = [];\n                this.morpher.bassThumpTimer = 0;\n            }\n            \n            // Track recent bass peaks\n            this.morpher.bassPeakHistory.push(currentBassEnergy);\n            if (this.morpher.bassPeakHistory.length > 20) { // ~0.6 seconds of history\n                this.morpher.bassPeakHistory.shift();\n            }\n            \n            // Calculate dynamic threshold\n            const avgBass = this.morpher.bassPeakHistory.reduce((a, b) => a + b, 0) / this.morpher.bassPeakHistory.length;\n            const maxBass = Math.max(...this.morpher.bassPeakHistory);\n            \n            // THUMP = small increase above baseline\n            // Check if we're using microphone (lower levels) or audio file (higher levels)\n            const isMicrophoneMode = this.morpher.audioAnalyzer && this.morpher.audioAnalyzer.microphoneStream;\n            const minThreshold = isMicrophoneMode ? 0.15 : 0.25; // Lower threshold for both, but mic is lowest\n            \n            const isThump = currentBassEnergy > avgBass * 1.08 && // Just 8% above average\n                           currentBassEnergy > minThreshold;\n            \n            if (isThump) {\n                // Boost the effect more for microphone input\n                const effectMultiplier = isMicrophoneMode ? 8 : 6; // Increase audio multiplier too\n                this.bassEnergy = Math.min(1.0, (currentBassEnergy - avgBass) * effectMultiplier);\n                this.morpher.bassThumpTimer = 12; // Shorter hold (12 frames ~0.4 seconds)\n            } else if (this.morpher.bassThumpTimer > 0) {\n                this.morpher.bassThumpTimer--;\n                this.bassEnergy *= 0.9; // Slower decay for smooth wobble\n            } else {\n                this.bassEnergy = 0;\n            }\n            \n            // VOCAL PRESENCE DETECTION: 2-4 kHz range where vocals cut through\n            // With FFT 2048 and 48kHz sample rate:\n            // - 1024 bins cover 0-24kHz\n            // - Each bin = ~23.4 Hz\n            // - 32 bands get 32 bins each (1024/32)\n            // - Each band = ~750 Hz\n            \n            // Band mapping (LINEAR):\n            // Band 2: 1500-2250 Hz\n            // Band 3: 2250-3000 Hz  } Vocal presence range\n            // Band 4: 3000-3750 Hz\n            // Band 5: 3750-4500 Hz\n            \n            let vocalPresenceEnergy = 0;\n            let vocalBandCount = 0;\n            \n            // SPECTRAL FLUX: Detect onsets in the VOCAL RANGE you identified (bands 4-15, emphasis on 11)\n            // This targets the actual vocal/lead frequencies in Electric Glow\n            \n            // Initialize spectral history if needed\n            if (!this.morpher.spectralHistory) {\n                this.morpher.spectralHistory = [];\n                this.morpher.spectralFluxHistory = [];\n                // Music detection initialization\n                this.morpher.onsetThreshold = 0;\n                this.morpher.musicDetector.reset();\n                this.morpher.detectedBPM = 0;\n                \n                // Time signature detection\n                this.morpher.onsetStrengths = []; // Array of {time: ms, strength: 0-1, bassWeight: 0-1}\n                this.morpher.detectedTimeSignature = null;\n                this.morpher.timeSignatureConfidence = 0;\n                this.morpher.measureStartTime = 0;\n                this.morpher.timeSignatureHistory = [];\n                this.morpher.timeSignatureLocked = false;\n            }\n            \n            // Store current spectrum\n            const currentSpectrum = [...this.morpher.frequencyData];\n            \n            // SIMPLER APPROACH: Look for changes in vocal bands with bass rejection\n            let spectralFlux = 0;\n            let bassFlux = 0;\n            \n            if (this.morpher.spectralHistory.length > 0) {\n                const prevSpectrum = this.morpher.spectralHistory[this.morpher.spectralHistory.length - 1];\n                \n                // Calculate bass flux (bands 0-2)\n                for (let i = 0; i <= 2 && i < currentSpectrum.length; i++) {\n                    const diff = currentSpectrum[i] - prevSpectrum[i];\n                    if (diff > 0) bassFlux += diff;\n                }\n                \n                // Calculate flux in extended vocal range (bands 4-15)\n                // But weight the center (9-13) more heavily\n                for (let i = 4; i <= 15 && i < currentSpectrum.length; i++) {\n                    const diff = currentSpectrum[i] - prevSpectrum[i];\n                    if (diff > 0) {\n                        // Extra weight for bands 9-13\n                        const weight = (i >= 9 && i <= 13) ? 2.0 : 1.0;\n                        spectralFlux += diff * weight;\n                    }\n                }\n                \n                // Suppress if there's a strong bass hit (likely a drum)\n                if (bassFlux > 0.15) {\n                    spectralFlux *= 0.3; // Reduce by 70% for drum hits\n                }\n            }\n            \n            // Store history (keep last 30 frames for ~1 second at 30fps)\n            this.morpher.spectralHistory.push(currentSpectrum);\n            if (this.morpher.spectralHistory.length > 30) {\n                this.morpher.spectralHistory.shift();\n            }\n            \n            // Store flux history for adaptive thresholding\n            this.morpher.spectralFluxHistory.push(spectralFlux);\n            if (this.morpher.spectralFluxHistory.length > 30) {\n                this.morpher.spectralFluxHistory.shift();\n            }\n            \n            // Calculate adaptive threshold (median + margin)\n            if (this.morpher.spectralFluxHistory.length >= 10) {\n                const sorted = [...this.morpher.spectralFluxHistory].sort((a, b) => a - b);\n                const median = sorted[Math.floor(sorted.length / 2)];\n                const mean = sorted.reduce((a, b) => a + b, 0) / sorted.length;\n                \n                // Threshold is slightly above the median to catch significant onsets\n                this.morpher.onsetThreshold = median + (mean - median) * 0.5;\n            }\n            \n            // Detect onset (transient/attack) - focus on stronger transients for BPM\n            // Use higher threshold for BPM detection vs vocal detection\n            const isVocalOnset = spectralFlux > this.morpher.onsetThreshold * 1.2 && spectralFlux > 0.02;\n            const isBeatOnset = spectralFlux > this.morpher.onsetThreshold * 2.0 && spectralFlux > 0.05; // Stronger threshold for beats\n            \n            // Smooth the detection with a short hold time\n            if (isVocalOnset) {\n                this.transientHoldTime = 8; // Hold for 8 frames (~250ms) for visible glitches\n                this.morpher.vocalGlowBoost = 0.3; // Add 30% glow boost on vocal onset\n            }\n            \n            // BPM DETECTION: Only track stronger onsets that are likely beats\n            if (isBeatOnset) {\n                const now = performance.now();\n                \n                // Store onset strength for time signature detection\n                const onsetStrength = {\n                    time: now,\n                    strength: spectralFlux / (this.morpher.onsetThreshold || 1), // Normalized strength\n                    bassWeight: bassFlux // Keep bass weight for downbeat detection\n                };\n                this.morpher.onsetStrengths.push(onsetStrength);\n                // Keep last 40 onsets (about 16-20 beats)\n                if (this.morpher.onsetStrengths.length > 40) {\n                    this.morpher.onsetStrengths.shift();\n                }\n                \n                // Delegate onset tracking to music detector\n                this.morpher.musicDetector.addOnset(now, spectralFlux);\n                \n            }\n            \n            // Update BPM detection through music detector\n            this.morpher.musicDetector.update(performance.now());\n            this.morpher.detectedBPM = this.morpher.musicDetector.detectedBPM;\n            this.morpher.bpmConfidence = this.morpher.musicDetector.bpmConfidence;\n            \n            // Update local references for compatibility\n            if (this.morpher.detectedBPM > 0 && this.morpher.bpmConfidence > 0.8) {\n                // Clear fast mode once we've detected BPM with confidence\n                if (this.morpher.forceFastDetection) {\n                    this.morpher.forceFastDetection = false;\n                }\n            }\n            \n            if (this.transientHoldTime > 0) {\n                this.transientHoldTime--;\n            }\n            \n            // Decay glow boost smoothly\n            if (this.morpher.vocalGlowBoost > 0) {\n                this.morpher.vocalGlowBoost *= 0.92; // Smooth decay\n            }\n            \n            // Set vocal presence based on flux intensity\n            this.vocalPresence = spectralFlux;\n            \n            // No spectral contrast needed\n            const spectralContrast = 0;\n            \n            // Update rolling averages for smarter detection\n            this.morpher.bassHistory[this.morpher.historyIndex] = this.bassEnergy;\n            this.morpher.vocalHistory[this.morpher.historyIndex] = this.vocalPresence;\n            this.morpher.historyIndex = (this.morpher.historyIndex + 1) % this.morpher.bassHistory.length;\n            \n            // Calculate averages\n            const bassAvg = this.morpher.bassHistory.reduce((a, b) => a + b, 0) / this.morpher.bassHistory.length;\n            const vocalAvg = this.morpher.vocalHistory.reduce((a, b) => a + b, 0) / this.morpher.vocalHistory.length;\n            \n            // Bass effect is now controlled by thump detection above\n            this.morpher.bassEffectActive = this.morpher.bassThumpTimer > 0;\n            \n            // ENHANCED VOCAL DETECTION\n            // Vocals are present when:\n            // 1. Bands 9-13 have high contrast vs background\n            // 2. Energy is above minimum threshold\n            // 3. Either sudden spike OR sustained presence\n            \n            this.morpher.lastVocalPresence = this.morpher.lastVocalPresence || 0;\n            const vocalDelta = this.vocalPresence - this.morpher.lastVocalPresence;\n            this.morpher.lastVocalPresence = this.vocalPresence;\n            \n            // Transient detection - triggers on musical onsets\n            this.vocalEffectActive = this.transientHoldTime > 0;\n            \n        }\n        \n        // If no analyzer or no frequency data, fallback to using audioDeformation for effects\n        // This is especially important for microphone input where bass frequencies might be weak\n        const hasFrequencyData = this.morpher.frequencyData && this.morpher.frequencyData.some(f => f > 0.01);\n        if (!this.morpher.audioAnalyzer || !hasFrequencyData) {\n            // Enhanced fallback for microphone input\n            // Use audioDeformation as a proxy for bass effect when no frequency data\n            if (this.audioDeformation > 0.15) { // Lower threshold for mic sensitivity\n                this.morpher.bassEffectActive = true;\n                this.bassEnergy = Math.min(1.0, this.audioDeformation * 0.8); // Stronger response\n                \n                // Simulate bass thump timer for wobble effect\n                if (!this.morpher.bassThumpTimer || this.morpher.bassThumpTimer <= 0) {\n                    this.morpher.bassThumpTimer = 12; // Start wobble\n                }\n            } else if (this.morpher.bassThumpTimer > 0) {\n                // Decay the wobble\n                this.morpher.bassThumpTimer--;\n                this.bassEnergy *= 0.9;\n            }\n            \n            // Use vocalEnergy for vocal effects\n            if (this.vocalEnergy > 0.2) { // Lower threshold for mic\n                this.vocalEffectActive = true;\n                this.vocalPresence = this.vocalEnergy;\n            }\n        }\n        \n        // ONLY apply fallback bass wobble for microphone input when no frequency data\n        // This ensures wobble works for mic but NOT for web audio\n        if (!hasFrequencyData && this.audioDeformation > 0.15 && !this.morpher.bassEffectActive) {\n            this.morpher.bassEffectActive = true;\n            this.bassEnergy = Math.max(this.bassEnergy, this.audioDeformation * 0.8);\n            if (!this.morpher.bassThumpTimer || this.morpher.bassThumpTimer <= 0) {\n                this.morpher.bassThumpTimer = 12;\n            }\n        }\n        \n        // No deformation if no audio\n        const hasAudio = this.audioDeformation !== 0 || this.bassEnergy > 0.01 || \n                        this.vocalPresence > 0.01;\n        if (!hasAudio) {\n            return points;\n        }\n        \n        const deformed = [];\n        const center = { x: 0.5, y: 0.5 };\n        const time = Date.now() / 1000; // Time in seconds\n        \n        // Update undulation phase only when bass is active\n        if (this.morpher.bassEffectActive) {\n            // Randomly change direction occasionally\n            if (Math.random() < 0.05) { // 5% chance per frame\n                this.morpher.undulationDirection *= -1; // Reverse direction\n            }\n            this.morpher.undulationPhase += 0.08 * this.morpher.undulationDirection; // Apply direction\n        }\n        \n        // Update glitch points on beat\n        if (this.morpher.audioAnalyzer && this.beatGlitchIntensity > 0) {\n            this.beatGlitchIntensity *= 0.9; // Decay glitch intensity\n        }\n        \n        // Create SUBTLE glitch points when vocal presence is detected\n        if (this.vocalEffectActive && Math.random() < 0.2) { // 20% chance (reduced)\n            this.glitchPoints = [];\n            const numGlitches = 2 + Math.floor(Math.random() * 2); // 2-3 points (fewer)\n            for (let i = 0; i < numGlitches; i++) {\n                this.glitchPoints.push({\n                    index: Math.floor(Math.random() * points.length),\n                    intensity: 0.02 + Math.random() * 0.03, // 0.02-0.05 intensity (much subtler)\n                    decay: 0.94 + Math.random() * 0.02 // Slightly slower decay for smoothness\n                });\n            }\n        }\n        \n        // Update existing glitch points\n        this.glitchPoints = this.glitchPoints.filter(g => {\n            g.intensity *= g.decay;\n            return g.intensity > 0.01;\n        });\n        \n        for (let i = 0; i < points.length; i++) {\n            const point = points[i];\n            \n            // Handle invalid point\n            if (!point || typeof point.x === 'undefined' || typeof point.y === 'undefined') {\n                const angle = (i / points.length) * Math.PI * 2;\n                deformed.push({\n                    x: 0.5 + Math.cos(angle) * 0.5,\n                    y: 0.5 + Math.sin(angle) * 0.5\n                });\n                continue;\n            }\n            \n            // Calculate base position\n            const dx = point.x - center.x;\n            const dy = point.y - center.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            const angle = Math.atan2(dy, dx);\n            \n            // 1. Base expansion from overall amplitude - always active for responsiveness\n            const baseExpansion = Math.abs(this.audioDeformation) * 0.12; // Reduced to 12%\n            \n            // 2. Bass-triggered wiggle effect\n            let undulation = 0;\n            let breathPulse = 0;\n            \n            if (this.morpher.bassEffectActive) {\n                // Strong bass-driven undulation\n                const waveCount = 2; // 2 waves for clean look\n                const wiggleIntensity = this.bassEnergy * 0.25; // Increased from 0.15 to 0.25\n                undulation = Math.sin(angle * waveCount + this.morpher.undulationPhase) * wiggleIntensity;\n                \n                // Subtle breathing pulse synced with undulation\n                breathPulse = Math.sin(this.morpher.undulationPhase * 0.5) * this.bassEnergy * 0.08; // Increased from 0.05\n            }\n            \n            // 5. Check for glitch points - SUBTLE shimmer/ripple effect\n            let glitchOffset = 0;\n            const glitchPoint = this.glitchPoints.find(g => g.index === i);\n            if (glitchPoint) {\n                // Create a subtle ripple/shimmer instead of harsh glitch\n                const shimmerTime = Date.now() * 0.015; // Slower oscillation\n                const shimmer = Math.sin(shimmerTime + i * 0.5) * Math.cos(shimmerTime * 0.7);\n                glitchOffset = glitchPoint.intensity * shimmer * 0.5; // Can go in or out, very subtle\n            }\n            \n            // Combine all deformations - simpler, more selective\n            const totalDeformation = 1 + baseExpansion + undulation + breathPulse + glitchOffset;\n            \n            const newDistance = distance * Math.max(0.8, totalDeformation); // Never shrink below 80%\n            \n            deformed.push({\n                x: center.x + Math.cos(angle) * newDistance,\n                y: center.y + Math.sin(angle) * newDistance\n            });\n        }\n        \n        return deformed;\n    }\n\n    /**\n     * Set audio deformation value\n     * @param {number} value - Deformation value (0-1)\n     */\n    setAudioDeformation(value) {\n        this.audioDeformation = Math.max(0, Math.min(1, value));\n        this.vocalEffectActive = value > 0.01;\n    }\n\n    /**\n     * Set vocal energy for shape pulsing\n     * @param {number} value - Energy value (0-1)\n     */\n    setVocalEnergy(value) {\n        this.vocalEnergy = Math.max(0, Math.min(1, value));\n        this.vocalEffectActive = value > 0.01;\n    }\n\n    /**\n     * Update frequency band energies\n     * @param {Object} frequencyData - Frequency analysis data\n     */\n    updateFrequencyBands(frequencyData) {\n        if (frequencyData) {\n            this.bassEnergy = frequencyData.bass || 0;\n            this.vocalPresence = frequencyData.vocal || 0;\n            this.highFreqEnergy = frequencyData.high || 0;\n        }\n    }\n\n    /**\n     * Process transient/beat detection\n     * @param {number} amplitude - Current audio amplitude\n     * @param {number} threshold - Beat threshold\n     */\n    processTransient(amplitude, threshold) {\n        if (amplitude > threshold) {\n            this.transientActive = true;\n            this.transientStrength = amplitude;\n            this.transientHoldCounter = this.transientHoldTime;\n        } else if (this.transientHoldCounter > 0) {\n            this.transientHoldCounter--;\n        } else {\n            this.transientStrength *= this.transientDecay;\n            if (this.transientStrength < 0.01) {\n                this.transientActive = false;\n            }\n        }\n    }\n\n    /**\n     * Get current deformation state\n     */\n    getState() {\n        return {\n            audioDeformation: this.audioDeformation,\n            vocalEnergy: this.vocalEnergy,\n            vocalEffectActive: this.vocalEffectActive,\n            beatGlitchIntensity: this.beatGlitchIntensity,\n            transientActive: this.transientActive,\n            transientStrength: this.transientStrength\n        };\n    }\n\n    /**\n     * Reset all audio effects\n     */\n    reset() {\n        this.audioDeformation = 0;\n        this.vocalEnergy = 0;\n        this.vocalEffectActive = false;\n        this.beatGlitchIntensity = 0;\n        this.glitchPoints = [];\n        this.transientActive = false;\n        this.transientStrength = 0;\n    }\n}\n\nexport default AudioDeformer;","/**\r\n * AgentBPMDetector - Fast, agent-based BPM detection\r\n * Uses multiple competing hypotheses that converge on the true tempo\r\n * @module core/morpher/AgentBPMDetector\r\n */\r\n\r\nexport class AgentBPMDetector {\r\n    constructor() {\r\n        // Agent pool\r\n        this.agents = [];\r\n        this.maxAgents = 8;\r\n\r\n        // Detection state\r\n        this.isActive = false;\r\n        this.confidence = 0;\r\n        this.lockedBPM = 0;\r\n        this.lastBeatTime = 0;\r\n\r\n        // Audio analysis\r\n        this.peakHistory = [];\r\n        this.maxHistoryLength = 100; // ~3 seconds at 30fps\r\n\r\n        // Configuration\r\n        this.minBPM = 40;\r\n        this.maxBPM = 300;\r\n        this.convergenceThreshold = 0.7; // Lower threshold for faster lock\r\n        this.subdivisionPreference = {\r\n            slow: { min: 40, max: 80, prefer: 1 },     // Keep normal for slow (40-80 is already slow)\r\n            normal: { min: 80, max: 140, prefer: 1 },  // Normal for mid\r\n            fast: { min: 140, max: 180, prefer: 0.5 }, // Half for moderately fast\r\n            veryfast: { min: 180, max: 300, prefer: 0.5 } // Half for very fast\r\n        };\r\n    }\r\n\r\n    /**\r\n     * BPM Agent - represents one tempo hypothesis\r\n     */\r\n    createAgent(bpm, subdivision = 1) {\r\n        return {\r\n            bpm: bpm,\r\n            subdivision: subdivision,\r\n            effectiveBPM: bpm * subdivision,\r\n            phase: 0,\r\n            confidence: 0.5,\r\n            hits: 0,\r\n            misses: 0,\r\n            lastBeatTime: performance.now(),\r\n            beatInterval: 60000 / (bpm * subdivision)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initialize agents with diverse starting hypotheses\r\n     */\r\n    initializeAgents(initialGuess = 120) {\r\n        this.agents = [];\r\n\r\n        // Prefer lower subdivisions - if initial guess is high, try halving it\r\n        let subdivisions = [1]; // Start with normal\r\n\r\n        if (initialGuess > 180) {\r\n            // Very fast - prefer half speed\r\n            subdivisions = [0.5, 0.75, 1];\r\n        } else if (initialGuess > 140) {\r\n            // Fast - try half and normal\r\n            subdivisions = [0.5, 0.75, 1];\r\n        } else if (initialGuess < 60) {\r\n            // Very slow - try doubling\r\n            subdivisions = [1, 1.5, 2];\r\n        } else {\r\n            // Normal range - try various\r\n            subdivisions = [0.5, 1, 1.5];\r\n        }\r\n\r\n        subdivisions.forEach(sub => {\r\n            const agent = this.createAgent(initialGuess, sub);\r\n            // Give preference to lower effective BPMs\r\n            if (initialGuess * sub < 140) {\r\n                agent.confidence = 0.6; // Slight boost for sensible BPMs\r\n            }\r\n            this.agents.push(agent);\r\n        });\r\n\r\n        // Add some agents that try to find a lower BPM if initial is high\r\n        if (initialGuess > 140) {\r\n            this.agents.push(this.createAgent(initialGuess / 2, 1));\r\n            this.agents.push(this.createAgent(initialGuess / 2, 1.5));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Process new audio peak/onset\r\n     */\r\n    processPeak(strength, time = performance.now()) {\r\n        // Add to history\r\n        this.peakHistory.push({ strength, time });\r\n        if (this.peakHistory.length > this.maxHistoryLength) {\r\n            this.peakHistory.shift();\r\n        }\r\n\r\n        // Only process if we have enough history\r\n        if (this.peakHistory.length < 4) return;\r\n\r\n        // If not active, initialize from FFT guess\r\n        if (!this.isActive || this.agents.length === 0) {\r\n            const fftGuess = this.getFFTEstimate();\r\n            this.initializeAgents(fftGuess);\r\n            this.isActive = true;\r\n        }\r\n\r\n        // If already locked, be more conservative about changes\r\n        if (this.lockedBPM > 0 && this.confidence > 0.7) {\r\n            // Only update agents, don't evolve as aggressively\r\n            this.agents.forEach(agent => {\r\n                this.scoreAgent(agent, time, strength);\r\n            });\r\n\r\n            // Only evolve if confidence has dropped significantly\r\n            if (this.confidence < 0.6) {\r\n                this.evolveAgents();\r\n                this.checkConvergence();\r\n            }\r\n        } else {\r\n            // Not locked yet, be aggressive\r\n            // Score each agent against the peak\r\n            this.agents.forEach(agent => {\r\n                this.scoreAgent(agent, time, strength);\r\n            });\r\n\r\n            // Evolution step\r\n            this.evolveAgents();\r\n\r\n            // Check for convergence\r\n            this.checkConvergence();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Score agent based on how well it predicts this peak\r\n     */\r\n    scoreAgent(agent, peakTime, peakStrength) {\r\n        const timeSinceLastBeat = peakTime - agent.lastBeatTime;\r\n        const expectedNextBeat = agent.beatInterval;\r\n\r\n        // Calculate phase alignment (0-1, where 1 is perfect)\r\n        const phaseDiff = Math.abs((timeSinceLastBeat % expectedNextBeat) / expectedNextBeat - 0.5) * 2;\r\n        const alignment = 1 - phaseDiff;\r\n\r\n        // Strong peaks matter more\r\n        const weightedAlignment = alignment * peakStrength;\r\n\r\n        // Update agent stats (more aggressive confidence building)\r\n        if (alignment > 0.7) { // Lower threshold\r\n            agent.hits++;\r\n            agent.confidence = Math.min(1, agent.confidence + 0.1); // Faster increase\r\n\r\n            // Update phase if we're close\r\n            if (alignment > 0.85) {\r\n                agent.lastBeatTime = peakTime;\r\n            }\r\n        } else if (alignment < 0.3) {\r\n            agent.misses++;\r\n            agent.confidence = Math.max(0, agent.confidence - 0.03);\r\n        }\r\n\r\n        // Decay confidence slowly for inactive agents\r\n        agent.confidence *= 0.998; // Slower decay\r\n    }\r\n\r\n    /**\r\n     * Evolve agents - kill weak ones, spawn variations of strong ones\r\n     */\r\n    evolveAgents() {\r\n        // Sort by confidence\r\n        this.agents.sort((a, b) => b.confidence - a.confidence);\r\n\r\n        // Kill weakest if we have too many\r\n        if (this.agents.length > this.maxAgents) {\r\n            this.agents = this.agents.slice(0, this.maxAgents);\r\n        }\r\n\r\n        // If top agent is very confident, spawn slight variations\r\n        const bestAgent = this.agents[0];\r\n        if (bestAgent.confidence > 0.7 && this.agents.length < this.maxAgents) {\r\n            // Try slight BPM variations\r\n            const variation = 1 + (Math.random() - 0.5) * 0.02; // ±1%\r\n            const newAgent = this.createAgent(\r\n                bestAgent.bpm * variation,\r\n                bestAgent.subdivision\r\n            );\r\n            newAgent.confidence = bestAgent.confidence * 0.8;\r\n            this.agents.push(newAgent);\r\n        }\r\n\r\n        // Kill agents with very low confidence\r\n        this.agents = this.agents.filter(a => a.confidence > 0.1);\r\n    }\r\n\r\n    /**\r\n     * Check if agents have converged on a tempo\r\n     */\r\n    checkConvergence() {\r\n        if (this.agents.length === 0) return;\r\n\r\n        const bestAgent = this.agents[0];\r\n\r\n        // Need high confidence and clear winner\r\n        if (bestAgent.confidence > this.convergenceThreshold) {\r\n            // Check if other top agents agree (within 5% for faster convergence)\r\n            const similarAgents = this.agents.filter(a =>\r\n                Math.abs(a.effectiveBPM - bestAgent.effectiveBPM) / bestAgent.effectiveBPM < 0.05\r\n            );\r\n\r\n            // Only need 2 agents to agree for faster lock\r\n            if (similarAgents.length >= Math.min(2, this.agents.length * 0.3)) {\r\n                // We have convergence!\r\n                this.lockedBPM = Math.round(bestAgent.bpm);\r\n                this.confidence = bestAgent.confidence;\r\n\r\n                // Auto-select best subdivision\r\n                this.autoSelectSubdivision();\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Auto-select subdivision based on BPM range\r\n     */\r\n    autoSelectSubdivision() {\r\n        for (const [range, config] of Object.entries(this.subdivisionPreference)) {\r\n            if (this.lockedBPM >= config.min && this.lockedBPM < config.max) {\r\n                // Find agent with preferred subdivision\r\n                const preferredAgent = this.agents.find(a =>\r\n                    Math.abs(a.bpm - this.lockedBPM) < 2 &&\r\n                    Math.abs(a.subdivision - config.prefer) < 0.1\r\n                );\r\n\r\n                if (preferredAgent) {\r\n                    return config.prefer;\r\n                }\r\n            }\r\n        }\r\n        return 1; // Default\r\n    }\r\n\r\n    /**\r\n     * Get rough BPM estimate from FFT (frequency domain)\r\n     */\r\n    getFFTEstimate() {\r\n        if (this.peakHistory.length < 4) return 120; // Default\r\n\r\n        // Calculate intervals between recent peaks\r\n        const recentPeaks = this.peakHistory.slice(-10);\r\n        const intervals = [];\r\n\r\n        for (let i = 1; i < recentPeaks.length; i++) {\r\n            intervals.push(recentPeaks[i].time - recentPeaks[i-1].time);\r\n        }\r\n\r\n        if (intervals.length === 0) return 120;\r\n\r\n        // Find most common interval (mode)\r\n        intervals.sort((a, b) => a - b);\r\n        const median = intervals[Math.floor(intervals.length / 2)];\r\n\r\n        // Convert to BPM\r\n        let estimatedBPM = 60000 / median;\r\n\r\n        // Sanity check - if way out of range, try doubling/halving\r\n        if (estimatedBPM < this.minBPM) {\r\n            estimatedBPM *= 2;\r\n        } else if (estimatedBPM > this.maxBPM) {\r\n            estimatedBPM /= 2;\r\n        }\r\n\r\n        return Math.max(this.minBPM, Math.min(this.maxBPM, estimatedBPM));\r\n    }\r\n\r\n    /**\r\n     * Force reset detection with new seed\r\n     */\r\n    reset(seedBPM = null) {\r\n        this.agents = [];\r\n        this.confidence = 0;\r\n        this.lockedBPM = 0;\r\n        this.peakHistory = [];\r\n\r\n        if (seedBPM) {\r\n            this.initializeAgents(seedBPM);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get current best BPM estimate\r\n     */\r\n    getBPM() {\r\n        if (this.lockedBPM > 0 && this.confidence > 0.8) {\r\n            return this.lockedBPM;\r\n        }\r\n\r\n        if (this.agents.length > 0) {\r\n            return Math.round(this.agents[0].bpm);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Get recommended subdivision\r\n     */\r\n    getSubdivision() {\r\n        if (this.agents.length > 0) {\r\n            const bestAgent = this.agents[0];\r\n\r\n            // Check BPM range preferences\r\n            const bpm = bestAgent.bpm;\r\n            for (const [range, config] of Object.entries(this.subdivisionPreference)) {\r\n                if (bpm >= config.min && bpm < config.max) {\r\n                    return config.prefer;\r\n                }\r\n            }\r\n\r\n            return bestAgent.subdivision;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Get detection status\r\n     */\r\n    getStatus() {\r\n        return {\r\n            bpm: this.getBPM(),\r\n            subdivision: this.getSubdivision(),\r\n            confidence: this.confidence,\r\n            locked: this.lockedBPM > 0 && this.confidence > 0.8,\r\n            agentCount: this.agents.length,\r\n            topAgents: this.agents.slice(0, 3).map(a => ({\r\n                bpm: Math.round(a.bpm),\r\n                subdivision: a.subdivision,\r\n                confidence: a.confidence.toFixed(2)\r\n            }))\r\n        };\r\n    }\r\n}","/**\n * MusicDetector - Handles BPM and time signature detection\n * @module core/morpher/MusicDetector\n */\n\nimport { AgentBPMDetector } from './AgentBPMDetector.js';\n\nexport class MusicDetector {\n    constructor() {\n        // Beat detection state\n        this.onsetIntervals = [];\n        this.onsetStrengths = [];\n        this.lastOnsetTime = 0;\n        this.onsetThreshold = 0.3;\n\n        // BPM detection\n        this.detectedBPM = 0;\n        this.bpmConfidence = 0;\n        this.lastBPMCalculation = 0;\n        this.bpmCalculationInterval = 2000; // Recalculate every 2 seconds\n\n        // BPM tracking\n        this.bpmHistory = [];\n        this.tempoLocked = false;\n        this.fundamentalBPM = 0;\n\n        // Agent-based detector for fast convergence\n        this.agentDetector = new AgentBPMDetector();\n        this.useAgentDetection = true; // Flag to enable/disable\n\n        // Time signature detection\n        this.timeSignature = '4/4';\n        this.detectedTimeSignature = null;\n        this.timeSignatureConfidence = 0;\n        this.timeSignatureHistory = [];\n        this.timeSignatureLocked = false;\n        this.downbeatPhase = 0;\n        this.measureLength = 4;\n        this.measureStartTime = 0;\n\n        // Music state\n        this.isMusicalContent = false;\n        this.musicalityScore = 0;\n\n        // Fast detection mode\n        this.forceFastDetection = false;\n    }\n\n    /**\n     * Calculate BPM from onset intervals with improved stability\n     * @returns {number} Detected BPM\n     */\n    calculateBPM() {\n        // Try agent detector first for faster results\n        if (this.useAgentDetection) {\n            const agentStatus = this.agentDetector.getStatus();\n            if (agentStatus.locked && agentStatus.confidence > 0.6) { // Lower threshold\n                // Use agent's locked BPM\n                this.detectedBPM = agentStatus.bpm;\n                this.bpmConfidence = agentStatus.confidence;\n                this.tempoLocked = true;\n                this.fundamentalBPM = agentStatus.bpm;\n\n                // Update history\n                this.bpmHistory.push(this.detectedBPM);\n                if (this.bpmHistory.length > 10) {\n                    this.bpmHistory.shift();\n                }\n\n                return this.detectedBPM;\n            } else if (agentStatus.bpm > 0 && agentStatus.confidence > 0.4) { // Lower threshold\n                // Use agent's estimate if somewhat confident\n                this.detectedBPM = agentStatus.bpm;\n                this.bpmConfidence = agentStatus.confidence;\n\n                // Also mark as tempo locked if confidence is decent\n                if (agentStatus.confidence > 0.6) {\n                    this.tempoLocked = true;\n                }\n\n                return this.detectedBPM;\n            }\n        }\n\n        // Fall back to original method if agent not ready\n        if (this.onsetIntervals.length < 4) return this.detectedBPM;\n        \n        // Use appropriate window size based on available data\n        const analysisWindow = this.onsetIntervals.slice(-15);\n        \n        // Find tempo candidates using autocorrelation-like approach\n        const tempoCandidates = this.findTempoCandidates(analysisWindow);\n        if (tempoCandidates.length === 0) return this.detectedBPM;\n        \n        // Get the best tempo candidate\n        const bestCandidate = tempoCandidates[0];\n        const candidateBPM = Math.round(60000 / bestCandidate.interval);\n        \n        // If we haven't locked a tempo yet, establish the fundamental\n        if (!this.tempoLocked && this.bpmHistory.length > 3) {\n            // Check if we have consistent readings\n            const recentBPMs = this.bpmHistory.slice(-3);\n            const avgRecent = recentBPMs.reduce((a, b) => a + b, 0) / recentBPMs.length;\n            const variance = recentBPMs.reduce((sum, bpm) => sum + Math.pow(bpm - avgRecent, 2), 0) / recentBPMs.length;\n            \n            // Lock faster with tighter variance requirement\n            if (variance < 5) { // Less than ~2 BPM standard deviation - much tighter\n                this.fundamentalBPM = Math.round(avgRecent);\n                this.tempoLocked = true;\n                this.bpmConfidence = 1.0;\n            }\n        }\n        \n        // Check if new BPM is a harmonic of the fundamental\n        let finalBPM = candidateBPM;\n        if (this.tempoLocked) {\n            const harmonic = this.checkHarmonicRelation(candidateBPM, this.fundamentalBPM);\n            if (harmonic) {\n                // It's a valid harmonic, adjust to fundamental\n                finalBPM = this.fundamentalBPM;\n                this.bpmConfidence = Math.min(1.0, this.bpmConfidence + 0.1);\n            } else {\n                // Not a harmonic - check if we should update fundamental\n                this.bpmConfidence *= 0.9;\n                \n                // Only change if confidence is very low and new tempo is strong\n                if (this.bpmConfidence < 0.3 && bestCandidate.strength > 0.8) {\n                    this.fundamentalBPM = candidateBPM;\n                    this.bpmConfidence = 0.5;\n                } else {\n                    // Stick with fundamental\n                    finalBPM = this.fundamentalBPM;\n                }\n            }\n        }\n        \n        // Update history\n        this.bpmHistory.push(finalBPM);\n        if (this.bpmHistory.length > 10) {\n            this.bpmHistory.shift();\n        }\n        \n        // Apply smoothing\n        if (this.detectedBPM === 0) {\n            this.detectedBPM = finalBPM;\n        } else {\n            const maxChange = this.tempoLocked ? 1 : 2; // Reduced from 5 to 2 for stability\n            const diff = finalBPM - this.detectedBPM;\n            if (Math.abs(diff) <= maxChange) {\n                this.detectedBPM = finalBPM;\n            } else {\n                this.detectedBPM += Math.sign(diff) * maxChange;\n            }\n        }\n        \n        // Update rhythm engine if available\n        if (window.rhythmIntegration && window.rhythmIntegration.updateBPM) {\n            if (!window.rhythmManuallyStoppedForCurrentAudio) {\n                window.rhythmIntegration.updateBPM(this.detectedBPM);\n            }\n        }\n        \n        return this.detectedBPM;\n    }\n\n    /**\n     * Find tempo candidates from intervals\n     * @param {Array} intervals - Time intervals between onsets\n     * @returns {Array} Tempo candidates with confidence scores\n     */\n    findTempoCandidates(intervals) {\n        const candidates = [];\n        \n        // Test different interval groupings (1x, 2x, 4x) for beat patterns\n        for (let multiplier of [1, 2, 4]) {\n            const testIntervals = intervals.map(i => i * multiplier);\n            \n            // Find clusters of similar intervals\n            const clusters = this.clusterIntervals(testIntervals);\n            \n            for (let cluster of clusters) {\n                const avgInterval = cluster.intervals.reduce((a, b) => a + b, 0) / cluster.intervals.length;\n                const actualInterval = avgInterval / multiplier;\n                \n                // Calculate strength based on cluster size and consistency\n                const strength = (cluster.intervals.length / intervals.length) * cluster.consistency;\n                \n                // Only consider if it would result in reasonable BPM\n                const bpm = 60000 / actualInterval;\n                // Prefer common BPM ranges (120-140 is very common)\n                const commonBPMBonus = (bpm >= 120 && bpm <= 140) ? 0.2 : 0;\n                if (bpm >= 60 && bpm <= 220) {\n                    candidates.push({\n                        interval: actualInterval,\n                        strength: strength + commonBPMBonus,\n                        multiplier: multiplier\n                    });\n                }\n            }\n        }\n        \n        // Sort by strength\n        return candidates.sort((a, b) => b.strength - a.strength);\n    }\n\n    /**\n     * Cluster similar intervals together\n     * @param {Array} intervals - Time intervals\n     * @returns {Array} Clustered intervals\n     */\n    clusterIntervals(intervals) {\n        const sorted = [...intervals].sort((a, b) => a - b);\n        const clusters = [];\n        let currentCluster = [sorted[0]];\n        \n        for (let i = 1; i < sorted.length; i++) {\n            const tolerance = currentCluster[0] * 0.03; // 3% tolerance - tighter for stable BPM\n            if (sorted[i] - currentCluster[0] <= tolerance) {\n                currentCluster.push(sorted[i]);\n            } else {\n                if (currentCluster.length >= 2) {\n                    // Calculate consistency (inverse of variance)\n                    const avg = currentCluster.reduce((a, b) => a + b, 0) / currentCluster.length;\n                    const variance = currentCluster.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) / currentCluster.length;\n                    const consistency = 1 / (1 + variance / (avg * avg)); // Normalized by average\n                    \n                    clusters.push({\n                        intervals: currentCluster,\n                        consistency: consistency\n                    });\n                }\n                currentCluster = [sorted[i]];\n            }\n        }\n        \n        // Don't forget the last cluster\n        if (currentCluster.length >= 3) {\n            const avg = currentCluster.reduce((a, b) => a + b, 0) / currentCluster.length;\n            const variance = currentCluster.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) / currentCluster.length;\n            const consistency = 1 / (1 + variance / (avg * avg));\n            clusters.push({\n                intervals: currentCluster,\n                consistency: consistency\n            });\n        }\n        \n        return clusters;\n    }\n\n    /**\n     * Check if two BPMs are harmonically related\n     * @param {number} bpm1 - First BPM\n     * @param {number} bpm2 - Second BPM\n     * @returns {boolean} True if harmonically related\n     */\n    checkHarmonicRelation(bpm1, bpm2) {\n        const ratio = Math.max(bpm1, bpm2) / Math.min(bpm1, bpm2);\n        const tolerance = 0.03;\n        \n        // Check for simple ratios (2:1, 3:2, 4:3, etc.)\n        const simpleRatios = [2, 1.5, 1.333, 1.25];\n        return simpleRatios.some(r => Math.abs(ratio - r) < tolerance);\n    }\n\n    /**\n     * Detect time signature from onset patterns\n     * @returns {string} Detected time signature\n     */\n    detectTimeSignature() {\n        // Need at least a detected BPM and some onset data\n        const minOnsets = this.forceFastDetection ? 6 : 12;\n        if (this.detectedBPM === 0 || this.onsetStrengths.length < minOnsets) {\n            return this.timeSignature;\n        }\n        \n        // If already locked, don't change unless we're in fast mode (just reset)\n        if (this.timeSignatureLocked && !this.forceFastDetection) {\n            return this.detectedTimeSignature || this.timeSignature;\n        }\n        \n        const beatInterval = 60000 / this.detectedBPM;\n        \n        // Only test the most common measure length first (4 beats)\n        // We'll be conservative and mostly detect 4/4 unless very clear pattern\n        const measureLength = 4;\n        const beatBins = new Array(measureLength).fill(0).map(() => ({\n            strength: 0,\n            bassWeight: 0,\n            count: 0\n        }));\n        \n        // Align recent onsets to a 4-beat grid\n        const recentOnsets = this.onsetStrengths.slice(-Math.min(20, this.onsetStrengths.length));\n        if (recentOnsets.length === 0) return this.timeSignature;\n        const startTime = recentOnsets[0].time;\n        \n        for (let onset of recentOnsets) {\n            const timeSinceStart = onset.time - startTime;\n            const beatPosition = (timeSinceStart / beatInterval) % measureLength;\n            const binIndex = Math.round(beatPosition) % measureLength;\n            \n            beatBins[binIndex].strength += onset.strength;\n            beatBins[binIndex].bassWeight += onset.bassWeight || 0;\n            beatBins[binIndex].count++;\n        }\n        \n        // Normalize bins\n        let maxStrength = 0;\n        for (let bin of beatBins) {\n            if (bin.count > 0) {\n                bin.strength /= bin.count;\n                bin.bassWeight /= bin.count;\n                maxStrength = Math.max(maxStrength, bin.strength + bin.bassWeight);\n            }\n        }\n        \n        // Default to 4/4 for most music\n        let detectedSig = '4/4';\n        \n        // Only detect 3/4 if we have a VERY clear waltz pattern\n        // (strong-weak-weak with no emphasis on beat 4)\n        if (beatBins[0].strength > beatBins[1].strength * 2 &&\n            beatBins[0].strength > beatBins[2].strength * 2 &&\n            beatBins[3].count < beatBins[0].count * 0.5) {\n            // Might be 3/4, but need more confidence\n            const waltzConfidence = this.testWaltzPattern(recentOnsets, beatInterval);\n            if (waltzConfidence > 0.8) {\n                detectedSig = '3/4';\n            }\n        }\n        \n        // Add to history\n        this.timeSignatureHistory.push(detectedSig);\n        if (this.timeSignatureHistory.length > 3) {\n            this.timeSignatureHistory.shift();\n        }\n        \n        // Lock faster - only need 2 readings in fast mode, 3 normally\n        const minReadings = this.forceFastDetection ? 2 : 3;\n        if (this.timeSignatureHistory.length >= minReadings) {\n            const counts = {};\n            for (let sig of this.timeSignatureHistory) {\n                counts[sig] = (counts[sig] || 0) + 1;\n            }\n            \n            // Find most common\n            let mostCommon = '4/4';\n            let maxCount = 0;\n            for (let [sig, count] of Object.entries(counts)) {\n                if (count > maxCount) {\n                    maxCount = count;\n                    mostCommon = sig;\n                }\n            }\n            \n            // Lock if we have agreement (at least 2 out of 3)\n            if (maxCount >= 2) {\n                this.detectedTimeSignature = mostCommon;\n                this.timeSignatureLocked = true;\n                this.timeSignatureConfidence = maxCount / 3;\n                \n                // Update rhythm engine if available\n                if (window.rhythmIntegration && window.rhythmIntegration.setTimeSignature) {\n                    window.rhythmIntegration.setTimeSignature(this.detectedTimeSignature);\n                }\n                \n                \n                // Also directly update UI in case rhythmIntegration doesn't\n                const timeSigDisplay = document.getElementById('time-sig-display');\n                if (timeSigDisplay) {\n                    timeSigDisplay.textContent = this.detectedTimeSignature;\n                }\n            }\n        }\n        \n        return this.detectedTimeSignature || this.timeSignature;\n    }\n\n    /**\n     * Test for waltz pattern (3/4 time)\n     * @param {Array} onsets - Onset times and strengths\n     * @param {number} beatInterval - Beat interval in ms\n     * @returns {number} Confidence score (0-1) for waltz pattern\n     */\n    testWaltzPattern(onsets, beatInterval) {\n        // Look for groups of 3 beats with strong-weak-weak pattern\n        let waltzGroups = 0;\n        let totalGroups = 0;\n        \n        for (let i = 0; i < onsets.length - 2; i += 3) {\n            if (i + 2 < onsets.length) {\n                totalGroups++;\n                const first = onsets[i].strength + (onsets[i].bassWeight || 0);\n                const second = onsets[i + 1].strength + (onsets[i + 1].bassWeight || 0);\n                const third = onsets[i + 2].strength + (onsets[i + 2].bassWeight || 0);\n                \n                // Check for strong-weak-weak pattern\n                if (first > second * 1.5 && first > third * 1.5) {\n                    waltzGroups++;\n                }\n            }\n        }\n        \n        return totalGroups > 0 ? waltzGroups / totalGroups : 0;\n    }\n\n    /**\n     * Add onset event for analysis\n     * @param {number} time - Onset time\n     * @param {number} strength - Onset strength\n     * @param {number} bassWeight - Optional bass weight for downbeat detection\n     */\n    addOnset(time, strength, bassWeight = 0) {\n        // Feed to agent detector for fast convergence\n        if (this.useAgentDetection) {\n            this.agentDetector.processPeak(strength, time);\n        }\n\n        if (this.lastOnsetTime > 0) {\n            const interval = time - this.lastOnsetTime;\n            // Filter reasonable intervals (60-220 BPM range)\n            if (interval > 273 && interval < 1000) {\n                this.onsetIntervals.push(interval);\n                if (this.onsetIntervals.length > 20) {\n                    this.onsetIntervals.shift();\n                }\n            }\n        }\n\n        this.onsetStrengths.push({ time, strength, bassWeight });\n        if (this.onsetStrengths.length > 40) {\n            this.onsetStrengths.shift();\n        }\n\n        this.lastOnsetTime = time;\n    }\n\n    /**\n     * Update music detection\n     * @param {number} now - Current time\n     */\n    update(now) {\n        // Periodically recalculate BPM\n        if (now - this.lastBPMCalculation > this.bpmCalculationInterval) {\n            this.calculateBPM();\n            this.detectTimeSignature();\n            this.lastBPMCalculation = now;\n        }\n    }\n\n    /**\n     * Get recommended subdivision for current BPM\n     */\n    getRecommendedSubdivision() {\n        if (this.useAgentDetection) {\n            return this.agentDetector.getSubdivision();\n        }\n\n        // Fallback logic based on BPM ranges - prefer lower subdivisions\n        if (this.detectedBPM < 60) return 2;     // Double for very slow\n        if (this.detectedBPM < 80) return 1;     // Normal for slow\n        if (this.detectedBPM > 180) return 0.5;  // Half for very fast\n        if (this.detectedBPM > 140) return 0.5;  // Half for fast\n        return 1; // Normal for mid-range (80-140)\n    }\n\n    /**\n     * Reset music detection state\n     */\n    reset() {\n        this.onsetIntervals = [];\n        this.onsetStrengths = [];\n        this.lastOnsetTime = 0;\n        this.detectedBPM = 0;\n        this.bpmConfidence = 0;\n        this.bpmHistory = [];\n        this.tempoLocked = false;\n        this.fundamentalBPM = 0;\n        this.timeSignature = '4/4';\n        this.detectedTimeSignature = null;\n        this.timeSignatureConfidence = 0;\n        this.timeSignatureHistory = [];\n\n        // Reset agent detector\n        if (this.agentDetector) {\n            this.agentDetector.reset();\n        }\n        this.timeSignatureLocked = false;\n        this.isMusicalContent = false;\n        this.forceFastDetection = false;\n    }\n\n    /**\n     * Get current music information\n     */\n    getMusicInfo() {\n        return {\n            bpm: this.detectedBPM,\n            confidence: this.bpmConfidence,\n            timeSignature: this.timeSignature,\n            isMusical: this.isMusicalContent,\n            musicalityScore: this.musicalityScore\n        };\n    }\n}\n\nexport default MusicDetector;","/**\n * TransitionManager - Manages shape transitions and morphing queue\n * @module core/morpher/TransitionManager\n */\n\nexport class TransitionManager {\n    constructor(morpher) {\n        this.morpher = morpher;\n        \n        // Transition state\n        this.isTransitioning = false;\n        this.transitionStartTime = 0;\n        this.transitionDuration = 800;\n        this.transitionProgress = 0;\n        this.easingFunction = 'easeInOutQuad';\n        \n        // Shape state\n        this.currentShape = 'circle';\n        this.targetShape = null;\n        this.previousShape = null;\n        \n        // Morph queue\n        this.morphQueue = [];\n        this.maxQueueSize = 3;\n        \n        // Shadow effects\n        this.shadowConfig = null;\n        this.shadowProgress = 0;\n    }\n\n    /**\n     * Start a shape transition\n     * @param {string} targetShape - Target shape name\n     * @param {Object} options - Transition options\n     */\n    startTransition(targetShape, options = {}) {\n        // If already transitioning, queue it\n        if (this.isTransitioning && this.morphQueue.length < this.maxQueueSize) {\n            this.morphQueue.push({ shape: targetShape, options });\n            return;\n        }\n        \n        this.previousShape = this.currentShape;\n        this.targetShape = targetShape;\n        this.isTransitioning = true;\n        this.transitionStartTime = performance.now();\n        this.transitionDuration = options.duration || 800;\n        this.easingFunction = options.easing || 'easeInOutQuad';\n        this.transitionProgress = 0;\n        \n        // Get transition config for special effects\n        this.shadowConfig = this.getTransitionConfig(this.currentShape, targetShape);\n    }\n\n    /**\n     * Update transition progress\n     * @param {number} deltaTime - Time since last frame\n     */\n    update(deltaTime) {\n        if (!this.isTransitioning) return;\n        \n        const now = performance.now();\n        const elapsed = now - this.transitionStartTime;\n        const rawProgress = Math.min(1, elapsed / this.transitionDuration);\n        \n        // Apply easing\n        this.transitionProgress = this.applyEasing(rawProgress);\n        \n        // Update shadow progress if configured\n        if (this.shadowConfig) {\n            this.shadowProgress = this.calculateShadowProgress(rawProgress);\n        }\n        \n        // Complete transition if done\n        if (rawProgress >= 1) {\n            this.completeTransition();\n        }\n    }\n\n    /**\n     * Complete current transition\n     */\n    completeTransition() {\n        this.currentShape = this.targetShape;\n        this.targetShape = null;\n        this.isTransitioning = false;\n        this.transitionProgress = 0;\n        this.shadowConfig = null;\n        \n        // Process queue if there are pending morphs\n        if (this.morphQueue.length > 0) {\n            const next = this.morphQueue.shift();\n            this.startTransition(next.shape, next.options);\n        }\n    }\n\n    /**\n     * Get transition configuration for special effects\n     * @param {string} from - Source shape\n     * @param {string} to - Target shape\n     * @returns {Object} Transition configuration\n     */\n    getTransitionConfig(from, to) {\n        // Special transition effects for certain shape combinations\n        const transitions = {\n            'circle-heart': {\n                type: 'bloom',\n                shadowColor: '#ff69b4',\n                shadowIntensity: 0.3\n            },\n            'heart-circle': {\n                type: 'contract',\n                shadowColor: '#ff69b4',\n                shadowIntensity: 0.2\n            },\n            'circle-star': {\n                type: 'burst',\n                shadowColor: '#ffd700',\n                shadowIntensity: 0.4\n            },\n            'star-circle': {\n                type: 'collapse',\n                shadowColor: '#ffd700',\n                shadowIntensity: 0.3\n            }\n        };\n        \n        const key = `${from}-${to}`;\n        return transitions[key] || null;\n    }\n\n    /**\n     * Calculate shadow progress for special effects\n     * @param {number} progress - Raw transition progress\n     * @returns {number} Shadow effect progress\n     */\n    calculateShadowProgress(progress) {\n        if (!this.shadowConfig) return 0;\n        \n        switch (this.shadowConfig.type) {\n            case 'bloom':\n                // Expand then fade\n                return progress < 0.5 \n                    ? progress * 2 \n                    : 2 - (progress * 2);\n            \n            case 'burst':\n                // Quick expand and fade\n                return Math.pow(1 - progress, 2);\n            \n            case 'contract':\n            case 'collapse':\n                // Fade in then shrink\n                return Math.sin(progress * Math.PI);\n            \n            default:\n                return 0;\n        }\n    }\n\n    /**\n     * Apply easing function to progress\n     * @param {number} t - Linear progress (0-1)\n     * @returns {number} Eased progress\n     */\n    applyEasing(t) {\n        switch (this.easingFunction) {\n            case 'linear':\n                return t;\n            case 'easeInQuad':\n                return t * t;\n            case 'easeOutQuad':\n                return t * (2 - t);\n            case 'easeInOutQuad':\n                return t < 0.5 \n                    ? 2 * t * t \n                    : -1 + (4 - 2 * t) * t;\n            case 'easeInCubic':\n                return t * t * t;\n            case 'easeOutCubic':\n                return (--t) * t * t + 1;\n            case 'easeInOutCubic':\n                return t < 0.5 \n                    ? 4 * t * t * t \n                    : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n            default:\n                return t;\n        }\n    }\n\n    /**\n     * Clear morph queue\n     */\n    clearQueue() {\n        this.morphQueue = [];\n    }\n\n    /**\n     * Check if has queued morphs\n     */\n    hasQueuedMorphs() {\n        return this.morphQueue.length > 0;\n    }\n\n    /**\n     * Get current state\n     */\n    getState() {\n        return {\n            isTransitioning: this.isTransitioning,\n            currentShape: this.currentShape,\n            targetShape: this.targetShape,\n            progress: this.transitionProgress,\n            queueLength: this.morphQueue.length\n        };\n    }\n\n    /**\n     * Reset to default state\n     */\n    reset() {\n        this.isTransitioning = false;\n        this.currentShape = 'circle';\n        this.targetShape = null;\n        this.transitionProgress = 0;\n        this.morphQueue = [];\n        this.shadowConfig = null;\n    }\n}\n\nexport default TransitionManager;","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Shape Morphing System\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Musical shape morphing system using modular shapes\r\n * @author Emotive Engine Team\r\n * @module core/ShapeMorpher\r\n */\r\n\r\nimport { MusicalDuration } from './MusicalDuration.js';\r\nimport { rhythmEngine } from './rhythm.js';\r\nimport { SHAPE_DEFINITIONS } from './shapes/shapeDefinitions.js';\r\nimport arrayPool from '../utils/ArrayPool.js';\r\n\r\n// Import modular components\r\nimport { AudioDeformer } from './morpher/AudioDeformer.js';\r\nimport { MusicDetector } from './morpher/MusicDetector.js';\r\nimport { TransitionManager } from './morpher/TransitionManager.js';\r\n\r\n/**\r\n * ShapeMorpher class - manages smooth transitions between shapes\r\n */\r\nclass ShapeMorpher {\r\n    constructor(options = {}) {\r\n        // Configuration\r\n        this.numPoints = options.numPoints || 64;\r\n        this.morphDuration = options.morphDuration || 1000; // Default 1 second\r\n        this.easing = options.easing || 'easeInOutCubic';\r\n        \r\n        // Initialize modular components\r\n        this.transitionManager = new TransitionManager(this);\r\n        this.audioDeformer = new AudioDeformer(this);\r\n        this.musicDetector = new MusicDetector();\r\n        \r\n        // State - delegated to TransitionManager\r\n        this.currentShape = 'circle';\r\n        this.targetShape = null;\r\n        this.morphProgress = 0;\r\n        this.visualProgress = 0; // Smoothed visual progress for rendering\r\n        this.morphStartTime = null;\r\n        this.isTransitioning = false;\r\n        \r\n        // Shape data cache\r\n        this.shapeCache = new Map();\r\n        this.currentPoints = [];\r\n        this.targetPoints = [];\r\n        \r\n        // Musical timing\r\n        this.musicalDuration = null;\r\n        this.onBeat = false;\r\n        \r\n        // Audio deformation with throttling - delegated to AudioDeformer\r\n        this.audioDeformation = 0;\r\n        this.vocalEnergy = 0;\r\n        this.lastAudioUpdate = 0;\r\n        this.lastVocalUpdate = 0;  // Separate timestamp for vocal updates\r\n        this.audioUpdateInterval = 33; // Update at ~30fps max\r\n        \r\n        // Enhanced audio visualization\r\n        this.audioAnalyzer = null; // Reference to audio analyzer for frequency data\r\n        this.frequencyData = arrayPool.acquire(32, 'float32'); // Store frequency bands\r\n        this.glitchPoints = []; // Track points that are glitching\r\n        this.undulationPhase = 0; // Phase for wave animation\r\n        this.undulationDirection = 1; // Random direction for bass wobble\r\n        this.beatGlitchIntensity = 0; // Intensity of beat-triggered glitches\r\n        \r\n        // Frequency-specific energy tracking\r\n        this.bassEnergy = 0; // Low frequency energy (20-250 Hz)\r\n        this.vocalPresence = 0; // Mid frequency energy (250-4000 Hz)\r\n        \r\n        // Rolling averages for dynamic thresholds\r\n        this.bassHistory = arrayPool.acquire(60, 'float32'); // 2 seconds at 30fps\r\n        this.vocalHistory = arrayPool.acquire(60, 'float32');\r\n        this.historyIndex = 0;\r\n        \r\n        // Cooldown timers to prevent effect spam\r\n        this.bassEffectCooldown = 0;\r\n        this.vocalEffectCooldown = 0;\r\n        \r\n        // Threshold multipliers (can be adjusted for mic vs audio)\r\n        this.bassThresholdMultiplier = 1.2;  // Lowered from 1.8 for testing\r\n        this.vocalThresholdMultiplier = 1.1;  // Even lower for more frequent vocal triggers\r\n        \r\n        // Effect states\r\n        this.bassEffectActive = false;\r\n        this.vocalEffectActive = false;\r\n        \r\n        // Transient detection\r\n        this.transientHoldTime = 0;\r\n        this.vocalGlowBoost = 0;\r\n        \r\n        // Callbacks\r\n        this.onComplete = null;\r\n        this.onProgress = null;\r\n        \r\n        // Morph queue\r\n        this.queuedMorph = null;\r\n        \r\n        // Initialize with circle shape\r\n        this.currentPoints = this.getShapePoints('circle');\r\n        this.shapesLoaded = true; // Static definitions are always loaded\r\n        \r\n        // Pre-warm the shape cache to prevent first-run choppiness\r\n        this.prewarmCache();\r\n    }\r\n    \r\n    /**\r\n     * Pre-warm the shape cache to prevent first-run lag\r\n     */\r\n    prewarmCache() {\r\n        // Pre-generate all common shapes\r\n        const commonShapes = [\r\n            'circle', 'heart', 'star', 'sun', 'moon', \r\n            'lunar', 'square', 'triangle'\r\n        ];\r\n        \r\n        \r\n        commonShapes.forEach(shape => {\r\n            if (SHAPE_DEFINITIONS[shape]) {\r\n                // Generate and cache the points\r\n                this.getShapePoints(shape);\r\n            }\r\n        });\r\n        \r\n        // Also pre-calculate some common easing values\r\n        const testProgress = [0, 0.25, 0.5, 0.75, 1];\r\n        testProgress.forEach(t => {\r\n            this.applyEasing(t); // Warm up easing calculations\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Get shape points from cache or generate\r\n     */\r\n    getShapePoints(shapeName) {\r\n        if (!this.shapeCache.has(shapeName)) {\r\n            const shapeDef = SHAPE_DEFINITIONS[shapeName];\r\n            if (!shapeDef || !shapeDef.points) {\r\n                const circlePoints = SHAPE_DEFINITIONS.circle.points;\r\n                this.shapeCache.set(shapeName, circlePoints);\r\n                return circlePoints;\r\n            }\r\n            // Store reference directly - shapes are immutable\r\n            const points = shapeDef.points;\r\n            this.shapeCache.set(shapeName, points);\r\n            return points;\r\n        }\r\n        return this.shapeCache.get(shapeName);\r\n    }\r\n    \r\n    /**\r\n     * Start morphing to a new shape\r\n     * @param {string} targetShape - Target shape name\r\n     * @param {Object} options - Morph options\r\n     */\r\n    morphTo(targetShape, options = {}) {\r\n        if (!this.shapesLoaded) {\r\n            return;\r\n        }\r\n        \r\n        if (targetShape === this.currentShape && !this.isTransitioning) {\r\n            return; // Already at target shape\r\n        }\r\n        \r\n        // Handle queueing or forcing\r\n        if (this.isTransitioning && !options.force) {\r\n            // Queue this morph for after current one completes\r\n            this.queuedMorph = { targetShape, options };\r\n            return 'queued'; // Return status so caller knows it was queued\r\n        } else if (this.isTransitioning && options.force) {\r\n            // Force interrupt current morph\r\n            this.completeMorph(true); // Skip to end without processing queue\r\n        }\r\n        \r\n        // Get transition configuration\r\n        const transitionConfig = this.getTransitionConfig(this.currentShape, targetShape);\r\n        \r\n        // Set up transition\r\n        this.targetShape = targetShape;\r\n        this.targetPoints = this.getShapePoints(targetShape);\r\n        this.morphStartTime = Date.now();\r\n        this.isTransitioning = true;\r\n        this.morphProgress = 0;\r\n        this.visualProgress = 0; // Reset visual progress\r\n\r\n        \r\n        // Configure timing - use transition config duration if available\r\n        if (options.duration === 'bar' || options.duration === 'beat') {\r\n            // Musical timing - calculate duration based on current BPM\r\n            const bpm = rhythmEngine.bpm || 120;\r\n            const beatDuration = 60000 / bpm; // ms per beat\r\n            \r\n            if (options.duration === 'bar') {\r\n                // Assume 4/4 time signature\r\n                this.morphDuration = beatDuration * 4; // 4 beats per bar\r\n            } else {\r\n                this.morphDuration = beatDuration; // 1 beat\r\n            }\r\n            \r\n            this.musicalDuration = true; // Flag for musical timing\r\n            this.onBeat = options.onBeat !== false; // Default true for musical timing\r\n        } else {\r\n            // Fixed duration - prefer transition config duration\r\n            this.morphDuration = transitionConfig?.duration || options.duration || 1000;\r\n            this.musicalDuration = null;\r\n            this.onBeat = false;\r\n        }\r\n        \r\n        // Store options\r\n        this.morphMode = options.mode || 'smooth';\r\n        this.transitionConfig = transitionConfig;\r\n        \r\n        // Callbacks\r\n        this.onComplete = options.onComplete;\r\n        this.onProgress = options.onProgress;\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Update morph animation\r\n     * @param {number} deltaTime - Time since last update (can be from RAF timestamp)\r\n     */\r\n    update(deltaTime) {\r\n        // Always update frequency data from audio analyzer if available\r\n        if (this.audioAnalyzer && this.audioAnalyzer.isAnalyzing) {\r\n            const audioData = this.audioAnalyzer.getShapeMorpherData();\r\n            if (audioData && audioData.frequencies) {\r\n                // Copy frequency data for visualization\r\n                let hasNonZero = false;\r\n                for (let i = 0; i < Math.min(audioData.frequencies.length, this.frequencyData.length); i++) {\r\n                    this.frequencyData[i] = audioData.frequencies[i];\r\n                    if (audioData.frequencies[i] > 0) hasNonZero = true;\r\n                }\r\n                // Log once if we start getting data\r\n                if (hasNonZero && !this._loggedAudioData) {\r\n                    console.log('ShapeMorpher: Receiving audio frequency data');\r\n                    this._loggedAudioData = true;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Return early if not transitioning\r\n        if (!this.isTransitioning || !this.targetShape) return;\r\n        \r\n        // Calculate progress based on total elapsed time\r\n        const currentTime = Date.now();\r\n        const elapsed = currentTime - this.morphStartTime;\r\n        \r\n        // Recalculate duration if BPM changed during morph (for rhythm sync)\r\n        if (this.musicalDuration) {\r\n            const currentBpm = rhythmEngine.bpm || 120;\r\n            const beatDuration = 60000 / currentBpm;\r\n            // Recalculate based on original intention (bar or beat)\r\n            const originalDuration = this.morphDuration;\r\n            const wasBar = originalDuration > beatDuration * 2; // Heuristic: if > 2 beats, it was a bar\r\n            this.morphDuration = wasBar ? beatDuration * 4 : beatDuration;\r\n        }\r\n        \r\n        let progress = Math.min(elapsed / this.morphDuration, 1);\r\n        \r\n        // Apply musical quantization if needed\r\n        if (this.musicalDuration && this.onBeat) {\r\n            const bpm = rhythmEngine.bpm || 120;\r\n            \r\n            // Adaptive granularity - use coarser quantization at higher BPMs\r\n            let subdivision;\r\n            if (bpm > 140) {\r\n                subdivision = 2; // 8th notes for fast tempos\r\n            } else if (bpm > 100) {\r\n                subdivision = 4; // 16th notes for medium tempos  \r\n            } else {\r\n                subdivision = 8; // 32nd notes for slow tempos\r\n            }\r\n            \r\n            // Quantize to nearest subdivision\r\n            const beatDuration = 60000 / bpm;\r\n            const totalBeats = this.morphDuration / beatDuration;\r\n            const currentBeat = progress * totalBeats;\r\n            const quantizedBeat = Math.round(currentBeat * subdivision) / subdivision;\r\n            const quantizedProgress = Math.min(1, quantizedBeat / totalBeats);\r\n            \r\n            // BPM-based strength - weaker quantization at extremes (very slow or very fast)\r\n            const bpmFactor = bpm < 90 ? \r\n                Math.max(0.3, (bpm - 60) / 30) :  // 0.3 at 60bpm, 1.0 at 90bpm (weaker for slow)\r\n                Math.max(0.4, Math.min(1, 1 - ((bpm - 90) / 90))); // 1.0 at 90bpm, 0.4 at 180bpm (weaker for fast)\r\n            const baseStrength = 0.3 + (bpmFactor * 0.5); // Range: 0.3 to 0.8 based on BPM\r\n            \r\n            // Phase-aware quantization - weaker at start/end, stronger in middle\r\n            const phaseMultiplier = Math.sin(progress * Math.PI); // 0 at edges, 1 at center\r\n            const quantizationStrength = baseStrength * (0.3 + phaseMultiplier * 0.7); // Further modulated by phase\r\n            \r\n            // Apply smoothed quantization with cubic interpolation (smoothstep)\r\n            const t = quantizationStrength;\r\n            const cubicT = t * t * (3 - 2 * t); // Smoothstep for S-curve blending\r\n            progress = progress + (quantizedProgress - progress) * cubicT;\r\n        }\r\n        \r\n        // Apply easing\r\n        this.morphProgress = this.applyEasing(progress);\r\n\r\n        // Smooth visual progress for ultra-smooth rendering\r\n        // Heavy smoothing: 80% of previous frame, 20% of new\r\n        this.visualProgress = this.visualProgress * 0.8 + this.morphProgress * 0.2;\r\n\r\n        // Snap to final value when very close to avoid infinite approach\r\n        if (Math.abs(this.visualProgress - this.morphProgress) < 0.001) {\r\n            this.visualProgress = this.morphProgress;\r\n        }\r\n        \r\n        // Notify progress\r\n        if (this.onProgress) {\r\n            this.onProgress(this.morphProgress);\r\n        }\r\n        \r\n        // Check if complete (use logical progress, not visual)\r\n        if (this.morphProgress >= 1) {\r\n            this.visualProgress = 1; // Ensure visual completes too\r\n            this.completeMorph();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Complete the morph transition\r\n     * @param {boolean} skipQueue - Skip processing queued morphs (for force override)\r\n     */\r\n    completeMorph(skipQueue = false) {\r\n        // Only update current shape if we actually have a target\r\n        if (this.targetShape) {\r\n            this.currentShape = this.targetShape;\r\n            this.currentPoints = [...this.targetPoints];\r\n        }\r\n        this.targetShape = null;\r\n        this.isTransitioning = false;\r\n        this.morphProgress = 0;\r\n        this.visualProgress = 0; // Reset visual progress\r\n        \r\n        if (this.onComplete) {\r\n            this.onComplete(this.currentShape);\r\n        }\r\n        \r\n        // Process queued morph if exists and not skipping\r\n        if (!skipQueue && this.queuedMorph) {\r\n            const queued = this.queuedMorph;\r\n            this.queuedMorph = null; // Clear queue before morphing\r\n            \r\n            // Small delay to ensure smooth transition\r\n            setTimeout(() => {\r\n                this.morphTo(queued.targetShape, queued.options);\r\n            }, 50);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Check if there's a queued morph\r\n     * @returns {boolean} True if morph is queued\r\n     */\r\n    hasQueuedMorph() {\r\n        return this.queuedMorph !== null;\r\n    }\r\n    \r\n    /**\r\n     * Clear the morph queue\r\n     */\r\n    clearQueue() {\r\n        this.queuedMorph = null;\r\n    }\r\n    \r\n    /**\r\n     * Get shape points in canvas coordinates\r\n     * @param {number} centerX - Center X coordinate\r\n     * @param {number} centerY - Center Y coordinate  \r\n     * @param {number} radius - Shape radius\r\n     * @returns {Array} Points in canvas coordinates\r\n     */\r\n    getCanvasPoints(centerX, centerY, radius) {\r\n        let normalizedPoints;\r\n        \r\n        try {\r\n            normalizedPoints = this.getInterpolatedPoints();\r\n        } catch (e) {\r\n            normalizedPoints = this.generateFallbackCircle();\r\n        }\r\n        \r\n        // Reuse canvas points array\r\n        if (!this.canvasPointsCache) {\r\n            this.canvasPointsCache = [];\r\n        }\r\n        const canvasPoints = this.canvasPointsCache;\r\n        canvasPoints.length = 0; // Clear without allocating new array\r\n        \r\n        // Handle case where points aren't loaded yet\r\n        if (!normalizedPoints || normalizedPoints.length === 0) {\r\n            // Return fallback circle points\r\n            for (let i = 0; i < this.numPoints; i++) {\r\n                const angle = (i / this.numPoints) * Math.PI * 2;\r\n                canvasPoints.push({\r\n                    x: centerX + Math.cos(angle) * radius,\r\n                    y: centerY + Math.sin(angle) * radius\r\n                });\r\n            }\r\n            return canvasPoints;\r\n        }\r\n        \r\n        // Ensure we're working with an array\r\n        const pointsArray = Array.isArray(normalizedPoints) ? normalizedPoints : [];\r\n        \r\n        for (let i = 0; i < pointsArray.length; i++) {\r\n            const point = pointsArray[i];\r\n            if (!point || typeof point.x !== 'number' || typeof point.y !== 'number') {\r\n                // Add fallback point\r\n                const angle = (i / pointsArray.length) * Math.PI * 2;\r\n                canvasPoints.push({\r\n                    x: centerX + Math.cos(angle) * radius,\r\n                    y: centerY + Math.sin(angle) * radius\r\n                });\r\n            } else {\r\n                // Convert normalized (0-1) to canvas coordinates\r\n                const x = centerX + (point.x - 0.5) * radius * 2;\r\n                const y = centerY + (point.y - 0.5) * radius * 2;\r\n                canvasPoints.push({ x, y });\r\n            }\r\n        }\r\n        \r\n        // Ensure we have enough points\r\n        while (canvasPoints.length < this.numPoints) {\r\n            const i = canvasPoints.length;\r\n            const angle = (i / this.numPoints) * Math.PI * 2;\r\n            canvasPoints.push({\r\n                x: centerX + Math.cos(angle) * radius,\r\n                y: centerY + Math.sin(angle) * radius\r\n            });\r\n        }\r\n        \r\n        return canvasPoints;\r\n    }\r\n    \r\n    /**\r\n     * Get interpolated shape points\r\n     * @returns {Array} Current interpolated points\r\n     */\r\n    getInterpolatedPoints() {\r\n        // Ensure we always have points\r\n        if (!this.currentPoints || this.currentPoints.length === 0) {\r\n            this.currentPoints = this.generateFallbackCircle();\r\n        }\r\n        \r\n        if (!this.isTransitioning) {\r\n            return this.applyAudioDeformation(this.currentPoints);\r\n        }\r\n        \r\n        const points = [];\r\n        for (let i = 0; i < this.numPoints; i++) {\r\n            const current = this.currentPoints[i];\r\n            const target = this.targetPoints[i];\r\n            \r\n            // Handle missing points\r\n            if (!current || !target) {\r\n                const angle = (i / this.numPoints) * Math.PI * 2;\r\n                points.push({\r\n                    x: 0.5 + Math.cos(angle) * 0.5,\r\n                    y: 0.5 + Math.sin(angle) * 0.5\r\n                });\r\n                continue;\r\n            }\r\n            \r\n            // Interpolate based on mode - use visualProgress for smooth rendering\r\n            const progress = this.visualProgress;\r\n            let x, y;\r\n            \r\n            // RADIAL MORPH: These shapes radiate from/to center\r\n            const radialShapes = ['square', 'circle', 'star', 'triangle'];\r\n            const currentIsRadial = radialShapes.includes(this.currentShape);\r\n            const targetIsRadial = radialShapes.includes(this.targetShape);\r\n            const needsRadialMorph = currentIsRadial || targetIsRadial;\r\n            \r\n            if (needsRadialMorph) {\r\n                // RADIATE FROM/TO CENTER\r\n                const cx = 0.5, cy = 0.5;\r\n                \r\n                // Calculate radial interpolation\r\n                if (targetIsRadial && !currentIsRadial) {\r\n                    // Morphing TO a radial shape - expand from center\r\n                    // Start at center, expand to target position\r\n                    const targetDx = target.x - cx;\r\n                    const targetDy = target.y - cy;\r\n                    \r\n                    // Ease the expansion with a smooth curve\r\n                    const expandProgress = this.applyEasing(progress);\r\n                    \r\n                    // Start from center point for first half, then expand outward\r\n                    if (progress < 0.3) {\r\n                        // Gather at center\r\n                        const gatherProgress = progress / 0.3;\r\n                        x = current.x + (cx - current.x) * gatherProgress;\r\n                        y = current.y + (cy - current.y) * gatherProgress;\r\n                    } else {\r\n                        // Expand from center to target\r\n                        const expandPhase = (progress - 0.3) / 0.7;\r\n                        x = cx + targetDx * expandPhase;\r\n                        y = cy + targetDy * expandPhase;\r\n                    }\r\n                } else if (currentIsRadial && !targetIsRadial) {\r\n                    // Morphing FROM a radial shape - collapse to center then expand to target\r\n                    const currentDx = current.x - cx;\r\n                    const currentDy = current.y - cy;\r\n                    \r\n                    if (progress < 0.5) {\r\n                        // Collapse to center\r\n                        const collapseProgress = progress / 0.5;\r\n                        x = current.x - currentDx * collapseProgress;\r\n                        y = current.y - currentDy * collapseProgress;\r\n                    } else {\r\n                        // Expand from center to target\r\n                        const expandProgress = (progress - 0.5) / 0.5;\r\n                        x = cx + (target.x - cx) * expandProgress;\r\n                        y = cy + (target.y - cy) * expandProgress;\r\n                    }\r\n                } else {\r\n                    // Both are radial shapes - morph through center\r\n                    const currentDx = current.x - cx;\r\n                    const currentDy = current.y - cy;\r\n                    const targetDx = target.x - cx;\r\n                    const targetDy = target.y - cy;\r\n                    \r\n                    if (progress < 0.5) {\r\n                        // Collapse current shape to center\r\n                        const collapseProgress = progress / 0.5;\r\n                        x = current.x - currentDx * collapseProgress;\r\n                        y = current.y - currentDy * collapseProgress;\r\n                    } else {\r\n                        // Expand from center to target shape\r\n                        const expandProgress = (progress - 0.5) / 0.5;\r\n                        x = cx + targetDx * expandProgress;\r\n                        y = cy + targetDy * expandProgress;\r\n                    }\r\n                }\r\n            } else if (this.morphMode === 'spiral') {\r\n                // Spiral interpolation\r\n                const angle = progress * Math.PI * 2;\r\n                const spiral = Math.sin(angle + i * 0.2) * 0.02 * (1 - Math.abs(progress - 0.5) * 2);\r\n                x = current.x + (target.x - current.x) * progress + spiral;\r\n                y = current.y + (target.y - current.y) * progress + spiral;\r\n            } else if (this.morphMode === 'wave') {\r\n                // Wave interpolation\r\n                const wave = Math.sin(i * 0.3 + progress * Math.PI * 4) * 0.01;\r\n                x = current.x + (target.x - current.x) * progress + wave;\r\n                y = current.y + (target.y - current.y) * progress + wave;\r\n            } else {\r\n                // Smooth interpolation\r\n                x = current.x + (target.x - current.x) * progress;\r\n                y = current.y + (target.y - current.y) * progress;\r\n            }\r\n            \r\n            points.push({ x, y });\r\n        }\r\n        \r\n        return this.applyAudioDeformation(points);\r\n    }\r\n    \r\n    /**\r\n     * Apply audio-reactive deformation to points\r\n     */\r\n    applyAudioDeformation(points) {\r\n        // Delegate to AudioDeformer module\r\n        return this.audioDeformer.applyAudioDeformation(points);\r\n    }\r\n    \r\n    /**\r\n     * Set audio deformation from analyzer with throttling\r\n     * @param {number} value - Deformation value (-1 to 1)\r\n     */\r\n    setAudioDeformation(value) {\r\n        const now = Date.now();\r\n        if (now - this.lastAudioUpdate > this.audioUpdateInterval) {\r\n            this.audioDeformation = Math.max(-1, Math.min(1, value));\r\n            this.lastAudioUpdate = now;\r\n            // CRITICAL: Also update the AudioDeformer module!\r\n            if (this.audioDeformer) {\r\n                this.audioDeformer.setAudioDeformation(Math.abs(this.audioDeformation)); // Pass absolute value\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set vocal energy from analyzer with throttling\r\n     * @param {number} value - Energy value (0 to 1)\r\n     */\r\n    setVocalEnergy(value) {\r\n        const now = Date.now();\r\n        if (now - this.lastVocalUpdate > this.audioUpdateInterval) {\r\n            this.vocalEnergy = Math.max(0, Math.min(1, value));\r\n            this.lastVocalUpdate = now;\r\n            // Also update the AudioDeformer module\r\n            if (this.audioDeformer) {\r\n                this.audioDeformer.setVocalEnergy(this.vocalEnergy);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Get transition configuration\r\n     */\r\n    getTransitionConfig(from, to) {\r\n        const fromShape = SHAPE_DEFINITIONS[from];\r\n        const toShape = SHAPE_DEFINITIONS[to];\r\n        \r\n        // Special transitions for moon - add a dreamy quality\r\n        if (to === 'moon') {\r\n            return {\r\n                type: 'to_moon',\r\n                easing: 'easeInOutCubic',  // Smooth acceleration/deceleration\r\n                duration: 1500,  // Slightly longer for dramatic effect\r\n                glowIntensity: 1.5,  // Extra glow during transition\r\n                fadeInCrescent: true  // Fade in the crescent shadow\r\n            };\r\n        }\r\n        \r\n        \r\n        // Moon to lunar - special eclipse transition\r\n        if (from === 'moon' && to === 'lunar') {\r\n            return {\r\n                type: 'moon_to_lunar',\r\n                easing: 'easeInOutSine',\r\n                duration: 2000,  // Slower for dramatic effect\r\n                slideOutCrescent: false, // Don't use standard slide\r\n                description: 'Crescent shadow moves to center and becomes lunar eclipse'\r\n            };\r\n        }\r\n        \r\n        // All other moon transitions - shadow slides away first\r\n        if (from === 'moon') {\r\n            return {\r\n                type: 'from_moon', \r\n                easing: 'easeInOutCubic',\r\n                duration: 1000,\r\n                slideOutCrescent: true,  // Shadow ALWAYS slides away\r\n                shadowSlideRatio: 0.4,   // First 40% for shadow slide\r\n                description: 'Moon shadow slides away THEN morphs to target'\r\n            };\r\n        }\r\n        \r\n        \r\n        // Other shapes to lunar - morph to circle first, then eclipse comes in\r\n        if (to === 'lunar') {\r\n            return {\r\n                type: 'eclipse_enter_lunar',\r\n                startAngle: -30  // Eclipse enters from top-left like moon crescent\r\n            };\r\n        }\r\n        \r\n        // Lunar to moon - special case: shadow exits to crescent position and stays\r\n        if (from === 'lunar' && to === 'moon') {\r\n            return {\r\n                type: 'lunar_to_moon',\r\n                exitAngle: -30\r\n            };\r\n        }\r\n        \r\n        // Lunar to other shapes - eclipse exits first, then morph to target shape\r\n        if (from === 'lunar') {\r\n            return {\r\n                type: 'eclipse_exit_lunar',\r\n                exitAngle: -30  // Eclipse exits at same angle\r\n            };\r\n        }\r\n        \r\n        // Special eclipse transitions for other shapes\r\n        if (fromShape?.shadow?.type === 'none' && toShape?.shadow?.type === 'solar') {\r\n            return {\r\n                type: 'eclipse_enter',\r\n                direction: 'right'\r\n            };\r\n        }\r\n        \r\n        if (fromShape?.shadow?.type === 'solar' && toShape?.shadow?.type === 'none') {\r\n            return {\r\n                type: 'eclipse_exit',\r\n                direction: 'left'\r\n            };\r\n        }\r\n        \r\n        // Sun transitions need effect fading/blooming\r\n        if (from === 'sun' && to !== 'sun') {\r\n            return {\r\n                type: 'sun_fade',\r\n                fadeEffects: true\r\n            };\r\n        }\r\n        \r\n        if (from !== 'sun' && to === 'sun') {\r\n            return {\r\n                type: 'sun_bloom',\r\n                bloomEffects: true\r\n            };\r\n        }\r\n        \r\n        return {\r\n            type: 'standard'\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Get current shadow configuration\r\n     * @returns {Object} Shadow configuration\r\n     */\r\n    getCurrentShadow() {\r\n        // Default to circle if currentShape is somehow null/undefined\r\n        const shapeName = this.currentShape || 'circle';\r\n        const currentDef = SHAPE_DEFINITIONS[shapeName];\r\n        const targetDef = this.targetShape ? SHAPE_DEFINITIONS[this.targetShape] : null;\r\n        \r\n        const currentShadow = currentDef?.shadow || { type: 'none' };\r\n        const targetShadow = targetDef?.shadow || null;\r\n        \r\n        \r\n        // If not transitioning, return current shadow\r\n        if (!this.isTransitioning || !targetShadow) {\r\n            return currentShadow;\r\n        }\r\n        \r\n        // Handle eclipse progressions and other special transitions\r\n        const easedProgress = this.morphProgress;\r\n        \r\n        \r\n        // FROM MOON - ALWAYS slide shadow away first (other shapes)\r\n        if (this.transitionConfig && this.transitionConfig.type === 'from_moon' && this.transitionConfig.slideOutCrescent) {\r\n            const slideRatio = this.transitionConfig.shadowSlideRatio || 0.4;\r\n            \r\n            // PHASE 1: Shadow slides away\r\n            if (easedProgress < slideRatio) {\r\n                const slideProgress = easedProgress / slideRatio; // 0 to 1 during slide\r\n                const angle = -30 * Math.PI / 180; // Moon shadow angle (bottom-left)\r\n                \r\n                // Shadow continues sliding in its direction (away to bottom-left)\r\n                const startOffset = 0.7;  // Where moon shadow normally sits\r\n                const endOffset = 2.5;    // Far off screen\r\n                const currentOffset = startOffset + (endOffset - startOffset) * slideProgress;\r\n                \r\n                const offsetX = Math.cos(angle) * currentOffset;\r\n                const offsetY = Math.sin(angle) * currentOffset;\r\n                \r\n                // Keep full opacity while sliding, slight fade at the end\r\n                const coverage = slideProgress > 0.8 ? 0.85 * (1 - (slideProgress - 0.8) * 5) : 0.85;\r\n                \r\n                return {\r\n                    type: 'crescent',\r\n                    coverage: coverage,\r\n                    angle: -30,\r\n                    offset: currentOffset,\r\n                    shadowX: offsetX,\r\n                    shadowY: offsetY\r\n                };\r\n            }\r\n            \r\n            // PHASE 2: No shadow, morph can proceed\r\n            return { type: 'none' };\r\n        }\r\n        \r\n        // Moon to lunar - smooth crescent to eclipse transition\r\n        if (this.transitionConfig && this.transitionConfig.type === 'moon_to_lunar') {\r\n            const angle = this.transitionConfig.startAngle * Math.PI / 180;\r\n            const offsetProgress = 1 - easedProgress; // Goes from 1 to 0 (crescent position to center)\r\n            const offsetX = Math.cos(angle) * 0.7 * offsetProgress;\r\n            const offsetY = Math.sin(angle) * 0.7 * offsetProgress;\r\n            \r\n            // Smooth transition from crescent to lunar\r\n            const lunarBlend = Math.pow(easedProgress, 2); // Quadratic for smooth blend\r\n            \r\n            // Gradually change from crescent to lunar shadow\r\n            if (easedProgress < 0.6) {\r\n                // Still mostly crescent, moving to center\r\n                return {\r\n                    type: 'crescent',\r\n                    coverage: 0.85 * (1 - lunarBlend * 0.2), // Slight fade\r\n                    angle: this.transitionConfig.startAngle,\r\n                    offset: 0.7 * offsetProgress,\r\n                    shadowX: offsetX,\r\n                    shadowY: offsetY\r\n                };\r\n            } else {\r\n                // Smooth blend to lunar shadow\r\n                const blendPhase = (easedProgress - 0.6) / 0.4; // 0 to 1 for last 40%\r\n                const smoothBlend = Math.sin(blendPhase * Math.PI / 2); // Smooth S-curve\r\n                \r\n                return {\r\n                    type: 'lunar',\r\n                    coverage: 0.85 + 0.1 * smoothBlend, // Gradually increase to 0.95\r\n                    color: `rgba(80, 20, 0, ${0.7 + 0.2 * smoothBlend})`, // Fade in red\r\n                    shadowX: offsetX * (1 - smoothBlend), // Smooth center\r\n                    shadowY: offsetY * (1 - smoothBlend),\r\n                    diffusion: smoothBlend,\r\n                    shadowProgress: easedProgress\r\n                };\r\n            }\r\n        }\r\n        \r\n        // Eclipse entering lunar - smooth shadow entry\r\n        if (this.transitionConfig && this.transitionConfig.type === 'eclipse_enter_lunar') {\r\n            // First 30%: Just morph shape, no shadow (reduced from 40%)\r\n            if (easedProgress < 0.3) {\r\n                return { type: 'none' };\r\n            }\r\n            \r\n            // Last 70%: Shadow smoothly enters and transforms\r\n            const shadowProgress = (easedProgress - 0.3) / 0.7; // 0 to 1 for shadow animation\r\n            const smoothProgress = Math.sin(shadowProgress * Math.PI / 2); // Smooth ease-in\r\n            const angle = this.transitionConfig.startAngle * Math.PI / 180;\r\n            const offsetProgress = 1 - smoothProgress; // Goes from 1 to 0\r\n            const offsetX = Math.cos(angle) * 0.7 * offsetProgress;\r\n            const offsetY = Math.sin(angle) * 0.7 * offsetProgress;\r\n            \r\n            // Smooth transition throughout\r\n            if (shadowProgress < 0.7) {\r\n                // Crescent shadow sliding in with gradual fade\r\n                const fadeIn = Math.pow(shadowProgress / 0.7, 0.5); // Smooth fade in\r\n                return {\r\n                    type: 'crescent',\r\n                    coverage: 0.85 * fadeIn,\r\n                    angle: this.transitionConfig.startAngle,\r\n                    offset: 0.7 * offsetProgress,\r\n                    shadowX: offsetX,\r\n                    shadowY: offsetY\r\n                };\r\n            } else {\r\n                // Smooth blend to lunar\r\n                const blendProgress = (shadowProgress - 0.7) / 0.3; // Last 30% for blend\r\n                const smoothBlend = Math.sin(blendProgress * Math.PI / 2); // Smooth curve\r\n                \r\n                return {\r\n                    type: 'lunar',\r\n                    coverage: 0.85 + 0.1 * smoothBlend,\r\n                    color: `rgba(80, 20, 0, ${0.6 + 0.3 * smoothBlend})`,\r\n                    shadowX: offsetX * (1 - smoothBlend),\r\n                    shadowY: offsetY * (1 - smoothBlend),\r\n                    diffusion: smoothBlend,\r\n                    shadowProgress: shadowProgress\r\n                };\r\n            }\r\n        }\r\n        \r\n        // Lunar to moon - smooth shadow transformation and movement\r\n        if (this.transitionConfig && this.transitionConfig.type === 'lunar_to_moon') {\r\n            const angle = this.transitionConfig.exitAngle * Math.PI / 180;\r\n            \r\n            // Smooth movement curve\r\n            const movementCurve = Math.sin(easedProgress * Math.PI / 2); // Smooth ease-out\r\n            const offsetX = Math.cos(angle) * 0.7 * movementCurve;\r\n            const offsetY = Math.sin(angle) * 0.7 * movementCurve;\r\n            \r\n            // Smooth blend between lunar and crescent\r\n            if (easedProgress < 0.6) {\r\n                // Lunar shadow gradually transforming\r\n                const transformPhase = easedProgress / 0.6;\r\n                const smoothTransform = Math.pow(transformPhase, 0.7);\r\n                \r\n                return {\r\n                    type: 'lunar',\r\n                    coverage: 0.95 - (0.1 * smoothTransform),\r\n                    color: `rgba(80, 20, 0, ${0.9 - 0.3 * smoothTransform})`,\r\n                    shadowX: offsetX * 0.7, // Start moving earlier\r\n                    shadowY: offsetY * 0.7,\r\n                    diffusion: 1 - smoothTransform\r\n                };\r\n            } else {\r\n                // Smooth transition to crescent\r\n                const crescentPhase = (easedProgress - 0.6) / 0.4;\r\n                const fadeIn = Math.sin(crescentPhase * Math.PI / 2);\r\n                \r\n                return {\r\n                    type: 'crescent',\r\n                    coverage: 0.85 * fadeIn + 0.1, // Smooth fade in\r\n                    angle: this.transitionConfig.exitAngle,\r\n                    offset: 0.7,\r\n                    shadowX: offsetX,\r\n                    shadowY: offsetY\r\n                };\r\n            }\r\n        }\r\n        \r\n        // Eclipse exiting lunar - smooth shadow exit\r\n        if (this.transitionConfig && this.transitionConfig.type === 'eclipse_exit_lunar') {\r\n            // First 70%: Shadow smoothly exits\r\n            if (easedProgress < 0.7) {\r\n                const shadowProgress = easedProgress / 0.7; // 0 to 1 for shadow exit\r\n                const smoothExit = Math.sin(shadowProgress * Math.PI / 2); // Smooth acceleration\r\n                const angle = this.transitionConfig.exitAngle * Math.PI / 180;\r\n                \r\n                // Gradual transformation and movement\r\n                if (shadowProgress < 0.4) {\r\n                    // Lunar shadow gradually transforming\r\n                    const transformPhase = shadowProgress / 0.4;\r\n                    const diffusion = 1 - transformPhase;\r\n                    const moveStart = transformPhase * 0.3; // Start moving early\r\n                    \r\n                    return {\r\n                        type: 'lunar',\r\n                        coverage: 0.95 - (0.1 * transformPhase),\r\n                        color: `rgba(80, 20, 0, ${0.9 - 0.2 * transformPhase})`,\r\n                        shadowX: Math.cos(angle) * 0.7 * moveStart,\r\n                        shadowY: Math.sin(angle) * 0.7 * moveStart,\r\n                        diffusion: diffusion\r\n                    };\r\n                } else {\r\n                    // Smooth exit as crescent\r\n                    const exitPhase = (shadowProgress - 0.4) / 0.6;\r\n                    const smoothMove = Math.pow(exitPhase, 0.8);\r\n                    const offsetX = Math.cos(angle) * 0.7 * smoothMove;\r\n                    const offsetY = Math.sin(angle) * 0.7 * smoothMove;\r\n                    const fadeOut = 1 - Math.pow(exitPhase, 2); // Gradual fade\r\n                    \r\n                    return {\r\n                        type: 'crescent',\r\n                        coverage: 0.85 * fadeOut,\r\n                        angle: this.transitionConfig.exitAngle,\r\n                        offset: 0.7 * smoothMove,\r\n                        shadowX: offsetX,\r\n                        shadowY: offsetY\r\n                    };\r\n                }\r\n            }\r\n            \r\n            // Last 30%: Just morph shape, no shadow\r\n            return { type: 'none' };\r\n        }\r\n        \r\n        // Solar eclipse transitions\r\n        if (this.transitionConfig && this.transitionConfig.type === 'eclipse_enter') {\r\n            const shadowX = 1.5 - (easedProgress * 1.5); // From right\r\n            \r\n            return {\r\n                ...targetShadow,\r\n                shadowX: shadowX,\r\n                shadowProgress: easedProgress\r\n            };\r\n        } else if (this.transitionConfig.type === 'eclipse_exit') {\r\n            const shadowX = -easedProgress * 1.5; // To left\r\n            \r\n            return {\r\n                ...currentShadow,\r\n                coverage: currentShadow.coverage * (1 - easedProgress),\r\n                shadowX: shadowX,\r\n                shadowProgress: 1 - easedProgress\r\n            };\r\n        } else if (this.transitionConfig.type === 'sun_fade') {\r\n            // Smooth fading of sun effects\r\n            const fadeMultiplier = 1 - easedProgress;\r\n            \r\n            // Gradual fade with different timing for each effect\r\n            return {\r\n                ...currentShadow,\r\n                intensity: (currentShadow.intensity || 1) * Math.pow(fadeMultiplier, 0.7), // Slower fade\r\n                corona: currentShadow.corona,\r\n                coronaOpacity: fadeMultiplier, // Fade corona smoothly\r\n                flares: currentShadow.flares,\r\n                flaresOpacity: Math.pow(fadeMultiplier, 1.5), // Flares fade faster\r\n                texture: currentShadow.texture,\r\n                textureOpacity: Math.pow(fadeMultiplier, 2), // Texture fades fastest\r\n                turbulence: (currentShadow.turbulence || 0.3) * fadeMultiplier\r\n            };\r\n        } else if (this.transitionConfig.type === 'sun_bloom') {\r\n            // Smooth blooming of sun effects\r\n            const bloomProgress = easedProgress;\r\n            \r\n            // Gradual bloom with different timing for each effect\r\n            return {\r\n                ...targetShadow,\r\n                intensity: (targetShadow.intensity || 1) * Math.pow(bloomProgress, 1.5), // Start slow\r\n                corona: targetShadow.corona,\r\n                coronaOpacity: Math.pow(bloomProgress, 0.8), // Corona blooms gradually\r\n                flares: targetShadow.flares,\r\n                flaresOpacity: bloomProgress > 0.3 ? Math.pow((bloomProgress - 0.3) / 0.7, 0.7) : 0, // Flares appear later\r\n                texture: targetShadow.texture,\r\n                textureOpacity: bloomProgress > 0.5 ? Math.pow((bloomProgress - 0.5) / 0.5, 2) : 0, // Texture appears last\r\n                turbulence: (targetShadow.turbulence || 0.3) * bloomProgress\r\n            };\r\n        }\r\n        \r\n        // Standard transition\r\n        if (currentShadow.type !== 'none' || targetShadow.type !== 'none') {\r\n            const coverage = (currentShadow.coverage || 0) + \r\n                           ((targetShadow.coverage || 0) - (currentShadow.coverage || 0)) * easedProgress;\r\n            \r\n            return {\r\n                type: targetShadow.type !== 'none' ? targetShadow.type : currentShadow.type,\r\n                coverage: coverage,\r\n                angle: targetShadow.angle || currentShadow.angle || 0,\r\n                softness: targetShadow.softness || currentShadow.softness || 0.2,\r\n                progress: easedProgress\r\n            };\r\n        }\r\n        \r\n        return currentShadow;\r\n    }\r\n    \r\n    /**\r\n     * Get custom renderer for current shape\r\n     * @returns {Function|null} Custom render function\r\n     */\r\n    getCurrentRenderer() {\r\n        // For now, return null - rendering is handled by EmotiveRenderer\r\n        // This can be extended later if we want shape-specific rendering\r\n        return null;\r\n    }\r\n    \r\n    /**\r\n     * Apply easing function\r\n     */\r\n    applyEasing(t) {\r\n        const easing = this.transitionConfig?.easing || this.easing || 'linear';\r\n        switch (easing) {\r\n            case 'linear':\r\n                return t;\r\n            case 'easeInQuad':\r\n                return t * t;\r\n            case 'easeOutQuad':\r\n                return t * (2 - t);\r\n            case 'easeInOutQuad':\r\n                return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\r\n            case 'easeInOutSine':\r\n                return -(Math.cos(Math.PI * t) - 1) / 2;\r\n            case 'easeInOutCubic':\r\n            default:\r\n                return t < 0.5 \r\n                    ? 4 * t * t * t \r\n                    : 1 - Math.pow(-2 * t + 2, 3) / 2;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Calculate BPM from onset intervals with improved stability\r\n     */\r\n    calculateBPM() {\r\n        return this.musicDetector.calculateBPM();\r\n    }\r\n    \r\n    /**\r\n     * Find tempo candidates from onset intervals\r\n     */\r\n    findTempoCandidates(intervals) {\r\n        return this.musicDetector.findTempoCandidates(intervals);\r\n    }\r\n    \r\n    /**\r\n     * Cluster similar intervals together\r\n     */\r\n    clusterIntervals(intervals) {\r\n        return this.musicDetector.clusterIntervals(intervals);\r\n    }\r\n    \r\n    /**\r\n     * Check if BPM is a harmonic of the fundamental\r\n     */\r\n    checkHarmonicRelation(bpm1, bpm2) {\r\n        return this.musicDetector.checkHarmonicRelation(bpm1, bpm2);\r\n    }\r\n    \r\n    /**\r\n     * Detect time signature from onset patterns - delegated to MusicDetector\r\n     */\r\n    detectTimeSignature() {\r\n        // Set fast detection mode if needed\r\n        this.musicDetector.forceFastDetection = this.forceFastDetection;\r\n        \r\n        // Delegate to MusicDetector\r\n        const timeSignature = this.musicDetector.detectTimeSignature();\r\n        \r\n        // Update local references for compatibility\r\n        this.detectedTimeSignature = this.musicDetector.detectedTimeSignature;\r\n        this.timeSignatureConfidence = this.musicDetector.timeSignatureConfidence;\r\n        this.timeSignatureLocked = this.musicDetector.timeSignatureLocked;\r\n        \r\n        return timeSignature;\r\n    }\r\n    \r\n    /**\r\n     * Test specifically for 3/4 waltz pattern - delegated to MusicDetector\r\n     */\r\n    testWaltzPattern(onsets, beatInterval) {\r\n        return this.musicDetector.testWaltzPattern(onsets, beatInterval);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Reset music detection when new audio is loaded\r\n     */\r\n    resetMusicDetection() {\r\n        // Store if we should force fast detection (for resampling)\r\n        this.forceFastDetection = true;\r\n        \r\n        // Reset music detector\r\n        this.musicDetector.reset();\r\n        \r\n        // Set fast detection on the music detector\r\n        this.musicDetector.forceFastDetection = true;\r\n        \r\n        // Reset local references\r\n        this.onsetThreshold = 0;\r\n        this.detectedBPM = 0;\r\n        this.bpmConfidence = 0;\r\n        \r\n        // Reset time signature detection (still local for now)\r\n        this.onsetStrengths = [];\r\n        this.detectedTimeSignature = null;\r\n        this.timeSignatureConfidence = 0;\r\n        \r\n        // Force immediate resampling on next update\r\n        this.musicDetector.lastBPMCalculation = 0;\r\n        this.measureStartTime = 0;\r\n        this.timeSignatureHistory = [];\r\n        this.timeSignatureLocked = false;\r\n        \r\n        // Reset spectral analysis\r\n        this.spectralHistory = [];\r\n        this.spectralFluxHistory = [];\r\n        \r\n        // Clear UI displays\r\n        const timeSigDisplay = document.getElementById('time-sig-display');\r\n        if (timeSigDisplay) {\r\n            timeSigDisplay.textContent = '—';\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Get current detected BPM and time signature\r\n     */\r\n    getCurrentMusicInfo() {\r\n        return {\r\n            bpm: this.detectedBPM,\r\n            timeSignature: this.detectedTimeSignature,\r\n            bpmLocked: this.tempoLocked,\r\n            timeSigLocked: this.timeSignatureLocked\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Fallback circle generation\r\n     */\r\n    generateFallbackCircle() {\r\n        const points = [];\r\n        for (let i = 0; i < this.numPoints; i++) {\r\n            const angle = (i / this.numPoints) * Math.PI * 2;\r\n            points.push({\r\n                x: 0.5 + Math.cos(angle) * 0.5,\r\n                y: 0.5 + Math.sin(angle) * 0.5\r\n            });\r\n        }\r\n        return points;\r\n    }\r\n    \r\n    /**\r\n     * Get current state\r\n     */\r\n    getState() {\r\n        return {\r\n            currentShape: this.currentShape,\r\n            targetShape: this.targetShape,\r\n            isTransitioning: this.isTransitioning,\r\n            progress: this.morphProgress,\r\n            audioDeformation: this.audioDeformation,\r\n            vocalEnergy: this.vocalEnergy\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Get progress (0-1)\r\n     * @param {boolean} visual - Return smoothed visual progress instead of logical\r\n     */\r\n    getProgress(visual = true) {\r\n        // Default to visual progress for smooth rendering\r\n        return visual ? this.visualProgress : this.morphProgress;\r\n    }\r\n    \r\n    /**\r\n     * Check if currently transitioning\r\n     */\r\n    isInTransition() {\r\n        return this.isTransitioning;\r\n    }\r\n}\r\n\r\nexport default ShapeMorpher;","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE - Audio Analysis System\r\n *  └─○═╝                                                                             \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview Real-time audio analysis for vocal visualization\r\n * @author Emotive Engine Team\r\n * @module core/AudioAnalyzer\r\n */\r\n\r\n/**\r\n * AudioAnalyzer - Analyzes audio for vocal visualization\r\n */\r\nexport class AudioAnalyzer {\r\n    constructor() {\r\n        this.audioContext = null;\r\n        this.analyser = null;\r\n        this.source = null;\r\n        this.elementSource = null;  // Track audio element source separately\r\n        this.dataArray = null;\r\n        this.isAnalyzing = false;\r\n        this.connectedElement = null;\r\n        this.gainNode = null;  // Store gain node for cleanup\r\n        \r\n        // Frequency band configuration\r\n        this.frequencyBands = 32;\r\n        this.smoothingFactor = 0.3; // Lower smoothing for better responsiveness\r\n        \r\n        // Vocal detection\r\n        this.vocalRange = { min: 80, max: 1000 }; // Hz - typical vocal range\r\n        this.currentAmplitude = 0;\r\n        this.currentFrequencies = new Array(this.frequencyBands).fill(0);\r\n        \r\n        // Beat detection (for rhythm sync)\r\n        this.beatThreshold = 0.3;\r\n        this.lastBeatTime = 0;\r\n        this.beatCallbacks = [];\r\n    }\r\n    \r\n    /**\r\n     * Initialize audio context and analyzer\r\n     */\r\n    async init() {\r\n        try {\r\n            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            this.analyser = this.audioContext.createAnalyser();\r\n            this.analyser.fftSize = 2048; // Good balance of frequency/time resolution\r\n            this.analyser.smoothingTimeConstant = 0.5; // Moderate smoothing\r\n            \r\n            const bufferLength = this.analyser.frequencyBinCount;\r\n            this.dataArray = new Uint8Array(bufferLength);\r\n            \r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Connect audio element for analysis\r\n     * @param {HTMLAudioElement} audioElement - Audio element to analyze\r\n     */\r\n    connectAudioElement(audioElement) {\r\n        if (!this.audioContext) {\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            // Create source from audio element (only if not already created)\r\n            if (!this.elementSource || this.connectedElement !== audioElement) {\r\n                this.elementSource = this.audioContext.createMediaElementSource(audioElement);\r\n                this.elementSource.connect(this.analyser);\r\n                this.elementSource.connect(this.audioContext.destination); // Pass through audio\r\n            }\r\n            this.source = this.elementSource;  // Set current source\r\n            this.connectedElement = audioElement;\r\n            this.isAnalyzing = true;\r\n            \r\n            // Start analysis loop\r\n            this.analyze();\r\n        } catch (error) {\r\n            // If already connected, just restart analysis\r\n            if (error.message && error.message.includes('already been used')) {\r\n                this.source = this.elementSource;  // Use existing source\r\n                this.connectedElement = audioElement;\r\n                this.isAnalyzing = true;\r\n                this.analyze();\r\n            } else {\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Main analysis loop\r\n     */\r\n    analyze() {\r\n        if (!this.isAnalyzing) return;\r\n        \r\n        requestAnimationFrame(() => this.analyze());\r\n        \r\n        // Get frequency data\r\n        this.analyser.getByteFrequencyData(this.dataArray);\r\n        \r\n        // Also try time domain data to see if mic is working\r\n        const timeData = new Uint8Array(this.analyser.frequencyBinCount);\r\n        this.analyser.getByteTimeDomainData(timeData);\r\n        \r\n        // Debug: Check both frequency and time domain\r\n        if (!this._debugLogged) {\r\n            const freqMax = Math.max(...this.dataArray);\r\n            const timeMax = Math.max(...timeData);\r\n            const timeMin = Math.min(...timeData);\r\n            \r\n            if (freqMax > 0 || (timeMax !== 128 || timeMin !== 128)) {\r\n                console.log('AudioAnalyzer: Got audio data! Freq max:', freqMax, 'Time range:', timeMin, '-', timeMax);\r\n                this._debugLogged = true;\r\n            } else {\r\n                // Log every 60 frames (1 second at 60fps)\r\n                if (!this._debugCounter) this._debugCounter = 0;\r\n                this._debugCounter++;\r\n                if (this._debugCounter % 60 === 0) {\r\n                    console.log('AudioAnalyzer: No data. Freq all zeros, Time at 128 (silence)');\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Calculate overall amplitude\r\n        let sum = 0;\r\n        let vocalSum = 0;\r\n        let vocalCount = 0;\r\n        \r\n        // Frequency to bin conversion\r\n        const nyquist = this.audioContext.sampleRate / 2;\r\n        const binHz = nyquist / this.dataArray.length;\r\n        const vocalMinBin = Math.floor(this.vocalRange.min / binHz);\r\n        const vocalMaxBin = Math.ceil(this.vocalRange.max / binHz);\r\n        \r\n        // Process frequency data\r\n        for (let i = 0; i < this.dataArray.length; i++) {\r\n            const value = this.dataArray[i] / 255; // Normalize to 0-1\r\n            sum += value;\r\n            \r\n            // Check if in vocal range\r\n            if (i >= vocalMinBin && i <= vocalMaxBin) {\r\n                vocalSum += value;\r\n                vocalCount++;\r\n            }\r\n        }\r\n        \r\n        // Calculate amplitudes\r\n        this.currentAmplitude = sum / this.dataArray.length;\r\n        const vocalAmplitude = vocalCount > 0 ? vocalSum / vocalCount : 0;\r\n        \r\n        // Extract frequency bands for visualization\r\n        this.extractFrequencyBands();\r\n        \r\n        // Detect beats\r\n        this.detectBeat(this.currentAmplitude);\r\n        \r\n        // Return analysis data\r\n        return {\r\n            amplitude: this.currentAmplitude,\r\n            vocalAmplitude: vocalAmplitude,\r\n            frequencies: this.currentFrequencies,\r\n            rawData: this.dataArray\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Extract frequency bands for shape deformation\r\n     */\r\n    extractFrequencyBands() {\r\n        const bandsPerBin = Math.floor(this.dataArray.length / this.frequencyBands);\r\n        \r\n        for (let i = 0; i < this.frequencyBands; i++) {\r\n            let sum = 0;\r\n            const startBin = i * bandsPerBin;\r\n            const endBin = Math.min(startBin + bandsPerBin, this.dataArray.length);\r\n            \r\n            for (let j = startBin; j < endBin; j++) {\r\n                sum += this.dataArray[j] / 255; // Normalize\r\n            }\r\n            \r\n            // Apply smoothing\r\n            const newValue = sum / bandsPerBin;\r\n            this.currentFrequencies[i] = this.currentFrequencies[i] * this.smoothingFactor + \r\n                                         newValue * (1 - this.smoothingFactor);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Simple beat detection\r\n     */\r\n    detectBeat(amplitude) {\r\n        const now = performance.now();\r\n        \r\n        // Simple threshold-based beat detection\r\n        // Allow faster beats - 273ms = 220 BPM, but go down to 60ms for very fast tapping\r\n        if (amplitude > this.beatThreshold && now - this.lastBeatTime > 60) {\r\n            this.lastBeatTime = now;\r\n            \r\n            // Trigger beat callbacks\r\n            this.beatCallbacks.forEach(callback => callback(amplitude));\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Get current vocal instability (0-1)\r\n     */\r\n    getVocalInstability() {\r\n        // Calculate instability based on frequency variance\r\n        let variance = 0;\r\n        const mean = this.currentFrequencies.reduce((a, b) => a + b, 0) / this.frequencyBands;\r\n        \r\n        for (let i = 0; i < this.frequencyBands; i++) {\r\n            variance += Math.pow(this.currentFrequencies[i] - mean, 2);\r\n        }\r\n        \r\n        variance = Math.sqrt(variance / this.frequencyBands);\r\n        \r\n        // Combine with amplitude for overall instability\r\n        const instability = Math.min(1, variance * 2 + this.currentAmplitude * 0.5);\r\n        return instability;\r\n    }\r\n    \r\n    /**\r\n     * Get analysis data formatted for ShapeMorpher\r\n     */\r\n    getShapeMorpherData() {\r\n        return {\r\n            instability: this.getVocalInstability(),\r\n            frequencies: [...this.currentFrequencies],\r\n            amplitude: this.currentAmplitude\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Add beat detection callback\r\n     */\r\n    onBeat(callback) {\r\n        this.beatCallbacks.push(callback);\r\n    }\r\n    \r\n    /**\r\n     * Stop analysis\r\n     */\r\n    stop() {\r\n        this.isAnalyzing = false;\r\n        \r\n        if (this.gainNode) {\r\n            try {\r\n                this.gainNode.disconnect();\r\n            } catch (e) {}\r\n            this.gainNode = null;\r\n        }\r\n        \r\n        // Reconnect element source to analyser if it was disconnected\r\n        if (this.elementSource && this.connectedElement) {\r\n            try {\r\n                this.elementSource.connect(this.analyser);\r\n            } catch (e) {\r\n                // Already connected, that's fine\r\n            }\r\n            this.source = this.elementSource;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Resume audio context (needed after user interaction)\r\n     */\r\n    async resume() {\r\n        if (this.audioContext && this.audioContext.state === 'suspended') {\r\n            await this.audioContext.resume();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Cleanup\r\n     */\r\n    destroy() {\r\n        this.stop();\r\n        \r\n        if (this.audioContext) {\r\n            this.audioContext.close();\r\n            this.audioContext = null;\r\n        }\r\n        \r\n        this.analyser = null;\r\n        this.dataArray = null;\r\n        this.beatCallbacks = [];\r\n    }\r\n}","/**\r\n * GestureCompatibility - Core gesture compatibility and chord system\r\n * Defines which gestures can execute simultaneously vs sequentially\r\n * Part of the Emotive Engine core\r\n */\r\n\r\nexport class GestureCompatibility {\r\n    constructor() {\r\n        // Musical timing classes - defines when gestures should fire\r\n        this.timingClasses = {\r\n            downbeat: {\r\n                gestures: ['bounce', 'jump', 'headBob', 'spin', 'orbit'],\r\n                timing: 1.0,  // Fire on the beat\r\n                priority: 1,\r\n                description: 'Strong emphasis on the downbeat'\r\n            },\r\n            upbeat: {\r\n                gestures: ['wave', 'nod', 'point', 'reach'],\r\n                timing: 0.5,  // Fire on the half-beat\r\n                priority: 2,\r\n                description: 'Medium emphasis on upbeat'\r\n            },\r\n            offbeat: {\r\n                gestures: ['wiggle', 'sway', 'lean', 'tilt', 'groove'],\r\n                timing: 0.5,  // Fire between beats (syncopated)\r\n                priority: 3,\r\n                description: 'Syncopated, creates groove'\r\n            },\r\n            subdivision: {\r\n                gestures: ['pulse', 'sparkle', 'flash', 'shimmer', 'flicker'],\r\n                timing: 0.25,  // Can fire on quarter beats\r\n                priority: 4,\r\n                description: 'Quick accents and fills'\r\n            },\r\n            continuous: {\r\n                gestures: ['breathe', 'float', 'rain'],\r\n                timing: -1,  // Can start anytime, flows across beats\r\n                priority: 5,\r\n                description: 'Ambient, continuous motion'\r\n            }\r\n        };\r\n\r\n        // Fill patterns for automatic motion between gestures\r\n        this.fillPatterns = {\r\n            subtle: ['breathe', 'float'],\r\n            rhythmic: ['pulse', 'shimmer'],\r\n            energetic: ['wiggle', 'sparkle'],\r\n            smooth: ['sway', 'glow']\r\n        };\r\n\r\n        // Dynamic density settings based on BPM\r\n        this.densityProfiles = {\r\n            sparse: {\r\n                fillProbability: 0.1,\r\n                subdivisionLevel: 2,  // Half notes only\r\n                description: 'Minimal movement'\r\n            },\r\n            moderate: {\r\n                fillProbability: 0.3,\r\n                subdivisionLevel: 4,  // Quarter notes\r\n                description: 'Balanced movement'\r\n            },\r\n            dense: {\r\n                fillProbability: 0.5,\r\n                subdivisionLevel: 8,  // Eighth notes\r\n                description: 'Busy, energetic'\r\n            },\r\n            chaos: {\r\n                fillProbability: 0.8,\r\n                subdivisionLevel: 16,  // Sixteenth notes\r\n                description: 'Maximum energy'\r\n            }\r\n        };\r\n\r\n        // Gesture group definitions\r\n        this.groups = {\r\n            // Primary movement - only one can execute at a time\r\n            movement: {\r\n                gestures: ['bounce', 'spin', 'orbit', 'sway', 'hula', 'jump', 'twist', 'groove'],\r\n                maxSimultaneous: 1,\r\n                priority: 1,\r\n                description: 'Primary body movements - mutually exclusive'\r\n            },\r\n\r\n            // Secondary movements - can layer 2 together\r\n            expression: {\r\n                gestures: ['wave', 'nod', 'shake', 'point', 'lean', 'tilt', 'reach'],\r\n                maxSimultaneous: 2,\r\n                priority: 2,\r\n                description: 'Expressive gestures - can combine up to 2'\r\n            },\r\n\r\n            // Dance moves - special category that can combine with effects\r\n            dance: {\r\n                gestures: ['headBob', 'wiggle', 'runningman', 'charleston'],\r\n                maxSimultaneous: 1,\r\n                priority: 2,\r\n                description: 'Dance moves - one at a time but can add effects'\r\n            },\r\n\r\n            // Visual effects - all can stack\r\n            effects: {\r\n                gestures: ['pulse', 'glow', 'sparkle', 'flash', 'shimmer', 'flicker'],\r\n                maxSimultaneous: -1, // Unlimited\r\n                priority: 3,\r\n                description: 'Visual effects - all can layer together'\r\n            },\r\n\r\n            // Ambient modifiers - always allowed to layer\r\n            modifiers: {\r\n                gestures: ['breathe', 'float', 'rain'],\r\n                maxSimultaneous: -1, // Unlimited\r\n                priority: 4,\r\n                description: 'Ambient effects - always allowed'\r\n            }\r\n        };\r\n\r\n        // Specific combinations that work well together\r\n        this.enhancingCombinations = [\r\n            ['bounce', 'sparkle'],\r\n            ['spin', 'glow'],\r\n            ['wave', 'pulse'],\r\n            ['nod', 'pulse'],\r\n            ['jump', 'flash'],\r\n            ['sway', 'breathe'],\r\n            ['float', 'shimmer'],\r\n            ['orbit', 'sparkle'],\r\n            ['headBob', 'pulse']\r\n        ];\r\n\r\n        // Gestures that should never combine\r\n        this.incompatiblePairs = [\r\n            ['bounce', 'jump'],\r\n            ['spin', 'orbit'],\r\n            ['wave', 'point'],\r\n            ['nod', 'shake'],\r\n            ['lean', 'tilt']\r\n        ];\r\n\r\n        // Pre-defined chord combinations\r\n        this.chords = {\r\n            celebrate: ['bounce', 'sparkle', 'pulse'],\r\n            greeting: ['wave', 'nod', 'glow'],\r\n            excited: ['jump', 'flash', 'wiggle'],\r\n            mystical: ['float', 'shimmer', 'breathe'],\r\n            party: ['headBob', 'pulse', 'sparkle'],\r\n            smooth: ['sway', 'glow', 'breathe'],\r\n            dramatic: ['spin', 'flash', 'sparkle']\r\n        };\r\n\r\n        // Chain definitions with simultaneous markers\r\n        // '+' means simultaneous, '>' means sequential\r\n        this.chains = {\r\n            buildup: 'pulse > pulse > bounce+sparkle > spin+flash',\r\n            cascade: 'wave > lean > tilt > spin > bounce+glow',\r\n            celebrate: 'bounce+sparkle > spin > jump+flash > headBob+pulse',\r\n            smooth: 'sway+breathe > float > orbit+shimmer > sway+glow',\r\n            chaos: 'wiggle > shake+flash > spin+sparkle > bounce+pulse > twist',\r\n            greeting: 'wave+glow > nod+pulse > wave',\r\n            mystical: 'float+shimmer > orbit+breathe > spin+sparkle > float+glow',\r\n            dance: 'headBob > bounce+pulse > spin > sway+glow > headBob+sparkle'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Check if two gestures can execute simultaneously\r\n     * @param {string} gesture1 - First gesture name\r\n     * @param {string} gesture2 - Second gesture name\r\n     * @returns {boolean} - True if they can execute together\r\n     */\r\n    canExecuteSimultaneously(gesture1, gesture2) {\r\n        // Check if they're the same gesture\r\n        if (gesture1 === gesture2) return false;\r\n\r\n        // Check if they're in incompatible list\r\n        const incompatible = this.incompatiblePairs.some(pair =>\r\n            (pair.includes(gesture1) && pair.includes(gesture2))\r\n        );\r\n        if (incompatible) return false;\r\n\r\n        // Get groups for each gesture\r\n        const group1 = this.getGestureGroup(gesture1);\r\n        const group2 = this.getGestureGroup(gesture2);\r\n\r\n        // If same group, check maxSimultaneous\r\n        if (group1 === group2) {\r\n            const group = this.groups[group1];\r\n            return group && group.maxSimultaneous !== 1;\r\n        }\r\n\r\n        // Different groups can usually combine\r\n        // Movement can't combine with other movement\r\n        if (group1 === 'movement' && group2 === 'movement') return false;\r\n        if (group1 === 'dance' && group2 === 'dance') return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the group a gesture belongs to\r\n     * @param {string} gesture - Gesture name\r\n     * @returns {string|null} - Group name or null\r\n     */\r\n    getGestureGroup(gesture) {\r\n        for (const [groupName, group] of Object.entries(this.groups)) {\r\n            if (group.gestures.includes(gesture)) {\r\n                return groupName;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get priority of a gesture\r\n     * @param {string} gesture - Gesture name\r\n     * @returns {number} - Priority value (lower = higher priority)\r\n     */\r\n    getGesturePriority(gesture) {\r\n        const group = this.getGestureGroup(gesture);\r\n        return group ? this.groups[group].priority : 99;\r\n    }\r\n\r\n    /**\r\n     * Get compatible gestures from a list that can execute together\r\n     * @param {Array} gestures - Array of gesture objects or names\r\n     * @returns {Array} - Gestures that can execute simultaneously\r\n     */\r\n    getCompatibleGestures(gestures) {\r\n        if (!gestures || gestures.length === 0) return [];\r\n        if (gestures.length === 1) return gestures;\r\n\r\n        const chord = [];\r\n        const used = new Set();\r\n\r\n        // Normalize to gesture names\r\n        const normalizeGesture = (g) => typeof g === 'string' ? g : g.gestureName;\r\n\r\n        // Sort by priority\r\n        const sorted = [...gestures].sort((a, b) => {\r\n            const priorityA = this.getGesturePriority(normalizeGesture(a));\r\n            const priorityB = this.getGesturePriority(normalizeGesture(b));\r\n            return priorityA - priorityB;\r\n        });\r\n\r\n        for (const gesture of sorted) {\r\n            if (used.has(gesture)) continue;\r\n\r\n            const gestureName = normalizeGesture(gesture);\r\n\r\n            // Check if this gesture can combine with all in chord\r\n            let canAdd = true;\r\n            for (const chordItem of chord) {\r\n                const chordGestureName = normalizeGesture(chordItem);\r\n                if (!this.canExecuteSimultaneously(gestureName, chordGestureName)) {\r\n                    canAdd = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (canAdd) {\r\n                // Check group limits\r\n                const group = this.groups[this.getGestureGroup(gestureName)];\r\n                if (group && group.maxSimultaneous > 0) {\r\n                    const groupCount = chord.filter(c =>\r\n                        this.getGestureGroup(normalizeGesture(c)) === this.getGestureGroup(gestureName)\r\n                    ).length;\r\n                    if (groupCount >= group.maxSimultaneous) {\r\n                        continue; // Skip, group limit reached\r\n                    }\r\n                }\r\n\r\n                chord.push(gesture);\r\n                used.add(gesture);\r\n            }\r\n        }\r\n\r\n        return chord;\r\n    }\r\n\r\n    /**\r\n     * Parse a chain string into steps of simultaneous gestures\r\n     * @param {string} chainString - Chain definition string\r\n     * @returns {Array<Array<string>>} - Array of steps, each containing simultaneous gestures\r\n     */\r\n    parseChain(chainString) {\r\n        if (!chainString) return [];\r\n\r\n        // Handle predefined chains\r\n        if (this.chains[chainString]) {\r\n            chainString = this.chains[chainString];\r\n        }\r\n\r\n        const steps = chainString.split('>').map(s => s.trim());\r\n        return steps.map(step => {\r\n            // Split by + for simultaneous gestures\r\n            return step.split('+').map(g => g.trim()).filter(g => g);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if gestures form an enhancing combination\r\n     * @param {Array} gestures - Array of gesture names\r\n     * @returns {boolean} - True if they enhance each other\r\n     */\r\n    isEnhancingCombination(gestures) {\r\n        const gestureNames = gestures.map(g =>\r\n            typeof g === 'string' ? g : g.gestureName\r\n        );\r\n\r\n        return this.enhancingCombinations.some(combo =>\r\n            combo.every(gesture => gestureNames.includes(gesture))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get a predefined chord by name\r\n     * @param {string} chordName - Name of the chord\r\n     * @returns {Array<string>|null} - Array of gesture names or null\r\n     */\r\n    getChord(chordName) {\r\n        return this.chords[chordName] || null;\r\n    }\r\n\r\n    /**\r\n     * Create a gesture chord command\r\n     * @param {Array<string>} gestures - Gestures to combine\r\n     * @returns {Object} - Chord command object\r\n     */\r\n    createChord(gestures) {\r\n        const compatible = this.getCompatibleGestures(gestures);\r\n        const isEnhancing = this.isEnhancingCombination(compatible);\r\n\r\n        return {\r\n            type: 'chord',\r\n            gestures: compatible.map(g => typeof g === 'string' ? g : g.gestureName),\r\n            isEnhancing,\r\n            timestamp: Date.now()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Validate if a gesture exists in the system\r\n     * @param {string} gesture - Gesture name\r\n     * @returns {boolean} - True if gesture is valid\r\n     */\r\n    isValidGesture(gesture) {\r\n        return this.getGestureGroup(gesture) !== null;\r\n    }\r\n\r\n    /**\r\n     * Get all available gestures\r\n     * @returns {Array<string>} - All gesture names\r\n     */\r\n    getAllGestures() {\r\n        const gestures = [];\r\n        for (const group of Object.values(this.groups)) {\r\n            gestures.push(...group.gestures);\r\n        }\r\n        return [...new Set(gestures)];\r\n    }\r\n\r\n    /**\r\n     * Get timing class for a gesture\r\n     * @param {string} gesture - Gesture name\r\n     * @returns {Object|null} - Timing class info\r\n     */\r\n    getGestureTiming(gesture) {\r\n        for (const [className, timingClass] of Object.entries(this.timingClasses)) {\r\n            if (timingClass.gestures.includes(gesture)) {\r\n                return {\r\n                    name: className,\r\n                    ...timingClass\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get next subdivision beat for a gesture\r\n     * @param {string} gesture - Gesture name\r\n     * @param {number} currentBeat - Current beat number\r\n     * @param {number} subdivision - Beat subdivision (1, 0.5, 0.25, etc)\r\n     * @returns {number} - Next beat to fire on\r\n     */\r\n    getNextBeatForGesture(gesture, currentBeat, subdivision = 1) {\r\n        const timing = this.getGestureTiming(gesture);\r\n        if (!timing) return currentBeat + 1;\r\n\r\n        // Continuous gestures can start immediately\r\n        if (timing.timing === -1) return currentBeat;\r\n\r\n        // Calculate next appropriate beat based on timing class\r\n        const beatInterval = timing.timing / subdivision;\r\n        const nextBeat = Math.ceil(currentBeat / beatInterval) * beatInterval;\r\n\r\n        // For offbeat gestures, add half beat offset\r\n        if (timing.name === 'offbeat') {\r\n            return nextBeat + 0.5;\r\n        }\r\n\r\n        return nextBeat;\r\n    }\r\n\r\n    /**\r\n     * Get fill gestures based on density and BPM\r\n     * @param {number} bpm - Current BPM\r\n     * @param {string} intensity - Intensity level (sparse, moderate, dense, chaos)\r\n     * @returns {Array<string>} - Suggested fill gestures\r\n     */\r\n    getFillGestures(bpm, intensity = 'moderate') {\r\n        const profile = this.densityProfiles[intensity] || this.densityProfiles.moderate;\r\n\r\n        // Determine fill pattern based on BPM\r\n        let pattern;\r\n        if (bpm < 80) {\r\n            pattern = 'energetic';  // More movement for slow tempos\r\n        } else if (bpm < 120) {\r\n            pattern = 'rhythmic';\r\n        } else if (bpm < 160) {\r\n            pattern = 'smooth';\r\n        } else {\r\n            pattern = 'subtle';  // Less movement for fast tempos\r\n        }\r\n\r\n        // Return fills based on probability\r\n        if (Math.random() < profile.fillProbability) {\r\n            return this.fillPatterns[pattern] || [];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Schedule gestures with musical timing\r\n     * @param {Array} gestureQueue - Current gesture queue\r\n     * @param {number} currentBeat - Current beat number\r\n     * @param {number} bpm - Current BPM\r\n     * @returns {Object} - Scheduled gestures by beat\r\n     */\r\n    scheduleGesturesMusically(gestureQueue, currentBeat, bpm) {\r\n        const scheduled = {};\r\n        const processed = new Set();\r\n\r\n        // First, schedule queued gestures based on their timing classes\r\n        for (const item of gestureQueue) {\r\n            if (processed.has(item)) continue;\r\n\r\n            const gesture = typeof item === 'string' ? item : item.gestureName;\r\n            const nextBeat = this.getNextBeatForGesture(gesture, currentBeat);\r\n\r\n            if (!scheduled[nextBeat]) {\r\n                scheduled[nextBeat] = [];\r\n            }\r\n\r\n            // Check for compatible gestures that can fire together\r\n            const compatible = this.getCompatibleGestures(\r\n                gestureQueue.filter(g => !processed.has(g))\r\n            );\r\n\r\n            compatible.forEach(g => {\r\n                const gName = typeof g === 'string' ? g : g.gestureName;\r\n                const gTiming = this.getGestureTiming(gName);\r\n\r\n                // Group gestures with same timing class\r\n                if (gTiming && this.getNextBeatForGesture(gName, currentBeat) === nextBeat) {\r\n                    scheduled[nextBeat].push(g);\r\n                    processed.add(g);\r\n                }\r\n            });\r\n        }\r\n\r\n        // Add fill gestures if there's dead space\r\n        const intensity = this.getIntensityFromBPM(bpm);\r\n        const fills = this.getFillGestures(bpm, intensity);\r\n\r\n        // Find empty beats and add fills\r\n        for (let beat = currentBeat; beat < currentBeat + 4; beat += 0.25) {\r\n            if (!scheduled[beat] || scheduled[beat].length === 0) {\r\n                if (fills.length > 0 && Math.random() < 0.3) {\r\n                    scheduled[beat] = [fills[Math.floor(Math.random() * fills.length)]];\r\n                }\r\n            }\r\n        }\r\n\r\n        return scheduled;\r\n    }\r\n\r\n    /**\r\n     * Get intensity profile based on BPM\r\n     * @param {number} bpm - Current BPM\r\n     * @returns {string} - Intensity level\r\n     */\r\n    getIntensityFromBPM(bpm) {\r\n        if (bpm < 60) return 'dense';      // Very slow needs more fills\r\n        if (bpm < 100) return 'moderate';\r\n        if (bpm < 140) return 'moderate';\r\n        if (bpm < 180) return 'sparse';\r\n        return 'sparse';  // Very fast needs less\r\n    }\r\n\r\n    /**\r\n     * Create swing/shuffle timing\r\n     * @param {number} straightBeat - Straight beat number\r\n     * @param {number} swingRatio - Swing ratio (0.5 = straight, 0.67 = swing)\r\n     * @returns {number} - Adjusted beat with swing\r\n     */\r\n    applySwingTiming(straightBeat, swingRatio = 0.67) {\r\n        const beatPart = straightBeat % 1;\r\n        if (beatPart === 0.5) {\r\n            // Delay the offbeat for swing feel\r\n            return Math.floor(straightBeat) + swingRatio;\r\n        }\r\n        return straightBeat;\r\n    }\r\n}\r\n\r\n// Create singleton instance\r\nconst gestureCompatibility = new GestureCompatibility();\r\n\r\nexport default gestureCompatibility;","/**\r\n * GrooveTemplates - Musical rhythm patterns and groove definitions\r\n * Provides pre-defined rhythmic patterns that make the mascot dance musically\r\n */\r\n\r\nclass GrooveTemplates {\r\n    constructor() {\r\n        // Core groove definitions with emphasis patterns\r\n        this.templates = {\r\n            straight: {\r\n                name: 'Straight',\r\n                timeSignature: '4/4',\r\n                baseMovement: 'grooveBob', // Continuous base layer\r\n                transitionStyle: 'transitionLean',\r\n                pattern: {\r\n                    emphasis: [1, 0, 0.5, 0], // Strong on 1, medium on 3\r\n                    velocities: [1.0, 0, 0.6, 0],\r\n                    subdivisions: [0, 0.5] // Only play on beats and offbeats\r\n                },\r\n                swing: 0,\r\n                humanization: 0.05, // 5% timing variance for human feel\r\n                preferredGestures: {\r\n                    downbeat: ['bounce', 'headBob', 'jump'],\r\n                    offbeat: ['pulse', 'breathe'],\r\n                    fills: ['sparkle', 'glow']\r\n                },\r\n                compositeMove: null, // No special composite for straight\r\n                intensity: 'moderate',\r\n                description: 'Standard 4/4 rhythm, good for pop/rock'\r\n            },\r\n\r\n            swing: {\r\n                name: 'Swing',\r\n                timeSignature: '4/4',\r\n                baseMovement: 'grooveFlow',\r\n                transitionStyle: 'transitionGlide',\r\n                compositeMove: 'swingOut',\r\n                pattern: {\r\n                    emphasis: [1, 0, 0.66, 0], // Swung eighth notes\r\n                    velocities: [1.0, 0, 0.7, 0],\r\n                    subdivisions: [0, 0.66] // Delayed upbeat for swing feel\r\n                },\r\n                swing: 0.67, // 67% swing ratio (2:1 triplet feel)\r\n                humanization: 0.08,\r\n                preferredGestures: {\r\n                    downbeat: ['sway', 'lean', 'bounce'],\r\n                    offbeat: ['wiggle', 'pulse'],\r\n                    fills: ['shimmer', 'float']\r\n                },\r\n                intensity: 'moderate',\r\n                description: 'Jazz swing feel with triplet subdivision'\r\n            },\r\n\r\n            shuffle: {\r\n                name: 'Shuffle',\r\n                timeSignature: '4/4',\r\n                baseMovement: 'grooveBob',\r\n                transitionStyle: 'transitionLean',\r\n                compositeMove: null,\r\n                pattern: {\r\n                    emphasis: [1, 0.25, 0.5, 0.75], // Driving shuffle\r\n                    velocities: [1.0, 0.3, 0.7, 0.3],\r\n                    subdivisions: [0, 0.25, 0.5, 0.75]\r\n                },\r\n                swing: 0.75, // Heavy shuffle\r\n                humanization: 0.06,\r\n                preferredGestures: {\r\n                    downbeat: ['bounce', 'headBob'],\r\n                    upbeat: ['twist', 'wiggle'],\r\n                    offbeat: ['pulse', 'breathe'],\r\n                    fills: ['sparkle', 'flash']\r\n                },\r\n                intensity: 'dense',\r\n                description: 'Blues/rock shuffle with heavy swing'\r\n            },\r\n\r\n            latin: {\r\n                name: 'Latin',\r\n                timeSignature: '4/4',\r\n                baseMovement: 'grooveSway',\r\n                transitionStyle: 'transitionRoll',\r\n                compositeMove: 'latinHips',\r\n                pattern: {\r\n                    // Clave-inspired pattern: 1 e + a 2 e + a 3 e + a 4 e + a\r\n                    emphasis: [1, 0, 0.375, 0.5, 0, 0.75, 0, 0],\r\n                    velocities: [1.0, 0, 0.8, 0.9, 0, 0.8, 0, 0],\r\n                    subdivisions: [0, 0.375, 0.5, 0.75] // Syncopated\r\n                },\r\n                swing: 0,\r\n                humanization: 0.04,\r\n                preferredGestures: {\r\n                    downbeat: ['sway', 'wiggle'],\r\n                    syncopation: ['twist', 'lean'],\r\n                    offbeat: ['pulse', 'shimmer'],\r\n                    fills: ['sparkle', 'shake']\r\n                },\r\n                intensity: 'dense',\r\n                description: 'Latin clave rhythm with syncopation'\r\n            },\r\n\r\n            breakbeat: {\r\n                name: 'Breakbeat',\r\n                timeSignature: '4/4',\r\n                baseMovement: 'grooveStep',\r\n                transitionStyle: 'transitionGlide',\r\n                compositeMove: null,\r\n                pattern: {\r\n                    // Classic Amen break pattern simplified\r\n                    emphasis: [1, 0, 0, 0.75, 0.25, 0.5, 0, 0.625],\r\n                    velocities: [1.0, 0, 0, 0.9, 0.6, 0.8, 0, 0.7],\r\n                    subdivisions: [0, 0.25, 0.5, 0.625, 0.75] // Complex syncopation\r\n                },\r\n                swing: 0,\r\n                humanization: 0.03, // Tighter timing for electronic feel\r\n                preferredGestures: {\r\n                    downbeat: ['bounce', 'twist'],\r\n                    syncopation: ['flash', 'shake'],\r\n                    offbeat: ['pulse', 'wiggle'],\r\n                    fills: ['sparkle', 'glitch']\r\n                },\r\n                intensity: 'chaos',\r\n                description: 'Hip-hop/DnB breakbeat pattern'\r\n            },\r\n\r\n            waltz: {\r\n                name: 'Waltz',\r\n                timeSignature: '3/4',\r\n                baseMovement: 'grooveFlow',\r\n                transitionStyle: 'transitionGlide',\r\n                compositeMove: null,\r\n                pattern: {\r\n                    emphasis: [1, 0.33, 0.67], // 1-2-3, 1-2-3\r\n                    velocities: [1.0, 0.5, 0.5],\r\n                    subdivisions: [0, 0.33, 0.67]\r\n                },\r\n                swing: 0,\r\n                humanization: 0.07,\r\n                preferredGestures: {\r\n                    downbeat: ['sway', 'float'],\r\n                    weak: ['breathe', 'lean'],\r\n                    fills: ['shimmer', 'glow']\r\n                },\r\n                intensity: 'sparse',\r\n                description: '3/4 waltz time'\r\n            },\r\n\r\n            techno: {\r\n                name: 'Techno',\r\n                timeSignature: '4/4',\r\n                baseMovement: 'groovePulse',\r\n                transitionStyle: 'transitionLean',\r\n                compositeMove: 'robotPop',\r\n                pattern: {\r\n                    // Four-on-the-floor with 16th note variations\r\n                    emphasis: [1, 0.25, 0.5, 0.75, 1, 0.25, 0.5, 0.75],\r\n                    velocities: [1.0, 0.6, 1.0, 0.6, 1.0, 0.6, 1.0, 0.6],\r\n                    subdivisions: [0, 0.25, 0.5, 0.75] // All subdivisions\r\n                },\r\n                swing: 0,\r\n                humanization: 0.02, // Very tight, machine-like\r\n                preferredGestures: {\r\n                    downbeat: ['pulse', 'bounce'],\r\n                    subdivision: ['flash', 'glitch'],\r\n                    fills: ['sparkle', 'strobe']\r\n                },\r\n                intensity: 'dense',\r\n                description: 'Driving techno four-on-the-floor'\r\n            },\r\n\r\n            ambient: {\r\n                name: 'Ambient',\r\n                timeSignature: '4/4',\r\n                baseMovement: 'groovePulse',\r\n                transitionStyle: 'transitionGlide',\r\n                compositeMove: null,\r\n                pattern: {\r\n                    emphasis: [0.8, 0, 0.3, 0, 0.5, 0, 0.3, 0],\r\n                    velocities: [0.8, 0, 0.3, 0, 0.5, 0, 0.3, 0],\r\n                    subdivisions: [0, 0.5] // Sparse\r\n                },\r\n                swing: 0,\r\n                humanization: 0.15, // Very loose timing\r\n                preferredGestures: {\r\n                    downbeat: ['float', 'breathe'],\r\n                    offbeat: ['sway', 'shimmer'],\r\n                    fills: ['glow', 'pulse']\r\n                },\r\n                intensity: 'sparse',\r\n                description: 'Floating ambient rhythm'\r\n            },\r\n\r\n            funk: {\r\n                name: 'Funk',\r\n                timeSignature: '4/4',\r\n                baseMovement: 'grooveSway',\r\n                transitionStyle: 'transitionRoll',\r\n                compositeMove: 'funkChicken',\r\n                pattern: {\r\n                    // \"One\" emphasis with 16th note ghost notes\r\n                    emphasis: [1.2, 0.125, 0.25, 0, 0.625, 0.75, 0, 0.875],\r\n                    velocities: [1.2, 0.3, 0.4, 0, 0.8, 0.6, 0, 0.4],\r\n                    subdivisions: [0, 0.125, 0.25, 0.625, 0.75, 0.875]\r\n                },\r\n                swing: 0.1, // Slight swing\r\n                humanization: 0.06,\r\n                preferredGestures: {\r\n                    one: ['bounce', 'twist'], // THE ONE\r\n                    ghost: ['wiggle', 'pulse'], // Ghost notes\r\n                    syncopation: ['lean', 'shake'],\r\n                    fills: ['flash', 'sparkle']\r\n                },\r\n                intensity: 'chaos',\r\n                description: 'Funky syncopated rhythm with THE ONE'\r\n            },\r\n\r\n            trap: {\r\n                name: 'Trap',\r\n                timeSignature: '4/4',\r\n                baseMovement: 'grooveStep',\r\n                transitionStyle: 'transitionLean',\r\n                compositeMove: null,\r\n                pattern: {\r\n                    // Hi-hat rolls and syncopated kicks\r\n                    emphasis: [1, 0, 0, 0.375, 0, 0.75, 0.875, 0],\r\n                    velocities: [1.0, 0, 0, 0.7, 0, 0.8, 0.6, 0],\r\n                    subdivisions: [0, 0.375, 0.75, 0.875] // Triplet feel\r\n                },\r\n                swing: 0,\r\n                humanization: 0.03,\r\n                preferredGestures: {\r\n                    downbeat: ['bounce', 'lean'],\r\n                    hihat: ['shake', 'shimmer'],\r\n                    syncopation: ['twist', 'flash'],\r\n                    fills: ['sparkle', 'glitch']\r\n                },\r\n                intensity: 'moderate',\r\n                description: 'Trap rhythm with triplet hi-hats'\r\n            }\r\n        };\r\n\r\n        // Transition rules for smooth groove changes\r\n        this.transitions = {\r\n            instant: 0, // Change immediately\r\n            nextBar: 1, // Change on next bar line\r\n            nextPhrase: 4, // Change on next 4-bar phrase\r\n            fadeIn: 8 // Gradually introduce over 8 beats\r\n        };\r\n\r\n        // Current active groove\r\n        this.currentGroove = null;\r\n        this.transitionMode = 'nextBar';\r\n        this.pendingGroove = null;\r\n    }\r\n\r\n    /**\r\n     * Get a groove template by name\r\n     */\r\n    getTemplate(name) {\r\n        return this.templates[name.toLowerCase()] || this.templates.straight;\r\n    }\r\n\r\n    /**\r\n     * Get emphasis for current beat and subdivision\r\n     */\r\n    getEmphasis(groove, beatNumber, subdivision) {\r\n        if (!groove || !groove.pattern) return 0;\r\n\r\n        const beatInMeasure = beatNumber % 4; // Assuming 4/4 for now\r\n        const position = beatInMeasure + subdivision;\r\n\r\n        // Find closest pattern position\r\n        const patternIndex = groove.pattern.subdivisions.findIndex(\r\n            sub => Math.abs(sub - subdivision) < 0.01\r\n        );\r\n\r\n        if (patternIndex === -1) return 0;\r\n\r\n        return groove.pattern.emphasis[patternIndex] || 0;\r\n    }\r\n\r\n    /**\r\n     * Get velocity for current position\r\n     */\r\n    getVelocity(groove, beatNumber, subdivision) {\r\n        if (!groove || !groove.pattern) return 1.0;\r\n\r\n        const beatInMeasure = beatNumber % 4;\r\n        const position = beatInMeasure + subdivision;\r\n\r\n        const patternIndex = groove.pattern.subdivisions.findIndex(\r\n            sub => Math.abs(sub - subdivision) < 0.01\r\n        );\r\n\r\n        if (patternIndex === -1) return 0;\r\n\r\n        return groove.pattern.velocities[patternIndex] || 0;\r\n    }\r\n\r\n    /**\r\n     * Get preferred gesture for current position\r\n     */\r\n    getPreferredGesture(groove, beatNumber, subdivision, availableGestures = []) {\r\n        if (!groove || !groove.preferredGestures) return null;\r\n\r\n        // Determine the beat type\r\n        let beatType;\r\n        if (subdivision === 0) {\r\n            beatType = 'downbeat';\r\n        } else if (subdivision === 0.5) {\r\n            beatType = 'offbeat';\r\n        } else if (subdivision === 0.25 || subdivision === 0.75) {\r\n            beatType = 'subdivision';\r\n        } else {\r\n            beatType = 'syncopation';\r\n        }\r\n\r\n        // Special case for THE ONE in funk\r\n        if (groove.name === 'Funk' && beatNumber % 4 === 0 && subdivision === 0) {\r\n            beatType = 'one';\r\n        }\r\n\r\n        const preferred = groove.preferredGestures[beatType] || groove.preferredGestures.fills;\r\n        if (!preferred || preferred.length === 0) return null;\r\n\r\n        // Filter to available gestures if provided\r\n        if (availableGestures.length > 0) {\r\n            const available = preferred.filter(g => availableGestures.includes(g));\r\n            if (available.length > 0) {\r\n                return available[Math.floor(Math.random() * available.length)];\r\n            }\r\n        }\r\n\r\n        // Return random from preferred\r\n        return preferred[Math.floor(Math.random() * preferred.length)];\r\n    }\r\n\r\n    /**\r\n     * Apply humanization to timing\r\n     */\r\n    humanizeTiming(groove, timing) {\r\n        if (!groove || !groove.humanization) return timing;\r\n\r\n        const variance = groove.humanization;\r\n        const offset = (Math.random() - 0.5) * variance;\r\n        return Math.max(0, Math.min(1, timing + offset));\r\n    }\r\n\r\n    /**\r\n     * Apply swing to subdivision\r\n     */\r\n    applySwing(groove, subdivision) {\r\n        if (!groove || !groove.swing || groove.swing === 0) return subdivision;\r\n\r\n        // Apply swing to upbeats (0.5)\r\n        if (Math.abs(subdivision - 0.5) < 0.01) {\r\n            return 0.5 + (groove.swing - 0.5) * 0.5;\r\n        }\r\n\r\n        // Apply swing to 16th note upbeats (0.25, 0.75)\r\n        if (Math.abs(subdivision - 0.25) < 0.01) {\r\n            return 0.25 + (groove.swing - 0.5) * 0.25;\r\n        }\r\n        if (Math.abs(subdivision - 0.75) < 0.01) {\r\n            return 0.75 + (groove.swing - 0.5) * 0.25;\r\n        }\r\n\r\n        return subdivision;\r\n    }\r\n\r\n    /**\r\n     * Set active groove with optional transition\r\n     */\r\n    setGroove(name, transitionMode = null) {\r\n        const groove = this.getTemplate(name);\r\n        if (!groove) return false;\r\n\r\n        const mode = transitionMode || this.transitionMode;\r\n\r\n        if (mode === 'instant' || !this.currentGroove) {\r\n            this.currentGroove = groove;\r\n            this.pendingGroove = null;\r\n        } else {\r\n            this.pendingGroove = groove;\r\n            // Transition will happen based on mode\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Handle beat transition\r\n     */\r\n    onBeat(beatNumber) {\r\n        if (!this.pendingGroove) return;\r\n\r\n        const shouldTransition =\r\n            (this.transitionMode === 'nextBar' && beatNumber % 4 === 0) ||\r\n            (this.transitionMode === 'nextPhrase' && beatNumber % 16 === 0);\r\n\r\n        if (shouldTransition) {\r\n            this.currentGroove = this.pendingGroove;\r\n            this.pendingGroove = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get base movement for current groove\r\n     */\r\n    getBaseMovement() {\r\n        return this.currentGroove?.baseMovement || null;\r\n    }\r\n\r\n    /**\r\n     * Get transition style for current groove\r\n     */\r\n    getTransitionStyle() {\r\n        return this.currentGroove?.transitionStyle || 'transitionLean';\r\n    }\r\n\r\n    /**\r\n     * Get composite move for current groove\r\n     */\r\n    getCompositeMove() {\r\n        return this.currentGroove?.compositeMove || null;\r\n    }\r\n\r\n    /**\r\n     * Check if we should trigger composite move\r\n     * @param {number} beatNumber - Current beat number\r\n     * @returns {boolean} True if composite should trigger\r\n     */\r\n    shouldTriggerComposite(beatNumber) {\r\n        if (!this.currentGroove?.compositeMove) return false;\r\n\r\n        // Trigger composite every 4 or 8 bars depending on intensity\r\n        const interval = this.currentGroove.intensity === 'sparse' ? 32 : 16;\r\n        return beatNumber % interval === 0;\r\n    }\r\n\r\n    /**\r\n     * Get layered gesture configuration for current position\r\n     * @param {number} beatNumber - Current beat number\r\n     * @param {number} subdivision - Current subdivision (0, 0.25, 0.5, 0.75)\r\n     * @returns {Object} Configuration with base, accent, and transition layers\r\n     */\r\n    getLayeredGestures(beatNumber, subdivision) {\r\n        if (!this.currentGroove) return null;\r\n\r\n        const config = {\r\n            base: this.getBaseMovement(),\r\n            accent: null,\r\n            transition: null,\r\n            composite: null,\r\n            velocity: 1.0\r\n        };\r\n\r\n        // Check for composite move trigger\r\n        if (this.shouldTriggerComposite(beatNumber) && subdivision === 0) {\r\n            config.composite = this.getCompositeMove();\r\n        }\r\n\r\n        // Get accent gesture based on emphasis\r\n        const emphasis = this.getEmphasis(this.currentGroove, beatNumber, subdivision);\r\n        const velocity = this.getVelocity(this.currentGroove, beatNumber, subdivision);\r\n\r\n        if (emphasis > 0.3 && velocity > 0.3) {\r\n            config.accent = this.getPreferredGesture(\r\n                this.currentGroove,\r\n                beatNumber,\r\n                subdivision\r\n            );\r\n            config.velocity = velocity;\r\n        }\r\n\r\n        // Add transition if changing positions\r\n        if (config.accent && Math.random() < 0.3) {\r\n            config.transition = this.getTransitionStyle();\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * Get all available groove names\r\n     */\r\n    getGrooveNames() {\r\n        return Object.keys(this.templates);\r\n    }\r\n\r\n    /**\r\n     * Get groove info for UI\r\n     */\r\n    getGrooveInfo(name) {\r\n        const template = this.templates[name];\r\n        if (!template) return null;\r\n\r\n        return {\r\n            name: template.name,\r\n            timeSignature: template.timeSignature,\r\n            description: template.description,\r\n            intensity: template.intensity,\r\n            swing: template.swing,\r\n            baseMovement: template.baseMovement,\r\n            compositeMove: template.compositeMove\r\n        };\r\n    }\r\n}\r\n\r\n// Export as ES6 module\r\n// No longer polluting global scope with window assignment\r\nexport default GrooveTemplates;","/**\n * AudioHandler - Manages all audio-related functionality for EmotiveMascot\n * @module mascot/AudioHandler\n */\n\nexport class AudioHandler {\n    constructor(mascot) {\n        this.mascot = mascot;\n        this.vocalUpdateInterval = null;\n    }\n\n    /**\n     * Initialize audio handler\n     */\n    init() {\n        // Will contain initialization logic\n    }\n\n\n    /**\n     * Disconnect audio analysis\n     * @returns {Object} The mascot instance for chaining\n     */\n    disconnectAudio() {\n        // Stop analysis\n        if (this.mascot.audioAnalyzer) {\n            this.mascot.audioAnalyzer.stop();\n        }\n        \n        // Clear update interval\n        if (this.vocalUpdateInterval) {\n            clearInterval(this.vocalUpdateInterval);\n            this.vocalUpdateInterval = null;\n        }\n        \n        \n        // Clear vocal data and analyzer reference\n        if (this.mascot.shapeMorpher) {\n            this.mascot.shapeMorpher.setVocalEnergy(0);\n            this.mascot.shapeMorpher.setAudioDeformation(0);\n            this.mascot.shapeMorpher.audioAnalyzer = null;\n            this.mascot.shapeMorpher.beatGlitchIntensity = 0;\n            this.mascot.shapeMorpher.glitchPoints = [];\n        }\n        \n        return this.mascot;\n    }\n\n    /**\n     * Connect audio element for vocal visualization\n     * @param {HTMLAudioElement} audioElement - Audio element to analyze\n     * @returns {Object} The mascot instance for chaining\n     */\n    async connectAudio(audioElement) {\n        if (!this.mascot.audioAnalyzer) {\n            return this.mascot;\n        }\n        \n        // Initialize audio context if needed\n        if (!this.mascot.audioAnalyzer.audioContext) {\n            await this.mascot.audioAnalyzer.init();\n        }\n        \n        // Connect the audio element\n        this.mascot.audioAnalyzer.connectAudioElement(audioElement);\n        \n        // Pass analyzer reference to shape morpher for frequency data\n        if (this.mascot.shapeMorpher) {\n            this.mascot.shapeMorpher.audioAnalyzer = this.mascot.audioAnalyzer;\n            \n            // Set up beat detection callback for glitches (only during vocals)\n            this.mascot.audioAnalyzer.onBeat((amplitude) => {\n                if (this.mascot.shapeMorpher && this.mascot.shapeMorpher.vocalEffectActive) {\n                    // Only trigger beat glitches when vocals are active\n                    this.mascot.shapeMorpher.beatGlitchIntensity = amplitude * 0.3;\n                }\n            });\n        }\n        \n        // Start updating shape morpher with vocal data\n        if (this.vocalUpdateInterval) {\n            clearInterval(this.vocalUpdateInterval);\n        }\n        \n        this.vocalUpdateInterval = setInterval(() => {\n            if (this.mascot.audioAnalyzer.isAnalyzing && this.mascot.shapeMorpher) {\n                // Get current analysis data directly from properties\n                const amplitude = this.mascot.audioAnalyzer.currentAmplitude || 0;\n                const vocalInstability = this.mascot.audioAnalyzer.getVocalInstability() || 0;\n                \n                // Set vocal energy for shape pulsing\n                this.mascot.shapeMorpher.setVocalEnergy(vocalInstability);\n                \n                // Set overall deformation based on amplitude (0 to 1, no shrinking)\n                this.mascot.shapeMorpher.setAudioDeformation(amplitude * 2); // Keep positive for expansion only\n            }\n        }, 50); // Update at 20 FPS\n        \n        // Pass audio analyzer to renderer\n        if (this.mascot.renderer) {\n            this.mascot.renderer.audioAnalyzer = this.mascot.audioAnalyzer;\n        }\n        \n        return this.mascot;\n    }\n\n    /**\n     * Stops speech reactivity mode and returns to base emotional state\n     * @returns {Object} The mascot instance for chaining\n     */\n    stopSpeaking() {\n        if (!this.mascot.speaking) {\n            return this.mascot;\n        }\n        \n        // Store previous state for event\n        const previousAudioLevel = this.mascot.audioLevelProcessor.getCurrentLevel();\n        \n        // Clean up audio level processor\n        this.mascot.audioLevelProcessor.cleanup();\n        \n        // Reset speech state\n        this.mascot.speaking = false;\n        \n        // Notify renderer about speech stop (triggers 500ms return-to-base transition)\n        this.mascot.renderer.onSpeechStop();\n        \n        // Emit speech stop event\n        this.mascot.emit('speechStopped', { \n            previousAudioLevel,\n            returnToBaseTime: 500\n        });\n        \n        return this.mascot;\n    }\n\n    /**\n     * Sets master volume for all audio output\n     * @param {number} volume - Volume level (0.0 to 1.0)\n     * @returns {Object} The mascot instance for chaining\n     */\n    setVolume(volume) {\n        const clampedVolume = Math.max(0, Math.min(1, volume));\n        this.mascot.config.masterVolume = clampedVolume;\n        \n        if (this.mascot.soundSystem.isAvailable()) {\n            const currentEmotion = this.mascot.stateMachine.getCurrentState().emotion;\n            this.mascot.soundSystem.setMasterVolume(clampedVolume, currentEmotion);\n        }\n        \n        this.mascot.emit('volumeChanged', { volume: clampedVolume });\n        \n        return this.mascot;\n    }\n\n    /**\n     * Cleanup\n     */\n    destroy() {\n        this.disconnectAudio();\n    }\n}","/**\n * GestureController - Manages gesture animations and protocols\n * @module mascot/GestureController\n */\n\nexport class GestureController {\n    constructor(mascot) {\n        this.mascot = mascot;\n        this.currentGesture = null;\n        this.gestureQueue = [];\n    }\n\n    /**\n     * Initialize gesture controller\n     */\n    init() {\n        // Will contain initialization logic\n    }\n\n    /**\n     * Methods to be moved here:\n     * - setGestureProtocol()\n     * - performGesture()\n     * - queueGesture()\n     * - clearGestureQueue()\n     * - Gesture animation logic\n     */\n\n    /**\n     * Cleanup\n     */\n    destroy() {\n        this.gestureQueue = [];\n        this.currentGesture = null;\n    }\n}","/**\n * StateCoordinator - Manages emotion states and transitions\n * @module mascot/StateCoordinator\n */\n\nimport { getEmotion, getEmotionVisualParams } from '../core/emotions/index.js';\nimport rhythmIntegration from '../core/rhythmIntegration.js';\n\nexport class StateCoordinator {\n    constructor(mascot) {\n        this.mascot = mascot;\n        this.currentEmotion = 'neutral';\n        this.emotionIntensity = 1.0;\n    }\n\n    /**\n     * Initialize state coordinator\n     */\n    init() {\n        // Will contain initialization logic\n    }\n\n    /**\n     * Sets the emotional state with optional undertone\n     * @param {string} emotion - The emotion to set\n     * @param {Object|string|null} options - Options object or undertone string for backward compatibility\n     * @returns {Object} The mascot instance for chaining\n     */\n    setEmotion(emotion, options = null) {\n        // Map common aliases to actual emotion states\n        const emotionMapping = {\n            'happy': 'joy',\n            'curious': 'surprise',\n            'frustrated': 'anger',\n            'sad': 'sadness'\n        };\n        \n        // Use mapped emotion or original if not an alias\n        const mappedEmotion = emotionMapping[emotion] || emotion;\n        \n        // Handle backward compatibility - if options is a string, treat as undertone\n        let undertone = null;\n        let duration = 500;\n        \n        if (typeof options === 'string') {\n            undertone = options;\n        } else if (options && typeof options === 'object') {\n            undertone = options.undertone || null;\n            duration = options.duration || 500;\n        }\n        \n        // Set emotional state in state machine\n        const success = this.mascot.stateMachine.setEmotion(mappedEmotion, undertone, duration);\n        \n        if (success) {\n            // Register emotion's rhythm configuration\n            const emotionConfig = getEmotion(mappedEmotion);\n            if (emotionConfig) {\n                rhythmIntegration.registerConfig('emotion', mappedEmotion, emotionConfig);\n            }\n            // Clear and reset particles when changing emotional states\n            if (this.mascot.particleSystem) {\n                // Clear all existing particles\n                this.mascot.particleSystem.clear();\n                \n                // Get the new emotional properties\n                const emotionalProps = this.mascot.stateMachine.getCurrentEmotionalProperties();\n                \n                // Spawn initial particles for the new state\n                // Use burst to immediately populate with a few particles\n                // DECIMATED neutral\n                let initialCount;\n                if (mappedEmotion === 'neutral') {\n                    initialCount = 1;  // DECIMATED to 1 particle\n                } else if (mappedEmotion === 'resting') {\n                    initialCount = 4;  // Keep resting at 4\n                } else {\n                    initialCount = Math.min(3, Math.floor(emotionalProps.particleRate / 4));\n                }\n                \n                if (initialCount > 0) {\n                    // Always spawn from canvas center, not gaze-adjusted position\n                    const centerX = this.mascot.canvasManager.width / 2;\n                    const centerY = this.mascot.canvasManager.height / 2;\n                    \n                    this.mascot.particleSystem.burst(\n                        initialCount, \n                        emotionalProps.particleBehavior,\n                        centerX,\n                        centerY\n                    );\n                }\n            }\n            \n            // Update sound system ambient tone - DISABLED (annoying)\n            // if (this.mascot.soundSystem.isAvailable()) {\n            //     this.mascot.soundSystem.setAmbientTone(mappedEmotion, duration);\n            // }\n            \n            // Update Emotive renderer if in classic mode\n            if (this.mascot.config.renderingStyle === 'classic' && this.mascot.renderer.setEmotionalState) {\n                const emotionParams = getEmotionVisualParams(mappedEmotion);\n                this.mascot.renderer.setEmotionalState(mappedEmotion, emotionParams, undertone);\n            }\n            \n            // Emit emotion change event\n            this.mascot.emit('emotionChanged', { emotion: mappedEmotion, undertone, duration });\n            \n        }\n        \n        this.currentEmotion = mappedEmotion;\n        return this.mascot;\n    }\n\n    /**\n     * Methods to be moved here:\n     * - getEmotion()\n     * - setUndertoneModifier()\n     * - transitionToEmotion() (new smooth transition)\n     * - setEmotionVector() (new 2D control)\n     * - Emotion blending logic\n     */\n\n    /**\n     * Cleanup\n     */\n    destroy() {\n        this.currentEmotion = 'neutral';\n    }\n}","/**\n * VisualizationRunner - Manages the main animation loop and rendering\n * @module mascot/VisualizationRunner\n */\n\nimport { getEmotionVisualParams, getEmotion } from '../core/emotions/index.js';\n\nexport class VisualizationRunner {\n    constructor(mascot) {\n        this.mascot = mascot;\n        this.animationId = null;\n        this.isRunning = false;\n        this.lastTime = 0;\n    }\n\n    /**\n     * Initialize visualization runner\n     */\n    init() {\n        // Will contain initialization logic\n    }\n\n    /**\n     * Starts the animation loop at target 60 FPS\n     * @returns {Object} The mascot instance for chaining\n     */\n    start() {\n        if (this.mascot.animationController.isAnimating()) {\n            return this.mascot;\n        }\n        \n        // Start the animation controller\n        const success = this.mascot.animationController.start();\n        \n        if (success) {\n            this.mascot.isRunning = true;\n            this.isRunning = true;\n            \n            // Spawn initial particles for classic mode\n            if (this.mascot.config.renderingStyle === 'classic' && this.mascot.particleSystem) {\n                const currentState = this.mascot.stateMachine.getCurrentState();\n                const emotion = currentState.emotion;\n                const undertone = currentState.undertone;\n                const emotionParams = getEmotionVisualParams(emotion);\n                \n                // Get the actual orb position from the renderer (includes gaze offset)\n                let orbX, orbY;\n                if (this.mascot.renderer && this.mascot.renderer.getCurrentOrbPosition) {\n                    const orbPos = this.mascot.renderer.getCurrentOrbPosition();\n                    orbX = orbPos.x;\n                    orbY = orbPos.y;\n                } else {\n                    // Fallback to center if method doesn't exist\n                    orbX = this.mascot.canvasManager.width / 2;\n                    orbY = this.mascot.canvasManager.height / 2;\n                }\n                \n                // Clear any existing particles first\n                this.mascot.particleSystem.clear();\n                \n                // Check if emotion has specific particle configuration\n                if (emotionParams.particleRate > 0) {\n                    // Spawn initial burst of particles\n                    const initialCount = Math.min(3, Math.floor(emotionParams.particleRate / 4));\n                    \n                    if (initialCount > 0) {\n                        this.mascot.particleSystem.burst(\n                            initialCount,\n                            emotionParams.particleBehavior,\n                            orbX,\n                            orbY\n                        );\n                    }\n                }\n            }\n            \n            // Start degradation monitoring\n            if (this.mascot.degradationManager) {\n                this.mascot.degradationManager.startMonitoring();\n            }\n            \n            // Emit start event\n            this.mascot.emit('started');\n        }\n        \n        return this.mascot;\n    }\n\n    /**\n     * Stops the animation loop and cleans up resources\n     * @returns {Object} The mascot instance for chaining\n     */\n    stop() {\n        if (!this.mascot.animationController.isAnimating()) {\n            return this.mascot;\n        }\n        \n        // Stop speech reactivity if active\n        if (this.mascot.speaking) {\n            this.mascot.audioHandler.stopSpeaking();\n        }\n        \n        // Stop the animation controller\n        const success = this.mascot.animationController.stop();\n        \n        if (success) {\n            this.mascot.isRunning = false;\n            this.isRunning = false;\n            \n            // Stop degradation monitoring\n            if (this.mascot.degradationManager) {\n                this.mascot.degradationManager.stopMonitoring();\n            }\n            \n            // Emit stop event\n            this.mascot.emit('stopped');\n        }\n        \n        return this.mascot;\n    }\n\n    /**\n     * Updates audio level monitoring and other per-frame updates\n     * @param {number} deltaTime - Time since last frame in milliseconds\n     */\n    update(deltaTime) {\n        // Update audio level monitoring if speaking\n        if (this.mascot.speaking && this.mascot.audioLevelProcessor.isProcessingActive()) {\n            this.mascot.audioLevelProcessor.updateAudioLevel(deltaTime);\n        }\n        \n        // Update classic mode components\n        if (this.mascot.config.renderingStyle === 'classic') {\n            // Update gaze tracker\n            if (this.mascot.gazeTracker) {\n                this.mascot.gazeTracker.update(deltaTime);\n                \n                // Update threat level for suspicion emotion\n                const currentEmotion = this.mascot.stateMachine.getCurrentState().emotion;\n                if (currentEmotion === 'suspicion') {\n                    // Get mouse position and calculate distance to center\n                    const mousePos = this.mascot.gazeTracker.mousePos;\n                    const centerX = this.mascot.canvas.width / 2;\n                    const centerY = this.mascot.canvas.height / 2;\n                    const distance = Math.sqrt(\n                        Math.pow(mousePos.x - centerX, 2) + \n                        Math.pow(mousePos.y - centerY, 2)\n                    );\n                    \n                    // Get emotion configuration\n                    const suspicionEmotion = getEmotion('suspicion');\n                    if (suspicionEmotion && suspicionEmotion.visual) {\n                        const maxDistance = Math.min(centerX, centerY);\n                        const threatLevel = Math.max(0, Math.min(1, 1 - (distance / maxDistance)));\n                        suspicionEmotion.visual.threatLevel = threatLevel;\n                    }\n                }\n            }\n            \n            // Update idle behaviors\n            if (this.mascot.idleBehavior) {\n                this.mascot.idleBehavior.update(deltaTime);\n            }\n            \n            // Combine gaze and sway offsets\n            if (this.mascot.gazeTracker && this.mascot.idleBehavior) {\n                const gazeOffset = this.mascot.gazeTracker.getGazeOffset();\n                const swayOffset = this.mascot.idleBehavior.getSwayOffset();\n                \n                // Get full gaze state including proximity for eye narrowing\n                const gazeState = this.mascot.gazeTracker.getState();\n                \n                // Combine the offsets and include proximity data\n                const gazeData = {\n                    offset: {\n                        x: gazeOffset.x + swayOffset.x,\n                        y: gazeOffset.y + swayOffset.y\n                    },\n                    proximity: gazeState.proximity,\n                    isFocused: gazeState.isFocused\n                };\n                \n                // Pass to renderer\n                if (this.mascot.renderer.setGazeData) {\n                    this.mascot.renderer.setGazeData(gazeData);\n                }\n            }\n        }\n    }\n\n    /**\n     * Cleanup\n     */\n    destroy() {\n        this.stop();\n    }\n}","/**\n * ConfigurationManager - Manages settings and configuration\n * @module mascot/ConfigurationManager\n */\n\nexport class ConfigurationManager {\n    constructor(mascot, config = {}) {\n        this.mascot = mascot;\n        this.config = this.validateConfig(config);\n    }\n\n    /**\n     * Validate and set defaults for configuration\n     */\n    validateConfig(config) {\n        return {\n            canvasId: config.canvasId || 'emotive-canvas',\n            startingEmotion: config.startingEmotion || 'neutral',\n            emotionalResponsiveness: config.emotionalResponsiveness ?? 0.5,\n            particleIntensity: config.particleIntensity ?? 1.0,\n            glowIntensity: config.glowIntensity ?? 1.0,\n            audioEnabled: config.audioEnabled ?? false,\n            showFPS: config.showFPS ?? false,\n            debugMode: config.debugMode ?? false,\n            renderMode: config.renderMode || 'default',\n            maxParticles: config.maxParticles || 100,\n            ...config\n        };\n    }\n\n    /**\n     * Methods to be moved here:\n     * - getConfig()\n     * - updateConfig()\n     * - Configuration validation\n     */\n\n    /**\n     * Get current configuration\n     */\n    getConfig() {\n        return { ...this.config };\n    }\n\n    /**\n     * Update configuration\n     */\n    updateConfig(updates) {\n        this.config = { ...this.config, ...updates };\n        return this.config;\n    }\n}","/**\r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *  ╔═○─┐ emotive\r\n *    ●●  ENGINE\r\n *  └─○═╝                                                                             \r\n *                   ◐ ◑ ◒ ◓  EMOTIVE MASCOT  ◓ ◒ ◑ ◐                   \r\n *                                                                                    \r\n * ═══════════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * @fileoverview EmotiveMascot - Main API Class for the Emotive Engine\r\n * @author Emotive Engine Team\r\n * @version 2.1.0\r\n * @module EmotiveMascot\r\n * @changelog 2.1.0 - Added resize handling with visual resampling for consistent quality\r\n * \r\n * ╔═══════════════════════════════════════════════════════════════════════════════════\r\n * ║                                   PURPOSE                                         \r\n * ╠═══════════════════════════════════════════════════════════════════════════════════\r\n * ║ The MAIN ORCHESTRATOR of the Emotive Engine. This is the primary API class        \r\n * ║ that developers interact with. It coordinates all subsystems, manages the         \r\n * ║ lifecycle, and provides the fluent API for emotional expression.                  \r\n * ╚═══════════════════════════════════════════════════════════════════════════════════\r\n *\r\n * ┌───────────────────────────────────────────────────────────────────────────────────\r\n * │ 🎭 CORE FEATURES                                                                  \r\n * ├───────────────────────────────────────────────────────────────────────────────────\r\n * │ • Emotional state management with smooth transitions                              \r\n * │ • Gesture triggering and animation control                                        \r\n * │ • Particle system orchestration                                                   \r\n * │ • Dynamic visual resampling on resize                                             \r\n * │ • Plugin system for extensibility                                                 \r\n * │ • Event handling and listener management                                          \r\n * │ • Performance optimization and degradation                                        \r\n * │ • Accessibility features                                                          \r\n * │ • Mobile optimization                                                             \r\n * └───────────────────────────────────────────────────────────────────────────────────\r\n *\r\n * ════════════════════════════════════════════════════════════════════════════════════\r\n */\r\n\r\nimport CanvasManager from './core/CanvasManager.js';\r\nimport ErrorBoundary from './core/ErrorBoundary.js';\r\nimport EmotiveStateMachine from './core/EmotiveStateMachine.js';\r\nimport ParticleSystem from './core/ParticleSystem.js';\r\nimport EmotiveRenderer from './core/EmotiveRenderer.js';\r\nimport GazeTracker from './core/GazeTracker.js';\r\nimport IdleBehavior from './core/IdleBehavior.js';\r\nimport { getEmotionVisualParams, getEmotion } from './core/emotions/index.js';\r\nimport { getGesture } from './core/gestures/index.js';\r\nimport { SoundSystem } from './core/SoundSystem.js';\r\nimport AnimationController from './core/AnimationController.js';\r\nimport AudioLevelProcessor from './core/AudioLevelProcessor.js';\r\nimport EventManager from './core/EventManager.js';\r\nimport AccessibilityManager from './core/AccessibilityManager.js';\r\nimport MobileOptimization from './core/MobileOptimization.js';\r\nimport PluginSystem from './core/PluginSystem.js';\r\nimport { browserCompatibility, CanvasContextRecovery } from './utils/browserCompatibility.js';\r\nimport { emotiveDebugger, runtimeCapabilities } from './utils/debugger.js';\r\nimport rhythmIntegration from './core/rhythmIntegration.js';\r\nimport ShapeMorpher from './core/ShapeMorpher.js';\r\nimport { AudioAnalyzer } from './core/AudioAnalyzer.js';\r\nimport gestureCompatibility from './core/GestureCompatibility.js';\r\nimport GrooveTemplates from './core/GrooveTemplates.js';\r\n\r\n// Import modular handlers\r\nimport { AudioHandler } from './mascot/AudioHandler.js';\r\nimport { GestureController } from './mascot/GestureController.js';\r\nimport { StateCoordinator } from './mascot/StateCoordinator.js';\r\nimport { VisualizationRunner } from './mascot/VisualizationRunner.js';\r\nimport { ConfigurationManager } from './mascot/ConfigurationManager.js';\r\n\r\nclass EmotiveMascot {\r\n    constructor(config = {}) {\r\n        // Initialize error boundary first\r\n        this.errorBoundary = new ErrorBoundary();\r\n        \r\n        // Initialize EventManager early to avoid undefined errors\r\n        this.eventManager = new EventManager({\r\n            maxListeners: config.maxEventListeners || 100,\r\n            enableDebugging: config.enableEventDebugging || false,\r\n            enableMonitoring: config.enableEventMonitoring || true,\r\n            memoryWarningThreshold: config.eventMemoryWarningThreshold || 50\r\n        });\r\n        \r\n        // Wrap initialization in error boundary\r\n        this.errorBoundary.wrap(() => {\r\n            this.initialize(config);\r\n        }, 'initialization')();\r\n    }\r\n\r\n    /**\r\n     * Get default duration for a gesture\r\n     */\r\n    /**\r\n     * Initialize the mascot system\r\n     * @param {Object} config - Configuration options\r\n     */\r\n    initialize(config) {\r\n        // Get browser-specific optimizations\r\n        const browserOpts = browserCompatibility.browserOptimizations.getOptimizations();\r\n        const capabilities = browserCompatibility.capabilities;\r\n        \r\n        // Default configuration with browser-specific optimizations\r\n        const defaults = {\r\n            canvasId: 'emotive-mascot',\r\n            targetFPS: 60,\r\n            enableAudio: browserCompatibility.featureDetection.features.webAudio,\r\n            masterVolume: 0.5,\r\n            maxParticles: browserOpts.particleLimit,\r\n            defaultEmotion: 'neutral',\r\n            enableAutoOptimization: true,\r\n            enableGracefulDegradation: true,\r\n            renderingStyle: 'classic',  // 'classic' (Emotive) or 'advanced' (3-layer)\r\n            enableGazeTracking: true,\r\n            enableIdleBehaviors: true,\r\n            classicConfig: {\r\n                coreColor: '#FFFFFF',\r\n                coreSizeDivisor: 12,      // Core radius = canvas_size / 12 (original Emotive)\r\n                glowMultiplier: 2.5,      // Glow radius = core * 2.5 (original Emotive)\r\n                defaultGlowColor: '#14B8A6'\r\n            },\r\n            topOffset: 0  // Vertical offset to shift mascot upward (in pixels)\r\n        };\r\n        \r\n        this.config = { ...defaults, ...config };\r\n        \r\n        // Get canvas element\r\n        this.canvas = typeof this.config.canvasId === 'string' \r\n            ? document.getElementById(this.config.canvasId)\r\n            : this.config.canvasId;\r\n            \r\n        if (!this.canvas) {\r\n            throw new Error(`Canvas with ID '${this.config.canvasId}' not found`);\r\n        }\r\n\r\n        // Initialize core systems with browser compatibility\r\n        this.canvasManager = new CanvasManager(this.canvas);\r\n        \r\n        // Set up canvas context recovery\r\n        this.contextRecovery = new CanvasContextRecovery(this.canvas);\r\n        this.contextRecovery.onRecovery((context) => {\r\n            // Canvas context recovered, reinitializing renderer\r\n            if (this.renderer) {\r\n                this.renderer.handleContextRecovery(context);\r\n            }\r\n        });\r\n        \r\n        // Apply browser-specific canvas optimizations\r\n        browserCompatibility.browserOptimizations.applyCanvasOptimizations(\r\n            this.canvas, \r\n            this.canvasManager.getContext()\r\n        );\r\n        \r\n        this.stateMachine = new EmotiveStateMachine(this.errorBoundary);\r\n        this.particleSystem = new ParticleSystem(this.config.maxParticles, this.errorBoundary);\r\n        \r\n        // Always use EmotiveRenderer, pass full config including topOffset\r\n        this.renderer = new EmotiveRenderer(this.canvasManager, {\r\n            ...this.config.classicConfig,\r\n            topOffset: this.config.topOffset || 0\r\n        });\r\n        \r\n        // Initialize shape morphing and audio analysis early\r\n        this.shapeMorpher = new ShapeMorpher();\r\n        this.audioAnalyzer = new AudioAnalyzer();\r\n\r\n        // Gesture compatibility system\r\n        this.gestureCompatibility = gestureCompatibility;\r\n\r\n        // Groove templates for musical rhythm patterns\r\n        this.grooveTemplates = new GrooveTemplates();\r\n        \r\n        // Pass audioAnalyzer to shapeMorpher for audio-reactive deformation\r\n        this.shapeMorpher.audioAnalyzer = this.audioAnalyzer;\r\n        \r\n        // Pass them to renderer\r\n        this.renderer.shapeMorpher = this.shapeMorpher;\r\n        this.renderer.audioAnalyzer = this.audioAnalyzer;\r\n        \r\n        // Connect renderer and state machine for undertone modifiers\r\n        this.renderer.stateMachine = this.stateMachine;\r\n        this.stateMachine.renderer = this.renderer;\r\n        \r\n        // Initialize gaze tracking\r\n        if (this.config.enableGazeTracking) {\r\n            this.gazeTracker = new GazeTracker(this.canvas, {\r\n                smoothing: 0.1,\r\n                maxOffset: 0.15,\r\n                enabled: true\r\n            });\r\n            \r\n            // Reset idle timer on interaction and wake if sleeping\r\n            this.gazeTracker.setInteractionCallback(() => {\r\n                if (this.sleeping) {\r\n                    // Wake with full animation sequence\r\n                    this.wake();\r\n                } else if (this.idleBehavior) {\r\n                    // Just reset idle timer if not sleeping\r\n                    this.idleBehavior.resetIdleTimer();\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Initialize idle behaviors\r\n        if (this.config.enableIdleBehaviors) {\r\n            this.idleBehavior = new IdleBehavior({\r\n                enabled: true,\r\n                sleepTimeout: Infinity  // Disable automatic sleep\r\n            });\r\n            \r\n            // Connect idle behavior callbacks to renderer\r\n            this.idleBehavior.setCallback('onBlink', (data) => {\r\n                if (this.renderer && this.renderer.state) {\r\n                    this.renderer.state.blinking = data.phase === 'start';\r\n                }\r\n            });\r\n            \r\n            this.idleBehavior.setCallback('onSleep', () => {\r\n                if (this.renderer && this.renderer.enterSleepMode) {\r\n                    this.renderer.enterSleepMode();\r\n                }\r\n            });\r\n            \r\n            this.idleBehavior.setCallback('onWake', () => {\r\n                if (this.renderer && this.renderer.wakeUp) {\r\n                    this.renderer.wakeUp();\r\n                }\r\n            });\r\n        }\r\n        \r\n        this.soundSystem = new SoundSystem();\r\n        \r\n        // DegradationManager removed - no performance interference\r\n        this.degradationManager = null;\r\n        \r\n        // Initialize accessibility manager\r\n        this.accessibilityManager = new AccessibilityManager({\r\n            enableReducedMotion: this.config.enableReducedMotion !== false,\r\n            enableHighContrast: this.config.enableHighContrast !== false,\r\n            enableScreenReaderSupport: this.config.enableScreenReaderSupport !== false,\r\n            enableKeyboardNavigation: this.config.enableKeyboardNavigation !== false,\r\n            colorBlindMode: this.config.colorBlindMode || 'none'\r\n        });\r\n        \r\n        // Initialize mobile optimization\r\n        this.mobileOptimization = new MobileOptimization({\r\n            enableTouchOptimization: this.config.enableTouchOptimization !== false,\r\n            enableViewportHandling: this.config.enableViewportHandling !== false,\r\n            enableBatteryOptimization: this.config.enableBatteryOptimization !== false\r\n        });\r\n        \r\n        // Set canvas for mobile optimization\r\n        this.mobileOptimization.setCanvas(this.canvas);\r\n        \r\n        // Initialize plugin system\r\n        this.pluginSystem = new PluginSystem({\r\n            enablePlugins: this.config.enablePlugins !== false,\r\n            validatePlugins: this.config.validatePlugins !== false,\r\n            sandboxPlugins: this.config.sandboxPlugins !== false\r\n        });\r\n        \r\n        // Initialize audio level processor for speech reactivity\r\n        this.audioLevelProcessor = new AudioLevelProcessor({\r\n            spikeThreshold: this.config.spikeThreshold || 1.5,\r\n            minimumSpikeLevel: this.config.minimumSpikeLevel || 0.1,\r\n            spikeMinInterval: this.config.spikeMinInterval || 1000\r\n        });\r\n        \r\n        // Initialize animation controller\r\n        try {\r\n            this.animationController = new AnimationController(this.errorBoundary, {\r\n                targetFPS: this.config.targetFPS\r\n            });\r\n        } catch (error) {\r\n            // Failed to initialize AnimationController\r\n            // Fallback: create a minimal animation controller interface\r\n            this.animationController = {\r\n                isAnimating: () => this.isRunning,\r\n                start: () => { this.isRunning = true; return true; },\r\n                stop: () => { this.isRunning = false; return true; },\r\n                setTargetFPS: () => {},\r\n                targetFPS: this.config.targetFPS,\r\n                getPerformanceMetrics: () => ({ fps: 0, isRunning: this.isRunning, performanceDegradation: false, deltaTime: 16, frameCount: 0, targetFPS: this.config.targetFPS }),\r\n                setSubsystems: () => {},\r\n                setEventCallback: () => {},\r\n                setParentMascot: () => {},\r\n                destroy: () => {},\r\n                deltaTime: 16\r\n            };\r\n        }\r\n        \r\n        // Configure animation controller with subsystems\r\n        this.animationController.setSubsystems({\r\n            stateMachine: this.stateMachine,\r\n            particleSystem: this.particleSystem,\r\n            renderer: this.renderer,\r\n            soundSystem: this.soundSystem,\r\n            canvasManager: this.canvasManager\r\n        });\r\n        \r\n        // Set up event forwarding from animation controller\r\n        this.animationController.setEventCallback((event, data) => {\r\n            this.emit(event, data);\r\n        });\r\n        \r\n        // Set parent mascot reference for audio level updates\r\n        this.animationController.setParentMascot(this);\r\n        \r\n        // Runtime state\r\n        this.isRunning = false;\r\n        \r\n        // Initialize sound system if enabled\r\n        if (this.config.enableAudio) {\r\n            this.soundSystem.initialize().then(success => {\r\n                if (success) {\r\n                    this.soundSystem.setMasterVolume(this.config.masterVolume);\r\n                    // Sound system initialized successfully\r\n                } else {\r\n                    // Sound system initialization failed, continuing without audio\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Speech reactivity state\r\n        this.speaking = false;\r\n        \r\n        // Track warning frequency to reduce spam\r\n        this.warningTimestamps = {};\r\n        \r\n        // Initialize rhythm integration\r\n        this.rhythmEnabled = false;\r\n        rhythmIntegration.initialize();\r\n\r\n        // Expose rhythmIntegration globally for UI controls\r\n        // Store rhythm integration internally instead of global\r\n        this.rhythmIntegration = rhythmIntegration;\r\n        this.warningThrottle = 5000; // Only show same warning every 5 seconds\r\n        \r\n        // Recording state (listening/capturing)\r\n        this.recording = false;\r\n        \r\n        // Sleeping state\r\n        this.sleeping = false;\r\n        \r\n        // TTS (Text-to-Speech) state\r\n        this.tts = {\r\n            available: typeof window !== 'undefined' && 'speechSynthesis' in window,\r\n            speaking: false,\r\n            currentUtterance: null\r\n        };\r\n        \r\n        // Initialize modular handlers\r\n        this.audioHandler = new AudioHandler(this);\r\n        this.gestureController = new GestureController(this);\r\n        this.stateCoordinator = new StateCoordinator(this);\r\n        this.visualizationRunner = new VisualizationRunner(this);\r\n        this.configurationManager = new ConfigurationManager(this, config);\r\n        \r\n        // Initialize the handlers\r\n        this.audioHandler.init();\r\n        this.gestureController.init();\r\n        this.stateCoordinator.init();\r\n        this.visualizationRunner.init();\r\n        \r\n        // EventManager already initialized in constructor\r\n        \r\n        // Initialize debugging if enabled\r\n        this.debugMode = this.config.enableDebug || false;\r\n        if (this.debugMode) {\r\n            emotiveDebugger.log('INFO', 'Debug mode enabled for EmotiveMascot', {\r\n                config: this.config,\r\n                runtimeCapabilities: runtimeCapabilities.generateReport()\r\n            });\r\n            \r\n            // Start profiling initialization\r\n            emotiveDebugger.startProfile('mascot-initialization', {\r\n                canvasId: this.config.canvasId,\r\n                maxParticles: this.config.maxParticles\r\n            });\r\n        }\r\n        \r\n        // Set up audio level processor callbacks\r\n        this.setupAudioLevelProcessorCallbacks();\r\n        \r\n        // Set initial emotional state\r\n        this.stateMachine.setEmotion(this.config.defaultEmotion);\r\n        \r\n        // Register for canvas resize events to trigger visual resampling\r\n        this.canvasManager.onResize((width, height, dpr) => {\r\n            this.handleResize(width, height, dpr);\r\n        });\r\n        \r\n        // Log browser compatibility information\r\n        // EmotiveMascot initialized successfully\r\n        \r\n        // Complete initialization profiling\r\n        if (this.debugMode) {\r\n            emotiveDebugger.endProfile('mascot-initialization');\r\n            emotiveDebugger.takeMemorySnapshot('post-initialization');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle degradation manager events\r\n     * @param {string} event - Event type\r\n     * @param {Object} data - Event data\r\n     */\r\n    handleDegradationEvent(event, data) {\r\n        switch (event) {\r\n            case 'degradationApplied':\r\n                // Silently handle performance degradation\r\n                this.applyDegradationSettings(data.settings);\r\n                this.emit('performanceDegradation', data);\r\n                break;\r\n                \r\n            case 'recoveryApplied':\r\n                // Silently handle performance recovery\r\n                this.applyDegradationSettings(data.settings);\r\n                this.emit('performanceRecovery', data);\r\n                break;\r\n                \r\n            case 'levelChanged':\r\n                // Silently handle degradation level change\r\n                this.applyDegradationSettings(data.settings);\r\n                this.emit('degradationLevelChanged', data);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply degradation settings to all systems\r\n     * @param {Object} settings - Degradation settings\r\n     */\r\n    applyDegradationSettings(settings) {\r\n        // Update particle system limits\r\n        if (this.particleSystem && settings.particleLimit !== undefined) {\r\n            this.particleSystem.setMaxParticles(settings.particleLimit);\r\n        }\r\n        \r\n        // Update audio system\r\n        if (this.soundSystem && settings.audioEnabled !== undefined) {\r\n            if (!settings.audioEnabled && this.soundSystem.isAvailable()) {\r\n                this.soundSystem.stopAmbientTone(200);\r\n            }\r\n        }\r\n        \r\n        // DISABLED - Don't change FPS based on degradation\r\n        /*\r\n        // Update animation controller target FPS\r\n        if (this.animationController && settings.targetFPS !== undefined) {\r\n            this.animationController.setTargetFPS(settings.targetFPS);\r\n        }\r\n        */\r\n        \r\n        // Update renderer quality\r\n        if (this.renderer && settings.qualityLevel !== undefined) {\r\n            this.renderer.setQualityLevel(settings.qualityLevel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up callbacks for the audio level processor\r\n     */\r\n    setupAudioLevelProcessorCallbacks() {\r\n        // Handle audio level updates\r\n        this.audioLevelProcessor.onLevelUpdate((data) => {\r\n            // Update renderer with current audio level\r\n            this.renderer.updateAudioLevel(data.level);\r\n            \r\n            // Emit audio level update event\r\n            this.emit('audioLevelUpdate', {\r\n                level: data.level,\r\n                rawData: Array.from(data.rawData),\r\n                timestamp: data.timestamp\r\n            });\r\n        });\r\n        \r\n        // Handle volume spikes for gesture triggering\r\n        this.audioLevelProcessor.onVolumeSpike((spikeData) => {\r\n            // Trigger pulse gesture if not already active\r\n            // Check if any particle has an active gesture\r\n            const hasActiveGesture = this.particleSystem.particles.some(p => p.gestureProgress < 1);\r\n            if (!hasActiveGesture) {\r\n                const emotionalContext = {\r\n                    emotion: this.stateMachine.getCurrentState().emotion,\r\n                    properties: this.stateMachine.getCurrentEmotionalProperties()\r\n                };\r\n                \r\n                // Execute pulse gesture through express method\r\n                this.express('pulse');\r\n                const success = true;\r\n                \r\n                if (success) {\r\n                    // Emit volume spike event with gesture trigger info\r\n                    this.emit('volumeSpike', {\r\n                        ...spikeData,\r\n                        gestureTriggered: true\r\n                    });\r\n                    \r\n                    // Volume spike detected - triggered pulse gesture\r\n                } else {\r\n                    // Emit volume spike event without gesture trigger\r\n                    this.emit('volumeSpike', {\r\n                        ...spikeData,\r\n                        gestureTriggered: false\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Handle audio processing errors\r\n        this.audioLevelProcessor.onError((errorData) => {\r\n            // AudioLevelProcessor error\r\n            this.emit('audioProcessingError', errorData);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the emotional state with optional undertone\r\n     * @param {string} emotion - The emotion to set\r\n     * @param {Object|string|null} options - Options object or undertone string\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setEmotion(emotion, options = null) {\r\n        return this.errorBoundary.wrap(() => {\r\n            return this.stateCoordinator.setEmotion(emotion, options);\r\n        }, 'emotion-setting', this)();\r\n    }\r\n    \r\n    /**\r\n     * Update the undertone without resetting emotion\r\n     * @param {string|null} undertone - The undertone to apply (subdued, tired, nervous, energetic, confident, intense, or null)\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    updateUndertone(undertone) {\r\n        return this.errorBoundary.wrap(() => {\r\n            // Update state machine's undertone\r\n            this.stateMachine.applyUndertoneModifier(undertone);\r\n            // Update renderer's undertone without resetting emotion\r\n            if (this.renderer && this.renderer.updateUndertone) {\r\n                this.renderer.updateUndertone(undertone);\r\n            }\r\n            return this;\r\n        }, 'undertone-update', this)();\r\n    }\r\n    \r\n    /**\r\n     * Set BPM for core rotation (record player effect)\r\n     * @param {number} bpm - Beats per minute\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setBPM(bpm) {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (this.renderer && this.renderer.setBPM) {\r\n                this.renderer.setBPM(bpm);\r\n            }\r\n            return this;\r\n        }, 'bpm-update', this)();\r\n    }\r\n\r\n    /**\r\n     * Set manual rotation speed for the shape\r\n     * @param {number} speed - Rotation speed (-1 to 1, negative for reverse)\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setRotationSpeed(speed) {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (this.renderer && this.renderer.setRotationSpeed) {\r\n                this.renderer.setRotationSpeed(speed);\r\n            }\r\n            return this;\r\n        }, 'rotation-speed-update', this)();\r\n    }\r\n\r\n    /**\r\n     * Set manual rotation angle directly (for scratching)\r\n     * @param {number} angle - Rotation angle in radians\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setRotationAngle(angle) {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (this.renderer && this.renderer.setRotationAngle) {\r\n                this.renderer.setRotationAngle(angle);\r\n            }\r\n            return this;\r\n        }, 'rotation-angle-update', this)();\r\n    }\r\n\r\n    /**\r\n     * Enable or disable gaze tracking\r\n     * @param {boolean} enabled - Whether to enable gaze tracking\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setGazeTracking(enabled) {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (this.renderer && this.renderer.setGazeTracking) {\r\n                this.renderer.setGazeTracking(enabled);\r\n            }\r\n            return this;\r\n        }, 'gaze-tracking-update', this)();\r\n    }\r\n\r\n    /**\r\n     * Executes a single gesture or chord (multiple simultaneous gestures)\r\n     * @param {string|Array<string>|Object} gesture - Single gesture, array of gestures, or chord object\r\n     * @param {Object} options - Options for the gesture execution\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    express(gesture, options = {}) {\r\n        return this.errorBoundary.wrap(() => {\r\n            // Performance marker: Gesture start\r\n            const gestureStartTime = performance.now();\r\n            const gestureName = Array.isArray(gesture) ? 'chord' :\r\n                               (typeof gesture === 'object' && gesture.type === 'chord') ? 'chord' :\r\n                               gesture;\r\n\r\n            if (this.performanceMonitor) {\r\n                this.performanceMonitor.markGestureStart(gestureName);\r\n            }\r\n\r\n            if (!gesture) {\r\n                // No gesture provided to express()\r\n                if (this.performanceMonitor) {\r\n                    this.performanceMonitor.markGestureEnd(gestureName);\r\n                }\r\n                return this;\r\n            }\r\n\r\n            // Handle chord (multiple simultaneous gestures)\r\n            if (Array.isArray(gesture)) {\r\n                return this.expressChord(gesture, options);\r\n            }\r\n\r\n            // Handle chord object\r\n            if (typeof gesture === 'object' && gesture.type === 'chord') {\r\n                return this.expressChord(gesture.gestures, options);\r\n            }\r\n\r\n            // Express called with single gesture\r\n\r\n            // Route through GestureScheduler when rhythm is active\r\n            // This ensures gestures are queued to play on beat\r\n            // Skip if already coming from scheduler to avoid infinite loop\r\n            if (!options.fromScheduler && window.gestureScheduler && window.rhythmIntegration && window.rhythmIntegration.enabled) {\r\n                const queueItem = window.gestureScheduler.requestGesture(gesture, options);\r\n                return this;\r\n            }\r\n\r\n            // Note: Modular gesture controller integration can be added here\r\n            // when implementing custom gesture extensions\r\n\r\n            // Direct mapping to renderer methods for all gestures\r\n            const rendererMethods = {\r\n                'bounce': 'startBounce',\r\n                'pulse': 'startPulse',\r\n                'shake': 'startShake',\r\n                'spin': 'startSpin',\r\n                'nod': 'startNod',\r\n                'tilt': 'startTilt',\r\n                'expand': 'startExpand',\r\n                'contract': 'startContract',\r\n                'flash': 'startFlash',\r\n                'drift': 'startDrift',\r\n                'stretch': 'startStretch',\r\n                'glow': 'startGlow',\r\n                'sparkle': 'startSparkle',\r\n                'shimmer': 'startShimmer',\r\n                'wiggle': 'startWiggle',\r\n                'groove': 'startGroove',\r\n                'point': 'startPoint',\r\n                'lean': 'startLean',\r\n                'reach': 'startReach',\r\n                'headBob': 'startHeadBob',\r\n                'orbit': 'startOrbit',\r\n                'flicker': 'startFlicker',\r\n                'vibrate': 'startVibrate',\r\n                'wave': 'startWave',\r\n                'breathe': 'startBreathe',\r\n                'morph': 'startMorph',\r\n                'slowBlink': 'startSlowBlink',\r\n                'look': 'startLook',\r\n                'settle': 'startSettle',\r\n                'orbit': 'startOrbital',\r\n                'orbital': 'startOrbital',  // Alias for backwards compatibility\r\n                'hula': 'startHula',\r\n                'sway': 'startSway',\r\n                'breathIn': 'startBreathIn',\r\n                'breathOut': 'startBreathOut',\r\n                'breathHold': 'startBreathHold',\r\n                'breathHoldEmpty': 'startBreathHoldEmpty',\r\n                'jump': 'startJump',\r\n                'rain': 'startRain',\r\n                'runningman': 'startRunningMan',\r\n                'charleston': 'startCharleston',\r\n                // Ambient dance gestures\r\n                'grooveSway': 'startGrooveSway',\r\n                'grooveBob': 'startGrooveBob',\r\n                'grooveFlow': 'startGrooveFlow',\r\n                'groovePulse': 'startGroovePulse',\r\n                'grooveStep': 'startGrooveStep'\r\n                // Note: burst, peek, hold, scan, twitch, jitter, float\r\n                // are handled by the gesture system below\r\n            };\r\n            \r\n            // Check if this gesture has a direct renderer method\r\n            const methodName = rendererMethods[gesture];\r\n            if (methodName && this.renderer && this.renderer[methodName]) {\r\n                // Call the renderer method directly\r\n                this.renderer[methodName](options);\r\n\r\n                // Play gesture sound effect if available\r\n                if (this.soundSystem.isAvailable()) {\r\n                    this.soundSystem.playGestureSound(gesture);\r\n                }\r\n\r\n                // Performance marker: Gesture end\r\n                if (this.performanceMonitor) {\r\n                    const gestureEndTime = performance.now();\r\n                    this.performanceMonitor.markGestureEnd(gestureName);\r\n                    this.performanceMonitor.recordGestureTime(gestureName, gestureEndTime - gestureStartTime);\r\n                }\r\n\r\n                return this;\r\n            }\r\n            \r\n            // Try to execute gesture through the particle system\r\n            // This handles modular gestures from the gesture registry\r\n            // Check if gesture exists in the gesture registry\r\n            const gestureConfig = getGesture(gesture);\r\n            \r\n            if (gestureConfig) {\r\n                // Register gesture's rhythm configuration\r\n                rhythmIntegration.registerConfig('gesture', gesture, gestureConfig);\r\n                \r\n                // Store the current gesture info for the particle system to use\r\n                this.currentModularGesture = {\r\n                    type: gesture,\r\n                    config: gestureConfig,\r\n                    startTime: performance.now(),\r\n                    duration: gestureConfig.defaultParams?.duration || 1000,\r\n                    progress: 0\r\n                };\r\n                \r\n                // Executed gesture through particle system\r\n                \r\n                // Play gesture sound effect if available\r\n                if (this.soundSystem.isAvailable()) {\r\n                    this.soundSystem.playGestureSound(gesture);\r\n                }\r\n\r\n                // Performance marker: Gesture end\r\n                if (this.performanceMonitor) {\r\n                    const gestureEndTime = performance.now();\r\n                    this.performanceMonitor.markGestureEnd(gestureName);\r\n                    this.performanceMonitor.recordGestureTime(gestureName, gestureEndTime - gestureStartTime);\r\n                }\r\n\r\n                return this;\r\n            }\r\n            \r\n            // Unknown gesture - throttled warning\r\n            this.throttledWarn(`Unknown gesture: ${gesture}`, `gesture_${gesture}`);\r\n\r\n            // Performance marker: Gesture end (failed)\r\n            if (this.performanceMonitor) {\r\n                this.performanceMonitor.markGestureEnd(gestureName);\r\n            }\r\n\r\n            return this;\r\n        }, 'gesture-expression', this)();\r\n    }\r\n\r\n    /**\r\n     * Express multiple gestures simultaneously (chord)\r\n     * @param {Array<string>} gestures - Array of gesture names to execute together\r\n     * @param {Object} options - Options for the chord execution\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    expressChord(gestures, options = {}) {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (!gestures || !Array.isArray(gestures) || gestures.length === 0) {\r\n                return this;\r\n            }\r\n\r\n            // Import gesture compatibility if not loaded\r\n            if (!this.gestureCompatibility) {\r\n                // Try to load it dynamically\r\n                import('./core/GestureCompatibility.js').then(module => {\r\n                    this.gestureCompatibility = module.default;\r\n                }).catch(err => {\r\n                    console.warn('GestureCompatibility not available:', err);\r\n                });\r\n            }\r\n\r\n            // Use compatibility system if available\r\n            const compatibleGestures = this.gestureCompatibility ?\r\n                this.gestureCompatibility.getCompatibleGestures(gestures) :\r\n                gestures;\r\n\r\n            console.log('Executing gesture chord:', compatibleGestures);\r\n\r\n            // Execute all compatible gestures simultaneously\r\n            compatibleGestures.forEach(gestureName => {\r\n                const normalizedGesture = typeof gestureName === 'string' ?\r\n                    gestureName : gestureName.gestureName;\r\n\r\n                // Execute directly to ensure simultaneity\r\n                this.executeGestureDirectly(normalizedGesture, options);\r\n            });\r\n\r\n            // Check for enhancing combination\r\n            if (this.gestureCompatibility?.isEnhancingCombination?.(compatibleGestures)) {\r\n                // Add extra visual flair\r\n                this.renderer?.specialEffects?.addSparkle?.();\r\n            }\r\n\r\n            return this;\r\n        }, 'gesture-chord', this)();\r\n    }\r\n\r\n    /**\r\n     * Execute a gesture directly on the renderer (bypasses routing)\r\n     * @private\r\n     */\r\n    executeGestureDirectly(gesture, options = {}) {\r\n        // Direct mapping to renderer methods\r\n        const rendererMethods = {\r\n            'bounce': 'startBounce',\r\n            'pulse': 'startPulse',\r\n            'shake': 'startShake',\r\n            'spin': 'startSpin',\r\n            'nod': 'startNod',\r\n            'tilt': 'startTilt',\r\n            'flash': 'startFlash',\r\n            'glow': 'startGlow',\r\n            'sparkle': 'startSparkle',\r\n            'shimmer': 'startShimmer',\r\n            'wiggle': 'startWiggle',\r\n            'groove': 'startGroove',\r\n            'point': 'startPoint',\r\n            'lean': 'startLean',\r\n            'reach': 'startReach',\r\n            'headBob': 'startHeadBob',\r\n            'orbit': 'startOrbit',\r\n            'sway': 'startSway',\r\n            'jump': 'startJump',\r\n            'wave': 'startWave',\r\n            'flicker': 'startFlicker',\r\n            'breathe': 'startBreathe',\r\n            'float': 'startFloat',\r\n            'rain': 'startRain',\r\n            'hula': 'startHula',\r\n            'twist': 'startTwist'\r\n        };\r\n\r\n        const methodName = rendererMethods[gesture];\r\n        if (methodName && this.renderer && typeof this.renderer[methodName] === 'function') {\r\n            this.renderer[methodName](options);\r\n        }\r\n\r\n        // Emit event\r\n        this.emit('gesture', { name: gesture, options });\r\n    }\r\n\r\n    /**\r\n     * Chains multiple gestures for sequential execution\r\n     * @param {...string} gestures - Gestures to chain\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    chain(...gestures) {\r\n        // Parse the chain using GestureCompatibility if available\r\n        if (this.gestureCompatibility) {\r\n            const steps = this.gestureCompatibility.parseChain(gestures.join('>'));\r\n            // Execute first step (which might be a chord)\r\n            if (steps.length > 0) {\r\n                const firstStep = steps[0];\r\n                if (firstStep.length > 1) {\r\n                    this.expressChord(firstStep);\r\n                } else {\r\n                    this.express(firstStep[0]);\r\n                }\r\n            }\r\n        } else {\r\n            // Fallback: execute first gesture\r\n            if (gestures.length > 0) {\r\n                this.express(gestures[0]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Starts speech reactivity mode with audio level monitoring\r\n     * @param {AudioContext} audioContext - Web Audio API context\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    startSpeaking(audioContext) {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (!audioContext) {\r\n                throw new Error('AudioContext is required for speech reactivity');\r\n            }\r\n            \r\n            if (!this.config.enableAudio) {\r\n                // Audio is disabled, cannot start speech reactivity\r\n                return this;\r\n            }\r\n            \r\n            if (this.speaking) {\r\n                // Speech reactivity is already active\r\n                return this;\r\n            }\r\n            \r\n            // Initialize audio level processor\r\n            const success = this.audioLevelProcessor.initialize(audioContext);\r\n            \r\n            if (!success) {\r\n                // Failed to initialize audio level processor\r\n                return this;\r\n            }\r\n            \r\n            // Update speech state\r\n            this.speaking = true;\r\n            \r\n            // Notify renderer about speech start\r\n            this.renderer.onSpeechStart(audioContext);\r\n            \r\n            // Emit speech start event with analyser for external connection\r\n            this.emit('speechStarted', { \r\n                audioContext, \r\n                analyser: this.audioLevelProcessor.getAnalyser(),\r\n                mascot: this\r\n            });\r\n            \r\n            // Speech reactivity started - connect audio source to analyser\r\n            return this;\r\n        }, 'speech-start', this)();\r\n    }\r\n\r\n    /**\r\n     * Stops speech reactivity mode and returns to base emotional state\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    stopSpeaking() {\r\n        return this.errorBoundary.wrap(() => {\r\n            return this.audioHandler.stopSpeaking();\r\n        }, 'speech-stop', this)();\r\n    }\r\n\r\n    /**\r\n     * Speaks text using the Web Speech API with visual feedback\r\n     * @param {string} text - Text to speak\r\n     * @param {Object} options - Speech options (rate, pitch, volume, voice)\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    speak(text, options = {}) {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (!this.tts.available) {\r\n                // Text-to-Speech is not available in this browser\r\n                return this;\r\n            }\r\n            \r\n            if (!text || typeof text !== 'string') {\r\n                // Invalid text provided to speak()\r\n                return this;\r\n            }\r\n            \r\n            // Cancel any ongoing speech\r\n            if (this.tts.speaking) {\r\n                window.speechSynthesis.cancel();\r\n            }\r\n            \r\n            // Create utterance\r\n            const utterance = new SpeechSynthesisUtterance(text);\r\n            \r\n            // Apply options\r\n            utterance.rate = options.rate || 1.0;\r\n            utterance.pitch = options.pitch || 1.0;\r\n            utterance.volume = options.volume || 1.0;\r\n            \r\n            // Select voice if specified\r\n            if (options.voice) {\r\n                const voices = window.speechSynthesis.getVoices();\r\n                const selectedVoice = voices.find(v => v.name === options.voice);\r\n                if (selectedVoice) {\r\n                    utterance.voice = selectedVoice;\r\n                }\r\n            }\r\n            \r\n            // Store current utterance\r\n            this.tts.currentUtterance = utterance;\r\n            \r\n            // Handle speech events\r\n            utterance.onstart = () => {\r\n                this.tts.speaking = true;\r\n                \r\n                // Trigger speaking gesture\r\n                this.express('pulse');\r\n                \r\n                // Emit TTS start event\r\n                this.emit('ttsStarted', { text, options });\r\n                \r\n                // TTS started\r\n            };\r\n            \r\n            utterance.onend = () => {\r\n                this.tts.speaking = false;\r\n                this.tts.currentUtterance = null;\r\n                \r\n                // Return to neutral\r\n                this.express('nod');\r\n                \r\n                // Emit TTS end event\r\n                this.emit('ttsEnded', { text });\r\n                \r\n                // TTS ended\r\n            };\r\n            \r\n            utterance.onerror = (error) => {\r\n                this.tts.speaking = false;\r\n                this.tts.currentUtterance = null;\r\n                \r\n                // TTS error\r\n                this.emit('ttsError', { error, text });\r\n            };\r\n            \r\n            // Add word boundary events for more dynamic animation\r\n            utterance.onboundary = (event) => {\r\n                if (event.name === 'word') {\r\n                    // Subtle pulse on each word\r\n                    if (Math.random() < 0.3) { // 30% chance per word\r\n                        // Trigger micro pulse gesture\r\n                        this.express('pulse');\r\n                    }\r\n                }\r\n            };\r\n            \r\n            // Start speaking\r\n            window.speechSynthesis.speak(utterance);\r\n            \r\n            return this;\r\n        }, 'tts-speak', this)();\r\n    }\r\n    \r\n    /**\r\n     * Stops any ongoing text-to-speech\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    stopTTS() {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (!this.tts.available) {\r\n                return this;\r\n            }\r\n            \r\n            if (this.tts.speaking) {\r\n                window.speechSynthesis.cancel();\r\n                this.tts.speaking = false;\r\n                this.tts.currentUtterance = null;\r\n                \r\n                // Return to neutral\r\n                this.express('nod');\r\n                \r\n                // Emit TTS stopped event\r\n                this.emit('ttsStopped');\r\n                \r\n                // TTS stopped by user\r\n            }\r\n            \r\n            return this;\r\n        }, 'tts-stop', this)();\r\n    }\r\n    \r\n    /**\r\n     * Start recording state (listening/capturing mode)\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    startRecording() {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (this.recording) {\r\n                // Already recording\r\n                return this;\r\n            }\r\n            \r\n            this.recording = true;\r\n            \r\n            // Update renderer if using Emotive style\r\n            if (this.renderer && this.renderer.startRecording) {\r\n                this.renderer.startRecording();\r\n            }\r\n            \r\n            // Emit recording started event\r\n            this.emit('recordingStarted');\r\n            \r\n            // Recording started\r\n            return this;\r\n        }, 'recording-start', this)();\r\n    }\r\n    \r\n    /**\r\n     * Stop recording state\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    stopRecording() {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (!this.recording) {\r\n                // Not currently recording\r\n                return this;\r\n            }\r\n            \r\n            this.recording = false;\r\n            \r\n            // Update renderer if using Emotive style\r\n            if (this.renderer && this.renderer.stopRecording) {\r\n                this.renderer.stopRecording();\r\n            }\r\n            \r\n            // Emit recording stopped event\r\n            this.emit('recordingStopped');\r\n            \r\n            // Recording stopped\r\n            return this;\r\n        }, 'recording-stop', this)();\r\n    }\r\n    \r\n    /**\r\n     * Enter sleep state with animation sequence\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    sleep() {\r\n        return this.errorBoundary.wrap(async () => {\r\n            if (this.sleeping) {\r\n                // Already sleeping\r\n                return this;\r\n            }\r\n            \r\n            // Sleep entry animation sequence\r\n            // Starting sleep sequence...\r\n            \r\n            // First: Yawn\r\n            this.express('yawn');\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n            \r\n            // Second: Drowsy sway\r\n            this.express('sway');\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n            \r\n            // Now enter sleep state\r\n            this.sleeping = true;\r\n            \r\n            // Update renderer if using Emotive style (handles eye closing)\r\n            if (this.renderer && this.renderer.enterSleepMode) {\r\n                this.renderer.enterSleepMode();\r\n            }\r\n            \r\n            // Update idle behavior if available\r\n            if (this.idleBehavior && this.idleBehavior.enterSleep) {\r\n                this.idleBehavior.enterSleep();\r\n            }\r\n            \r\n            // Emit sleep event\r\n            this.emit('sleep');\r\n            \r\n            // Mascot entered sleep state\r\n            return this;\r\n        }, 'sleep', this)();\r\n    }\r\n    \r\n    /**\r\n     * Wake up from sleep state with animation sequence\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    wake() {\r\n        return this.errorBoundary.wrap(async () => {\r\n            if (!this.sleeping) {\r\n                // Not currently sleeping\r\n                return this;\r\n            }\r\n            \r\n            // Exit sleep state first\r\n            this.sleeping = false;\r\n            \r\n            // Update renderer if using Emotive style (handles eye opening)\r\n            if (this.renderer && this.renderer.wakeUp) {\r\n                this.renderer.wakeUp();\r\n            }\r\n            \r\n            // Update idle behavior if available\r\n            if (this.idleBehavior && this.idleBehavior.wakeUp) {\r\n                this.idleBehavior.wakeUp();\r\n            }\r\n            \r\n            // Wake animation sequence\r\n            // Starting wake sequence...\r\n            \r\n            // First: Stretch\r\n            this.express('stretch');\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n            \r\n            // Second: Slow blink\r\n            this.express('slowBlink');\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n            \r\n            // Third: Small shake to fully wake\r\n            this.express('shake');\r\n            await new Promise(resolve => setTimeout(resolve, 500));\r\n            \r\n            // Emit wake event\r\n            this.emit('wake');\r\n            \r\n            // Mascot fully awake\r\n            return this;\r\n        }, 'wake', this)();\r\n    }\r\n    \r\n    /**\r\n     * Gets available TTS voices\r\n     * @returns {Array} Array of available voice objects\r\n     */\r\n    getTTSVoices() {\r\n        if (!this.tts.available) {\r\n            return [];\r\n        }\r\n        \r\n        return window.speechSynthesis.getVoices();\r\n    }\r\n    \r\n    /**\r\n     * Checks if TTS is currently speaking\r\n     * @returns {boolean} True if currently speaking\r\n     */\r\n    isTTSSpeaking() {\r\n        return this.tts.speaking;\r\n    }\r\n\r\n    /**\r\n     * Starts the animation loop at target 60 FPS\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    start() {\r\n        return this.errorBoundary.wrap(() => {\r\n            return this.visualizationRunner.start();\r\n        }, 'start', this)();\r\n    }\r\n\r\n    /**\r\n     * Stops the animation loop and cleans up resources\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    stop() {\r\n        return this.errorBoundary.wrap(() => {\r\n            return this.visualizationRunner.stop();\r\n        }, 'stop', this)();\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Sets a breathing pattern for the orb\r\n     * @param {number} inhale - Inhale duration in seconds\r\n     * @param {number} hold1 - Hold after inhale in seconds\r\n     * @param {number} exhale - Exhale duration in seconds\r\n     * @param {number} hold2 - Hold after exhale in seconds\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setBreathePattern(inhale, hold1, exhale, hold2) {\r\n        return this.errorBoundary.wrap(() => {\r\n            // Calculate total cycle time\r\n            const totalCycle = inhale + hold1 + exhale + hold2;\r\n            \r\n            // Store pattern for custom animation\r\n            this.breathePattern = {\r\n                inhale,\r\n                hold1,\r\n                exhale,\r\n                hold2,\r\n                totalCycle,\r\n                currentPhase: 'inhale',\r\n                phaseStartTime: Date.now(),\r\n                phaseProgress: 0\r\n            };\r\n            \r\n            // Start custom breathing animation\r\n            this.startBreathingAnimation();\r\n            \r\n            return this;\r\n        }, 'setBreathePattern', this)();\r\n    }\r\n    \r\n    /**\r\n     * Directly sets the orb scale with animation\r\n     * @param {number} scale - Target scale (1.0 = normal)\r\n     * @param {number} duration - Animation duration in milliseconds\r\n     * @param {string} easing - Easing function ('linear', 'ease', 'easeIn', 'easeOut', 'easeInOut')\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setOrbScale(scale, duration = 1000, easing = 'easeInOut') {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (this.renderer) {\r\n                // Create scale animation\r\n                const startScale = this.currentOrbScale || 1.0;\r\n                const startTime = Date.now();\r\n                \r\n                const animate = () => {\r\n                    const elapsed = Date.now() - startTime;\r\n                    const progress = Math.min(elapsed / duration, 1);\r\n                    \r\n                    // Apply easing\r\n                    let easedProgress = progress;\r\n                    if (easing === 'easeIn') {\r\n                        easedProgress = progress * progress;\r\n                    } else if (easing === 'easeOut') {\r\n                        easedProgress = progress * (2 - progress);\r\n                    } else if (easing === 'easeInOut') {\r\n                        easedProgress = progress < 0.5\r\n                            ? 2 * progress * progress\r\n                            : -1 + (4 - 2 * progress) * progress;\r\n                    }\r\n                    \r\n                    // Calculate current scale\r\n                    this.currentOrbScale = startScale + (scale - startScale) * easedProgress;\r\n                    \r\n                    // Apply to renderer\r\n                    if (this.renderer.setCustomScale) {\r\n                        this.renderer.setCustomScale(this.currentOrbScale);\r\n                    }\r\n                    \r\n                    // Continue animation\r\n                    if (progress < 1 && this.isRunning) {\r\n                        requestAnimationFrame(animate);\r\n                    }\r\n                };\r\n                \r\n                animate();\r\n            }\r\n            \r\n            return this;\r\n        }, 'setOrbScale', this)();\r\n    }\r\n    \r\n    /**\r\n     * Applies a preset breathing pattern\r\n     * @param {string} type - Preset type: 'calm', 'anxious', 'meditative', 'deep'\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    breathe(type = 'calm') {\r\n        return this.errorBoundary.wrap(() => {\r\n            const presets = {\r\n                calm: { inhale: 4, hold1: 0, exhale: 4, hold2: 0 },        // 4-4 breathing\r\n                anxious: { inhale: 2, hold1: 0, exhale: 2, hold2: 0 },    // Quick shallow\r\n                meditative: { inhale: 4, hold1: 7, exhale: 8, hold2: 0 }, // 4-7-8 breathing\r\n                deep: { inhale: 5, hold1: 5, exhale: 5, hold2: 5 },       // Box breathing\r\n                sleep: { inhale: 6, hold1: 0, exhale: 8, hold2: 2 }       // Sleep breathing\r\n            };\r\n            \r\n            const pattern = presets[type] || presets.calm;\r\n            return this.setBreathePattern(pattern.inhale, pattern.hold1, pattern.exhale, pattern.hold2);\r\n        }, 'breathe', this)();\r\n    }\r\n    \r\n    /**\r\n     * Starts the custom breathing animation\r\n     * @private\r\n     */\r\n    startBreathingAnimation() {\r\n        // Cancel any existing breathing animation\r\n        if (this.breathingAnimationId) {\r\n            cancelAnimationFrame(this.breathingAnimationId);\r\n        }\r\n        \r\n        const animate = () => {\r\n            if (!this.breathePattern || !this.isRunning) return;\r\n            \r\n            const pattern = this.breathePattern;\r\n            const now = Date.now();\r\n            const phaseElapsed = (now - pattern.phaseStartTime) / 1000; // Convert to seconds\r\n            \r\n            let scale = 1.0;\r\n            let nextPhase = pattern.currentPhase;\r\n            \r\n            // Determine current phase and scale\r\n            switch (pattern.currentPhase) {\r\n                case 'inhale':\r\n                    if (phaseElapsed >= pattern.inhale) {\r\n                        nextPhase = 'hold1';\r\n                        pattern.phaseStartTime = now;\r\n                        this.emit('hold-start', { type: 'post-inhale' });\r\n                    } else {\r\n                        // Scale up during inhale\r\n                        const progress = phaseElapsed / pattern.inhale;\r\n                        scale = 1.0 + (0.3 * progress); // Expand to 1.3x\r\n                    }\r\n                    break;\r\n                    \r\n                case 'hold1':\r\n                    if (phaseElapsed >= pattern.hold1) {\r\n                        nextPhase = 'exhale';\r\n                        pattern.phaseStartTime = now;\r\n                        this.emit('exhale-start');\r\n                    }\r\n                    scale = 1.3; // Stay expanded\r\n                    break;\r\n                    \r\n                case 'exhale':\r\n                    if (phaseElapsed >= pattern.exhale) {\r\n                        nextPhase = 'hold2';\r\n                        pattern.phaseStartTime = now;\r\n                        this.emit('hold-start', { type: 'post-exhale' });\r\n                    } else {\r\n                        // Scale down during exhale\r\n                        const progress = phaseElapsed / pattern.exhale;\r\n                        scale = 1.3 - (0.4 * progress); // Contract to 0.9x\r\n                    }\r\n                    break;\r\n                    \r\n                case 'hold2':\r\n                    if (phaseElapsed >= pattern.hold2) {\r\n                        nextPhase = 'inhale';\r\n                        pattern.phaseStartTime = now;\r\n                        this.emit('inhale-start');\r\n                    }\r\n                    scale = 0.9; // Stay contracted\r\n                    break;\r\n            }\r\n            \r\n            // Update phase\r\n            if (nextPhase !== pattern.currentPhase) {\r\n                pattern.currentPhase = nextPhase;\r\n            }\r\n            \r\n            // Apply scale to renderer\r\n            if (this.renderer && this.renderer.setCustomScale) {\r\n                this.renderer.setCustomScale(scale);\r\n            }\r\n            \r\n            // Continue animation\r\n            this.breathingAnimationId = requestAnimationFrame(animate);\r\n        };\r\n        \r\n        // Start with inhale\r\n        this.breathePattern.currentPhase = 'inhale';\r\n        this.breathePattern.phaseStartTime = Date.now();\r\n        this.emit('inhale-start');\r\n        animate();\r\n    }\r\n    \r\n    /**\r\n     * Stops any active breathing animation\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    stopBreathing() {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (this.breathingAnimationId) {\r\n                cancelAnimationFrame(this.breathingAnimationId);\r\n                this.breathingAnimationId = null;\r\n            }\r\n            \r\n            this.breathePattern = null;\r\n            \r\n            // Reset scale\r\n            if (this.renderer && this.renderer.setCustomScale) {\r\n                this.renderer.setCustomScale(1.0);\r\n            }\r\n            \r\n            return this;\r\n        }, 'stopBreathing', this)();\r\n    }\r\n    \r\n    /**\r\n     * Adds an event listener for external integration hooks\r\n     * @param {string} event - Event name\r\n     * @param {Function} callback - Event callback function\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    on(event, callback) {\r\n        return this.errorBoundary.wrap(() => {\r\n            const success = this.eventManager.on(event, callback);\r\n            if (!success) {\r\n                // Failed to add event listener\r\n            }\r\n            return this;\r\n        }, 'event-listener-add', this)();\r\n    }\r\n\r\n    /**\r\n     * Removes an event listener\r\n     * @param {string} event - Event name\r\n     * @param {Function} callback - Event callback function to remove\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    off(event, callback) {\r\n        return this.errorBoundary.wrap(() => {\r\n            this.eventManager.off(event, callback);\r\n            return this;\r\n        }, 'event-listener-remove', this)();\r\n    }\r\n\r\n    /**\r\n     * Adds a one-time event listener that removes itself after first execution\r\n     * @param {string} event - Event name\r\n     * @param {Function} callback - Event callback function\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    once(event, callback) {\r\n        return this.errorBoundary.wrap(() => {\r\n            const success = this.eventManager.once(event, callback);\r\n            if (!success) {\r\n                // Failed to add once event listener\r\n            }\r\n            return this;\r\n        }, 'event-listener-once', this)();\r\n    }\r\n\r\n    /**\r\n     * Removes all listeners for a specific event or all events\r\n     * @param {string|null} event - Event name to clear, or null to clear all\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    removeAllListeners(event = null) {\r\n        return this.errorBoundary.wrap(() => {\r\n            const removedCount = this.eventManager.removeAllListeners(event);\r\n            if (removedCount > 0) {\r\n                // Cleared event listeners\r\n            }\r\n            return this;\r\n        }, 'event-listeners-clear', this)();\r\n    }\r\n\r\n    /**\r\n     * Gets the number of listeners for an event\r\n     * @param {string} event - Event name\r\n     * @returns {number} Number of listeners\r\n     */\r\n    listenerCount(event) {\r\n        return this.eventManager.listenerCount(event);\r\n    }\r\n\r\n    /**\r\n     * Gets all registered event names\r\n     * @returns {Array<string>} Array of event names\r\n     */\r\n    getEventNames() {\r\n        return this.eventManager.getEventNames();\r\n    }\r\n\r\n    /**\r\n     * Gets comprehensive event system statistics\r\n     * @returns {Object} Event system statistics and monitoring data\r\n     */\r\n    getEventStats() {\r\n        return this.eventManager.getEventStats();\r\n    }\r\n\r\n    /**\r\n     * Gets EventManager debugging information\r\n     * @returns {Object} Debug information about the event system\r\n     */\r\n    getEventDebugInfo() {\r\n        return this.eventManager.getDebugInfo();\r\n    }\r\n\r\n    /**\r\n     * Gets browser compatibility information\r\n     * @returns {Object} Browser compatibility details\r\n     */\r\n    getBrowserCompatibility() {\r\n        return {\r\n            browser: browserCompatibility.browser,\r\n            features: browserCompatibility.featureDetection.getFeatures(),\r\n            capabilities: browserCompatibility.capabilities,\r\n            appliedPolyfills: browserCompatibility.appliedPolyfills,\r\n            optimizations: browserCompatibility.browserOptimizations.getOptimizations()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets degradation manager status and settings\r\n     * @returns {Object|null} Degradation manager information or null if disabled\r\n     */\r\n    getDegradationStatus() {\r\n        if (!this.degradationManager) {\r\n            return null;\r\n        }\r\n        \r\n        return {\r\n            currentLevel: this.degradationManager.getCurrentLevel(),\r\n            availableFeatures: this.degradationManager.getAvailableFeatures(),\r\n            recommendedSettings: this.degradationManager.getRecommendedSettings(),\r\n            performanceStats: this.degradationManager.getPerformanceStats(),\r\n            allLevels: this.degradationManager.getAllLevels()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Manually set degradation level\r\n     * @param {number|string} level - Degradation level index or name\r\n     * @returns {boolean} True if level was set successfully\r\n     */\r\n    setDegradationLevel(level) {\r\n        if (!this.degradationManager) {\r\n            // Degradation manager is not enabled\r\n            return false;\r\n        }\r\n        \r\n        return this.degradationManager.setLevel(level);\r\n    }\r\n\r\n    /**\r\n     * Check if a specific feature is available in current degradation level\r\n     * @param {string} feature - Feature name (audio, particles, fullEffects, etc.)\r\n     * @returns {boolean} True if feature is available\r\n     */\r\n    isFeatureAvailable(feature) {\r\n        if (!this.degradationManager) {\r\n            // Fallback to basic feature detection\r\n            const features = browserCompatibility.featureDetection.getFeatures();\r\n            return features[feature] || false;\r\n        }\r\n        \r\n        return this.degradationManager.isFeatureAvailable(feature);\r\n    }\r\n\r\n    /**\r\n     * Force canvas context recovery\r\n     * @returns {boolean} True if recovery was successful\r\n     */\r\n    recoverCanvasContext() {\r\n        if (!this.contextRecovery) {\r\n            return false;\r\n        }\r\n        \r\n        return this.contextRecovery.recover();\r\n    }\r\n\r\n    /**\r\n     * Check if canvas context is currently lost\r\n     * @returns {boolean} True if context is lost\r\n     */\r\n    isCanvasContextLost() {\r\n        if (!this.contextRecovery) {\r\n            return false;\r\n        }\r\n        \r\n        return this.contextRecovery.isLost();\r\n    }\r\n\r\n    /**\r\n     * Enable or disable debug mode\r\n     * @param {boolean} enabled - Whether to enable debug mode\r\n     */\r\n    setDebugMode(enabled) {\r\n        this.debugMode = enabled;\r\n        \r\n        if (enabled) {\r\n            emotiveDebugger.log('INFO', 'Debug mode enabled');\r\n            emotiveDebugger.takeMemorySnapshot('debug-mode-enabled');\r\n        } else {\r\n            emotiveDebugger.log('INFO', 'Debug mode disabled');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get comprehensive debug report\r\n     * @returns {Object} Debug report including all system states\r\n     */\r\n    getDebugReport() {\r\n        const report = {\r\n            timestamp: Date.now(),\r\n            mascot: {\r\n                isRunning: this.isRunning,\r\n                speaking: this.speaking,\r\n                debugMode: this.debugMode,\r\n                config: this.config\r\n            },\r\n            \r\n            // System states\r\n            currentState: this.getCurrentState(),\r\n            performanceMetrics: this.getPerformanceMetrics(),\r\n            audioStats: this.getAudioStats(),\r\n            eventStats: this.getEventStats(),\r\n            \r\n            // Browser compatibility\r\n            browserCompatibility: this.getBrowserCompatibility(),\r\n            degradationStatus: this.getDegradationStatus(),\r\n            \r\n            // Runtime capabilities\r\n            runtimeCapabilities: runtimeCapabilities.generateReport(),\r\n            \r\n            // Debugger data\r\n            debuggerReport: emotiveDebugger.getDebugReport()\r\n        };\r\n\r\n        if (this.debugMode) {\r\n            emotiveDebugger.log('DEBUG', 'Generated debug report', {\r\n                reportSize: JSON.stringify(report).length,\r\n                sections: Object.keys(report)\r\n            });\r\n        }\r\n\r\n        return report;\r\n    }\r\n\r\n    /**\r\n     * Export debug data for external analysis\r\n     * @returns {Object} Exportable debug data\r\n     */\r\n    exportDebugData() {\r\n        const data = {\r\n            metadata: {\r\n                exportTime: Date.now(),\r\n                version: '1.0.0', // Should be dynamically set\r\n                userAgent: navigator.userAgent,\r\n                url: window.location?.href\r\n            },\r\n            \r\n            mascotState: {\r\n                config: this.config,\r\n                currentState: this.getCurrentState(),\r\n                isRunning: this.isRunning,\r\n                speaking: this.speaking\r\n            },\r\n            \r\n            performance: {\r\n                metrics: this.getPerformanceMetrics(),\r\n                degradationStatus: this.getDegradationStatus(),\r\n                frameTimings: emotiveDebugger.frameTimings\r\n            },\r\n            \r\n            compatibility: {\r\n                browser: this.getBrowserCompatibility(),\r\n                runtimeCapabilities: runtimeCapabilities.generateReport()\r\n            },\r\n            \r\n            debuggerData: emotiveDebugger.exportDebugData()\r\n        };\r\n\r\n        if (this.debugMode) {\r\n            emotiveDebugger.log('INFO', 'Exported debug data', {\r\n                dataSize: JSON.stringify(data).length\r\n            });\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Start profiling a named operation\r\n     * @param {string} name - Profile name\r\n     * @param {Object} metadata - Additional metadata\r\n     */\r\n    startProfiling(name, metadata = {}) {\r\n        if (this.debugMode) {\r\n            emotiveDebugger.startProfile(name, metadata);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * End profiling and get results\r\n     * @param {string} name - Profile name\r\n     * @returns {Object|null} Profile results\r\n     */\r\n    endProfiling(name) {\r\n        if (this.debugMode) {\r\n            return emotiveDebugger.endProfile(name);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Take a memory snapshot\r\n     * @param {string} label - Snapshot label\r\n     */\r\n    takeMemorySnapshot(label) {\r\n        if (this.debugMode) {\r\n            emotiveDebugger.takeMemorySnapshot(label);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear all debug data\r\n     */\r\n    clearDebugData() {\r\n        emotiveDebugger.clear();\r\n        \r\n        if (this.debugMode) {\r\n            emotiveDebugger.log('INFO', 'Debug data cleared');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get runtime performance capabilities\r\n     * @returns {Object} Runtime capabilities report\r\n     */\r\n    getRuntimeCapabilities() {\r\n        return runtimeCapabilities.generateReport();\r\n    }\r\n\r\n    /**\r\n     * Emits an event to all registered listeners with error boundary protection\r\n     * @param {string} event - Event name\r\n     * @param {*} data - Event data\r\n     */\r\n    emit(event, data = null) {\r\n        this.eventManager.emit(event, data);\r\n    }\r\n\r\n    /**\r\n     * Updates audio level monitoring (called by AnimationController)\r\n     * @param {number} deltaTime - Time since last frame in milliseconds\r\n     */\r\n    update(deltaTime) {\r\n        this.errorBoundary.wrap(() => {\r\n            this.visualizationRunner.update(deltaTime);\r\n        }, 'audio-update')();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Renders the current frame (called by AnimationController)\r\n     */\r\n    render() {\r\n        let deltaTime = 16.67; // Default fallback value\r\n        let renderStart = 0;\r\n        \r\n        try {\r\n            renderStart = this.debugMode ? performance.now() : 0;\r\n            \r\n            // Get deltaTime from animation controller\r\n            deltaTime = this.animationController ? this.animationController.deltaTime : 16.67;\r\n            \r\n            // Prepare render state\r\n            const renderState = {\r\n                properties: this.stateMachine.getCurrentEmotionalProperties(),\r\n                emotion: this.stateMachine.getCurrentState().emotion,\r\n                undertone: this.stateMachine.getCurrentState().undertone,\r\n                particleSystem: this.particleSystem,\r\n                speaking: this.speaking,\r\n                audioLevel: this.audioLevelProcessor.getCurrentLevel(),\r\n                gazeOffset: this.gazeTracker ? this.gazeTracker.currentGaze : { x: 0, y: 0 }\r\n            };\r\n            \r\n            \r\n            // Track frame timing for debugging\r\n            if (this.debugMode) {\r\n                emotiveDebugger.trackFrameTiming(deltaTime);\r\n            }\r\n            \r\n            // Always use EmotiveRenderer\r\n            // Clear canvas ONCE at the beginning\r\n            this.canvasManager.clear();\r\n            \r\n            // Update gaze tracker\r\n            if (this.gazeTracker) {\r\n                this.gazeTracker.update(deltaTime);\r\n            }\r\n            \r\n            // Update threat level for suspicion state based on gaze distance\r\n            if (renderState.emotion === 'suspicion' && this.gazeTracker) {\r\n                const suspicionEmotion = getEmotion('suspicion');\r\n                if (suspicionEmotion && suspicionEmotion.visual) {\r\n                    const gazeState = this.gazeTracker.getState();\r\n                    const mousePos = this.gazeTracker.mousePos;\r\n                    const centerX = this.canvasManager.width / 2;\r\n                    const centerY = this.canvasManager.height / 2 - this.config.topOffset;\r\n                    \r\n                    // Calculate distance from mouse to center\r\n                    const distance = Math.sqrt(\r\n                        Math.pow(mousePos.x - centerX, 2) + \r\n                        Math.pow(mousePos.y - centerY, 2)\r\n                    );\r\n                    \r\n                    // Maximum distance for threat calculation (canvas diagonal / 3)\r\n                    const maxDist = Math.min(this.canvasManager.width, this.canvasManager.height) / 2;\r\n                    \r\n                    // Closer = higher threat (inverted distance)\r\n                    const threatLevel = Math.max(0, Math.min(1, 1 - (distance / maxDist)));\r\n                    \r\n                    // Update the threat level\r\n                    suspicionEmotion.visual.threatLevel = threatLevel;\r\n                }\r\n            }\r\n            \r\n            // For Emotive style, convert emotion to visual params (AFTER updating threat level)\r\n            let emotionParams = getEmotionVisualParams(renderState.emotion);\r\n            \r\n            this.renderer.setEmotionalState(renderState.emotion, emotionParams, renderState.undertone);\r\n            \r\n            // Always use center for particle spawning (not gaze-adjusted position)\r\n            const orbX = this.canvasManager.width / 2;\r\n            let orbY = this.canvasManager.height / 2 - this.config.topOffset;\r\n\r\n            // Spawn new particles based on emotion at ORB position\r\n            // Get min/max from state machine\r\n            const stateProps = this.stateMachine.getCurrentEmotionalProperties();\r\n\r\n            // Apply vertical offset for certain emotions (like excited for exclamation mark)\r\n            if (stateProps.verticalOffset) {\r\n                orbY = (this.canvasManager.height / 2 - this.config.topOffset) + (this.canvasManager.height * stateProps.verticalOffset);\r\n            }\r\n            \r\n            // Apply undertone modifiers to particle behavior\r\n            let particleBehavior = emotionParams.particleBehavior || 'ambient';\r\n            let particleRate = emotionParams.particleRate || 15;\r\n            // Use emotionParams min/max if available, otherwise fall back to stateProps\r\n            let minParticles = emotionParams.minParticles !== undefined ? emotionParams.minParticles : (stateProps.minParticles || 0);\r\n            let maxParticles = emotionParams.maxParticles !== undefined ? emotionParams.maxParticles : (stateProps.maxParticles || 10);\r\n            \r\n            \r\n            // Special case for zen: mix falling and orbiting behaviors\r\n            if (renderState.emotion === 'zen') {\r\n                // Randomly choose between falling (sad) and orbiting (love) for each spawn\r\n                particleBehavior = Math.random() < 0.6 ? 'falling' : 'orbiting';\r\n            }\r\n            \r\n            // Check if renderer has undertone overrides\r\n            if (this.renderer.state && this.renderer.state.particleBehaviorOverride) {\r\n                particleBehavior = this.renderer.state.particleBehaviorOverride;\r\n            }\r\n            if (this.renderer.state && this.renderer.state.particleRateMult) {\r\n                particleRate = Math.floor(particleRate * this.renderer.state.particleRateMult);\r\n                maxParticles = Math.floor(maxParticles * this.renderer.state.particleRateMult);\r\n            }\r\n            \r\n            this.particleSystem.spawn(\r\n                particleBehavior,\r\n                renderState.emotion,\r\n                particleRate,\r\n                orbX,\r\n                orbY,\r\n                deltaTime,\r\n                null,  // no forced count\r\n                minParticles,\r\n                maxParticles,\r\n                this.renderer.scaleFactor || 1,  // Pass scale factor\r\n                this.config.classicConfig?.particleSizeMultiplier || 1,  // Pass particle size multiplier\r\n                emotionParams.particleColors || null,  // Pass emotion colors\r\n                renderState.undertone  // Pass undertone for saturation adjustments\r\n            );\r\n            \r\n            // Debug logging disabled to prevent console spam\r\n            // Uncomment only for debugging particle issues\r\n            // if (!this._particleDebugCounter) this._particleDebugCounter = 0;\r\n            // this._particleDebugCounter++;\r\n            // if (this._particleDebugCounter % 120 === 0) {  // Log every 2 seconds at 60fps\r\n            //     Particle status:\r\n            //         behavior: particleBehavior,\r\n            //         rate: particleRate,\r\n            //         emotion: renderState.emotion,\r\n            //         minParticles,\r\n            //         maxParticles,\r\n            //         currentCount: this.particleSystem.particles.length,\r\n            //         stats: this.particleSystem.getStats(),\r\n            //         position: { x: orbX, y: orbY }\r\n            //     });\r\n            // }\r\n            \r\n            // Get undertone modifier from renderer if present\r\n            const undertoneModifier = this.renderer.getUndertoneModifier ? \r\n                this.renderer.getUndertoneModifier() : null;\r\n            \r\n            // Add zen vortex intensity to undertone modifier if in zen state\r\n            let particleModifier = undertoneModifier;\r\n            if (renderState.emotion === 'zen' && this.renderer.state.zenVortexIntensity) {\r\n                particleModifier = { ...(undertoneModifier || {}), zenVortexIntensity: this.renderer.state.zenVortexIntensity };\r\n            }\r\n            \r\n            // Get current gesture info from renderer or modular gesture\r\n            let gestureMotion = null;\r\n            let gestureProgress = 0;\r\n            \r\n            // First check for modular gesture\r\n            if (this.currentModularGesture) {\r\n                const elapsed = performance.now() - this.currentModularGesture.startTime;\r\n                gestureProgress = Math.min(elapsed / this.currentModularGesture.duration, 1);\r\n                \r\n                if (gestureProgress >= 1) {\r\n                    // Ensure cleanup happens before clearing gesture\r\n                    gestureMotion = {\r\n                        type: this.currentModularGesture.type,\r\n                        amplitude: 1.0,\r\n                        frequency: 1.0,\r\n                        intensity: 1.0\r\n                    };\r\n                    // Pass progress = 1 to trigger cleanup\r\n                    gestureProgress = 1.0;\r\n                    // Clear gesture on next frame after cleanup\r\n                    if (!this.currentModularGesture.cleanupPending) {\r\n                        this.currentModularGesture.cleanupPending = true;\r\n                    } else {\r\n                        // Cleanup was called last frame, now clear the gesture\r\n                        this.currentModularGesture = null;\r\n                    }\r\n                } else {\r\n                    // Set gesture motion for particles\r\n                    gestureMotion = {\r\n                        type: this.currentModularGesture.type,\r\n                        amplitude: 1.0,\r\n                        frequency: 1.0,\r\n                        intensity: 1.0\r\n                    };\r\n                }\r\n            }\r\n            // Fallback to renderer gesture\r\n            else if (this.renderer && this.renderer.getCurrentGesture) {\r\n                const currentGesture = this.renderer.getCurrentGesture();\r\n                if (currentGesture && currentGesture.particleMotion) {\r\n                    gestureMotion = currentGesture.particleMotion;\r\n                    gestureProgress = currentGesture.progress || 0;\r\n                }\r\n            }\r\n            \r\n            // Update particles with orb position, gesture motion, and modifier\r\n            this.particleSystem.update(deltaTime, orbX, orbY, gestureMotion, gestureProgress, particleModifier);\r\n\r\n            // Get gesture transform from renderer\r\n            const gestureTransform = this.renderer.gestureAnimator ?\r\n                this.renderer.gestureAnimator.applyGestureAnimations() : null;\r\n\r\n            // Render BACKGROUND particles (behind orb)\r\n            this.particleSystem.renderBackground(this.canvasManager.getContext(), emotionParams.glowColor, gestureTransform);\r\n\r\n            // Render the Emotive orb in the MIDDLE layer\r\n            this.renderer.render(renderState, deltaTime, gestureTransform);\r\n\r\n            // Render FOREGROUND particles (in front of orb)\r\n            this.particleSystem.renderForeground(this.canvasManager.getContext(), emotionParams.glowColor, gestureTransform);\r\n            \r\n            // Draw debug information if enabled\r\n            if (this.config.showFPS || this.config.showDebug) {\r\n                this.renderDebugInfo(deltaTime);\r\n            }\r\n            \r\n            // Log render performance if debugging\r\n            if (this.debugMode) {\r\n                const renderTime = performance.now() - renderStart;\r\n                if (renderTime > 16.67) { // Longer than 60fps frame\r\n                    emotiveDebugger.log('WARN', 'Slow render frame detected', {\r\n                        renderTime,\r\n                        deltaTime,\r\n                        particleCount: this.particleSystem.getStats().activeParticles\r\n                    });\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.errorBoundary.logError(error, 'main-render');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders debug information overlay\r\n     * @param {number} deltaTime - Time since last frame in milliseconds\r\n     */\r\n    renderDebugInfo(deltaTime) {\r\n        const ctx = this.canvasManager.getContext();\r\n        ctx.save();\r\n        \r\n        ctx.fillStyle = '#ffffff';\r\n        ctx.font = '12px monospace';\r\n        ctx.strokeStyle = '#000000';\r\n        ctx.lineWidth = 2;\r\n        \r\n        let y = 20;\r\n        const lineHeight = 16;\r\n        \r\n        if (this.config.showFPS) {\r\n            const metrics = this.animationController.getPerformanceMetrics();\r\n            // Use smoothed FPS for stable display\r\n            const fps = metrics.instantFps || metrics.fps || 0;\r\n            const frameTime = metrics.averageFrameTime ? metrics.averageFrameTime.toFixed(1) : '0.0';\r\n            const particleStats = this.particleSystem.getStats();\r\n            \r\n            // Build simple display\r\n            const lines = [\r\n                `FPS: ${fps}`,\r\n                `Frame: ${frameTime}ms`,\r\n                `Particles: ${particleStats.activeParticles}`\r\n            ];\r\n            \r\n            // Draw each line\r\n            const padding = 8;\r\n            let maxWidth = 0;\r\n            lines.forEach(line => {\r\n                const width = ctx.measureText(line).width;\r\n                if (width > maxWidth) maxWidth = width;\r\n            });\r\n            \r\n            const x = this.canvasManager.width - maxWidth - padding - 10;\r\n            \r\n            // Background box with semi-transparent dark background\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n            ctx.fillRect(x - padding, y - 14, maxWidth + padding * 2, 18 * lines.length + 4);\r\n            \r\n            // Border color based on FPS\r\n            let borderColor;\r\n            if (fps >= 55) {\r\n                borderColor = '#00ff00';  // Green for good FPS\r\n            } else if (fps >= 30) {\r\n                borderColor = '#ffff00';  // Yellow for okay FPS\r\n            } else {\r\n                borderColor = '#ff0000';  // Red for poor FPS\r\n            }\r\n            \r\n            ctx.strokeStyle = borderColor;\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeRect(x - padding, y - 14, maxWidth + padding * 2, 18 * lines.length + 4);\r\n            \r\n            // Draw each line of text\r\n            lines.forEach((line, i) => {\r\n                const lineY = y + (i * lineHeight);\r\n                // No stroke for cleaner look\r\n                ctx.fillStyle = '#ffffff';\r\n                ctx.fillText(line, x, lineY);\r\n            });\r\n            \r\n            y += lineHeight * lines.length;\r\n        }\r\n        \r\n        if (this.config.showDebug) {\r\n            const state = this.stateMachine.getCurrentState();\r\n            const particleStats = this.particleSystem.getStats();\r\n            \r\n            const debugInfo = [\r\n                `Emotion: ${state.emotion}${state.undertone ? ` (${state.undertone})` : ''}`,\r\n                `Particles: ${particleStats.activeParticles}/${particleStats.maxParticles}`,\r\n                `Gesture: ${this.currentModularGesture ? this.currentModularGesture.type : 'none'}`,\r\n                `Speaking: ${this.speaking ? 'yes' : 'no'}`,\r\n                `Audio Level: ${(this.audioLevel * 100).toFixed(1)}%`\r\n            ];\r\n            \r\n            // Draw debug info with background for readability\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\r\n            const debugWidth = Math.max(...debugInfo.map(line => ctx.measureText(line).width));\r\n            ctx.fillRect(8, y - 14, debugWidth + 16, debugInfo.length * lineHeight + 4);\r\n            \r\n            ctx.fillStyle = '#ffffff';\r\n            for (const info of debugInfo) {\r\n                ctx.fillText(info, 10, y);\r\n                y += lineHeight;\r\n            }\r\n        }\r\n        \r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Gets the current emotional color\r\n     * @returns {string} Hex color for current emotion\r\n     */\r\n    getEmotionalColor() {\r\n        const properties = this.stateMachine.getCurrentEmotionalProperties();\r\n        // Fallback to neutral gray if properties are undefined\r\n        return properties?.primaryColor || '#B0B0B0';\r\n    }\r\n\r\n    /**\r\n     * Gets the current emotional state information\r\n     * @returns {Object} Current state with properties\r\n     */\r\n    getCurrentState() {\r\n        return this.stateMachine.getCurrentState();\r\n    }\r\n\r\n    /**\r\n     * Gets all available emotions\r\n     * @returns {Array<string>} Array of emotion names\r\n     */\r\n    getAvailableEmotions() {\r\n        return this.stateMachine.getAvailableEmotions();\r\n    }\r\n\r\n    /**\r\n     * Gets all available undertones\r\n     * @returns {Array<string>} Array of undertone names\r\n     */\r\n    getAvailableUndertones() {\r\n        return this.stateMachine.getAvailableUndertones();\r\n    }\r\n\r\n    /**\r\n     * Gets the current audio level (0-1 range)\r\n     * @returns {number} Current audio level\r\n     */\r\n    getAudioLevel() {\r\n        return this.audioLevelProcessor.getCurrentLevel();\r\n    }\r\n\r\n    /**\r\n     * Gets audio level processing statistics\r\n     * @returns {Object} Audio processing statistics\r\n     */\r\n    getAudioStats() {\r\n        return this.audioLevelProcessor.getStats();\r\n    }\r\n\r\n    /**\r\n     * Updates audio level processor configuration\r\n     * @param {Object} config - New configuration options\r\n     */\r\n    updateAudioConfig(config) {\r\n        this.audioLevelProcessor.updateConfig(config);\r\n    }\r\n\r\n    /**\r\n     * Gets all available gestures\r\n     * @returns {Array<string>} Array of gesture names\r\n     */\r\n    getAvailableGestures() {\r\n        return [\r\n            'bounce', 'pulse', 'shake', 'spin', 'drift', \r\n            'nod', 'tilt', 'expand', 'contract', 'flash',\r\n            'stretch', 'glow', 'flicker', 'vibrate', 'wave',\r\n            'morph', 'slowBlink', 'look', 'settle',\r\n            'breathIn', 'breathOut', 'breathHold', 'breathHoldEmpty', 'jump'\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Connects an audio source to the speech analyser\r\n     * @param {AudioNode} audioSource - Web Audio API source node\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    connectAudioSource(audioSource) {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (!this.audioAnalyser) {\r\n                // Speech reactivity not started. Call startSpeaking() first.\r\n                return this;\r\n            }\r\n            \r\n            if (!audioSource || typeof audioSource.connect !== 'function') {\r\n                // Invalid audio source provided to connectAudioSource()\r\n                return this;\r\n            }\r\n            \r\n            // Connect the audio source to our analyser\r\n            audioSource.connect(this.audioAnalyser);\r\n            \r\n            // Audio source connected to speech analyser\r\n            this.emit('audioSourceConnected', { audioSource });\r\n            \r\n            return this;\r\n        }, 'audio-source-connection', this)();\r\n    }\r\n\r\n    /**\r\n     * Sets master volume for all audio output\r\n     * @param {number} volume - Volume level (0.0 to 1.0)\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setVolume(volume) {\r\n        return this.errorBoundary.wrap(() => {\r\n            return this.audioHandler.setVolume(volume);\r\n        }, 'volume-setting', this)();\r\n    }\r\n\r\n    /**\r\n     * Gets current master volume\r\n     * @returns {number} Current volume level (0.0 to 1.0)\r\n     */\r\n    getVolume() {\r\n        return this.config.masterVolume;\r\n    }\r\n\r\n    /**\r\n     * Pauses the animation loop (can be resumed with start())\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    pause() {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (!this.animationController.isAnimating()) {\r\n                // EmotiveMascot is not running\r\n                return this;\r\n            }\r\n            \r\n            // Stop animation controller\r\n            this.animationController.stop();\r\n            this.isRunning = false;\r\n            \r\n            // Pause ambient audio\r\n            if (this.soundSystem.isAvailable()) {\r\n                this.soundSystem.stopAmbientTone(200); // Quick fade out\r\n            }\r\n            \r\n            this.emit('paused');\r\n            // EmotiveMascot paused\r\n            return this;\r\n        }, 'pause', this)();\r\n    }\r\n\r\n    /**\r\n     * Resumes the animation loop from paused state\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    resume() {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (this.animationController.isAnimating()) {\r\n                // EmotiveMascot is already running\r\n                return this;\r\n            }\r\n            \r\n            // Start animation controller\r\n            this.animationController.start();\r\n            this.isRunning = true;\r\n            \r\n            // Resume ambient audio\r\n            // Update ambient tone based on emotional state - DISABLED (annoying)\r\n            // if (this.soundSystem.isAvailable()) {\r\n            //     const currentEmotion = this.stateMachine.getCurrentState().emotion;\r\n            //     this.soundSystem.setAmbientTone(currentEmotion, 200);\r\n            // }\r\n            \r\n            this.emit('resumed');\r\n            // EmotiveMascot resumed\r\n            return this;\r\n        }, 'resume', this)();\r\n    }\r\n\r\n    /**\r\n     * Checks if the mascot is currently running\r\n     * @returns {boolean} True if animation loop is active\r\n     */\r\n    isActive() {\r\n        return this.animationController.isAnimating();\r\n    }\r\n\r\n    /**\r\n     * Sets the target FPS for performance monitoring\r\n     * @param {number} targetFPS - Target frames per second (default: 60)\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setTargetFPS(targetFPS) {\r\n        const clampedFPS = Math.max(15, Math.min(120, targetFPS)); // Clamp between 15-120 FPS\r\n        this.config.targetFPS = clampedFPS;\r\n        this.animationController.setTargetFPS(clampedFPS);\r\n        \r\n        // Target FPS set\r\n        this.emit('targetFPSChanged', { targetFPS: clampedFPS });\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the current target FPS\r\n     * @returns {number} Target frames per second\r\n     */\r\n    getTargetFPS() {\r\n        return this.animationController.targetFPS;\r\n    }\r\n\r\n    /**\r\n     * Forces performance degradation mode (for testing)\r\n     * @param {boolean} enabled - Whether to enable degradation mode\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setPerformanceDegradation(enabled) {\r\n        const metrics = this.animationController.getPerformanceMetrics();\r\n        \r\n        if (enabled && !metrics.performanceDegradation) {\r\n            const currentMax = this.particleSystem.maxParticles;\r\n            const newMax = Math.max(5, Math.floor(currentMax * 0.5));\r\n            this.particleSystem.setMaxParticles(newMax);\r\n            \r\n            // Forced performance degradation\r\n        } else if (!enabled && metrics.performanceDegradation) {\r\n            this.particleSystem.setMaxParticles(this.config.maxParticles);\r\n            \r\n            // Disabled performance degradation\r\n        }\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the current audio level (0-1) if speech reactivity is active\r\n     * @returns {number} Current audio level or 0 if not speaking\r\n     */\r\n    getAudioLevel() {\r\n        return this.speaking ? this.audioLevel : 0;\r\n    }\r\n\r\n    /**\r\n     * Checks if speech reactivity is currently active\r\n     * @returns {boolean} True if speech monitoring is active\r\n     */\r\n    isSpeaking() {\r\n        return this.speaking;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio analyser smoothing time constant\r\n     * @param {number} smoothing - Smoothing value (0-1, default: 0.8)\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setAudioSmoothing(smoothing) {\r\n        return this.errorBoundary.wrap(() => {\r\n            const clampedSmoothing = Math.max(0, Math.min(1, smoothing));\r\n            \r\n            if (this.audioAnalyser) {\r\n                this.audioAnalyser.smoothingTimeConstant = clampedSmoothing;\r\n                // Audio smoothing set\r\n            } else {\r\n                // No audio analyser available. Start speech reactivity first.\r\n            }\r\n            \r\n            return this;\r\n        }, 'audio-smoothing', this)();\r\n    }\r\n\r\n    /**\r\n     * Gets comprehensive system status for debugging and monitoring\r\n     * @returns {Object} Complete system status\r\n     */\r\n    getSystemStatus() {\r\n        return this.errorBoundary.wrap(() => {\r\n            const state = this.stateMachine.getCurrentState();\r\n            const particleStats = this.particleSystem.getStats();\r\n            const rendererStats = this.renderer.getStats();\r\n            \r\n            const animationMetrics = this.animationController.getPerformanceMetrics();\r\n            \r\n            return {\r\n                // Core status\r\n                isRunning: animationMetrics.isRunning,\r\n                fps: animationMetrics.fps,\r\n                targetFPS: animationMetrics.targetFPS,\r\n                performanceDegradation: animationMetrics.performanceDegradation,\r\n                \r\n                // Emotional state\r\n                emotion: state.emotion,\r\n                undertone: state.undertone,\r\n                isTransitioning: state.isTransitioning,\r\n                transitionProgress: state.transitionProgress,\r\n                \r\n                // Gesture system\r\n                currentGesture: this.renderer?.currentGesture || null,\r\n                gestureActive: this.renderer?.isGestureActive() || false,\r\n                \r\n                // Particle system\r\n                particles: {\r\n                    active: particleStats.activeParticles,\r\n                    max: particleStats.maxParticles,\r\n                    poolEfficiency: particleStats.poolEfficiency\r\n                },\r\n                \r\n                // Audio system\r\n                audioEnabled: this.config.enableAudio,\r\n                soundSystemAvailable: this.soundSystem.isAvailable(),\r\n                speaking: this.speaking,\r\n                audioLevel: this.audioLevel,\r\n                masterVolume: this.config.masterVolume,\r\n                \r\n                // Renderer\r\n                renderer: {\r\n                    gradientCacheSize: rendererStats.gradientCacheSize,\r\n                    breathingPhase: rendererStats.breathingPhase,\r\n                    layers: rendererStats.layers\r\n                },\r\n                \r\n                // Event system\r\n                eventListeners: this.getEventNames().length,\r\n                \r\n                // Error boundary\r\n                errorStats: this.errorBoundary.getErrorStats()\r\n            };\r\n        }, 'system-status', {})();\r\n    }\r\n\r\n    /**\r\n     * Enables or disables debug mode\r\n     * @param {boolean} enabled - Whether to enable debug mode\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setDebugMode(enabled) {\r\n        this.config.showDebug = !!enabled;\r\n        this.config.showFPS = !!enabled;\r\n        \r\n        if (enabled) {\r\n            // Debug mode enabled - performance and state info will be displayed\r\n        } else {\r\n            // Debug mode disabled\r\n        }\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Triggers a manual error for testing error boundary\r\n     * @param {string} context - Error context for testing\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    triggerTestError(context = 'manual-test') {\r\n        return this.errorBoundary.wrap(() => {\r\n            throw new Error(`Test error triggered in context: ${context}`);\r\n        }, context, this)();\r\n    }\r\n\r\n    /**\r\n     * Gets current performance metrics\r\n     * @returns {Object} Performance data\r\n     */\r\n    getPerformanceMetrics() {\r\n        const animationMetrics = this.animationController.getPerformanceMetrics();\r\n        const state = this.stateMachine.getCurrentState();\r\n        \r\n        return {\r\n            ...animationMetrics,\r\n            currentEmotion: state.emotion,\r\n            currentUndertone: state.undertone,\r\n            isTransitioning: state.isTransitioning,\r\n            errorStats: this.errorBoundary.getErrorStats()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Register a plugin\r\n     * @param {Object} plugin - Plugin to register\r\n     * @returns {Promise<boolean>} Success status\r\n     */\r\n    async registerPlugin(plugin) {\r\n        return this.pluginSystem.registerPlugin(plugin);\r\n    }\r\n    \r\n    /**\r\n     * Set accessibility options\r\n     * @param {Object} options - Accessibility options\r\n     */\r\n    setAccessibility(options) {\r\n        if (options.colorBlindMode) {\r\n            this.accessibilityManager.setColorBlindMode(options.colorBlindMode);\r\n        }\r\n        if (options.reducedMotion !== undefined) {\r\n            this.accessibilityManager.reducedMotionPreferred = options.reducedMotion;\r\n        }\r\n        if (options.highContrast !== undefined) {\r\n            this.accessibilityManager.highContrastEnabled = options.highContrast;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Get mobile optimization status\r\n     * @returns {Object} Mobile optimization status\r\n     */\r\n    getMobileStatus() {\r\n        return this.mobileOptimization.getStatus();\r\n    }\r\n    \r\n    /**\r\n     * Get accessibility status\r\n     * @returns {Object} Accessibility status\r\n     */\r\n    getAccessibilityStatus() {\r\n        return this.accessibilityManager.getStatus();\r\n    }\r\n    \r\n    /**\r\n     * Set the emotional state (alias for setEmotion for compatibility)\r\n     * @param {string} newState - The emotion/state to set\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    setState(newState) {\r\n        return this.setEmotion(newState);\r\n    }\r\n    \r\n    /**\r\n     * Speak text using TTS with synchronized animation\r\n     * @param {string} text - The text to speak\r\n     * @param {Object} options - TTS options\r\n     * @returns {SpeechSynthesisUtterance} The utterance object for additional control\r\n     */\r\n    speak(text, options = {}) {\r\n        // Check if speech synthesis is available\r\n        if (!window.speechSynthesis) {\r\n            // Speech synthesis not available in this browser\r\n            return null;\r\n        }\r\n        \r\n        // Create utterance\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        \r\n        // Apply options\r\n        if (options.voice) utterance.voice = options.voice;\r\n        if (options.rate) utterance.rate = options.rate;\r\n        if (options.pitch) utterance.pitch = options.pitch;\r\n        if (options.volume) utterance.volume = options.volume;\r\n        if (options.lang) utterance.lang = options.lang;\r\n        \r\n        // Set up event handlers for animation sync\r\n        utterance.onstart = () => {\r\n            // TTS: Starting speech\r\n            this.setTTSSpeaking(true);\r\n            this.emit('tts:start', { text });\r\n        };\r\n        \r\n        utterance.onend = () => {\r\n            // TTS: Speech ended\r\n            this.setTTSSpeaking(false);\r\n            this.emit('tts:end');\r\n        };\r\n        \r\n        utterance.onerror = (event) => {\r\n            // TTS: Speech error\r\n            this.setTTSSpeaking(false);\r\n            this.emit('tts:error', { error: event });\r\n        };\r\n        \r\n        utterance.onboundary = (event) => {\r\n            // Word/sentence boundaries for potential lip-sync\r\n            this.emit('tts:boundary', { \r\n                name: event.name,\r\n                charIndex: event.charIndex,\r\n                charLength: event.charLength\r\n            });\r\n        };\r\n        \r\n        // Speak the text\r\n        window.speechSynthesis.speak(utterance);\r\n        \r\n        return utterance;\r\n    }\r\n    \r\n    /**\r\n     * Set TTS speaking state (triggers visual animation)\r\n     * @param {boolean} speaking - Whether TTS is speaking\r\n     */\r\n    setTTSSpeaking(speaking) {\r\n        this.ttsSpeaking = speaking;\r\n        \r\n        // Update renderer if using Emotive style\r\n        if (this.renderer && this.renderer.startSpeaking) {\r\n            if (speaking) {\r\n                this.renderer.startSpeaking();\r\n            } else {\r\n                this.renderer.stopSpeaking();\r\n            }\r\n        }\r\n        \r\n        // Also update the speaking flag for compatibility\r\n        this.speaking = speaking;\r\n    }\r\n    \r\n    /**\r\n     * Get available TTS voices\r\n     * @returns {Array} Array of available voices\r\n     */\r\n    getVoices() {\r\n        if (!window.speechSynthesis) {\r\n            return [];\r\n        }\r\n        return window.speechSynthesis.getVoices();\r\n    }\r\n    \r\n    /**\r\n     * Stop any ongoing TTS speech\r\n     */\r\n    stopTTS() {\r\n        if (window.speechSynthesis) {\r\n            window.speechSynthesis.cancel();\r\n            this.setTTSSpeaking(false);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handle canvas resize events to trigger visual resampling\r\n     * This ensures visuals look crisp at any size\r\n     * @param {number} width - New canvas width\r\n     * @param {number} height - New canvas height\r\n     * @param {number} dpr - Device pixel ratio\r\n     */\r\n    handleResize(width, height, dpr) {\r\n        // EmotiveMascot handleResize\r\n        \r\n        // Force a re-initialization of the offscreen canvas in renderer\r\n        if (this.renderer && this.renderer.initOffscreenCanvas) {\r\n            this.renderer.initOffscreenCanvas();\r\n        }\r\n        \r\n        // Trigger a state update to recalculate all visual parameters\r\n        if (this.stateMachine) {\r\n            const currentEmotion = this.stateMachine.currentEmotion;\r\n            const currentUndertone = this.stateMachine.currentUndertone;\r\n            \r\n            // Re-apply current emotion to trigger fresh calculations\r\n            if (currentEmotion) {\r\n                this.stateMachine.setEmotion(currentEmotion);\r\n            }\r\n            \r\n            // Re-apply current undertone if any\r\n            if (currentUndertone && currentUndertone !== 'none') {\r\n                this.stateMachine.setUndertone(currentUndertone);\r\n            }\r\n        }\r\n        \r\n        // Emit resize event for any listeners\r\n        this.emit('resize', { width, height, dpr });\r\n    }\r\n    \r\n    /**\r\n     * Morph the core to a different shape\r\n     * @param {string} shape - Target shape name (circle, heart, star, sun, moon, eclipse, square, triangle)\r\n     * @param {Object} config - Morph configuration\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    morphTo(shape, config = {}) {\r\n        return this.errorBoundary.wrap(() => {\r\n            if (!this.shapeMorpher) {\r\n                // ShapeMorpher not initialized\r\n                return this;\r\n            }\r\n            \r\n            // Start the morph\r\n            this.shapeMorpher.morphTo(shape, config);\r\n            \r\n            // Pass shape morpher to renderer\r\n            if (this.renderer) {\r\n                this.renderer.shapeMorpher = this.shapeMorpher;\r\n            }\r\n            \r\n            // Emit event\r\n            this.emit('shapeMorphStarted', { from: this.shapeMorpher.currentShape, to: shape });\r\n            \r\n            // Morphing to new shape\r\n            return this;\r\n        }, 'morphTo', this)();\r\n    }\r\n    \r\n    /**\r\n     * Connect audio element for vocal visualization\r\n     * @param {HTMLAudioElement} audioElement - Audio element to analyze\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    connectAudio(audioElement) {\r\n        return this.errorBoundary.wrap(async () => {\r\n            return await this.audioHandler.connectAudio(audioElement);\r\n        }, 'connectAudio', this)();\r\n    }\r\n    \r\n    /**\r\n     * Disconnect audio analysis\r\n     * @returns {EmotiveMascot} This instance for chaining\r\n     */\r\n    disconnectAudio() {\r\n        return this.errorBoundary.wrap(() => {\r\n            return this.audioHandler.disconnectAudio();\r\n        }, 'disconnectAudio', this)();\r\n    }\r\n    \r\n    /**\r\n     * Get available shapes for morphing\r\n     * @returns {Array} List of available shape names\r\n     */\r\n    getAvailableShapes() {\r\n        return ShapeMorpher.getAvailableShapes();\r\n    }\r\n    \r\n    /**\r\n     * Destroys the mascot instance and cleans up resources\r\n     */\r\n    destroy() {\r\n        this.errorBoundary.wrap(() => {\r\n            // Stop animation\r\n            this.stop();\r\n            \r\n            // Stop speech reactivity\r\n            if (this.speaking) {\r\n                this.stopSpeaking();\r\n            }\r\n            \r\n            // Destroy animation controller\r\n            if (this.animationController) {\r\n                this.animationController.destroy();\r\n            }\r\n            \r\n            // Clean up all subsystems\r\n            if (this.soundSystem) {\r\n                this.soundSystem.cleanup();\r\n            }\r\n            \r\n            if (this.audioLevelProcessor) {\r\n                this.audioLevelProcessor.cleanup();\r\n            }\r\n            \r\n            if (this.particleSystem) {\r\n                this.particleSystem.destroy();\r\n            }\r\n            \r\n            if (this.renderer) {\r\n                // Stop all active gestures\r\n                this.renderer.stopAllGestures();\r\n                this.renderer.destroy();\r\n            }\r\n            \r\n            if (this.canvasManager) {\r\n                this.canvasManager.destroy();\r\n            }\r\n            \r\n            // Clear event listeners\r\n            if (this.eventManager) {\r\n                this.eventManager.destroy();\r\n            }\r\n            \r\n            // Destroy new systems\r\n            if (this.accessibilityManager) {\r\n                this.accessibilityManager.destroy();\r\n            }\r\n            \r\n            if (this.mobileOptimization) {\r\n                this.mobileOptimization.destroy();\r\n            }\r\n            \r\n            if (this.pluginSystem) {\r\n                this.pluginSystem.destroy();\r\n            }\r\n            \r\n            // Clean up shape morpher and audio analyzer\r\n            if (this.audioAnalyzer) {\r\n                this.disconnectAudio();\r\n                this.audioAnalyzer.destroy();\r\n            }\r\n            \r\n            if (this.shapeMorpher) {\r\n                this.shapeMorpher.reset();\r\n            }\r\n            \r\n            // DegradationManager removed\r\n            \r\n            // Clear error boundary\r\n            this.errorBoundary.clearErrors();\r\n            \r\n            // EmotiveMascot destroyed\r\n        }, 'destruction')();\r\n    }\r\n    \r\n    /**\r\n     * Throttled warning to reduce console spam\r\n     * @param {string} message - Warning message\r\n     * @param {string} key - Unique key for this warning type\r\n     */\r\n    throttledWarn(message, key) {\r\n        const now = Date.now();\r\n        const lastWarning = this.warningTimestamps[key] || 0;\r\n        \r\n        if (now - lastWarning > this.warningThrottle) {\r\n            // Warning message throttled\r\n            this.warningTimestamps[key] = now;\r\n        }\r\n    }\r\n}\r\n\r\nexport default EmotiveMascot;"],"names":["CanvasManager","constructor","canvas","this","ctx","getContext","alpha","desynchronized","willReadFrequently","dpr","window","devicePixelRatio","width","height","centerX","centerY","resizeCallbacks","handleResize","bind","addEventListener","resize","hasAttribute","attrWidth","parseInt","getAttribute","attrHeight","rect","getBoundingClientRect","scale","forEach","callback","error","onResize","push","clearTimeout","resizeTimeout","setTimeout","clear","clearRect","getCenter","x","y","setTransform","rotation","save","translate","rotate","restoreTransform","restore","getDimensions","destroy","removeEventListener","ErrorBoundary","errors","maxErrors","errorCounts","Map","defaults","emotion","gesture","audioLevel","particleCount","glowIntensity","coreSize","breathRate","color","wrap","fn","context","fallbackValue","args","logError","getDefault","errorEntry","timestamp","Date","toISOString","message","stack","count","get","set","length","shift","contextDefaults","rendering","hasOwnProperty","validateInput","value","type","defaultValue","includes","isNaN","hasExceededThreshold","threshold","getErrorStats","totalErrors","errorsByContext","Object","fromEntries","recentErrors","slice","clearErrors","attemptRecovery","operation","retryFn","maxRetries","attempts","Error","Promise","resolve","Math","pow","hexToRgb","hex","replace","split","map","char","join","r","substr","g","b","rgbToHex","toHex","component","round","max","min","toString","rgbToHsl","h","s","l","d","hslToRgb","hue2rgb","p","q","t","interpolateHsl","color1","color2","progress","rgb1","rgb2","hsl1","hsl2","h1","h2","hDiff","rgb","UNDERTONE_SATURATION","intense","confident","nervous","tired","subdued","applyUndertoneSaturation","undertone","factor","toLowerCase","hsl","adjustedRgb","adjustSaturation","linear","easeOutQuad","easeInQuad","easeInOutQuad","easeOutCubic","easeInCubic","easeInOutCubic","easeOutElastic","c4","PI","sin","easeOutBounce","n1","d1","easeInOutBack","c2","c1","easeOutSine","easeInOutSine","cos","applyEasing","start","end","easing","entries","neutral","joy","sadness","anger","fear","surprise","disgust","love","pluginEmotions","pluginAdapter$2","name","Array","from","keys","suspicion","emoji","description","visual","glowColor","particleRate","minParticles","maxParticles","particleBehavior","particleSpeed","breathDepth","coreJitter","particleColors","weight","threatLevel","getGlowIntensity","getParticleSpeed","getGlowColor","val","padStart","modifiers","speed","amplitude","intensity","smoothness","regularity","focus","addWobble","typicalGestures","transitions","duration","priority","special","coreSquint","scanInterval","scanDuration","scanAngle","twitchChance","peekInterval","maxThreatDistance","alertThreshold","glitch","primaryColor","eyeOpenness","glitchIntensity","flickerChance","rgbShift","digitalNoise","random","glitchColors","floor","addGlitch","addStutter","glitchIn","stutterInterval","stutterDuration","rgbOffset","scanlineEffect","datamoshChance","corruptionZones","digitalTearHeight","calm","addWeight","floatHeight","swayAmount","audio","ambientSound","transitionSound","gestureSound","volumeModifier","particleSpawn","pattern","frequency","burstOnEntry","fadeOnExit","spawnRadius","driftSpeed","coreAppearance","pupilSize","irisPattern","blinkRate","lookDirection","movement","floatPattern","floatPeriod","floatAmplitude","swayPattern","swayPeriod","swayAmplitude","microMovements","getCoreParams","state","time","now","breathPhase","scaleX","scaleY","eyeExpression","pupilOffset","glowPulse","updateParticle","particle","deltaTime","life","opacity","size","baseSize","renderCore","radius","emotionRegistry","emotionAliases","happy","peaceful","curious","frustrated","sad","getEmotion","emotionName","resolvedName","coreEmotion","pluginAdapter","getEmotionVisualParams","params","key","call","getParticleRate","addBounce","specialEffect","rhythm","enabled","particleEmission","syncMode","burstSize","offBeatRate","popcornSync","breathSync","mode","beatsPerBreath","glowSync","intensityRange","syncTo","attack","decay","patternBehaviors","waltz","swing","curve","dubstep","dropMultiplier","breakbeat","burstRange","sparkle","addGravity","addShake","shakeOnEntry","pulseRate","screenShake","particleTrails","temperatureEffect","addJitter","addPop","addRecoil","addWarmth","orbitalSync","speedMultiplier","onBeat","offBeat","radiusSync","subdivision","amount","barsPerBreath","intensityMapping","low","medium","high","addVibration","jitterSync","addLift","microAdjustments","addPrecision","EmotiveStateMachine","errorBoundary","gestureQueue","speaking","emotional","current","target","startTime","isActive","currentWeight","targetWeight","interpolationCache","lastUpdate","cacheInterval","cachedProperties","cachedRenderState","initializeEmotionalStates","initializeUndertoneModifiers","emotionalStates","excited","resting","euphoria","focused","eyeArc","undertoneModifiers","jitterAmount","breathRateMultiplier","glowIntensityMultiplier","particleRateMultiplier","coreSizeMultiplier","amplificationFactor","dampeningFactor","setEmotion","has","hasEmotion","validEmotions","uniqueEmotions","Set","performance","undefined","_simulatedTime","applyUndertone","baseProperties","modifier","modified","update","updateEmotionalTransition","updateUndertoneTransition","transition","elapsed","easedProgress","getCurrentEmotionalProperties","properties","interpolateEmotionalProperties","fromEmotion","toEmotion","fromProps","toProps","getCurrentState","isTransitioning","transitionProgress","applyUndertoneModifier","clearUndertone","getUndertoneModifier","renderer","localMod","glowRadiusMult","getWeightedUndertoneModifiers","mod","targetMod","currentMod","reset","isValidEmotion","isValidUndertone","getAvailableEmotions","getAvailableUndertones","getTransitionProgress","completeTransition","interpolateProperty","to","easingType","enableSimulatedTime","selectWeightedColor","colors","totalExplicitWeight","unweightedCount","parsedColors","item","remainingWeight","defaultWeight","probTable","cumulative","entry","ambient","initialize","vx","vy","lifeDecay","emotionColors","behaviorData","upwardSpeed","waviness","friction","dt","data","PHYSICS","orbiting","isSparkle","baseRadius","scaleFactor","blinkPhase","blinkSpeed","blinkIntensity","fadePhase","fadeSpeed","minOpacity","maxOpacity","angle","angularVelocity","swaySpeed","floatOffset","floatSpeed","floatAmount","twinklePhase","twinkleSpeed","swayOffset","radiusPulse","currentRadius","targetX","targetY","verticalFloat","fadeValue","fadeOpacity","blinkValue","normalizedBlink","blink","baseOpacity","tempColor","rising","buoyancy","driftAmount","falling","gravity","drag","PLAYGROUND","popcorn","particleSizeMultiplier","hasGlow","glowSizeMultiplier","popDelay","hasPopped","popStrength","bounceDamping","bounceCount","maxBounces","spinRate","lifetime","popAngle","groundLevel","abs","sqrt","burst$1","isSuspicion","isSurprise","age","fadeStart","id","aggressive","acceleration","jitter","speedDecay","scattering","fleeSpeed","panicFactor","initialized","dx","dy","distance","repelling","repelStrength","minDistance","repelForce","connecting","attractionForce","chaosFactor","attractX","attractY","chaosX","chaosY","radiant","radialSpeed","shimmer","shimmerSpeed","dist","dirX","dirY","shimmerEffect","initializeAscending","ascensionSpeed","waveFactor","waveFrequency","fadeStartDistance","ascending","waveOffset","initialY","distanceTraveled","fadeProgress","fadeFactor","erratic","jitterStrength","directionChangeRate","speedVariation","newAngle","currentSpeed","spinPhase","cautious","pauseTimer","pauseDuration","moveDuration","isMoving","moveTimer","originalVx","originalVy","watchRadius","pullStrength","surveillance","config","behaviorState","scanDirection","scanSpeed","scanRange","scanCenter","modeTimer","nextModeChange","dartTarget","dartSpeed","patrolRadius","patrolAngle","alertLevel","lastPosition","role","primaryRole","changeMode","updateScanning","updateDarting","updateFrozen","updatePatrolling","sign","actualAngle","rand","glitchy","glitchTiming","probability","intensityOnBeat","intensityOffBeat","stutterSync","patterns","freezeOnDrop","dropDuration","randomFreeze","orbitRhythm","baseSpeed","wobbleSync","beatAcceleration","barReset","rgbSync","direction","maxSplit","noiseRhythm","trigger","orbitAngle","orbitRadius","orbitSpeed","glitchTimer","nextGlitch","isGlitching","glitchDuration","glitchOffset","stutterTimer","nextStutter","isFrozen","frozenPosition","frozenVelocity","hasGhost","ghostOffset","ghostAngle","rgbSplit","rgbPhase","noiseLevel","noiseBurst","beatPhase","beatFrequency","dropIntensity","beatIntensity","wobbleRadius","splitAmount","smoothing","directed","focusStrength","randomness","edgeBuffer","canvasWidth","canvasHeight","directedPhase","targetVx","targetVy","visuals","trailLength","sizeMultiplier","blurAmount","fizzy","baseRiseSpeed","wobbleAmplitude","wobbleFrequency","popChance","popForce","fizziness","wobblePhase","wobbleSpeed","bubbleSize","popTimer","isFizzing","wobble","zen","breathingOffset","breathIntensity","radiusVariation","floatY","pluginBehaviors","pluginAdapter$1","BEHAVIOR_REGISTRY","getBehavior","initializeBehavior","behaviorName","behavior","updateBehavior","burst","DEBUG_PARTICLES","ParticleBehaviors","registry","list","values","pluginGestures","bounce","musicalDuration","musical","beats","axis","damping","strength","particleMotion","timingSync","interruptible","blendable","crossfadePoint","amplitudeSync","frequencySync","multiplier","durationSync","accentResponse","patternOverrides","dropBeat","motion","gestureData","startY","startX","startVx","startVy","apply","easeProgress","phase","rhythmModulation","amplitudeMultiplier","accentMultiplier","frequencyMultiplier","oscillation","endFactor","cleanup","pulse","holdPeak","scaleAmount","glowAmount","range","atan2","baseDistance","pulseValue","rawPulse","expansion","targetDistance","moveSpeed","shake","axes","baseFrequency","scaling","originalX","originalY","randomAngle","offsetX","offsetY","pseudoRandom","seed","nod","minDuration","vibrate","tempoScaling","timer","vibrateX","vibrateY","orbit","rotations","zRotations","verticalOscillation","centripetal","speedSync","rotationSync","rotationsPerBar","zSync","pulsAmount","ratio","originalZ","z","initialAngle","orbitTilt","radiusPulseAmount","rotationMultiplier","transitionFactor","velocityTransition","zAngle","entryLerp","orbitalVx","orbitalVy","verticalOffset","lerpFactor","speedAngle","emotions","features","uses3D","smooth","looping","dramatic","twitch","recovery","maxOffset","sharpness","probabilitySync","accentBoost","intensitySync","twitchOffset","targetOffset","isTwitching","twitchTimer","cooldownTimer","lastTwitch","currentTime","sway","bars","float","wobbleAmount","originalSize","originalOpacity","wobbleMultiplier","jitterX","jitterY","fadeOut","spin","radiusMultiplier","spiralOut","accelerate","maintainDistance","accelerateOnBeat","expandOnBeat","contractOffBeat","startAngle","startRadius","speedProgress","rotationAmount","currentAngle","jump","jumpHeight","squashAmount","stretchAmount","anticipation","hangTime","landingImpact","driftOutward","squash","stretch","phaseSync","landing","heightSync","accent","deformationSync","squashOnBeat","stretchOnBeat","timing","hangTimeSync","baseDuration","dynamics","forte","piano","startSize","driftDirection","anticipationEnd","jumpEnd","squashProgress","easedSquash","jumpProgress","jumpCurve","hangProgress","stretchProgress","fallProgress","landProgress","easedLand","impactProgress","recoverProgress","morph","minBeats","maxBeats","phases","morphType","points","innerRadius","randomizeOrder","patternSync","verse","chorus","bridge","drop","formationBeat","holdBeats","dissolveBeat","sizeSync","degreesPerBar","mascot","rotationDirection","calculateStarPosition","calculateHeartPosition","calculateSquarePosition","calculateTrianglePosition","targetRadius","morphTargetX","morphTargetY","armAngle","armIndex","targetAngle","cosR","sinR","rotX","rotY","normalizedAngle","halfSize","tan","vertices","edgeIndex","nextIndex","edgeProgress","morphProgress","holdTime","holdStart","holdEnd","moveProgress","returnProgress","blendFactor","alternate","elastic","overshoot","centerBased","preserveArea","scaleSync","alternateSync","beatsPerChange","overlap","overshootSync","normal","downbeat","preservationSync","targetArea","altProgress","getElasticProgress","easeInElastic","tilt","gatherPhase","tiltAngle","liftAmount","homeRadius","angleSync","gatherSync","beatsBefore","releaseAfter","swaySync","syncopated","liftSync","upOnTilt","heightOnAccent","normalHeight","homeX","homeY","gatherProgress","easedGather","tiltProgress","maxTiltRad","swayAngle","tangentX","tangentY","returnX","returnY","orbital","maintainRadius","elliptical","use3D","zPhaseOffset","tonic","fifth","octave","third","bass","mid","treble","depthSync","major","minor","diminished","augmented","intervals","drift","calculatedRadius","zPhase","hula","verticalSync","radiusX","radiusY","verticalAmount","tiltOffset","scan","scanWidth","scanHeight","layers","sweepSync","beatsPerSweep","pauseOnDownbeat","reverseOnBar","layerSync","quiet","moderate","loud","stagger","pauseSync","widthSync","layer","isPaused","scanOffset","scanPosition","scanX","scanY","twist","rotationAngle","contractionFactor","twistFrequency","funk","disco","latin","startDistance","twistProgress","twistAmount","rotationRad","currentContraction","newDistance","moveStrength","bounceAmount","wave","phaseShift","liftHeight","fadeInOut","onWave","onStatic","slow","fast","adaptToPhrase","sustain","melodicResponse","ocean","electronic","orchestral","offset","adjustedPhase","radiusFactor","returnToOrigin","turbulence","angleSpread","distanceSync","crescendo","diminuendo","modulation","cadence","holdSync","shortPhrase","longPhrase","fermata","classical","jazz","new_age","driftAngle","spreadRad","angleOffset","turbulencePhase","homeProgress","easedHome","driftPhase","returnPhase","driftProgress","turbulenceX","turbulenceY","flicker","flickerRate","colorShift","strobe","pulseMode","groupFlicker","rateSync","triplet","opacitySync","onAccent","regular","strobeSync","isGrouped","baseColor","baseX","baseY","flickerTimer","lastFlicker","flickerState","groupId","colorHue","opacityMultiplier","pulsePhase","groupPhase","targetOpacity","currentOpacity","finalOpacity","hueShift","shiftHue","degrees","startsWith","hueRad","newG","newB","n","strengthSync","decaySync","rock","directional","outro","returnSync","onSectionChange","march","initialX","settle","dampingSync","onResolution","onTension","thresholdSync","cadenceResponse","minimalist","breathe","inhaleRadius","exhaleRadius","spiralStrength","breathRateSync","bpm","inhale","onUpbeat","onDownbeat","exhale","phrases","hold","ballad","uptempo","phaseOffset","referenceRadius","currentDx","currentDy","radiusDiff","moveX","moveY","expand","scaleTarget","persist","pianissimo","fortissimo","sforzando","scaleTargetSync","climax","build","release","expandFactor","contract","onRelease","metal","trap","contractFactor","flash","glowPeak","scalePeak","flashIntensity","burstStrength","glow","startOpacity","startGlow","glowValue","glowMultiplier","peek","peekDistance","peekSpeed","holdDuration","hideSpeed","offAccent","hideMultiplier","staggerBeats","syncopationResponse","peekAngle","originalDistance","staggerDelay","phaseTimer","peekOffset","adjustedProgress","peekProgress","hideProgress","peekX","peekY","createPlaceholderGesture","maxQueue","blend","wiggle","groove","point","lean","reach","headBob","GESTURE_REGISTRY","getGesture","syncType","override","shimmerProgress","rainEffect","rainProgress","fadeIn","fadePhaseSync","pulseSync","fade","holdStrength","allowDrift","onRest","onSound","pauseResponse","minimal","holdX","holdY","restoreFactor","slideDistance","stepHeight","syncToBeat","beatMultiplier","accentBeats","kickDistance","swivelRange","bounceHeight","rhythmEngine","timeSignature","isPlaying","currentBeat","currentBar","beatProgress","barProgress","beatDuration","barDuration","lastBeatTime","nextBeatTime","listeners","beatCallbacks","barCallbacks","subdivisions","sixteenth","eighth","audioSync","syncOffset","autoSync","humanize","currentPattern","initializePatterns","accents","isRunning","emit","stop","totalBeats","totalBars","beatsSinceStart","newBeat","newBar","onBar","updateSubdivisions","getTimeInfo","requestAnimationFrame","beatNumber","beatInBar","getAccent","humanTiming","beatInfo","beat","bar","barNumber","barInfo","swingRatio","nextBeatIn","setBPM","setTimeSignature","numerator","denominator","setPattern","patternName","onBeatCallback","add","delete","onBarCallback","event","on","syncToAudio","audioContext","audioSource","source","getAdapter","isOnBeat","tolerance","isOnSubdivision","getBeatSync","getAccentedValue","baseValue","beatsToMs","msToBeats","ms","getBPM","getPattern","rhythmIntegration","adapter","subsystemConfigs","activeModulations","handleBeat","handleBar","updateBPM","newBPM","rhythmManuallyStoppedForCurrentAudio","rhythmSyncVisualizer","active","registerConfig","rhythmConfig","originalConfig","applyGestureRhythm","sync","beatSync","accentedValue","assign","applyParticleRhythm","emotionState","particleSystem","timeInfo","emission","emitBurst","emissionRate","breath","breathProgress","applyBehaviorRhythm","triggerGlitch","speedBoost","resetOrbit","stutter","patternConfig","freeze","freezeDuration","lastBeatInfo","lastBarInfo","getMusicalDuration","originalDuration","isEnabled","bpmLocked","lockedBPM","resampleBPM","signature","timeSigDisplay","document","getElementById","textContent","Particle","zRoll","vz","maxLife","fadeInTime","fadeOutTime","isFadingOut","isCellShaded","cachedColors","lastColor","lastOpacity","undertoneModifier","gestureMotion","gestureProgress","gestureIsOverriding","isOverrideGesture","applyGestureMotion","gestureBehavior","margin","rhythmModifiedMotion","applyFullGestureMotion","isOutOfBounds","isAlive","setOutwardVelocity","outwardSpeed","upwardBias","getDepthAdjustedSize","depthScale","getState","position","velocity","getCachedColor","hexColor","roundedOpacity","cacheKey","hexToRgba","result","exec","render","emotionColor","isFinite","renderX","renderY","safeSize","particleColor","strokeStyle","lineWidth","beginPath","arc","stroke","discreteOpacity","fillStyle","fill","gradient","createRadialGradient","addColorStop","glowSize","glowGradient","minGlowOpacity","particleOpacity","globalCompositeOperation","ParticleSystem","absoluteMaxParticles","particles","pool","poolSize","totalParticlesCreated","totalParticlesDestroyed","stateChangeCount","lastMemoryCheck","lastLeakedCount","spawnAccumulator","poolHits","poolMisses","cleanupTimer","cleanupInterval","initializePool","getParticleFromPool","pop","currentEmotionColors","currentEmotion","returnParticleToPool","cachedGradient","cachedGradientKey","spawn","_spawn","resetAccumulator","_excitedDebugLogged","baseEmotionColors","currentUndertone","isArray","colorItem","applyUndertoneSaturationToArray","rhythmModulatedRate","emotionConfig","i","spawnSingleParticle","skipSpawnThisFrame","cappedDeltaTime","particlesPerMs","spawnPos","getSpawnPosition","clampedPos","clampToCanvas","palmCenter","swirlAngle","orbRadius","glowRadius","minSpawnRadius","maxSpawnRadius","ambientAngle","ambientRadius","aggressiveAngle","aggressiveRadius","burstAngle","burstRadius","repelAngle","repelRadius","cx","cy","gm","gp","um","_update","wrappedUpdate","performCleanup","leaked","removeParticle","setGestureBehavior","index","splice","gestureTransform","_render","renderBackground","_renderLayer","renderForeground","isForeground","visibleParticles","sort","a","_renderParticles","colorA","colorB","lastFillStyle","depthSize","fireflyGlow","fireflyEffect","particlePhase","fireflyTime","particleGlow","flickerEffect","flickerTime","normalizedDistance","shimmerTime","shimmerWave","glowEffect","glowProgress","radiateDelay","localProgress","localEnvelope","_originalGlow","globalAlpha","excess","_burst","actualCount","getStats","activeParticles","poolEfficiency","setMaxParticles","originalMaxParticles","cleanupDeadParticles","beforeCount","filter","removed","getParticlesByBehavior","validateParticles","UNDERTONE_MODIFIERS","none","addFlutter","addMicroShake","addPower","addHold","addDroop","addPause","addPulse","addFocus","addSoftness","addFade","GestureCompositor","cache","easingCache","preCalculateEasingCurves","easingTypes","Float32Array","steps","calculateEasing","getEasingValue","compose","gestureModule","base","emotionMod","getEmotionModifiers","undertoneMod","composed","applyModifiers","scaleModifier","selectEasing","effects","addFlow","addDrag","addTension","applyGestureSpecificMods","baseEasing","irregular","clearCache","zenVortex","vortexSpeed","spiralTightness","maxRadius","segments","arms","pulseSpeed","shouldActivate","zenTransition","arm","armOffset","drawSpiralArm","drawMeditationEyes","pulseMod","spiralRadius","moveTo","lineTo","createLinearGradient","eyeWidth","eyeSpacing","recordingGlow","minIntensity","maxIntensity","gradientStops","recording","drawRecordingIndicator","textSize","dotRadius","font","textAlign","textBaseline","strokeText","fillText","speakingPulse","scaleMultiplier","minPulse","ringEffect","smoothedLevel","rings","drawRings","ring","getScaleModifier","sleepingEffect","eyeClosedScale","breathingDepth","breathingRate","zParticleInterval","zDriftSpeed","zFadeSpeed","orbDimming","glowDimming","lastZSpawn","zParticles","sleeping","weights","randomWeight","drawZParticles","shadowBlur","shadowColor","getEyeOpenness","getBreathingModifiers","rate","depth","getDimmingValues","suspicionScan","squintAmount","squintSpeed","pupilShift","currentSquint","targetSquint","lastScanTime","scanPhase","scanning","suspicious","updateSquint","startScan","updateScan","diff","scanStartTime","getEyeModifiers","drawScanLines","setLineDash","endX","endY","gazeNarrowing","maxHorizontalScale","maxVerticalScale","focusThreshold","currentScaleX","currentScaleY","targetScaleX","targetScaleY","gazeIntensity","gazeLocked","narrowFactor","animateScales","diffX","diffY","getEyeScales","drawFocusIndicator","angles","rad","startDist","endDist","fingerprint","ringSpacing","rotationSpeed","waveAmplitude","breakPoints","scanLineSpeed","scanLineWidth","successColor","failColor","isScanning","scanResult","breaks","whorls","biometric","authenticating","ringBreaks","j","authResult","drawFingerprintPattern","drawScanLine","showAuthResult","ringRadius","shouldBreak","breakAngle","distortedRadius","distortedAngle","whorl","whorldX","whorldY","pointX","pointY","exp","px","py","text","completeScan","success","effectRegistry","registerEffect","effectModule","getEffect","effectName","applyEffect","effect","isEffectActive","noteDurations","whole","half","quarter","lastBPM","prewarmCache","commonDurations","JSON","stringify","toMilliseconds","currentBPM","toMusical","closestNote","closestDiff","note","closestSubdivision","exact","calculatePhases","phaseBeats","reduce","sum","cumulativeBeats","getBeatProgress","getBarProgress","timeToNextBoundary","boundary","beatsInBar","barsInPhrase","quantize","targetMs","isOnBoundary","timeToNext","getTempoAdaptation","baseTempo","tempoRatio","energy","GestureAnimator","activeGestures","gestureAnimations","slowBlink","look","breathIn","breathOut","breathHold","breathHoldEmpty","rain","runningman","charleston","startGesture","gestureName","specialEffects","slam","triggerChromaticAberration","gestureCompositor","lookDistance","wobbleFreq","anim","currentDriftAngle","tiltDirection","vibrateAngles","applyGestureAnimations","transform","applyBounce","applyPulse","applyShake","applySpin","applyNod","applyTilt","applyExpand","applyContract","applyFlash","applyDrift","applyStretch","applyGlow","applyFlicker","applyVibrate","applyOrbital","applyHula","applyWave","applyBreathe","applyMorph","applySlowBlink","applyLook","applySettle","applyBreathIn","applyBreathOut","applyBreathHold","applyBreathHoldEmpty","applyJump","applySway","applyFloat","applyRain","applyRunningMan","applyCharleston","applySparkle","applyShimmer","applyWiggle","applyGroove","applyPoint","applyLean","applyReach","applyHeadBob","applyOrbit","flashWave","glowTime","glowEnvelope","flashWaveData","stopAllGestures","getCurrentGesture","overrideGestures","gestureInfo","targetScale","outerRadius","waveIntensity","waveX","mag","vibration","amp","infinityX","holdPercent","exhaleProgress","lookProgress","yOffset","swayFrequency","rainIntensity","driftY","swayX","particleEffect","wiggleDirection","wiggleX","pointDirection","motionProgress","scaleProgress","side","bobPhase","bobY","startBounce","startPulse","startShake","startSpin","startNod","startTilt","startExpand","startContract","startFlash","startDrift","startStretch","startFlicker","startVibrate","startOrbital","startHula","startWave","startBreathe","startMorph","startSlowBlink","startLook","startSettle","startBreathIn","startBreathOut","startBreathHold","startBreathHoldEmpty","startJump","startSway","startFloat","startRain","startRunningMan","startCharleston","startSparkle","startShimmer","startWiggle","startGroove","startPoint","startLean","startReach","startHeadBob","startOrbit","slide","kick","ColorUtilities","colorTransition","applyUndertoneModifiers","visualProperties","applyUndertoneToColor","undertoneType","fullySaturated","hslToHex","energetic","upbeat","mellow","startColorTransition","targetColor","targetIntensity","currentColor","currentIntensity","fromColor","toColor","fromIntensity","toIntensity","updateColorTransition","eased","SpecialEffects","recordingActive","sleepMode","speakingActive","zenModeActive","speakingRings","ringSpawnTimer","ringSpawnInterval","maxRings","sleepZ","sparkles","chromaticAberration","scaleValue","renderRecordingGlow","fillRect","renderRecordingIndicator","recSize","renderSleepIndicator","randomCase","renderSpeakingRings","coreRadius","renderZenCore","zenRadius","startRecording","stopRecording","enterSleepMode","wakeUp","startSpeaking","stopSpeaking","createSparkle","options","maxLifetime","renderSparkles","closePath","visibleCanvas","querySelector","style","animation","createElement","head","appendChild","applyChromaticAberration","sourceCanvas","prevComposite","drawImage","applyChromaticAberrationSimple","drawFunction","EyeRenderer","blinking","blinkingEnabled","blinkTimer","nextBlinkTime","getRandomBlinkTime","eyeClose","eyeOpen","startBlink","getBlinkScale","blinkProgress","drawEyes","lineCap","eyeY","eyeSize","drawHappyEyes","drawSadEyes","drawAngryEyes","drawSurprisedEyes","drawFocusedEyes","drawSleepyEyes","drawSuspiciousEyes","spacing","openness","setBlinkingEnabled","setSquintAmount","forceBlink","BreathingAnimator","breathingSpeed","breathingPhase","breathRateMult","breathDepthMult","breathIrregular","customScale","emotionBreathPatterns","angry","surprised","confused","amused","bored","anxious","determined","proud","content","hopeful","intrigued","embarrassed","grateful","inspired","silly","sleepy","undertoneRateMult","undertoneDepthMult","phaseIncrement","getBreathingScale","setCustomScale","setBreathingSpeed","setBreathingDepth","setBreathRateMultiplier","mult","setBreathDepthMultiplier","setIrregularBreathing","holdBreath","empty","releaseBreath","getBreathingInfo","isCustom","isIrregular","gradientCache","stats","hits","misses","evictions","maxSize","ttl","accessOrder","generateKey","x0","y0","r0","x1","y1","r1","stops","getRadialGradient","cached","updateAccessOrder","getLinearGradient","evictLRU","indexOf","keyToEvict","clearExpired","keysToDelete","hitRate","toFixed","createHelper","radial","GlowRenderer","targetGlowColor","glowColorTransition","glowColorTransitionSpeed","offscreenCanvas","offscreenCtx","cachedGlowColor","cachedGlowRadius","initOffscreenCanvas","updateOffscreenSize","renderGlow","renderGlowDirect","cacheGlowGradient","offCtx","center","renderZenGlow","updateGlowColor","lerpColor","setGlowIntensity","setGlowColor","CoreRenderer","coreColor","coreOpacity","coreBorderWidth","coreBorderColor","shapePoints","isMorphing","drawMorphedShape","drawCircle","drawDropShadow","shadowOffset","shadowGradient","step","shadowOffsetX","shadowOffsetY","renderSleepyCore","renderGlitchedCore","setShapePoints","clearShapePoints","setCoreColor","setCoreOpacity","setCoreBorder","getCoreInfo","hasBorder","shapePointCount","RotationBrake","brakeStartTime","brakeDuration","brakeStartRotation","brakeTargetRotation","brakeStartVelocity","onComplete","onProgress","DURATION_FACTOR","brakeToUpright","brakeToTarget","brakeToNearest","angleStep","manualRotation","currentVelocity","normalizedTarget","baseCycles","angleToTravel","setRotationSpeed","resolvePromise","updateBrake","virtualSpeed","complete","isBraking","emergencyStop","getProgress","AmbientDanceAnimator","animations","grooveSway","grooveBob","grooveFlow","groovePulse","grooveStep","activeAnimation","blendState","startAmbientAnimation","animationName","stopAmbientAnimation","updateBlendState","lerp","getTransform","stepPhase","stepProgress","smoothStep","AnimationPriority","animationLoopManager","callbacks","callbackIdCounter","frameId","lastFrameTime","fps","frameCount","targetFPS","targetFrameTime","frameBudget","prioritySkipCounters","AnimationPriority_MEDIUM","AnimationPriority_LOW","AnimationPriority_IDLE","performanceMonitor","frameTimeHistory","maxHistorySize","loop","register","lastRun","runCount","totalTime","unregister","setEnabled","cancelAnimationFrame","callbacksByPriority","groupCallbacksByPriority","timeSpent","shouldSkipPriority","callbackData","callbackStart","callbackTime","groups","callbackCount","averageFrameTime","maxFrameTime","minFrameTime","Infinity","total","setTargetFPS","setPerformanceMonitor","monitor","EmotiveRenderer","canvasManager","gestureAnimator","colorUtilities","eyeRenderer","breathingAnimator","glowRenderer","coreRenderer","rotationBrake","ambientDanceAnimator","coreSizeDivisor","defaultGlowColor","renderingStyle","baseScale","referenceSize","topOffset","canvasSize","gazeOffset","gazeTrackingEnabled","gazeTarget","zenVortexIntensity","targetSquintAmount","isSuspicious","episodicFlutter","particleRateMult","lastRotationUpdate","animationFrameIds","zenEnter","zenExit","loopCallbackIds","glowCache","maxCacheSize","episodicEffects","nextTrigger","recordingRings","recordingPulse","previousEmotion","targetEmotion","arcHeight","lotusMorph","petalSpread","smileCurve","saturationMult","brightnessMult","brightnessFlicker","episodicPowerPose","episodicMicroSleep","episodicLaserFocus","episodicWithdrawal","markFrameStart","frameStartTime","ambientTransform","logicalWidth","logicalHeight","originalCtx","stateMachine","weightedModifier","updateTimers","gestureTransforms","coreBreathFactor","glowBreathFactor","sleepOpacityMod","sleepScaleMod","glowOpacityMod","sleepEffect","dimming","sleepDimness","sleepScale","breathingScale","emotionSizeMult","undertoneSizeMult","effectiveGlowIntensity","episode","flutter","puffCurve","sagCurve","focusCurve","withdrawCurve","coreX","coreY","brakeUpdate","totalRotation","innerR","outerR","currentShadow","shapeMorpher","getCanvasPoints","getCurrentShadow","renderingSunEffects","renderSunEffects","currentShape","targetShape","isTransitioningToSolar","isTransitioningFromSolar","isAtSolar","isSolarToMoon","isMoonToSolar","renderMoonShadow","lunarOverlay","lunarShadow","coverage","progression","renderBaileysBeads","recordingEffect","frameTime","markFrameEnd","recordFrameTime","safeRadius","renderDropShadow","isAnimating","audioDeformation","vocalEnergy","shadow","texture","textureOpacity","textureGradient","coronaOpacity","innerGlow","coronaGradient","flares","wave1","wave2","wave3","grad","addFlame","tipX","tipY","perpX","perpY","quadraticCurveTo","rimGradient","hasSunRays","_beadStartTime","isLunarSolarTransition","beadCount","_currentBeads","order","_","delay","elapsedTime","bead","beadAge","beadX","beadY","coreGradient","isSolarOverlay","shadowProgress","animatedOffset","shadowX","angleRad","imageSmoothingEnabled","imageSmoothingQuality","clip","baseCoverage","shadowOpacity","diffusion","penumbraRadius","penumbraGradient","umbraRadius","umbraGradient","shakeOffset","basePulse","zenPulse","spread","smile","centerPetalBase","bezierCurveTo","sidePetalAlpha","lotusRadius","glowOriginY","lotusGlow","outerHalo","dimIntensity","updateUndertone","setEmotionalState","baseIntensity","glowMult","enterZenMode","exitZenMode","baseBreathRate","baseBreathDepth","emotionEyeOpenness","emotionEyeArc","setRotationAngle","setGazeOffset","gazeData","proximity","isLocked","idleTimer","isAsleep","getCurrentOrbPosition","animateEyeClose","eyeCloseDuration","dimProgress","dimEased","animateEyeOpen","brightenDuration","eyeProgress","eyeEased","animate","lotusProgress","lotusEased","straightenDuration","petalProgress","awakeProgress","blinkProg","shakeProg","driftProg","expandProgress","expandEased","settleProgress","setGazeTracking","gazeTrackingInitialized","initGazeTracking","handleMouseMove","e","clientX","left","clientY","top","handleTouchMove","touches","touch","cleanupGazeTracking","setQualityLevel","quality","qualityLevel","setQualityReduction","handleContextRecovery","newContext","startGrooveSway","startGrooveBob","startGrooveFlow","startGroovePulse","startGrooveStep","currentGesture","isGestureActive","some","GazeTracker","lockDistance","boundaryPadding","canvasCenter","mousePos","targetGaze","currentGaze","cachedRect","primaryTouch","handleMouseLeave","handleTouchStart","handleTouchEnd","onInteraction","updateCanvasCenter","attachEventListeners","resizeObserver","ResizeObserver","observe","passive","updateTargetGaze","changedTouches","identifier","updateTouchPosition","next","maxDistance","getGazeOffset","gaze","enable","disable","detachEventListeners","setInteractionCallback","disconnect","IdleBehavior","blinkInterval","blinkDuration","swayInterval","swayDuration","swayIntensity","sleepTimeout","isBlinking","isSwaying","timers","idle","swayProgress","nextBlink","getRandomInterval","nextSway","swayTarget","swayStart","onBlink","onSway","onSleep","onWake","updateBreathing","enterSleep","updateBlinking","updateSwaying","isBlinkingEnabled","endBlink","endSway","performWakeAnimation","stretchOffset","resetIdleTimer","getBreathingFactor","getBlinkProgress","getSwayOffset","interval","setCallback","breathingFactor","MusicTheory","A4_FREQUENCY","NOTES","INTERVALS","unison","minorSecond","majorSecond","minorThird","majorThird","perfectFourth","tritone","perfectFifth","minorSixth","majorSixth","minorSeventh","majorSeventh","SCALES","naturalMinor","harmonicMinor","melodicMinor","ionian","dorian","phrygian","lydian","mixolydian","aeolian","locrian","majorPentatonic","minorPentatonic","blues","chromatic","wholeHalfDiminished","arabic","japanese","hungarian","bebopMajor","CHORDS","sus2","sus4","maj7","min7","dom7","min7b5","dim7","maj9","min9","dom9","add9","maj11","min11","maj13","min13","EMOTION_MODES","tempo","articulation","alert","pleased","melancholy","playful","PROGRESSIONS","I_V_vi_IV","I_IV_V","ii_V_I","I_vi_IV_V","vi_IV_I_V","I_VI_ii_V","iii_vi_ii_V","I_ii_iii_IV","I_I_I_I_IV_IV_I_I_V_IV_I_V","i_VII_VI_VII","I_II_IV_I","noteToMidi","noteName","noteIndex","midiToFrequency","midiNote","noteToFrequency","generateScale","root","scaleType","rootMidi","generateChord","chordType","chord","generateProgression","chords","degree","chordRoot","log2","frequencies","getEmotionMusic","circleOfFifths","startNote","clockwise","noteBase","currentIndex","notes","analyzeInterval","note1","note2","midi1","midi2","semitones","intervalName","octaves","consonant","getIntervalRatio","generateMelody","stepProbability","restProbability","scaleNotes","melody","isRest","leap","durations","HarmonicSystem","musicTheory","currentKey","currentScale","currentTempo","voices","gain","pad","masterGain","createGain","connect","destination","reverb","createReverb","createDelay","createFilter","dryGain","wetGain","nextNoteTime","noteResolution","noteLength","currentChordIndex","currentMelodyNote","lookahead","scheduleAheadTime","convolver","createConvolver","sampleRate","impulse","createBuffer","channel","channelData","getChannelData","buffer","delayTime","feedback","createBiquadFilter","Q","musicParams","settings","freq","exponentialRampToValueAtTime","linearRampToValueAtTime","generateEmotionProgression","progressionType","playChord","chordGain","setValueAtTime","oscillators","osc","createOscillator","detune","chordId","playMelody","baseTime","noteGain","vibrato","vibratoGain","createPad","padGain","voiceGain","lfo","lfoGain","playGestureSound","soundFunction","arpeggio","startFreq","endFreq","chord1","chord2","f","startHarmony","scheduleHarmony","bassNote","playBassNote","secondsPerBeat","stopHarmony","setLayerActive","setMasterVolume","volume","setEffectsMix","wetness","dry","SoundSystem","isInitialized","nodes","master","harmonicSystem","useHarmonicSystem","warningTimestamps","warningThrottle","currentOscillator","currentGain","masterVolume","ambientVolume","emotionalTones","waveform","AudioContextClass","AudioContext","webkitAudioContext","resumeContext","resume","updateAmbientVolume","getMasterVolume","isAvailable","setHarmonicMode","stopAmbientTone","setHarmonicLayer","setHarmonicEffects","close","getEmotionalTone","setAmbientTone","transitionDuration","toneConfig","transitionTime","oscillator","gainNode","targetVolume","fadeOutDuration","fadeTime","gestureId","emotionalContext","soundConfig","getGestureSoundConfig","getEmotionalModifiers","baseVolume","applyFrequencyEnvelope","frequencyEnvelope","applyVolumeEnvelope","volumeEnvelope","throttledWarn","envelope","qualityReduction","maxOscillators","isSupported","SimpleFPSCounter","timestamps","smoothedFPS","smoothingFactor","frameTimes","maxFrameTimeSamples","getFPS","getSmoothedFPS","getFrameTime","getAverageFrameTime","getMetrics","status","AnimationController","animationFrameId","loopCallbackId","handleVisibilityChange","fpsCounter","subsystems","eventCallback","parentMascot","setSubsystems","soundSystem","required","system","setEventCallback","setParentMascot","hidden","skipParticleSpawn","startFrame","endFrame","emotionalProps","updateMetrics","getActiveParticleCount","gestureQueueLength","audioLatency","getLatency","getPerformanceMetrics","fpsMetrics","instantFps","AudioLevelProcessor","spikeThreshold","minimumSpikeLevel","spikeMinInterval","historySize","smoothingTimeConstant","fftSize","levelUpdateThrottle","analyser","dataArray","currentLevel","levelHistory","lastVolumeSpike","lastLevelEmit","levelUpdate","volumeSpike","createAnalyser","Uint8Array","frequencyBinCount","catch","emitError","updateAudioLevel","getByteFrequencyData","rms","calculateRMS","updateLevelHistory","detectVolumeSpikes","emitLevelUpdate","sumSquares","normalized","previousLevels","averagePrevious","level","emitVolumeSpike","previousAverage","spikeRatio","minimumLevel","clearHistory","getCurrentLevel","getLevelHistory","getAnalyser","getFrequencyData","isProcessingActive","onLevelUpdate","onVolumeSpike","onError","removeAllCallbacks","updateConfig","newConfig","getConfig","lastSpikeTime","timeSinceLastSpike","averageLevel","rawData","history","spikeData","callbackError","eventManager","setupUnloadHandler","registered","eventType","handler","group","generateId","listenerInfo","removeGroup","groupSet","removeAllForTarget","info","removeAllOfType","removeAll","createAutoRemove","remove","once","debounced","timeoutId","throttled","limit","inThrottle","getActiveListeners","analyzeLeaks","analysis","totalListeners","activeListeners","inactiveButNotRemoved","byTarget","byType","potentialLeaks","targetName","cleaned","AccessibilityManager","enableReducedMotion","enableHighContrast","enableScreenReaderSupport","enableKeyboardNavigation","enableFocusIndicators","announceStateChanges","colorBlindMode","reducedMotionPreferred","highContrastEnabled","screenReaderActive","keyboardNavigationActive","currentColorBlindMode","focusableElements","currentFocusIndex","focusHistory","liveRegion","announcementQueue","colorSchemes","highContrast","primary","secondary","background","protanopia","deuteranopia","tritanopia","dots","stripes","crosshatch","solid","statePatterns","detectUserPreferences","setupLiveRegion","setupKeyboardNavigation","setupPreferenceListeners","matchMedia","motionQuery","matches","contrastQuery","windowsHCQuery","detectScreenReader","hasAriaLive","hasAriaAtomic","hasRole","userAgent","navigator","hasATHints","setAttribute","overflow","body","handleKeyDown","handleKeyUp","addListener","onPreferenceChange","preventDefault","navigateFocus","shiftKey","activateCurrentFocus","clearFocus","handleArrowNavigation","focusableArray","element","setFocus","label","announce","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","onArrowNavigation","registerFocusableElement","bounds","action","unregisterFocusableElement","onFocusChange","processAnnouncementQueue","getAnimationSettings","originalSettings","iterations","particlesEnabled","complexAnimations","autoPlay","getColorScheme","originalColors","getStatePattern","applyPatternOverlay","patternCanvas","patternCtx","createDotPattern","createStripePattern","createCrosshatchPattern","canvasPattern","createPattern","setColorBlindMode","onColorSchemeChange","getStatus","reducedMotion","screenReader","keyboardNavigation","focusedElement","registeredElements","preference","onReducedMotionChange","onHighContrastChange","createStateDescription","parentNode","removeChild","MobileOptimization","enableTouchOptimization","enableViewportHandling","enableBatteryOptimization","enableOrientationSupport","enableResponsiveScaling","touchSensitivity","doubleTapDelay","swipeThreshold","pinchThreshold","isMobile","detectMobile","isTablet","detectTablet","isTouchDevice","detectTouch","isIOS","test","isAndroid","lastTouchTime","lastTapTime","tapCount","touchStartPosition","isPinching","isRotating","lastPinchDistance","lastRotation","gestureStartTime","gestureHistory","viewportSize","innerWidth","innerHeight","orientation","getOrientation","pixelRatio","lastViewportChange","batteryLevel","isCharging","lowPowerMode","mobilePerformanceSettings","reducedParticles","simplifiedAnimations","lowerFrameRate","reducedEffects","canvasScale","useOffscreenCanvas","supportsOffscreenCanvas","handleTouchCancel","handleOrientationChange","handleViewportChange","setupTouchHandlers","setupViewportHandlers","setupBatteryMonitoring","setupOrientationHandlers","applyMobileOptimizations","isMobileUA","keyword","isMobileSize","hasTouch","maxTouchPoints","isIPad","isAndroidTablet","isWindowsTablet","isTabletSize","msMaxTouchPoints","OffscreenCanvas","getCanvas","touchAction","userSelect","webkitUserSelect","setupViewportMeta","viewportMeta","getBattery","battery","charging","onBatteryChange","DeviceOrientationEvent","handleDeviceOrientation","currentX","currentY","handleSingleTouchStart","handleMultiTouchStart","emitTouchEvent","touch1","touch2","getDistance","getAngle","storedTouch","handleSingleTouchMove","handleMultiTouchMove","deltaX","deltaY","currentDistance","pinchDelta","pinchRatio","delta","currentRotation","rotationDelta","applyOrientationOptimizations","beta","gamma","applyResponsiveScaling","isVisible","visible","applyBackgroundOptimizations","restorePerformance","x2","y2","optimizations","calculateOptimalCanvasScale","useWebGL","isLandscape","layoutMode","particleDirection","uiScale","viewport","animationsEnabled","audioEnabled","setCanvas","onTouchEvent","device","activeTouches","PluginSystem","enablePlugins","validatePlugins","sandboxPlugins","maxPlugins","pluginTimeout","allowOverrides","plugins","pluginTypes","pluginsByType","dependencies","dependencyGraph","pluginStates","loadingPlugins","activePlugins","hooks","pluginAPI","createPluginAPI","conflicts","resolutionStrategies","overrideConflict","merge","mergeConflict","reject","rejectConflict","queue","queueConflict","validationSchemas","createValidationSchemas","sandbox","createSandbox","registerHook","emitPluginEvent","onPluginEvent","getPlugin","hasPlugin","log","logFromPlugin","errorFromPlugin","setState","setPluginState","getPluginState","version","schemas","baseSchema","enum","author","init","updateEmotion","renderEmotion","keyframes","compatibility","executeGesture","canExecute","updateParticles","spawnParticle","sounds","playSound","processAudio","console","warn","localStorage","sessionStorage","fetch","XMLHttpRequest","api","registerPlugin","plugin","validatePlugin","valid","checkConflicts","resolveDependencies","resolved","initializePlugin","updateDependencyGraph","hook","schema","typeErrors","validateAgainstSchema","obj","rules","subErrors","conflictName","existingPlugin","existingName","newName","missing","dep","tryLoadDependency","dependencyName","pluginName","timeout","race","unregisterPlugin","getDependentPlugins","hookSet","dependents","deps","hookName","executeHooks","results","getPluginsByType","pluginNames","enablePlugin","onEnable","disablePlugin","onDisable","eventName","existing","incoming","totalPlugins","handlers","FeatureDetection","_cachedFeatures","capabilities","_cachedCapabilities","webAudio","detectWebAudio","canvas2d","detectCanvas2D","detectRequestAnimationFrame","detectDevicePixelRatio","detectAudioContext","mediaDevices","detectMediaDevices","detectPerformance","intersectionObserver","detectIntersectionObserver","assessCapabilities","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","getUserMedia","IntersectionObserver","score","Boolean","percentage","recommendations","getRecommendations","getFeatures","getCapabilities","PolyfillManager","polyfills","applied","feature","polyfillFn","applyAll","isApplied","polyfillRequestAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","polyfillPerformanceNow","polyfillWebAudio","array","suspend","CanvasContextRecovery","isContextLost","recoveryCallbacks","setupContextLossHandling","onRecovery","isLost","recover","BrowserOptimizations","_cachedBrowser","browser","_cachedOptimizations","detectBrowser","setupOptimizations","match","preferredAnimationMethod","audioContextOptions","latencyHint","canvasOptimizations","particleLimit","getOptimizations","getBrowser","applyCanvasOptimizations","getRecommendedParticleLimit","getAudioContextOptions","_initializationCache","_browserCompatibilityInstance","browserCompatibility","featureDetection","polyfillManager","browserOptimizations","appliedPolyfills","initializeBrowserCompatibility","DebugLevel","NONE","ERROR","WARN","INFO","DEBUG","TRACE","emotiveDebugger","enableProfiling","enableErrorTracking","enableMemoryTracking","maxLogEntries","maxProfileEntries","logs","profiles","memorySnapshots","frameTimings","maxFrameTimings","lastErrors","memory","stackTrace","setupErrorHandling","trackError","filename","lineno","colno","reason","promise","logEntry","getStackTrace","consoleMethod","getConsoleMethod","timeStr","String","errorKey","startProfile","metadata","profile","samples","profileSample","sample","relativeTime","endProfile","endTime","calculateProfileStats","oldestKey","sampleCount","avg","avgSampleDuration","minSampleDuration","maxSampleDuration","totalDuration","trackFrameTiming","takeMemorySnapshot","snapshot","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","getDebugReport","uptime","logCount","recentLogs","errorCount","uniqueErrors","activeProfiles","completedProfiles","getFrameTimingStats","avgFrameTime","avgFPS","minFPS","maxFPS","exportDebugData","exportTime","debuggerUptime","location","search","runtimeCapabilities","detectCapabilities","measurePerformance","es6","detectES6","es2017","detectES2017","modules","detectModules","webGL","detectWebGL","webGL2","detectWebGL2","webWorkers","detectWebWorkers","serviceWorkers","detectServiceWorkers","performanceObserver","detectPerformanceObserver","detectResizeObserver","detectLocalStorage","detectSessionStorage","indexedDB","detectIndexedDB","detectFetch","webSockets","detectWebSockets","touchEvents","detectTouchEvents","pointerEvents","detectPointerEvents","deviceOrientation","detectDeviceOrientation","canvasFilters","detectCanvasFilters","detectOffscreenCanvas","Symbol","async","Function","Worker","PerformanceObserver","WebSocket","PointerEvent","measurements","jsExecutionSpeed","canvasStart","canvasPerformance","getPerformance","generateReport","supportedFeatures","supported","unsupportedFeatures","supportPercentage","generateRecommendations","generateCircle","numPoints","generateSun","numRays","SHAPE_DEFINITIONS","circle","heart","generateHeart","star","starPoints","halfAngleStep","outerAngle","innerAngle","vertexCount","edgeFloat","v1","v2","generateStar","sun","corona","moon","softness","lunar","innerT","generateSuspicion","eclipse","square","pointsPerSide","generateSquare","triangle","sides","perimeter","totalPoints","sidePoints","generateTriangle","solar","arrayPool","pools","inUse","acquire","newArray","AudioDeformer","morpher","vocalEffectActive","beatGlitchIntensity","glitchPoints","bassEnergy","vocalPresence","highFreqEnergy","transientActive","transientStrength","transientDecay","transientHoldTime","transientHoldCounter","applyAudioDeformation","generateFallbackCircle","audioAnalyzer","currentFrequencies","frequencyData","currentBassEnergy","bassCount","bassPeakHistory","bassThumpTimer","avgBass","isMicrophoneMode","microphoneStream","effectMultiplier","spectralHistory","spectralFluxHistory","onsetThreshold","musicDetector","detectedBPM","onsetStrengths","detectedTimeSignature","timeSignatureConfidence","measureStartTime","timeSignatureHistory","timeSignatureLocked","currentSpectrum","spectralFlux","bassFlux","prevSpectrum","sorted","median","mean","isVocalOnset","isBeatOnset","vocalGlowBoost","onsetStrength","bassWeight","addOnset","bpmConfidence","forceFastDetection","bassHistory","historyIndex","vocalHistory","bassEffectActive","lastVocalPresence","hasFrequencyData","deformed","undulationDirection","undulationPhase","numGlitches","baseExpansion","undulation","breathPulse","waveCount","wiggleIntensity","glitchPoint","find","totalDeformation","setAudioDeformation","setVocalEnergy","updateFrequencyBands","vocal","processTransient","AgentBPMDetector","agents","maxAgents","confidence","peakHistory","maxHistoryLength","minBPM","maxBPM","convergenceThreshold","subdivisionPreference","prefer","veryfast","createAgent","effectiveBPM","beatInterval","initializeAgents","initialGuess","sub","agent","processPeak","fftGuess","getFFTEstimate","scoreAgent","evolveAgents","checkConvergence","peakTime","peakStrength","timeSinceLastBeat","expectedNextBeat","alignment","bestAgent","variation","newAgent","autoSelectSubdivision","recentPeaks","estimatedBPM","seedBPM","getSubdivision","locked","agentCount","topAgents","MusicDetector","onsetIntervals","lastOnsetTime","lastBPMCalculation","bpmCalculationInterval","bpmHistory","tempoLocked","fundamentalBPM","agentDetector","useAgentDetection","downbeatPhase","measureLength","isMusicalContent","musicalityScore","calculateBPM","agentStatus","analysisWindow","tempoCandidates","findTempoCandidates","bestCandidate","candidateBPM","recentBPMs","avgRecent","finalBPM","checkHarmonicRelation","maxChange","candidates","testIntervals","clusters","clusterIntervals","cluster","actualInterval","consistency","commonBPMBonus","currentCluster","bpm1","bpm2","detectTimeSignature","minOnsets","beatBins","recentOnsets","onset","beatPosition","binIndex","bin","detectedSig","testWaltzPattern","minReadings","counts","sig","mostCommon","maxCount","onsets","waltzGroups","totalGroups","first","second","getRecommendedSubdivision","getMusicInfo","isMusical","TransitionManager","transitionStartTime","easingFunction","previousShape","morphQueue","maxQueueSize","shadowConfig","startTransition","shape","getTransitionConfig","rawProgress","calculateShadowProgress","shadowIntensity","clearQueue","hasQueuedMorphs","queueLength","ShapeMorpher","morphDuration","transitionManager","audioDeformer","visualProgress","morphStartTime","shapeCache","currentPoints","targetPoints","lastAudioUpdate","lastVocalUpdate","audioUpdateInterval","bassEffectCooldown","vocalEffectCooldown","bassThresholdMultiplier","vocalThresholdMultiplier","queuedMorph","getShapePoints","shapesLoaded","shapeName","shapeDef","circlePoints","morphTo","force","completeMorph","transitionConfig","morphMode","isAnalyzing","audioData","getShapeMorpherData","hasNonZero","_loggedAudioData","wasBar","quantizedBeat","quantizedProgress","quantizationStrength","skipQueue","queued","hasQueuedMorph","normalizedPoints","getInterpolatedPoints","canvasPointsCache","canvasPoints","pointsArray","radialShapes","currentIsRadial","targetIsRadial","targetDx","targetDy","expandPhase","collapseProgress","spiral","fromShape","toShape","fadeInCrescent","slideOutCrescent","shadowSlideRatio","exitAngle","fadeEffects","bloomEffects","currentDef","targetDef","targetShadow","slideRatio","slideProgress","startOffset","currentOffset","shadowY","offsetProgress","lunarBlend","blendPhase","smoothBlend","smoothProgress","blendProgress","movementCurve","transformPhase","smoothTransform","crescentPhase","moveStart","exitPhase","smoothMove","fadeMultiplier","flaresOpacity","bloomProgress","getCurrentRenderer","resetMusicDetection","getCurrentMusicInfo","timeSigLocked","isInTransition","AudioAnalyzer","elementSource","connectedElement","frequencyBands","vocalRange","currentAmplitude","beatThreshold","bufferLength","connectAudioElement","audioElement","createMediaElementSource","analyze","timeData","getByteTimeDomainData","_debugLogged","freqMax","timeMax","timeMin","_debugCounter","vocalSum","vocalCount","binHz","vocalMinBin","vocalMaxBin","ceil","vocalAmplitude","extractFrequencyBands","detectBeat","bandsPerBin","startBin","endBin","newValue","getVocalInstability","variance","instability","GestureCompatibility","timingClasses","gestures","offbeat","continuous","fillPatterns","subtle","rhythmic","densityProfiles","sparse","fillProbability","subdivisionLevel","dense","chaos","maxSimultaneous","expression","dance","enhancingCombinations","incompatiblePairs","celebrate","greeting","mystical","party","chains","buildup","cascade","canExecuteSimultaneously","gesture1","gesture2","pair","group1","getGestureGroup","group2","groupName","getGesturePriority","getCompatibleGestures","used","normalizeGesture","canAdd","chordItem","chordGestureName","c","parseChain","chainString","trim","isEnhancingCombination","gestureNames","combo","every","getChord","chordName","createChord","compatible","isEnhancing","isValidGesture","getAllGestures","getGestureTiming","className","timingClass","getNextBeatForGesture","nextBeat","getFillGestures","scheduleGesturesMusically","scheduled","processed","gName","getIntensityFromBPM","fills","applySwingTiming","straightBeat","gestureCompatibility","GrooveTemplates","templates","straight","baseMovement","transitionStyle","emphasis","velocities","humanization","preferredGestures","compositeMove","shuffle","syncopation","weak","techno","one","ghost","hihat","instant","nextBar","nextPhrase","currentGroove","transitionMode","pendingGroove","getTemplate","getEmphasis","patternIndex","findIndex","getVelocity","getPreferredGesture","availableGestures","beatType","preferred","available","humanizeTiming","applySwing","setGroove","getBaseMovement","getTransitionStyle","getCompositeMove","shouldTriggerComposite","getLayeredGestures","composite","getGrooveNames","getGrooveInfo","template","AudioHandler","vocalUpdateInterval","disconnectAudio","clearInterval","connectAudio","setInterval","vocalInstability","previousAudioLevel","audioLevelProcessor","onSpeechStop","returnToBaseTime","setVolume","clampedVolume","GestureController","StateCoordinator","emotionIntensity","mappedEmotion","initialCount","emotionParams","VisualizationRunner","animationId","lastTime","animationController","orbX","orbY","orbPos","degradationManager","startMonitoring","audioHandler","stopMonitoring","gazeTracker","suspicionEmotion","idleBehavior","gazeState","isFocused","setGazeData","ConfigurationManager","validateConfig","canvasId","startingEmotion","emotionalResponsiveness","particleIntensity","showFPS","debugMode","renderMode","updates","EventManager","maxListeners","maxEventListeners","enableDebugging","enableEventDebugging","enableMonitoring","enableEventMonitoring","memoryWarningThreshold","eventMemoryWarningThreshold","browserOpts","enableAudio","defaultEmotion","enableAutoOptimization","enableGracefulDegradation","enableGazeTracking","enableIdleBehaviors","classicConfig","contextRecovery","grooveTemplates","wake","accessibilityManager","mobileOptimization","pluginSystem","performanceDegradation","then","rhythmEnabled","tts","currentUtterance","gestureController","stateCoordinator","visualizationRunner","configurationManager","enableDebug","setupAudioLevelProcessorCallbacks","handleDegradationEvent","applyDegradationSettings","express","gestureTriggered","errorData","markGestureStart","markGestureEnd","expressChord","fromScheduler","gestureScheduler","requestGesture","methodName","gestureEndTime","recordGestureTime","gestureConfig","currentModularGesture","defaultParams","GestureCompatibility$1","module","default","err","compatibleGestures","normalizedGesture","executeGestureDirectly","addSparkle","chain","firstStep","onSpeechStart","speak","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","pitch","voice","selectedVoice","getVoices","v","onstart","onend","onerror","onboundary","stopTTS","sleep","getTTSVoices","isTTSSpeaking","setBreathePattern","hold1","hold2","totalCycle","breathePattern","currentPhase","phaseStartTime","phaseProgress","startBreathingAnimation","setOrbScale","startScale","currentOrbScale","presets","meditative","deep","breathingAnimationId","phaseElapsed","nextPhase","stopBreathing","off","removeAllListeners","listenerCount","getEventNames","getEventStats","getEventDebugInfo","getDebugInfo","getBrowserCompatibility","getDegradationStatus","availableFeatures","getAvailableFeatures","recommendedSettings","getRecommendedSettings","performanceStats","getPerformanceStats","allLevels","getAllLevels","setDegradationLevel","setLevel","isFeatureAvailable","recoverCanvasContext","isCanvasContextLost","setDebugMode","report","currentState","performanceMetrics","audioStats","getAudioStats","eventStats","degradationStatus","debuggerReport","reportSize","sections","url","href","mascotState","metrics","debuggerData","dataSize","startProfiling","endProfiling","clearDebugData","getRuntimeCapabilities","renderStart","renderState","maxDist","stateProps","particleBehaviorOverride","particleModifier","cleanupPending","showDebug","renderDebugInfo","renderTime","lines","padding","maxWidth","line","measureText","borderColor","strokeRect","lineY","particleStats","debugInfo","debugWidth","getEmotionalColor","getAudioLevel","updateAudioConfig","getAvailableGestures","connectAudioSource","audioAnalyser","getVolume","pause","clampedFPS","getTargetFPS","setPerformanceDegradation","currentMax","newMax","isSpeaking","setAudioSmoothing","clampedSmoothing","getSystemStatus","rendererStats","animationMetrics","gestureActive","soundSystemAvailable","gradientCacheSize","eventListeners","errorStats","triggerTestError","setAccessibility","getMobileStatus","getAccessibilityStatus","newState","lang","setTTSSpeaking","charIndex","charLength","ttsSpeaking","setUndertone","getAvailableShapes"],"mappings":"oPA4CA,MAAMA,EACF,WAAAC,CAAYC,GACRC,KAAKD,OAASA,EAEdC,KAAKC,IAAMF,EAAOG,WAAW,KAAM,CAC/BC,OAAO,EACPC,gBAAgB,EAChBC,oBAAoB,IAExBL,KAAKM,IAAMC,OAAOC,kBAAoB,EACtCR,KAAKS,MAAQ,EACbT,KAAKU,OAAS,EACdV,KAAKW,QAAU,EACfX,KAAKY,QAAU,EAGfZ,KAAKa,gBAAkB,GAGvBb,KAAKc,aAAed,KAAKc,aAAaC,KAAKf,MAC3CO,OAAOS,iBAAiB,SAAUhB,KAAKc,cAGvCd,KAAKiB,QACT,CAKA,MAAAA,GAII,GAFwBjB,KAAKD,OAAOmB,aAAa,UAAYlB,KAAKD,OAAOmB,aAAa,UAEjE,CAGjB,MAAMC,EAAYC,SAASpB,KAAKD,OAAOsB,aAAa,SAAU,IACxDC,EAAaF,SAASpB,KAAKD,OAAOsB,aAAa,UAAW,IAGhErB,KAAKS,MAAQU,EACbnB,KAAKU,OAASY,EAGdtB,KAAKD,OAAOU,MAAQU,EACpBnB,KAAKD,OAAOW,OAASY,CAIzB,KAAO,CAEH,MAAMC,EAAOvB,KAAKD,OAAOyB,wBAGzBxB,KAAKS,MAAQc,EAAKd,MAClBT,KAAKU,OAASa,EAAKb,OAGnBV,KAAKD,OAAOU,MAAQT,KAAKS,MAAQT,KAAKM,IACtCN,KAAKD,OAAOW,OAASV,KAAKU,OAASV,KAAKM,IAGxCN,KAAKC,IAAIwB,MAAMzB,KAAKM,IAAKN,KAAKM,IAClC,CAGAN,KAAKW,QAAUX,KAAKS,MAAQ,EAC5BT,KAAKY,QAAUZ,KAAKU,OAAS,EAO7BV,KAAKa,gBAAgBa,QAAQC,IACzB,IACIA,EAAS3B,KAAKS,MAAOT,KAAKU,OAAQV,KAAKM,IAC3C,CAAE,MAAOsB,GACT,GAER,CAMA,QAAAC,CAASF,GACmB,mBAAbA,GACP3B,KAAKa,gBAAgBiB,KAAKH,EAElC,CAKA,YAAAb,GACIiB,aAAa/B,KAAKgC,eAClBhC,KAAKgC,cAAgBC,WAAW,KAC5BjC,KAAKiB,UACN,IACP,CAKA,KAAAiB,GACIlC,KAAKC,IAAIkC,UAAU,EAAG,EAAGnC,KAAKS,MAAOT,KAAKU,OAC9C,CAMA,SAAA0B,GACI,MAAO,CACHC,EAAGrC,KAAKW,QACR2B,EAAGtC,KAAKY,QAEhB,CASA,YAAA2B,CAAaF,EAAI,EAAGC,EAAI,EAAGb,EAAQ,EAAGe,EAAW,GAC7CxC,KAAKC,IAAIwC,OACTzC,KAAKC,IAAIyC,UAAUL,EAAGC,GACtBtC,KAAKC,IAAI0C,OAAOH,GAChBxC,KAAKC,IAAIwB,MAAMA,EAAOA,EAC1B,CAKA,gBAAAmB,GACI5C,KAAKC,IAAI4C,SACb,CAMA,UAAA3C,GACI,OAAOF,KAAKC,GAChB,CAMA,aAAA6C,GACI,MAAO,CACHrC,MAAOT,KAAKS,MACZC,OAAQV,KAAKU,OAErB,CAKA,OAAAqC,GACIxC,OAAOyC,oBAAoB,SAAUhD,KAAKc,cAC1CiB,aAAa/B,KAAKgC,cACtB,EChIJ,MAAMiB,EACF,WAAAnD,GACIE,KAAKkD,OAAS,GACdlD,KAAKmD,UAAY,GACjBnD,KAAKoD,YAAc,IAAIC,IAGvBrD,KAAKsD,SAAW,CACZC,QAAS,UACTC,QAAS,KACTC,WAAY,EACZC,cAAe,EACfC,cAAe,GACfC,SAAU,EACVC,WAAY,EACZC,MAAO,UAEf,CASA,IAAAC,CAAKC,EAAIC,EAASC,EAAgB,MAC9B,MAAO,IAAIC,KACP,IACI,OAAOH,KAAMG,EACjB,CAAE,MAAOvC,GAEL,OADA5B,KAAKoE,SAASxC,EAAOqC,GACI,OAAlBC,EAAyBA,EAAgBlE,KAAKqE,WAAWJ,EACpE,EAER,CAOA,QAAAG,CAASxC,EAAOqC,GACZ,MACMK,EAAa,CACfC,WAFc,IAAIC,MAAOC,cAGzBR,UACAS,QAAS9C,EAAM8C,QACfC,MAAO/C,EAAM+C,OAIjB3E,KAAKkD,OAAOpB,KAAKwC,GAGjB,MAAMM,EAAQ5E,KAAKoD,YAAYyB,IAAIZ,IAAY,EAC/CjE,KAAKoD,YAAY0B,IAAIb,EAASW,EAAQ,GAGlC5E,KAAKkD,OAAO6B,OAAS/E,KAAKmD,WAC1BnD,KAAKkD,OAAO8B,OAOpB,CAOA,UAAAX,CAAWJ,GAEP,MAAMgB,EAAkB,CACpB,qBAAsBjF,KAAKsD,SAASC,QACpC,oBAAqBvD,KAAKsD,SAASE,QACnC,mBAAoBxD,KAAKsD,SAASG,WAClC,kBAAmBzD,KAAKsD,SAASI,cACjCwB,UAAa,CACTvB,cAAe3D,KAAKsD,SAASK,cAC7BC,SAAU5D,KAAKsD,SAASM,SACxBE,MAAO9D,KAAKsD,SAASQ,OAEzB,oBAAqB,KACrB,mBAAoB9D,KAAKsD,SAASC,SAGtC,OAAO0B,EAAgBE,eAAelB,GAAWgB,EAAgBhB,GAAW,IAChF,CASA,aAAAmB,CAAcC,EAAOC,EAAMC,GACvB,IACI,OAAQD,GACJ,IAAK,UAED,MADsB,CAAC,UAAW,MAAO,UAAW,QAAS,OAAQ,WAAY,UAAW,OAAQ,YAC/EE,SAASH,GAASA,EAAQE,EAEnD,IAAK,YAED,OAAiB,OAAVF,GADiB,CAAC,UAAW,YAAa,QAAS,UAAW,WAC5BG,SAASH,GAASA,EAAQ,KAEvE,IAAK,UAED,MADsB,CAAC,SAAU,QAAS,QAAS,OAAQ,MAAO,OAAQ,SAAU,WAAY,QAAS,SACpFG,SAASH,GAASA,EAAQE,EAEnD,IAAK,SACD,MAAwB,iBAAVF,GAAuBI,MAAMJ,GAAiBE,EAARF,EAExD,IAAK,SACD,MAAwB,iBAAVA,EAAqBA,EAAQE,EAE/C,IAAK,UACD,MAAwB,kBAAVF,EAAsBA,EAAQE,EAEhD,QACI,OAAOF,QAAwCA,EAAQE,EAEnE,CAAE,MAAO3D,GAEL,OADA5B,KAAKoE,SAASxC,EAAO,oBACd2D,CACX,CACJ,CAQA,oBAAAG,CAAqBzB,EAAS0B,EAAY,GACtC,OAAQ3F,KAAKoD,YAAYyB,IAAIZ,IAAY,IAAM0B,CACnD,CAMA,aAAAC,GACI,MAAO,CACHC,YAAa7F,KAAKkD,OAAO6B,OACzBe,gBAAiBC,OAAOC,YAAYhG,KAAKoD,aACzC6C,aAAcjG,KAAKkD,OAAOgD,OAAM,GAExC,CAKA,WAAAC,GACInG,KAAKkD,OAAS,GACdlD,KAAKoD,YAAYlB,OACrB,CASA,qBAAMkE,CAAgBC,EAAWC,EAASC,EAAa,GACnD,IAAIC,EAAW,EAEf,KAAOA,EAAWD,GACd,IACI,aAAaD,GACjB,CAAE,MAAO1E,GAIL,GAHA4E,IACAxG,KAAKoE,SAASxC,EAAO,YAAYyE,aAAqBG,KAElDA,GAAYD,EACZ,MAAM,IAAIE,MAAM,uBAAuBJ,WAAmBE,oBAIxD,IAAIG,QAAQC,GAAW1E,WAAW0E,EAAiC,IAAxBC,KAAKC,IAAI,EAAGL,IACjE,CAER,EC/MG,SAASM,EAASC,GAarB,OARmB,KAHnBA,EAAMA,EAAIC,QAAQ,IAAK,KAGfjC,SACJgC,EAAMA,EAAIE,MAAM,IAAIC,IAAIC,GAAQA,EAAOA,GAAMC,KAAK,KAO/C,CAAEC,EAJCjG,SAAS2F,EAAIO,OAAO,EAAG,GAAI,IAIzBC,EAHFnG,SAAS2F,EAAIO,OAAO,EAAG,GAAI,IAGtBE,EAFLpG,SAAS2F,EAAIO,OAAO,EAAG,GAAI,IAGzC,CASO,SAASG,EAASJ,EAAGE,EAAGC,GAC3B,MAAME,EAASC,IACX,MAAMZ,EAAMH,KAAKgB,MAAMhB,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,IAAKH,KAAaI,SAAS,IACvE,OAAsB,IAAfhB,EAAIhC,OAAe,IAAMgC,EAAMA,GAG1C,MAAO,IAAIW,EAAML,KAAKK,EAAMH,KAAKG,EAAMF,IAC3C,CASO,SAASQ,EAASX,EAAGE,EAAGC,GAC3BH,GAAK,IACLE,GAAK,IACLC,GAAK,IAEL,MAAMK,EAAMjB,KAAKiB,IAAIR,EAAGE,EAAGC,GACrBM,EAAMlB,KAAKkB,IAAIT,EAAGE,EAAGC,GAC3B,IAAIS,EAAGC,EAAGC,GAAKN,EAAMC,GAAO,EAE5B,GAAID,IAAQC,EACRG,EAAIC,EAAI,MACL,CACH,MAAME,EAAIP,EAAMC,EAGhB,OAFAI,EAAIC,EAAI,GAAMC,GAAK,EAAIP,EAAMC,GAAOM,GAAKP,EAAMC,GAEvCD,GACJ,KAAKR,EAAGY,GAAKV,EAAIC,GAAKY,GAAKb,EAAIC,EAAI,EAAI,GAAI,MAC3C,KAAKD,EAAGU,GAAKT,EAAIH,GAAKe,EAAI,EAAG,MAC7B,KAAKZ,EAAGS,GAAKZ,EAAIE,GAAKa,EAAI,EAE9BH,GAAK,CACT,CAEA,MAAO,CAAEA,EAAO,IAAJA,EAASC,EAAO,IAAJA,EAASC,EAAO,IAAJA,EACxC,CASO,SAASE,EAASJ,EAAGC,EAAGC,GAC3BF,GAAK,IAELE,GAAK,IAEL,MAAMG,EAAU,CAACC,EAAGC,EAAGC,KACfA,EAAI,IAAGA,GAAK,GACZA,EAAI,IAAGA,GAAK,GACZA,EAAI,EAAE,EAAUF,EAAc,GAATC,EAAID,GAASE,EAClCA,EAAI,GAAYD,EAChBC,EAAI,EAAE,EAAUF,GAAKC,EAAID,IAAM,EAAE,EAAIE,GAAK,EACvCF,GAGX,IAAIlB,EAAGE,EAAGC,EAEV,GAAU,IAdVU,GAAK,KAeDb,EAAIE,EAAIC,EAAIW,MACT,CACH,MAAMK,EAAIL,EAAI,GAAMA,GAAK,EAAID,GAAKC,EAAID,EAAIC,EAAID,EACxCK,EAAI,EAAIJ,EAAIK,EAClBnB,EAAIiB,EAAQC,EAAGC,EAAGP,EAAI,EAAE,GACxBV,EAAIe,EAAQC,EAAGC,EAAGP,GAClBT,EAAIc,EAAQC,EAAGC,EAAGP,EAAI,EAAE,EAC5B,CAEA,MAAO,CACHZ,EAAGT,KAAKgB,MAAU,IAAJP,GACdE,EAAGX,KAAKgB,MAAU,IAAJL,GACdC,EAAGZ,KAAKgB,MAAU,IAAJJ,GAEtB,CA2BO,SAASkB,EAAeC,EAAQC,EAAQC,GAC3C,MAAMC,EAAOhC,EAAS6B,GAChBI,EAAOjC,EAAS8B,GAChBI,EAAOhB,EAASc,EAAKzB,EAAGyB,EAAKvB,EAAGuB,EAAKtB,GACrCyB,EAAOjB,EAASe,EAAK1B,EAAG0B,EAAKxB,EAAGwB,EAAKvB,GAG3C,IAAI0B,EAAKF,EAAKf,EACVkB,EAAKF,EAAKhB,EACVmB,EAAQD,EAAKD,EAEbE,EAAQ,IACRD,GAAM,IACCC,SACPD,GAAM,KAGV,MAOME,EAAMhB,IAPFa,GAAMC,EAAKD,GAAML,GAKD,IAAO,KAAO,IAJ9BG,EAAKd,GAAKe,EAAKf,EAAIc,EAAKd,GAAKW,EAC7BG,EAAKb,GAAKc,EAAKd,EAAIa,EAAKb,GAAKU,GAMvC,OAAOpB,EAAS4B,EAAIhC,EAAGgC,EAAI9B,EAAG8B,EAAI7B,EACtC,CAsFO,MAAM8B,EAAuB,CAChCC,QAAS,IACTC,UAAW,IACXC,QAAS,KACTvH,MAAO,EACPwH,MAAO,GACPC,QAAS,IASN,SAASC,EAAyB7C,EAAK8C,GAC1C,IAAKA,GAA2B,UAAdA,EACd,OAAO9C,EAGX,MAAM+C,EAASR,EAAqBO,EAAUE,eAC9C,OAAKD,GAAqB,IAAXA,EAxEZ,SAA0B/C,EAAK+C,GAClC,MAAMT,EAAMvC,EAASC,GACfiD,EAAMhC,EAASqB,EAAIhC,EAAGgC,EAAI9B,EAAG8B,EAAI7B,GAEvCwC,EAAI9B,EAAItB,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,IAAKkC,EAAI9B,EAAI4B,IAE1C,MAAMG,EAAc5B,EAAS2B,EAAI/B,EAAG+B,EAAI9B,EAAG8B,EAAI7B,GAC/C,OAAOV,EAASwC,EAAY5C,EAAG4C,EAAY1C,EAAG0C,EAAYzC,EAC9D,CAoEW0C,CAAiBnD,EAAK+C,GAHlB/C,CAIf,CClSO,SAASoD,EAAO1B,GACnB,OAAOA,CACX,CAOO,SAAS2B,EAAY3B,GACxB,OAAOA,GAAK,EAAIA,EACpB,CAOO,SAAS4B,EAAW5B,GACvB,OAAOA,EAAIA,CACf,CAOO,SAAS6B,EAAc7B,GAC1B,OAAOA,EAAI,GAAM,EAAIA,EAAIA,GAAU,EAAI,EAAIA,GAAKA,EAAnB,CACjC,CAOO,SAAS8B,EAAa9B,GACzB,OAAO,EAAI7B,KAAKC,IAAI,EAAI4B,EAAG,EAC/B,CAOO,SAAS+B,EAAY/B,GACxB,OAAOA,EAAIA,EAAIA,CACnB,CAOO,SAASgC,EAAehC,GAC3B,OAAOA,EAAI,GAAM,EAAIA,EAAIA,EAAIA,EAAI,EAAI7B,KAAKC,KAAI,EAAK4B,EAAI,EAAG,GAAK,CACnE,CAOO,SAASiC,EAAejC,GAC3B,MAAMkC,EAAM,EAAI/D,KAAKgE,GAAM,EAC3B,OAAa,IAANnC,EAAU,EAAU,IAANA,EAAU,EAAI7B,KAAKC,IAAI,GAAG,GAAM4B,GAAK7B,KAAKiE,KAAS,GAAJpC,EAAS,KAAQkC,GAAM,CAC/F,CAOO,SAASG,EAAcrC,GAC1B,MAAMsC,EAAK,OACLC,EAAK,KAEX,OAAIvC,EAAI,EAAIuC,EACDD,EAAKtC,EAAIA,EACTA,EAAI,EAAIuC,EACRD,GAAMtC,GAAK,IAAMuC,GAAMvC,EAAI,IAC3BA,EAAI,IAAMuC,EACVD,GAAMtC,GAAK,KAAOuC,GAAMvC,EAAI,MAE5BsC,GAAMtC,GAAK,MAAQuC,GAAMvC,EAAI,OAE5C,CAOO,SAASwC,EAAcxC,GAC1B,MACMyC,EAAKC,UAEX,OAAO1C,EAAI,GACJ7B,KAAKC,IAAI,EAAI4B,EAAG,IAAM,SAAeA,EAAIyC,GAAO,GAChDtE,KAAKC,IAAI,EAAI4B,EAAI,EAAG,KAAOyC,EAAK,IAAU,EAAJzC,EAAQ,GAAKyC,GAAM,GAAK,CACzE,CAOO,SAASE,EAAY3C,GACxB,OAAO7B,KAAKiE,IAAKpC,EAAI7B,KAAKgE,GAAM,EACpC,CAOO,SAASS,EAAc5C,GAC1B,QAAS7B,KAAK0E,IAAI1E,KAAKgE,GAAKnC,GAAK,GAAK,CAC1C,CAkCO,SAAS8C,EAAY1C,EAAU2C,EAAOC,EAAKC,EAAS,UAGvD,OAAOF,GAASC,EAAMD,IAFa,iBAAXE,EA3BA,CACpBvB,SACAC,cACAC,aACAC,gBACAC,eACAC,cACAC,iBACAC,iBACAI,gBACAG,gBACAG,cACAC,iBAe4DK,IAZhCvB,EAY0CuB,GAC3C9E,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAGe,IAE3D,CD4LoC9C,OAAOC,YACvCD,OAAO4F,QAfqB,CAC5BC,QAAS,UACTC,IAAK,UACLC,QAAS,UACTC,MAAO,UACPC,KAAM,UACNC,SAAU,UACVC,QAAS,UACTC,KAAM,YAO2BjF,IAAI,EAAE3D,EAASwD,MAC5C,MAAMsC,EAAMvC,EAASC,GACrB,MAAO,CAACxD,EAAS,GAAG8F,EAAIhC,MAAMgC,EAAI9B,MAAM8B,EAAI7B,QE1WpD,MAAM4E,EAAiB,IAAI/I,IA4H3B,IAAAgJ,EA5DO,SAA0BC,GAC7B,OAAOF,EAAevH,IAAIyH,IAAS,IACvC,EA0DAD,EApDO,WACH,OAAOE,MAAMC,KAAKJ,EAAeK,OACrC,EC5FAC,EAAe,CACXJ,KAAM,YACNK,MAAO,KACPC,YAAa,mDAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,IACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,eAClBC,cAAe,GACftJ,WAAY,GACZuJ,YAAa,IACbC,WAAY,IACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAGhCC,YAAa,EACbC,iBAAkB,WACd,MAAO,GAA0B,GAAnBzN,KAAKwN,WACvB,EACAE,iBAAkB,WACd,MAAO,GAA0B,GAAnB1N,KAAKwN,WACvB,EACAG,aAAc,WAEV,MAGMlF,EAAIzI,KAAKwN,aAAe,EAExBnG,EAAIT,KAAKgB,MALQ,IAKY,IAA+Ba,GAC5DlB,EAAIX,KAAKgB,MANgB,IAMI,GAA+Ba,GAC5DjB,EAAIZ,KAAKgB,MAPuB,KAOH,GAA+Ba,GAG5Df,EAASkG,GAAQA,EAAI7F,SAAS,IAAI8F,SAAS,EAAG,KACpD,MAAO,IAAInG,EAAML,KAAKK,EAAMH,KAAKG,EAAMF,IAC3C,GAIJsG,UAAW,CACPC,MAAO,GACPC,UAAW,GACXC,UAAW,IACXC,WAAY,GACZC,WAAY,GACZC,MAAO,IACPC,WAAW,GAIfC,gBAAiB,CAAC,OAAQ,SAAU,OAAQ,OAAQ,QAGpDC,YAAa,CACTC,SAAU,IACV9C,OAAQ,SACR+C,SAAU,GAIdC,QAAS,CACLC,WAAY,GACZC,aAAc,IACdC,aAAc,KACdC,UAAW,GACXC,aAAc,IACdC,aAAc,IACdC,kBAAmB,IACnBC,eAAgB,KC/ExBC,EAAe,CACX7C,KAAM,SACNK,MAAO,IACPC,YAAa,oDAGbC,OAAQ,CACJuC,aAAc,UACdtC,UAAW,UACXnJ,cAAe,IACfoJ,aAAc,GACdC,aAAc,GACdC,aAAc,GACdC,iBAAkB,UAClBC,cAAe,IACftJ,WAAY,GACZuJ,YAAa,IACbC,WAAY,IACZzJ,SAAU,IACVyL,YAAa,EACb/B,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,GAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,GAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAGhC+B,gBAAiB,GACjBC,cAAe,IACfC,UAAU,EACVC,cAAc,EACdhC,iBAAkB,WAEd,OAAI7G,KAAK8I,SAAW1P,KAAKuP,cACd,GAAsB,IAAhB3I,KAAK8I,SAEf1P,KAAK2D,aAChB,EACAgK,aAAc,WAEV,GAAI/G,KAAK8I,SAAW,IAAM,CACtB,MAAMC,EAAe,CAAC,UAAW,UAAW,UAAW,UAAW,WAClE,OAAOA,EAAa/I,KAAKgJ,MAAMhJ,KAAK8I,SAAWC,EAAa5K,QAChE,CACA,OAAO/E,KAAK8M,SAChB,GAIJgB,UAAW,CACPC,MAAO,EACPC,UAAW,GACXC,UAAW,IACXC,WAAY,GACZC,WAAY,GACZC,MAAO,GACPyB,WAAW,EACXC,YAAY,GAIhBxB,gBAAiB,CAAC,SAAU,SAAU,UAAW,QAAS,QAAS,WAGnEC,YAAa,CACTC,SAAU,IACV9C,OAAQ,SACR+C,SAAU,EACVsB,UAAU,GAIdrB,QAAS,CACLsB,gBAAiB,GACjBC,gBAAiB,GACjBC,UAAW,EACXC,gBAAgB,EAChBC,eAAgB,IAChBC,gBAAiB,EACjBC,kBAAmB,KC3E3BC,EAAe,CACXjE,KAAM,OACNK,MAAO,KACPC,YAAa,+CAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,GACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,MAClBrJ,WAAY,GACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAKpCO,UAAW,CACPC,MAAO,GACPC,UAAW,GACXC,UAAW,GACXC,WAAY,EACZC,WAAY,IACZqC,WAAW,EACXC,YAAa,GACbC,WAAY,IACZlC,SAAU,KAIdF,gBAAiB,CACb,UACA,QACA,QACA,QAIJC,YAAa,CACTC,SAAU,IACV9C,OAAQ,gBACR+C,SAAU,GAIdkC,MAAO,CACHC,aAAc,aACdC,gBAAiB,KACjBC,aAAc,KACdC,eAAgB,IAIpBC,cAAe,CACXC,QAAS,eACTC,UAAW,OACXC,cAAc,EACdC,YAAY,EACZC,YAAa,GACbC,WAAY,IAIhBC,eAAgB,CACZC,UAAW,GACXC,YAAa,OACbC,UAAW,OACXC,cAAe,cACftC,YAAa,KAIjBuC,SAAU,CACNC,aAAc,YACdC,YAAa,IACbC,eAAgB,EAChBC,YAAa,SACbC,WAAY,IACZC,cAAe,EACfC,gBAAgB,GAQpBC,cAAe,SAASC,GACpB,MAAMC,EAAOD,EAAMC,MAAQ9N,KAAK+N,MAC1BC,EAAwC,GAA1B5L,KAAKiE,IAAW,KAAPyH,GAAuB,GAEpD,MAAO,CACHG,OAAQ,EAAqB,IAAdD,EACfE,OAAQ,EAAqB,IAAdF,EACfnD,YAAa,IACbsD,cAAe,SACfC,YAAa,CACTvQ,EAA6B,EAA1BuE,KAAKiE,IAAW,KAAPyH,GACZhQ,EAA6B,EAA1BsE,KAAK0E,IAAW,KAAPgH,IAEhBO,UAAW,IAAsB,IAAdL,EAE3B,EAOAM,eAAgB,SAASC,EAAUC,GAE/BD,EAAS1Q,GAAuC,GAAlCuE,KAAKiE,IAAoB,KAAhBkI,EAASE,MAChCF,EAASzQ,GAAiB,IAAZ0Q,EAGdD,EAASG,QAA4C,GAAlCtM,KAAKiE,IAAoB,KAAhBkI,EAASE,MAAsB,GAG3DF,EAASI,KAAOJ,EAASK,UAAY,EAAsC,GAAlCxM,KAAKiE,IAAoB,KAAhBkI,EAASE,MAC/D,EAUAI,WAAY,SAASpT,EAAKoC,EAAGC,EAAGgR,GAE5B,OAAO,CACX,GClHJ,MAAMC,EAAkB,IAAIlQ,IAGtBmQ,EAAiB,CACnBC,MAAS,MACTC,SAAY,OACZC,QAAW,WACXC,WAAc,QACdC,IAAO,WA4BJ,SAASC,EAAWC,GAEvB,MAAMC,EAAeR,EAAeO,IAAgBA,EAG9CE,EAAcV,EAAgB1O,IAAImP,GACxC,GAAIC,EACA,OAAOA,EAKX,OADsBC,EAA+BF,IAK9C,IACX,CAOO,SAASG,EAAuBJ,GACnC,MAAMxQ,EAAUuQ,EAAWC,GAC3B,IAAKxQ,EACD,OAAOuQ,EAAW,WAAWjH,OAIjC,IAAKtJ,EAAQsJ,OACT,MAAO,CAAA,EAIX,MAAMA,EAAStJ,EAAQsJ,OACjBuH,EAAS,CAAA,EAGf,IAAK,MAAMC,KAAOxH,EACa,mBAAhBA,EAAOwH,KACdD,EAAOC,GAAOxH,EAAOwH,IAqB7B,MAhBuC,mBAA5BxH,EAAOY,mBACd2G,EAAOzQ,cAAgBkJ,EAAOY,iBAAiB6G,KAAKzH,IAGjB,mBAA5BA,EAAOa,mBACd0G,EAAOjH,cAAgBN,EAAOa,iBAAiB4G,KAAKzH,IAGlB,mBAA3BA,EAAO0H,kBACdH,EAAOrH,aAAeF,EAAO0H,gBAAgBD,KAAKzH,IAGnB,mBAAxBA,EAAOc,eACdyG,EAAOtH,UAAYD,EAAOc,aAAa2G,KAAKzH,IAGzCuH,CACX,CAxFA,CCvCe,CACX9H,KAAM,UACNK,MAAO,KACPC,YAAa,iCAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,GACfoJ,aAAc,EACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,UAClBrJ,WAAY,EACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAKpCO,UAAW,CACPC,MAAO,EACPC,UAAW,EACXC,UAAW,EACXC,WAAY,EACZC,WAAY,GAIhBG,gBAAiB,CACb,UACA,QACA,OACA,SAIJC,YAAa,CACTC,SAAU,IACV9C,OAAQ,YACR+C,SAAU,GAIdkC,MAAO,CACHC,aAAc,KACdC,gBAAiB,KACjBC,aAAc,MAIlBE,cAAe,CACXC,QAAS,SACTC,UAAW,SACXC,cAAc,EACdC,YAAY,GAIhBG,eAAgB,CACZC,UAAW,EACXC,YAAa,UACbC,UAAW,SACXC,cAAe,UAQnBS,cAAe,SAASC,GACpB,MAAO,CACHI,OAAQ,EACRC,OAAQ,EACRrD,YAAa,EACbsD,cAAe,UACfC,YAAa,CAAEvQ,EAAG,EAAGC,EAAG,GAEhC,EAUA+Q,WAAY,SAASpT,EAAKoC,EAAGC,EAAGgR,GAE5B,OAAO,CACX,GCpGW,CACXhH,KAAM,MACNK,MAAO,KACPC,YAAa,oCAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,IACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,UAClBrJ,WAAY,IACZuJ,YAAa,GACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAKpCO,UAAW,CACPC,MAAO,IACPC,UAAW,IACXC,UAAW,IACXC,WAAY,EACZC,WAAY,GACZqG,WAAW,GAIflG,gBAAiB,CACb,SACA,OACA,OACA,SACA,QACA,SAIJC,YAAa,CACTC,SAAU,IACV9C,OAAQ,cACR+C,SAAU,EACV0C,cAAc,GAIlBR,MAAO,CACHC,aAAc,eACdC,gBAAiB,MACjBC,aAAc,UAIlBE,cAAe,CACXC,QAAS,WACTC,UAAW,QACXC,cAAc,EACdC,YAAY,EACZqD,cAAe,WAInBlD,eAAgB,CACZC,UAAW,IACXC,YAAa,UACbC,UAAW,WACXC,cAAe,KACf8C,cAAe,WAInBC,OAAQ,CACJC,SAAS,EAGTC,iBAAkB,CACdC,SAAU,OACVC,UAAW,EACXC,YAAa,GACbC,aAAa,GAIjBC,WAAY,CACRC,KAAM,QACNC,eAAgB,EAChBlH,UAAW,KAIfmH,SAAU,CACNC,eAAgB,CAAC,IAAK,KACtBC,OAAQ,OACRC,OAAQ,IACRC,MAAO,IAIXC,iBAAkB,CACdC,MAAS,CAELd,iBAAkB,CAAEE,UAAW,GAC/BG,WAAY,CAAEE,eAAgB,IAElCQ,MAAS,CAELf,iBAAkB,CACdC,SAAU,QACVC,UAAW,GAEfM,SAAU,CAAEQ,MAAO,WAEvBC,QAAW,CAEPjB,iBAAkB,CACdE,UAAW,GACXgB,eAAgB,IAGxBC,UAAa,CAETnB,iBAAkB,CACdC,SAAU,SACVmB,WAAY,CAAC,EAAG,QAShC5D,cAAe,SAASC,GACpB,MAAO,CACHI,OAAQ,EACRC,OAAQ,EACRrD,YAAa,EACbsD,cAAe,QACfC,YAAa,CAAEvQ,EAAG,EAAGC,GAAG,IACxB2T,SAAS,EAEjB,GC3JW,CACX3J,KAAM,UACNK,MAAO,KACPC,YAAa,0BAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,IACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,UAClBrJ,WAAY,GACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAKpCO,UAAW,CACPC,MAAO,GACPC,UAAW,GACXC,UAAW,GACXC,WAAY,IACZC,WAAY,IACZ+H,YAAY,GAIhB5H,gBAAiB,CACb,QACA,OACA,WACA,QACA,QAIJC,YAAa,CACTC,SAAU,IACV9C,OAAQ,YACR+C,SAAU,IC9CH,CACXnC,KAAM,QACNK,MAAO,KACPC,YAAa,8BAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,IACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,aAClBrJ,WAAY,IACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAKpCO,UAAW,CACPC,MAAO,IACPC,UAAW,IACXC,UAAW,IACXC,WAAY,GACZC,WAAY,GACZgI,UAAU,GAId7H,gBAAiB,CACb,QACA,UACA,SACA,QACA,UACA,UAIJC,YAAa,CACTC,SAAU,IACV9C,OAAQ,cACR+C,SAAU,EACV2H,cAAc,GAIlBzF,MAAO,CACHC,aAAc,SACdC,gBAAiB,YACjBC,aAAc,SAIlBE,cAAe,CACXC,QAAS,YACTC,UAAW,UACXC,cAAc,EACdC,YAAY,EACZqD,cAAe,UAInBlD,eAAgB,CACZC,UAAW,GACXC,YAAa,QACbC,UAAW,OACXC,cAAe,UACf8C,cAAe,SACf4B,UAAW,SAIf3H,QAAS,CACL4H,aAAa,EACbC,eAAgB,OAChB1D,WAAW,EACX2D,kBAAmB,QC9FZ,CACXlK,KAAM,OACNK,MAAO,KACPC,YAAa,uCAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,GACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,aAClBrJ,WAAY,IACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,GAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAKpCO,UAAW,CACPC,MAAO,IACPC,UAAW,GACXC,UAAW,IACXC,WAAY,GACZC,WAAY,GACZsI,WAAW,GAIfnI,gBAAiB,CAAC,QAAS,UAAW,WAAY,UAAW,WAG7DC,YAAa,CACTC,SAAU,IACV9C,OAAQ,UACR+C,SAAU,IC5CH,CACXnC,KAAM,WACNK,MAAO,KACPC,YAAa,wCAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,IACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,QAClBrJ,WAAY,GACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAKpCO,UAAW,CACPC,MAAO,IACPC,UAAW,IACXC,UAAW,IACXC,WAAY,GACZC,WAAY,GACZuI,QAAQ,GAIZpI,gBAAiB,CAAC,SAAU,SAAU,QAAS,QAAS,OAGxDC,YAAa,CACTC,SAAU,IACV9C,OAAQ,cACR+C,SAAU,IC5CH,CACXnC,KAAM,UACNK,MAAO,KACPC,YAAa,qCAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,EACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,YAClBrJ,WAAY,GACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,GAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAKpCO,UAAW,CACPC,MAAO,GACPC,UAAW,GACXC,UAAW,GACXC,WAAY,GACZC,WAAY,EACZwI,WAAW,GAIfrI,gBAAiB,CAAC,WAAY,QAAS,SAAU,UAGjDC,YAAa,CACTC,SAAU,IACV9C,OAAQ,SACR+C,SAAU,IC5CH,CACXnC,KAAM,OACNK,MAAO,KACPC,YAAa,yCAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,IACfoJ,aAAc,GACdC,aAAc,GACdC,aAAc,GACdC,iBAAkB,WAClBrJ,WAAY,IACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,GAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAKpCO,UAAW,CACPC,MAAO,GACPC,UAAW,IACXC,UAAW,IACXC,WAAY,IACZC,WAAY,IACZyI,WAAW,GAIftI,gBAAiB,CAAC,QAAS,OAAQ,QAAS,OAAQ,UAAW,SAG/DC,YAAa,CACTC,SAAU,IACV9C,OAAQ,YACR+C,SAAU,GAIdiG,OAAQ,CACJC,SAAS,EAGTC,iBAAkB,CACdC,SAAU,OACVC,UAAW,EACXC,YAAa,IAIjB8B,YAAa,CACTC,gBAAiB,CACbC,OAAQ,IACRC,QAAS,GACTpB,MAAO,QAEXqB,WAAY,CACRtC,SAAS,EACTuC,YAAa,UACbC,OAAQ,MAKhB/B,SAAU,CACNC,eAAgB,CAAC,IAAK,GACtBC,OAAQ,OACRC,OAAQ,GACRC,MAAO,IAIXP,WAAY,CACRC,KAAM,OACNkC,cAAe,EACfnJ,UAAW,GAIfwH,iBAAkB,CACdC,MAAS,CAELmB,YAAa,CACTI,WAAY,CAAEC,YAAa,MAAOC,OAAQ,MAE9CvC,iBAAkB,CAAEC,SAAU,MAAOC,UAAW,IAEpDa,MAAS,CAELkB,YAAa,CACTC,gBAAiB,CAAEC,OAAQ,IAAKnB,MAAO,aAMnDyB,iBAAkB,CACdC,IAAK,CAAEvK,aAAc,GAAKpJ,cAAe,IACzC4T,OAAQ,CAAExK,aAAc,EAAKpJ,cAAe,GAC5C6T,KAAM,CAAEzK,aAAc,IAAKpJ,cAAe,QR5D/C+I,EShDQ,CACXJ,KAAM,UACNK,MAAO,KACPC,YAAa,mCAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,IACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,QAClBrJ,WAAY,EACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAKpCO,UAAW,CACPC,MAAO,IACPC,UAAW,IACXC,UAAW,IACXC,WAAY,GACZC,WAAY,GACZsJ,cAAc,GAIlBnJ,gBAAiB,CAAC,SAAU,OAAQ,UAAW,SAAU,QAAS,SAGlEC,YAAa,CACTC,SAAU,IACV9C,OAAQ,iBACR+C,SAAU,GAIdiG,OAAQ,CACJC,SAAS,EAGTC,iBAAkB,CACdC,SAAU,OACVC,UAAW,EACXC,YAAa,IAIjB2C,WAAY,CACRR,YAAa,YACbjJ,UAAW,GACX8I,OAAQ,KAIZ3B,SAAU,CACNC,eAAgB,CAAC,EAAK,KACtBC,OAAQ,SACRC,OAAQ,IACRC,MAAO,IAIXC,iBAAkB,CACdI,QAAW,CAEPjB,iBAAkB,CACdC,SAAU,OACVC,UAAW,GACXgB,eAAgB,IAGxBC,UAAa,CAET2B,WAAY,CACRR,YAAa,SACbjJ,UAAW,OCvFhB,CACX3B,KAAM,UACNK,MAAO,KACPC,YAAa,kCAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,GACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,EACdC,iBAAkB,UAClBrJ,WAAY,GACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,MAKpCO,UAAW,CACPC,MAAO,GACPC,UAAW,GACXC,UAAW,GACXC,WAAY,IACZC,WAAY,GACZqC,WAAW,GAIflC,gBAAiB,CAAC,UAAW,QAAS,OAAQ,SAG9CC,YAAa,CACTC,SAAU,IACV9C,OAAQ,YACR+C,SAAU,IC1CH,CACXnC,KAAM,WACNK,MAAO,KACPC,YAAa,kCAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,EACfoJ,aAAc,GACdC,aAAc,GACdC,aAAc,GACdC,iBAAkB,UAClBrJ,WAAY,IACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,GAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAKpCO,UAAW,CACPC,MAAO,IACPC,UAAW,IACXC,UAAW,IACXC,WAAY,IACZC,WAAY,GACZyI,WAAW,EACXe,SAAS,GAIbrJ,gBAAiB,CAAC,SAAU,UAAW,QAAS,OAAQ,QAAS,SAGjEC,YAAa,CACTC,SAAU,IACV9C,OAAQ,cACR+C,SAAU,IC9CH,CACXnC,KAAM,UACNK,MAAO,KACPC,YAAa,2CAGbC,OAAQ,CACJC,UAAW,UACXnJ,cAAe,IACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,WAClBrJ,WAAY,IACZuJ,YAAa,IACbC,YAAY,EACZC,eAAgB,CACZ,CAAExJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,IAC5B,CAAEzJ,MAAO,UAAWyJ,OAAQ,KAEhC8B,YAAa,GACbuI,kBAAkB,GAItB9J,UAAW,CACPC,MAAO,EACPC,UAAW,GACXC,UAAW,IACXC,WAAY,IACZC,WAAY,IACZ0J,cAAc,GAIlBvJ,gBAAiB,CAAC,QAAS,OAAQ,OAAQ,QAAS,WAGpDC,YAAa,CACTC,SAAU,IACV9C,OAAQ,SACR+C,SAAU,GAId2D,cAAe,SAASC,GACpB,MAAO,CACHI,OAAQ,IACRC,OAAQ,GACRrD,YAAa,GACbsD,cAAe,UACfC,YAAa,CAAEvQ,EAAG,EAAGC,EAAG,GACxBsV,kBAAkB,EAE1B,GZTmDzI,EAAQoB,GAAM7O,QAAQ6B,IACrEA,GAAWA,EAAQ+I,MACnBiH,EAAgBzO,IAAIvB,EAAQ+I,KAAM/I,KasB1C,MAAMuU,EACF,WAAAhY,CAAYiY,GACR/X,KAAK+X,cAAgBA,EAGrB/X,KAAKqS,MAAQ,CACT9O,QAAS,UACTsG,UAAW,KACXrG,QAAS,KACTwU,aAAc,GACdC,UAAU,EACVxU,WAAY,GAIhBzD,KAAKuO,YAAc,CACf2J,UAAW,CACPC,QAAS,UACTC,OAAQ,KACRvP,SAAU,EACV2F,SAAU,IACV6J,UAAW,EACXC,UAAU,GAEdzO,UAAW,CACPsO,QAAS,KACTC,OAAQ,KACRvP,SAAU,EACV2F,SAAU,IACV6J,UAAW,EACXC,UAAU,EACVC,cAAe,EACfC,aAAc,IAKtBxY,KAAKyY,mBAAqB,CACtBC,WAAY,EACZC,cAAe,IACfC,iBAAkB,KAClBC,kBAAmB,MAIvB7Y,KAAK8Y,4BACL9Y,KAAK+Y,8BACT,CAKA,yBAAAD,GACI9Y,KAAKgZ,gBAAkB,CACnBpN,QAAS,CACLwD,aAAc,UACdzL,cAAe,GACfoJ,aAAc,EACdC,aAAc,EACdC,aAAc,EACdC,iBAAkB,UAClBtJ,SAAU,EACVC,WAAY,EACZuJ,YAAa,IAEjBvB,IAAK,CACDuD,aAAc,UACdzL,cAAe,IACfoJ,aAAc,EACdC,aAAc,EACdC,aAAc,EACdC,iBAAkB,UAClBtJ,SAAU,IACVC,WAAY,IACZuJ,YAAa,KAEjBtB,QAAS,CACLsD,aAAc,UACdzL,cAAe,GACfoJ,aAAc,EACdC,aAAc,EACdC,aAAc,EACdC,iBAAkB,UAClBtJ,SAAU,GACVC,WAAY,GACZuJ,YAAa,KAEjBrB,MAAO,CACHqD,aAAc,UACdzL,cAAe,IACfoJ,aAAc,EACdC,aAAc,EACdC,aAAc,EACdC,iBAAkB,aAClBtJ,SAAU,IACVC,WAAY,IACZuJ,YAAa,IAEjBpB,KAAM,CACFoD,aAAc,UACdzL,cAAe,GACfoJ,aAAc,EACdC,aAAc,EACdC,aAAc,EACdC,iBAAkB,aAClBtJ,SAAU,GACVC,WAAY,IACZuJ,YAAa,KAEjBnB,SAAU,CACNmD,aAAc,UACdzL,cAAe,IACfoJ,aAAc,EACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,QAClBtJ,SAAU,IACVC,WAAY,EACZuJ,YAAa,KAEjBlB,QAAS,CACLkD,aAAc,UACdzL,cAAe,GACfoJ,aAAc,EACdC,aAAc,EACdC,aAAc,EACdC,iBAAkB,YAClBtJ,SAAU,IACVC,WAAY,GACZuJ,YAAa,KAEjBjB,KAAM,CACFiD,aAAc,UACdzL,cAAe,IACfoJ,aAAc,EACdC,aAAc,EACdC,aAAc,EACdC,iBAAkB,WAClBtJ,SAAU,KACVC,WAAY,GACZuJ,YAAa,KAEjB6L,QAAS,CACL7J,aAAc,UACdzL,cAAe,IACfoJ,aAAc,IACdC,aAAc,IACdC,aAAc,IACdC,iBAAkB,QAClBtJ,SAAU,IACVC,WAAY,IACZuJ,YAAa,IACbiC,YAAa,GAEjB6J,QAAS,CACL9J,aAAc,UACdzL,cAAe,GACfoJ,aAAc,EACdC,aAAc,EACdC,aAAc,EACdC,iBAAkB,UAClBtJ,SAAU,EACVC,WAAY,GACZuJ,YAAa,KAEjB+L,SAAU,CACN/J,aAAc,UACdzL,cAAe,IACfoJ,aAAc,EACdC,aAAc,GACdC,aAAc,GACdC,iBAAkB,UAClBtJ,SAAU,KACVC,WAAY,IACZuJ,YAAa,KAEjBgM,QAAS,CACLhK,aAAc,UACdzL,cAAe,IACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,EACdC,iBAAkB,WAClBtJ,SAAU,KACVC,WAAY,IACZuJ,YAAa,IACbiC,YAAa,GACbuI,kBAAkB,GAEtBlL,UAAW,CACP0C,aAAc,UACdzL,cAAe,GACfoJ,aAAc,GACdC,aAAc,EACdC,aAAc,GACdC,iBAAkB,QAClBtJ,SAAU,EACVC,WAAY,GACZuJ,YAAa,IACbiC,YAAa,GACbgK,QAAQ,IAGpB,CAKA,4BAAAN,GACI/Y,KAAKsZ,mBAAqB,CACtB7P,QAAS,CACL8P,aAAc,GACdC,qBAAsB,IACtBC,wBAAyB,GACzBC,uBAAwB,KAE5BlQ,UAAW,CACPmQ,mBAAoB,IACpBF,wBAAyB,IACzBD,qBAAsB,GACtBE,uBAAwB,GAE5BhQ,MAAO,CACH8P,qBAAsB,GACtBE,uBAAwB,GACxBD,wBAAyB,GACzBE,mBAAoB,KAExBpQ,QAAS,CACLqQ,oBAAqB,KAEzBjQ,QAAS,CACLkQ,gBAAiB,IAG7B,CASA,UAAAC,CAAWvW,EAASsG,EAAY,KAAM2E,EAAW,KAC7C,OAAOxO,KAAK+X,cAAchU,KAAK,KAM3B,GAJA/D,KAAKyY,mBAAmBG,iBAAmB,KAC3C5Y,KAAKyY,mBAAmBI,kBAAoB,Mb/IjD,SAAoB9E,GACvB,MAAMC,EAAeR,EAAeO,IAAgBA,EACpD,OAAOR,EAAgBwG,IAAI/F,IAAkE,OAAjDE,EAA+BF,EAC/E,Ca+IiBgG,CAAWzW,KAAavD,KAAKgZ,gBAAgB7T,eAAe5B,GAAU,CACvE,MAAM0W,EAAgB,IAAIlU,OAAO0G,KAAKzM,KAAKgZ,oBbzKlCzM,MAAMC,KAAK+G,EAAgB9G,WACzByH,KayKLgG,EAAiB,IAAI,IAAIC,IAAIF,IACnC,MAAM,IAAIxT,MAAM,oBAAoBlD,sBAA4B2W,EAAe9S,KAAK,QACxF,CAGA,GAAkB,OAAdyC,IAAuB7J,KAAKsZ,mBAAmBnU,eAAe0E,GAC9D,MAAM,IAAIpD,MAAM,sBAAsBoD,wBAAgC9D,OAAO0G,KAAKzM,KAAKsZ,oBAAoBlS,KAAK,SAIpH,OAAIpH,KAAKqS,MAAM9O,UAAYA,GAAWvD,KAAKqS,MAAMxI,YAAcA,IAK3D7J,KAAKqS,MAAM9O,UAAYA,IACnBiL,EAAW,GACXxO,KAAKuO,YAAY2J,UAAY,CACzBC,QAASnY,KAAKqS,MAAM9O,QACpB6U,OAAQ7U,EACRsF,SAAU,EACV2F,SAAU5H,KAAKiB,IAAI,IAAK2G,GACxB6J,UAAW+B,YAAY7H,MACvB+F,UAAU,QAIc+B,IAAxBra,KAAKsa,IACLta,KAAKsa,EAAiB,IAI1Bta,KAAKuO,YAAY2J,UAAY,CACzBC,QAAS5U,EACT6U,OAAQ,KACRvP,SAAU,EACV2F,SAAU,EACV6J,UAAW+B,YAAY7H,MACvB+F,UAAU,GAGlBtY,KAAKqS,MAAM9O,QAAUA,GAIrBvD,KAAKqS,MAAMxI,YAAcA,IACzB7J,KAAKuO,YAAY1E,UAAY,CACzBsO,QAASnY,KAAKqS,MAAMxI,UACpBuO,OAAQvO,EACRhB,SAAU,EACV2F,SAAU,IACV6J,UAAW+B,YAAY7H,MACvB+F,UAAU,EACVC,cAAevY,KAAKqS,MAAMxI,UAAY,EAAI,EAC1C2O,aAAc3O,EAAY,EAAI,GAElC7J,KAAKqS,MAAMxI,UAAYA,KA7ChB,GAiDZ,mBAAmB,EApEf7J,EAqEX,CAQA,cAAAua,CAAeC,EAAgB3Q,GAC3B,IAAKA,IAAc7J,KAAKsZ,mBAAmBnU,eAAe0E,GACtD,MAAO,IAAK2Q,GAGhB,MAAMC,EAAWza,KAAKsZ,mBAAmBzP,GACnC6Q,EAAW,IAAKF,GAiBtB,QAdyCH,IAArCI,EAAShB,0BACTiB,EAAS/W,eAAiB8W,EAAShB,8BAEDY,IAAlCI,EAASjB,uBACTkB,EAAS7W,YAAc4W,EAASjB,2BAEIa,IAApCI,EAASf,yBACTgB,EAAS3N,aAAenG,KAAKgB,MAAM8S,EAAS3N,aAAe0N,EAASf,8BAEpCW,IAAhCI,EAASd,qBACTe,EAAS9W,UAAY6W,EAASd,yBAIGU,IAAjCI,EAASb,oBAAmC,CAC5C,MAAM9P,EAAS2Q,EAASb,oBACxBc,EAAS/W,eAAiBmG,EAC1B4Q,EAAS7W,YAAciG,EACvB4Q,EAAS3N,aAAenG,KAAKgB,MAAM8S,EAAS3N,aAAejD,GAC3D4Q,EAAS9W,UAAYkG,CACzB,CACA,QAAiCuQ,IAA7BI,EAASZ,gBAA+B,CACxC,MAAM/P,EAAS2Q,EAASZ,gBACxBa,EAAS/W,eAAiBmG,EAC1B4Q,EAAS7W,YAAciG,EACvB4Q,EAAS3N,aAAenG,KAAKgB,MAAM8S,EAAS3N,aAAejD,GAC3D4Q,EAAS9W,UAAYkG,CACzB,CAOA,YAJ8BuQ,IAA1BI,EAASlB,eACTmB,EAASnB,aAAekB,EAASlB,cAG9BmB,CACX,CAMA,MAAAC,CAAO3H,GACHhT,KAAK+X,cAAchU,KAAK,KAEhB/D,KAAKuO,YAAY2J,UAAUI,UAC3BtY,KAAK4a,0BAA0B5H,GAI/BhT,KAAKuO,YAAY1E,UAAUyO,UAC3BtY,KAAK6a,0BAA0B7H,IAEpC,uBAVHhT,EAWJ,CAMA,yBAAA6a,CAA0B7H,GACtB,MAAM8H,EAAa9a,KAAKuO,YAAY1E,UAG9BkR,EAAUX,YAAY7H,MAAQuI,EAAWzC,UACzCxP,EAAWjC,KAAKkB,IAAIiT,EAAUD,EAAWtM,SAAU,GAGnDwM,EAAgBvQ,EAAe5B,GAGjCiS,EAAW3C,SAAW2C,EAAW1C,QAEjC0C,EAAWvC,cAAgB,EAAIyC,EAC/BF,EAAWtC,aAAewC,GACnBF,EAAW3C,UAAY2C,EAAW1C,QAEzC0C,EAAWvC,cAAgB,EAAIyC,EAC/BF,EAAWtC,aAAe,IAClBsC,EAAW3C,SAAW2C,EAAW1C,SAEzC0C,EAAWvC,cAAgB,EAC3BuC,EAAWtC,aAAewC,GAG9BF,EAAWjS,SAAWA,EAGlBA,GAAY,IACZiS,EAAWxC,UAAW,EACtBwC,EAAW3C,QAAU2C,EAAW1C,OAChC0C,EAAWvC,cAAgBuC,EAAW1C,OAAS,EAAI,EACnD0C,EAAWtC,aAAe,EAElC,CAMA,yBAAAoC,CAA0B5H,GACtB,MAAM8H,EAAa9a,KAAKuO,YAAY2J,UAGpC,IAAI6C,OACwBV,IAAxBra,KAAKsa,GAELta,KAAKsa,GAAkBtH,EACvB+H,EAAU/a,KAAKsa,GAGfS,EAAUX,YAAY7H,MAAQuI,EAAWzC,UAI7CyC,EAAWjS,SAAWjC,KAAKkB,IAAI,EAAGiT,EAAUD,EAAWtM,UAGnDsM,EAAWjS,UAAY,IACvBiS,EAAWxC,UAAW,EACtBwC,EAAW3C,QAAU2C,EAAW1C,OAChC0C,EAAW1C,OAAS,KACpB0C,EAAWjS,SAAW,EAE9B,CAMA,6BAAAoS,GACI,OAAOjb,KAAK+X,cAAchU,KAAK,KAC3B,MAAMwO,EAAM6H,YAAY7H,MAGxB,GAAIvS,KAAKyY,mBAAmBG,kBACvBrG,EAAMvS,KAAKyY,mBAAmBC,WAAc1Y,KAAKyY,mBAAmBE,cACrE,OAAO3Y,KAAKyY,mBAAmBG,iBAGnC,MAAMkC,EAAa9a,KAAKuO,YAAY2J,UACpC,IAAIgD,EAsBJ,OAlBIA,EAFAJ,EAAWxC,UAAYwC,EAAW1C,OAErBpY,KAAKmb,+BACdL,EAAW3C,QACX2C,EAAW1C,OACX0C,EAAWjS,UAKF,IADQ7I,KAAKgZ,gBAAgBhZ,KAAKqS,MAAM9O,UAAYvD,KAAKgZ,gBAAgBpN,SAK1FsP,EAAalb,KAAKua,eAAeW,EAAYlb,KAAKqS,MAAMxI,WAGxD7J,KAAKyY,mBAAmBG,iBAAmBsC,EAC3Clb,KAAKyY,mBAAmBC,WAAanG,EAE9B2I,GACR,uBAAwB,IAAMlb,KAAKgZ,gBAAgBpN,QAjC/C5L,EAkCX,CASA,8BAAAmb,CAA+BC,EAAaC,EAAWxS,GACnD,MAAMyS,EAAYtb,KAAKgZ,gBAAgBoC,IAAgBpb,KAAKgZ,gBAAgBpN,QACtE2P,EAAUvb,KAAKgZ,gBAAgBqC,IAAcrb,KAAKgZ,gBAAgBpN,QAGlEoP,EAAgBzP,EAAY1C,EAAU,EAAG,EAAG,gBAElD,MAAO,CAEHuG,aAAc1G,EAAe4S,EAAUlM,aAAcmM,EAAQnM,aAAc4L,GAG3ErX,cAAe2X,EAAU3X,eAAiB4X,EAAQ5X,cAAgB2X,EAAU3X,eAAiBqX,EAC7FjO,aAAcnG,KAAKgB,MAAM0T,EAAUvO,cAAgBwO,EAAQxO,aAAeuO,EAAUvO,cAAgBiO,GACpGpX,SAAU0X,EAAU1X,UAAY2X,EAAQ3X,SAAW0X,EAAU1X,UAAYoX,EACzEnX,WAAYyX,EAAUzX,YAAc0X,EAAQ1X,WAAayX,EAAUzX,YAAcmX,EACjF5N,YAAakO,EAAUlO,aAAemO,EAAQnO,YAAckO,EAAUlO,aAAe4N,EAGrF9N,iBAAkB8N,EAAgB,GAAMO,EAAQrO,iBAAmBoO,EAAUpO,iBAErF,CAMA,eAAAsO,GACI,MAAO,CACHjY,QAASvD,KAAKqS,MAAM9O,QACpBsG,UAAW7J,KAAKqS,MAAMxI,UACtB4R,gBAAiBzb,KAAKuO,YAAY2J,UAAUI,SAC5CoD,mBAAoB1b,KAAKuO,YAAY2J,UAAUrP,SAC/CqS,WAAYlb,KAAKib,gCAEzB,CAOA,sBAAAU,CAAuB9R,GACnB,OAAO7J,KAAK+X,cAAchU,KAAK,KAE3B,GAAkB,OAAd8F,IAAuB7J,KAAKsZ,mBAAmBnU,eAAe0E,GAC9D,MAAM,IAAIpD,MAAM,sBAAsBoD,wBAAgC9D,OAAO0G,KAAKzM,KAAKsZ,oBAAoBlS,KAAK,SAMpH,OAFApH,KAAKqS,MAAMxI,UAAYA,GAEhB,GACR,yBAAyB,EAVrB7J,EAWX,CAKA,cAAA4b,GACI5b,KAAKqS,MAAMxI,UAAY,IAC3B,CAOA,oBAAAgS,CAAqBhS,GACjB,OAAO7J,KAAK+X,cAAchU,KAAK,KAE3B,GAAI/D,KAAK8b,UAAY9b,KAAK8b,SAASxC,oBAC/BtZ,KAAK8b,SAASxC,mBAAmBzP,GAEjC,MAAO,IAAK7J,KAAK8b,SAASxC,mBAAmBzP,IAIjD,IAAKA,IAAc7J,KAAKsZ,mBAAmBnU,eAAe0E,GACtD,OAAO,KAGX,MAAMkS,EAAW,IAAK/b,KAAKsZ,mBAAmBzP,IAI9C,OAHKkS,EAASC,iBACVD,EAASC,eAAiB,GAEvBD,GACR,sBAAuB,KAlBnB/b,EAmBX,CAMA,6BAAAic,GACI,MAAMnB,EAAa9a,KAAKuO,YAAY1E,UAGpC,IAAKiR,EAAWxC,SAAU,CACtB,GAAItY,KAAKqS,MAAMxI,UAAW,CACtB,MAAMqS,EAAMlc,KAAK6b,qBAAqB7b,KAAKqS,MAAMxI,WACjD,GAAIqS,EAEA,MAAO,IAAKA,EAAK3O,OAAQ,EAAKjI,KAAMtF,KAAKqS,MAAMxI,UAEvD,CACA,OAAO,IACX,CAGA,GAAIiR,EAAW1C,OAAQ,CACnB,MAAM+D,EAAYnc,KAAK6b,qBAAqBf,EAAW1C,QACvD,GAAI+D,EAEA,MAAO,IAAKA,EAAW5O,OAAQuN,EAAWtC,aAAclT,KAAMwV,EAAW1C,OAEjF,CAGA,GAAI0C,EAAW3C,SAAW2C,EAAWvC,cAAgB,EAAG,CACpD,MAAM6D,EAAapc,KAAK6b,qBAAqBf,EAAW3C,SACxD,GAAIiE,EACA,MAAO,IAAKA,EAAY7O,OAAQuN,EAAWvC,cAAejT,KAAMwV,EAAW3C,QAEnF,CAEA,OAAO,IACX,CAMA,KAAAkE,CAAM7N,EAAW,KACbxO,KAAK8Z,WAAW,UAAW,KAAMtL,EACrC,CAOA,cAAA8N,CAAe/Y,GACX,OAAOvD,KAAKgZ,gBAAgB7T,eAAe5B,EAC/C,CAOA,gBAAAgZ,CAAiB1S,GACb,OAAqB,OAAdA,GAAsB7J,KAAKsZ,mBAAmBnU,eAAe0E,EACxE,CAMA,oBAAA2S,GACI,OAAOzW,OAAO0G,KAAKzM,KAAKgZ,gBAC5B,CAMA,sBAAAyD,GACI,OAAO1W,OAAO0G,KAAKzM,KAAKsZ,mBAC5B,CAMA,eAAAmC,GACI,OAAOzb,KAAKuO,YAAY2J,UAAUI,QACtC,CAMA,qBAAAoE,GACI,OAAO1c,KAAKuO,YAAY2J,UAAUI,SAAWtY,KAAKuO,YAAY2J,UAAUrP,SAAW,CACvF,CAKA,kBAAA8T,GACQ3c,KAAKuO,YAAY2J,UAAUI,WAC3BtY,KAAKuO,YAAY2J,UAAUrP,SAAW,EACtC7I,KAAKuO,YAAY2J,UAAUI,UAAW,EACtCtY,KAAKuO,YAAY2J,UAAUC,QAAUnY,KAAKuO,YAAY2J,UAAUE,OAChEpY,KAAKuO,YAAY2J,UAAUE,OAAS,KAE5C,CAUA,mBAAAwE,CAAoBpQ,EAAMqQ,EAAIhU,EAAUiU,EAAa,gBACjD,OAAOtQ,GAAQqQ,EAAKrQ,GAAQjB,EAAY1C,EAAU,EAAG,EAAGiU,EAC5D,CAMA,mBAAAC,CAAoBpI,GAAU,GACtBA,EACA3U,KAAKsa,EAAiB,SAEfta,KAAKsa,CAEpB,EClwBG,SAAS0C,EAAoBC,GAChC,IAAKA,GAA4B,IAAlBA,EAAOlY,OAAc,MAAO,UAG3C,IAAImY,EAAsB,EACtBC,EAAkB,EACtB,MAAMC,EAAe,GAErB,IAAK,MAAMC,KAAQJ,EACK,iBAATI,GAEPD,EAAatb,KAAK,CAAEgC,MAAOuZ,EAAM9P,OAAQ,OACzC4P,KACOE,GAAwB,iBAATA,GAAqBA,EAAKvZ,QAEhDsZ,EAAatb,KAAK,CAAEgC,MAAOuZ,EAAKvZ,MAAOyJ,OAAQ8P,EAAK9P,QAAU,OAC1D8P,EAAK9P,OACL2P,GAAuBG,EAAK9P,OAE5B4P,KAOZ,MAAMG,EAAkB1W,KAAKiB,IAAI,EAAG,IAAMqV,GACpCK,EAAgBJ,EAAkB,EAAIG,EAAkBH,EAAkB,EAG1EK,EAAY,GAClB,IAAIC,EAAa,EAEjB,IAAK,MAAMJ,KAAQD,EAEfK,GAD+B,OAAhBJ,EAAK9P,OAAkB8P,EAAK9P,OAASgQ,EAEpDC,EAAU1b,KAAK,CAAEgC,MAAOuZ,EAAKvZ,MAAO6B,UAAW8X,IAInD,MAAM/N,EAAS9I,KAAK8I,SAAW+N,EAC/B,IAAK,MAAMC,KAASF,EAChB,GAAI9N,GAAUgO,EAAM/X,UAChB,OAAO+X,EAAM5Z,MAKrB,OAAOsZ,EAAaA,EAAarY,OAAS,GAAGjB,KACjD,CCEA,IAAA6Z,EAAe,CACXrR,KAAM,UACNK,MAAO,KACPC,YAAa,iCACbgR,WA/CG,SAA2B7K,GAE9BA,EAAS8K,GAAK,EACd9K,EAAS+K,IAAK,IAAwB,IAAhBlX,KAAK8I,SAC3BqD,EAASgL,UAAY,KAGjBhL,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkL,aAAe,CAEpBC,YAAa,KACbC,SAAU,EACVC,SAAU,KAElB,EA+BIzD,OApBG,SAAuB5H,EAAUsL,EAAI1d,EAASC,GACjD,MAAM0d,EAAOvL,EAASkL,aAItBlL,EAAS+K,IAAMlX,KAAKC,IAAIyX,EAAKF,SAAUC,GAGvCtL,EAAS+K,IAAMQ,EAAKJ,YAAcG,EAGlCtL,EAAS8K,GAAK,CAClB,GC7DO,MAAMU,EASS,EAAV3X,KAAKgE,GCoMjB,IAAA4T,EAAe,CACXlS,KAAM,WACNK,MAAO,KACPC,YAAa,wCACbgR,WAnJG,SAA4B7K,GAE/BA,EAASgL,UAAY,KAAwB,KAAhBnX,KAAK8I,SAG9BqD,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAIlDjL,EAAS0L,UAA+B,YAAnB1L,EAASjP,OACS,YAAnBiP,EAASjP,OACU,YAAnBiP,EAASjP,MAG7B,MAEM4a,EAF0C,IAA7B3L,EAAS4L,aAAe,IAEX,IAAmB,GADhC/X,KAAK8I,UAIxBqD,EAAS6L,WAAahY,KAAK8I,SAAW6O,EACtCxL,EAAS8L,WAAa,GAAsB,IAAhBjY,KAAK8I,SACjCqD,EAAS+L,eAAiB,GAAsB,GAAhBlY,KAAK8I,SAGrCqD,EAASgM,UAAYnY,KAAK8I,SAAW6O,EACrCxL,EAASiM,UAAY,GAAsB,GAAhBpY,KAAK8I,SAChCqD,EAASkM,WAAa,GAAsB,GAAhBrY,KAAK8I,SACjCqD,EAASmM,WAAa,GAAsB,GAAhBtY,KAAK8I,SAG7BqD,EAAS0L,YACT1L,EAAS8L,YAAc,EACvB9L,EAAS+L,eAAiB,EAC1B/L,EAASkM,WAAa,EACtBlM,EAASmM,WAAa,GAG1BnM,EAASkL,aAAe,CACpBkB,MAAOvY,KAAK8I,SAAW6O,EACvBjL,OAAQoL,EACRA,WAAYA,EACZU,gBAAiB,KAAyB,MAAhBxY,KAAK8I,SAC/BgB,WAAY,EAAoB,EAAhB9J,KAAK8I,SACrB2P,UAAW,GAAsB,GAAhBzY,KAAK8I,SACtB4P,YAAa1Y,KAAK8I,SAAW6O,EAC7BgB,WAAY,GAAsB,GAAhB3Y,KAAK8I,SACvB8P,YAAa,EAAoB,EAAhB5Y,KAAK8I,SACtB+P,aAAc7Y,KAAK8I,SAAW6O,EAC9BmB,aAAc,EAAoB,EAAhB9Y,KAAK8I,SAE/B,EAiGIiL,OAtFG,SAAwB5H,EAAUsL,EAAI1d,EAASC,GAClD,MAAM0d,EAAOvL,EAASkL,aAGtBK,EAAKa,OAASb,EAAKc,gBAAkBf,EAGrC,MAAMsB,EAAa/Y,KAAKiE,IAAIyT,EAAKa,MAAQb,EAAKe,WAAaf,EAAK5N,WAG1DkP,EAA2C,EAA7BhZ,KAAKiE,IAAiB,IAAbyT,EAAKa,OAG5BU,GAAiBvB,EAAKhL,QAAUgL,EAAKI,YAAckB,EAA2B,GAAbD,EAGjEG,EAAUnf,EAAUiG,KAAK0E,IAAIgT,EAAKa,OAASU,EAC3CE,EAAUnf,EAAUgG,KAAKiE,IAAIyT,EAAKa,OAASU,EAGjDvB,EAAKgB,aAAehB,EAAKiB,WAAalB,EAAK,KAC3C,MAAM2B,EAAgBpZ,KAAKiE,IAAIyT,EAAKgB,aAAehB,EAAKkB,YAKxDzM,EAAS8K,GADe,IACTiC,EAAU/M,EAAS1Q,GAClC0Q,EAAS+K,GAFe,IAETiC,EAAUC,EAAgBjN,EAASzQ,GAGlDyQ,EAASgM,WAAahM,EAASiM,UAAYX,EAAK,KAGhD,MAAM4B,EAA2C,GAA/BrZ,KAAKiE,IAAIkI,EAASgM,WAAmB,GACjDmB,EAAcnN,EAASkM,YAAclM,EAASmM,WAAanM,EAASkM,YAAcgB,EAMxF,IAAIE,EAHJpN,EAAS6L,YAAc7L,EAAS8L,WAAaR,EAAK,KAI9CtL,EAAS0L,WAETH,EAAKmB,cAAgBnB,EAAKoB,aAAerB,EAAK,KAG9C8B,EAAuB,GAFPvZ,KAAKC,IAAID,KAAKiE,IAAIyT,EAAKmB,cAAe,IACF,GAApC7Y,KAAKiE,IAA0B,EAAtBkI,EAAS6L,YACK,IAGvCuB,EAA6C,GAAhCvZ,KAAKiE,IAAIkI,EAAS6L,YACiB,GAApChY,KAAKiE,IAA0B,EAAtBkI,EAAS6L,YACkB,GAApChY,KAAKiE,IAA0B,EAAtBkI,EAAS6L,YACmB,GAArChY,KAAKiE,IAA0B,GAAtBkI,EAAS6L,YAIlC,MAAMwB,EAAqC,IAAlBD,EAAa,GAChCE,EAAQ,GAAMD,EAAkBrN,EAAS+L,eAAiB,GAGhE/L,EAASG,QAAUH,EAASuN,YAAcJ,EAAcG,EAGpDtN,EAAS0L,UACT1L,EAASI,KAAOJ,EAASK,UAAY,GAAwB,EAAlBgN,GAE3CrN,EAASI,KAAOJ,EAASK,UAAY,GAAwB,GAAlBgN,GAI3CrN,EAAS0L,YAGL1L,EAASwN,UADTH,EAAkB,IACG,UAEArN,EAASjP,MAG1C,GC3IA0c,EAAe,CACXlU,KAAM,SACNK,MAAO,KACPC,YAAa,wCACbgR,WA7CG,SAA0B7K,GAC7BA,EAAS8K,GAA6B,KAAvBjX,KAAK8I,SAAW,IAC/BqD,EAAS+K,IAAK,IAAwB,IAAhBlX,KAAK8I,SAC3BqD,EAASgL,UAAY,KACrBhL,EAASuN,YAAc,GAAsB,GAAhB1Z,KAAK8I,SAG9BqD,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkL,aAAe,CACpBwC,SAAU,KACVC,YAAa,KAErB,EA+BI/F,OApBG,SAAsB5H,EAAUsL,EAAI1d,EAASC,GAChD,MAAM0d,EAAOvL,EAASkL,aAGtBlL,EAAS+K,IAAMQ,EAAKmC,SAAWpC,EAG/BtL,EAAS8K,KAAOjX,KAAK8I,SAAW,IAAO4O,EAAKoC,YAAcrC,EAG1DtL,EAAS8K,IAAMjX,KAAKC,IAAI,KAAOwX,GAC/BtL,EAAS+K,IAAMlX,KAAKC,IAAI,KAAOwX,EACnC,GCKAsC,EAAe,CACXrU,KAAM,UACNK,MAAO,KACPC,YAAa,kCACbgR,WA9CG,SAA2B7K,GAC9BA,EAAS8K,GAA6B,KAAvBjX,KAAK8I,SAAW,IAC/BqD,EAAS+K,GAAK,IAAuB,IAAhBlX,KAAK8I,SAC1BqD,EAASgL,UAAY,KAGjBhL,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkL,aAAe,CACpB2C,QAAS,KACTC,KAAM,KAEd,EAiCIlG,OAtBG,SAAuB5H,EAAUsL,EAAI1d,EAASC,GACjD,MAAM0d,EAAOvL,EAASkL,aAGtBlL,EAAS+K,IAAMQ,EAAKsC,QAAUvC,EAG9BtL,EAAS8K,IAAMjX,KAAKC,IAAIyX,EAAKuC,KAAMxC,GACnCtL,EAAS+K,IAAMlX,KAAKC,IAAIyX,EAAKuC,KAAMxC,GAG/BtL,EAAS+K,GAAK,IACd/K,EAAS+K,GAAK,EAEtB,GC9DO,MAAMgD,EA4BU,IA5BVA,EA6BU,EA7BVA,EA8BU,EA9BVA,EA+BU,GC6FvB,IAAAC,EAAe,CACXzU,KAAM,UACNK,MAAO,KACPC,YAAa,+CACbgR,WAzGG,SAA2B7K,GAQ9B,GANAA,EAAS8K,GAA6B,IAAvBjX,KAAK8I,SAAW,IAC/BqD,EAAS+K,GAA6B,IAAvBlX,KAAK8I,SAAW,IAE/BqD,EAASgL,UAAY,KAAwB,KAAhBnX,KAAK8I,SAG9BqD,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,EAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,mBAC3C,CAEH,MAAMf,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WAC5DlK,EAASjP,MAAQkZ,EAAoBC,EACzC,CAGAlK,EAASI,KAAQvM,KAAK8I,SAAW,IAC5B,EAAoB,EAAhB9I,KAAK8I,UAAgBqD,EAAS4L,YAAc5L,EAASiO,wBACzD,EAAoB,EAAhBpa,KAAK8I,UAAgBqD,EAAS4L,YAAc5L,EAASiO,uBAC9DjO,EAASK,SAAWL,EAASI,KAG7BJ,EAASkO,QAAUra,KAAK8I,SAAW,GACnCqD,EAASmO,mBAAqBnO,EAASkO,QAAU,IAAM,EAEvDlO,EAASkL,aAAe,CAEpBkD,SAAUva,KAAK8I,SAAWoR,EAC1BM,WAAW,EACXC,YAAaP,EACDla,KAAK8I,UAAYoR,EAAmCA,GAGhEF,QAAS,KACTU,cAAeR,EACfS,YAAa,EACbC,WAAY,EAAI5a,KAAKgJ,MAAsB,EAAhBhJ,KAAK8I,UAGhC+R,SAAkC,IAAvB7a,KAAK8I,SAAW,IAC3BgS,SAAU,EAElB,EA+DI/G,OApDG,SAAuB5H,EAAUsL,EAAI1d,EAASC,GACjD,MAAM0d,EAAOvL,EAASkL,aAItB,GAHAK,EAAKoD,UAAiB,MAALrD,GAGZC,EAAK8C,WAAa9C,EAAKoD,SAAWpD,EAAK6C,SAAU,CAElD7C,EAAK8C,WAAY,EACjB,MAAMO,EAAW/a,KAAK8I,SAAW9I,KAAKgE,GAAK,EAC3CmI,EAAS8K,GAAKjX,KAAK0E,IAAIqW,GAAYrD,EAAK+C,YAAc,IACtDtO,EAAS+K,GAAKlX,KAAKiE,IAAI8W,GAAYrD,EAAK+C,YAAc,GAGtDtO,EAASI,KAA2B,KAApBJ,EAASK,QAC7B,CAEA,GAAIkL,EAAK8C,UAAW,CAEhBrO,EAAS+K,IAAMQ,EAAKsC,QAAUvC,EAG9B,MAAMuD,EAAchhB,EAAU,IAAMmS,EAAS4L,YACzC5L,EAASzQ,EAAIsf,GAAetD,EAAKiD,YAAcjD,EAAKkD,aACpDzO,EAASzQ,EAAIsf,EACb7O,EAAS+K,IAAMlX,KAAKib,IAAI9O,EAAS+K,IAAMQ,EAAKgD,cAC5CvO,EAAS8K,IAAM,GACfS,EAAKiD,cAGLxO,EAASI,KAAOJ,EAASK,UAAY,IAAyB,GAAnBkL,EAAKiD,cAIhDjD,EAAKiD,aAAejD,EAAKkD,aACzBzO,EAASgL,UAAY,IAAuB,IAAhBnX,KAAK8I,SACjCqD,EAASI,MAAQ,KAIPvM,KAAKkb,KAAK/O,EAAS8K,GAAK9K,EAAS8K,GAAK9K,EAAS+K,GAAK/K,EAAS+K,IAC/D,KACR/K,EAASgL,WAAa,IAE9B,CACJ,GCAAgE,EAAe,CACXzV,KAAM,QACNK,MAAO,KACPC,YAAa,kCACbgR,WAtGG,SAAyB7K,GAE5B,MAAMiP,EAAmC,cAArBjP,EAASxP,QACvB0e,EAAkC,aAArBlP,EAASxP,QAGtB4b,EAAQvY,KAAK8I,SAAW6O,EAGxBxQ,EAAQiU,EACT,EAAsB,GAAhBpb,KAAK8I,SACXuS,EACI,EAAsB,EAAhBrb,KAAK8I,SACX,IAAsB,IAAhB9I,KAAK8I,SAEpBqD,EAAS8K,GAAKjX,KAAK0E,IAAI6T,GAASpR,EAChCgF,EAAS+K,GAAKlX,KAAKiE,IAAIsU,GAASpR,EAGhCgF,EAASgL,UAAYiE,EACjB,IACCC,EAAa,KAAwB,KAAhBrb,KAAK8I,SAAmB,KAG9CqD,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAI9CgE,IACAjP,EAASI,MAAQ,EAAoB,EAAhBvM,KAAK8I,WACVqD,EAAS4L,aAAe,IACxB5L,EAASiO,wBAA0B,GACnDjO,EAASK,SAAWL,EAASI,KAC7BJ,EAASG,QAAU,EACnBH,EAASuN,YAAcvN,EAASG,SAGpCH,EAASkL,aAAe,CACpB+D,cACAC,aACAC,IAAK,EACLC,UAAWH,EAAc,GAAM,GAEvC,EA2DIrH,OAhDG,SAAqB5H,EAAUsL,EAAI1d,EAASC,GAC/C,MAAM0d,EAAOvL,EAASkL,aAGtB,GAAIK,EAAK2D,WAIL,GAFA3D,EAAK4D,KAAY,KAAL7D,EAERC,EAAK4D,IAAM,IAAM,CAEjB,MAAM9D,EAAW,IACjBrL,EAAS8K,IAAMjX,KAAKC,IAAIuX,EAAUC,GAClCtL,EAAS+K,IAAMlX,KAAKC,IAAIuX,EAAUC,EACtC,MAAO,GAAIC,EAAK4D,IAAM,IAAM,CAExB,MAAM9D,EAAW,IACjBrL,EAAS8K,IAAMjX,KAAKC,IAAIuX,EAAUC,GAClCtL,EAAS+K,IAAMlX,KAAKC,IAAIuX,EAAUC,EACtC,KAAO,CAEH,MAAMD,EAAW,IACjBrL,EAAS8K,IAAMjX,KAAKC,IAAIuX,EAAUC,GAClCtL,EAAS+K,IAAMlX,KAAKC,IAAIuX,EAAUC,GAElCtL,EAAS8K,IAA8B,KAAvBjX,KAAK8I,SAAW,IAAc2O,EAC9CtL,EAAS+K,IAA8B,KAAvBlX,KAAK8I,SAAW,IAAc2O,CAClD,KACG,CAEH,MAAMD,EAAWE,EAAK0D,YAAc,IAAO,IAC3CjP,EAAS8K,IAAMjX,KAAKC,IAAIuX,EAAUC,GAClCtL,EAAS+K,IAAMlX,KAAKC,IAAIuX,EAAUC,EACtC,CAGA,GAAIC,EAAK0D,YAAa,CAElB,MAAM1P,EAAoB,KAAb9N,KAAK+N,MAClBQ,EAAS8K,IAAyC,IAAnCjX,KAAKiE,IAAW,EAAPyH,EAAWS,EAASqP,IAAa/D,CAC7D,CACJ,GC9CAgE,EAAe,CACX/V,KAAM,aACNK,MAAO,IACPC,YAAa,8CACbgR,WArDG,SAA8B7K,GACjC,MAAMoM,EAAQvY,KAAK8I,SAAW6O,EACxBxQ,EAAQ,IAAsB,EAAhBnH,KAAK8I,SACzBqD,EAAS8K,GAAKjX,KAAK0E,IAAI6T,GAASpR,EAChCgF,EAAS+K,GAAKlX,KAAKiE,IAAIsU,GAASpR,EAChCgF,EAASgL,UAAY,KAGjBhL,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkL,aAAe,CACpBqE,aAAc,IACdC,OAAQ,GACRC,WAAY,IAEpB,EAqCI7H,OA1BG,SAA0B5H,EAAUsL,EAAI1d,EAASC,GACpD,MAAM0d,EAAOvL,EAASkL,aAYtB,GATAlL,EAAS8K,KAAOjX,KAAK8I,SAAW,IAAO4O,EAAKiE,OAASlE,EACrDtL,EAAS+K,KAAOlX,KAAK8I,SAAW,IAAO4O,EAAKiE,OAASlE,EAGrDtL,EAAS8K,IAAMjX,KAAKC,IAAIyX,EAAKkE,WAAYnE,GACzCtL,EAAS+K,IAAMlX,KAAKC,IAAIyX,EAAKkE,WAAYnE,GAIrCzX,KAAK8I,SAAW9I,KAAKkB,IAAI,IAAOuW,EAAI,IAAM,CAC1C,MAAMc,EAAQvY,KAAK8I,SAAW6O,EAC9BxL,EAAS8K,IAAMjX,KAAK0E,IAAI6T,GAASb,EAAKgE,aACtCvP,EAAS+K,IAAMlX,KAAKiE,IAAIsU,GAASb,EAAKgE,YAC1C,CACJ,GCuBAG,EAAe,CACXnW,KAAM,aACNK,MAAO,KACPC,YAAa,sCACbgR,WAzEG,SAA8B7K,GAEjCA,EAAS8K,GAAK,EACd9K,EAAS+K,GAAK,EACd/K,EAASgL,UAAY,KAGjBhL,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkL,aAAe,CACpByE,UAAW,EACXC,YAAa,IACbC,aAAa,EAErB,EA0DIjI,OA/CG,SAA0B5H,EAAUsL,EAAI1d,EAASC,GACpD,MAAM0d,EAAOvL,EAASkL,aAGtB,IAAKK,EAAKsE,YAAa,CACnB,MAAMC,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAClBmiB,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAE1C,GAAIC,EAAW,EACXhQ,EAAS8K,GAAMgF,EAAKE,EAAYzE,EAAKoE,UACrC3P,EAAS+K,GAAMgF,EAAKC,EAAYzE,EAAKoE,cAClC,CAEH,MAAMvD,EAAQvY,KAAK8I,SAAW6O,EAC9BxL,EAAS8K,GAAKjX,KAAK0E,IAAI6T,GAASb,EAAKoE,UACrC3P,EAAS+K,GAAKlX,KAAKiE,IAAIsU,GAASb,EAAKoE,SACzC,CACApE,EAAKsE,aAAc,CACvB,CAGA,MAAMC,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAClBmiB,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAEtCC,EAAW,IAEXhQ,EAAS8K,IAAOgF,EAAKE,EAAYzE,EAAKqE,YAAc,IAAOtE,EAC3DtL,EAAS+K,IAAOgF,EAAKC,EAAYzE,EAAKqE,YAAc,IAAOtE,GAI/DtL,EAAS8K,IAA8B,IAAvBjX,KAAK8I,SAAW,IAAa2O,EAC7CtL,EAAS+K,IAA8B,IAAvBlX,KAAK8I,SAAW,IAAa2O,EAG7CtL,EAAS8K,IAAMjX,KAAKC,IAAI,IAAMwX,GAC9BtL,EAAS+K,IAAMlX,KAAKC,IAAI,IAAMwX,EAClC,GCHA2E,EAAe,CACX1W,KAAM,YACNK,MAAO,KACPC,YAAa,0DACbgR,WApEG,SAA6B7K,GAChCA,EAAS8K,GAAK,EACd9K,EAAS+K,GAAK,EACd/K,EAASgL,UAAY,IAGjBhL,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkL,aAAe,CACpBgF,cAAe,GACfC,YAAa,GACbN,aAAa,EAErB,EAsDIjI,OAxCG,SAAyB5H,EAAUsL,EAAI1d,EAASC,GACnD,MAAM0d,EAAOvL,EAASkL,aAIhB4E,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAElBmiB,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAI1C,IAAKxE,EAAKsE,aAAeG,EAAWzE,EAAK4E,YAAa,CAClD,GAAIH,EAAW,EAAG,CAGd,MAAMI,EAAa7E,EAAK2E,cAAgBrc,KAAKiB,IAAIkb,EAAU,GAK3DhQ,EAAS8K,IAAOgF,EAAKE,EAAYI,EAAa9E,EAC9CtL,EAAS+K,IAAOgF,EAAKC,EAAYI,EAAa9E,CAClD,CACAC,EAAKsE,aAAc,CACvB,CAKA7P,EAAS8K,IAAMjX,KAAKC,IAAI,IAAMwX,GAC9BtL,EAAS+K,IAAMlX,KAAKC,IAAI,IAAMwX,EAClC,GCEA+E,EAAe,CACX9W,KAAM,aACNK,MAAO,KACPC,YAAa,4DACbgR,WAlEG,SAA8B7K,GAEjC,MAAMoM,EAAQvY,KAAK8I,SAAW6O,EACxBxQ,EAAQ,EAAoB,EAAhBnH,KAAK8I,SACvBqD,EAAS8K,GAAKjX,KAAK0E,IAAI6T,GAASpR,EAChCgF,EAAS+K,GAAKlX,KAAKiE,IAAIsU,GAASpR,EAChCgF,EAASgL,UAAY,KAGjBhL,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkL,aAAe,CAEpBoF,gBAAiB,KACjBC,YAAa,EACblF,SAAU,IAElB,EAgDIzD,OAlCG,SAA0B5H,EAAUsL,EAAI1d,EAASC,GACpD,MAAM0d,EAAOvL,EAASkL,aAKtBlL,EAAS8K,IAAMjX,KAAKC,IAAIyX,EAAKF,SAAUC,GACvCtL,EAAS+K,IAAMlX,KAAKC,IAAIyX,EAAKF,SAAUC,GAKvC,MAAMkF,GAAY5iB,EAAUoS,EAAS1Q,GAAKic,EAAK+E,gBACzCG,GAAY5iB,EAAUmS,EAASzQ,GAAKgc,EAAK+E,gBAKzCI,GAAU7c,KAAK8I,SAAW,IAAO4O,EAAKgF,YACtCI,GAAU9c,KAAK8I,SAAW,IAAO4O,EAAKgF,YAK5CvQ,EAAS8K,IAAM0F,EAAWE,EAC1B1Q,EAAS+K,IAAM0F,EAAWE,CAC9B,GCVAxK,EAAe,CACX5M,KAAM,UACNK,MAAO,KACPC,YAAa,iDACbgR,WApDG,SAA2B7K,GAC9BA,EAAS8K,GAAK,EACd9K,EAAS+K,QACT/K,EAASgL,UAAY,KAGjBhL,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkL,aAAe,CACpBC,YAAa,KACbE,SAAU,KAElB,EAuCIzD,OAzBG,SAAuB5H,EAAUsL,EAAI1d,EAASC,GACjD,MAAM0d,EAAOvL,EAASkL,aAKtBlL,EAAS+K,IAAMlX,KAAKC,IAAIyX,EAAKF,SAAUC,GAKvCtL,EAAS+K,IAAMQ,EAAKJ,YAAcG,EAKlCtL,EAAS8K,GAAK,CAClB,GCqCA8F,EAAe,CACXrX,KAAM,UACNK,MAAO,KACPC,YAAa,0CACbgR,WAvFG,SAA2B7K,GAE9B,MAAMoM,EAAQvY,KAAK8I,SAAW6O,EACxBxQ,EAAQ,GAAsB,GAAhBnH,KAAK8I,SAMzB,GALAqD,EAAS8K,GAAKjX,KAAK0E,IAAI6T,GAASpR,EAChCgF,EAAS+K,GAAKlX,KAAKiE,IAAIsU,GAASpR,EAChCgF,EAASgL,UAAY,KAGjBhL,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,EAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,mBAC3C,CAEH,MAAMf,EAAS,CAAC,UAAW,UAAW,UAAW,WACjDlK,EAASjP,MAAQkZ,EAAoBC,EACzC,CAGAlK,EAASkO,QAAUra,KAAK8I,SAAW,GACnCqD,EAASmO,mBAAqBnO,EAASkO,QAAW,IAAsB,GAAhBra,KAAK8I,SAAkB,EAE/EqD,EAASkL,aAAe,CAEpB2F,YAAa,IACbC,QAASjd,KAAK8I,SAAW6O,EACzBuF,aAAc,GACd1F,SAAU,IAElB,EA4DIzD,OA9CG,SAAuB5H,EAAUsL,EAAI1d,EAASC,GACjD,MAAM0d,EAAOvL,EAASkL,aAIhB4E,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAElBmjB,EAAOnd,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAGtC,GAAIiB,EAAO,EAAG,CAGV,MAAMC,EAAOnB,EAAKkB,EACZE,EAAOnB,EAAKiB,EAKlBhR,EAAS8K,IAAMmG,EAAO1F,EAAKsF,YAAcvF,EACzCtL,EAAS+K,IAAMmG,EAAO3F,EAAKsF,YAAcvF,CAC7C,CAIAC,EAAKuF,SAAWvF,EAAKwF,aAAezF,EAEpC,MAAM6F,EAAgBtd,KAAKiE,IAAIyT,EAAKuF,SAEpC9Q,EAASI,KAAOJ,EAASK,UAAY,EAAoB,GAAhB8Q,GAEzCnR,EAASG,QAAUH,EAASuN,aAAe,EAAoB,GAAhB4D,GAI/CnR,EAAS8K,IAAMjX,KAAKC,IAAIyX,EAAKF,SAAUC,GACvCtL,EAAS+K,IAAMlX,KAAKC,IAAIyX,EAAKF,SAAUC,EAC3C,GC/EO,SAAS8F,EAAoBpR,GAEhCA,EAAS8K,GAA6B,KAAvBjX,KAAK8I,SAAW,IAC/BqD,EAAS+K,IAAK,IAAwB,IAAhBlX,KAAK8I,SAC3BqD,EAASgL,UAAY,KAGrBhL,EAASI,MAAQ,EAAoB,EAAhBvM,KAAK8I,WACrBqD,EAAS4L,aAAe,IACxB5L,EAASiO,wBAA0B,GACpC,KACJjO,EAASK,SAAWL,EAASI,KAC7BJ,EAASuN,YAAc,GAAsB,GAAhB1Z,KAAK8I,SAG9BqD,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkL,aAAe,CAEpBmG,eAAgB,KAChBC,WAAY,GACZC,cAAe,KACflG,SAAU,KACVmG,kBAAmB,IAE3B,CA2EA,IAAAC,EAAe,CACXlY,KAAM,YACNK,MAAO,KACPC,YAAa,8CACbgR,WAAYuG,EACZxJ,OAlEG,SAAyB5H,EAAUsL,EAAI1d,EAASC,GACnD,MAAM0d,EAAOvL,EAASkL,aAGtB,IAAKK,EAED,YADA6F,EAAoBpR,GAOxBA,EAAS8K,IAAMjX,KAAKC,IAAIyX,EAAKF,SAAUC,GACvCtL,EAAS+K,IAAMlX,KAAKC,IAAIyX,EAAKF,SAAUC,GAKvCtL,EAAS+K,IAAMQ,EAAK8F,eAAiB/F,EAKrC,MAAMoG,EAAa7d,KAAKiE,IAAIkI,EAASmP,IAAM5D,EAAKgG,cAAgB,KAAQhG,EAAK+F,WAC7EtR,EAAS8K,IAAmB,KAAb4G,EAAqBpG,OAGVhE,IAAtBtH,EAAS2R,WACT3R,EAAS2R,SAAW3R,EAASzQ,GAIjC,MAAMqiB,EAAmB5R,EAAS2R,SAAW3R,EAASzQ,EAItD,GAAIqiB,EAAmBrG,EAAKiG,kBAAmB,CAC3C,MAAMK,GAAgBD,EAAmBrG,EAAKiG,mBAAqB,IAC7DM,EAAaje,KAAKiB,IAAI,EAAG,EAAI+c,GACnC7R,EAASuN,aAAe,KAGpBuE,EAAa,KACb9R,EAASgL,WAAa,KAE9B,CAIInX,KAAKib,IAAI9O,EAAS8K,IAAM,MACxB9K,EAAS8K,IAAMjX,KAAKC,IAAI,IAAMwX,IAK9BtL,EAAS+K,SACT/K,EAAS+K,IAAK,GAEtB,GCRAgH,EAAe,CACXxY,KAAM,UACNK,MAAO,KACPC,YAAa,8CACbgR,WAhGG,SAA2B7K,GAE9B,MAAMoM,EAAQvY,KAAK8I,SAAW6O,EACxBxQ,EAAQ,GAAsB,IAAhBnH,KAAK8I,SACzBqD,EAAS8K,GAAKjX,KAAK0E,IAAI6T,GAASpR,EAChCgF,EAAS+K,GAAKlX,KAAKiE,IAAIsU,GAASpR,EAChCgF,EAASgL,UAAY,KAErBhL,EAASI,MAAQ,EAAoB,EAAhBvM,KAAK8I,WACrBqD,EAAS4L,aAAe,IACxB5L,EAASiO,wBAA0B,GACxCjO,EAASK,SAAWL,EAASI,KAC7BJ,EAASuN,YAAc,GAAsB,GAAhB1Z,KAAK8I,SAG9BqD,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkL,aAAe,CACpB8G,eAAgB,IAChBC,oBAAqB,GACrBC,eAAgB,GAChBxD,SAAU,IAAuB,GAAhB7a,KAAK8I,SAE9B,EAwEIiL,OA1DG,SAAuB5H,EAAUsL,GACpC,MAAMC,EAAOvL,EAASkL,aAYtB,GANAlL,EAAS8K,KAAOjX,KAAK8I,SAAW,IAAO4O,EAAKyG,eAAiB1G,EAC7DtL,EAAS+K,KAAOlX,KAAK8I,SAAW,IAAO4O,EAAKyG,eAAiB1G,EAKzDzX,KAAK8I,SAAW9I,KAAKkB,IAAIwW,EAAK0G,oBAAsB3G,EAAI,IAAM,CAE9D,MAAM6G,EAAWte,KAAK8I,SAAW6O,EAC3B4G,EAAeve,KAAKkb,KAAK/O,EAAS8K,GAAK9K,EAAS8K,GAAK9K,EAAS+K,GAAK/K,EAAS+K,IAGlF/K,EAAS8K,GAAKjX,KAAK0E,IAAI4Z,GAAYC,EACnCpS,EAAS+K,GAAKlX,KAAKiE,IAAIqa,GAAYC,CACvC,CAIA,MAAMrO,EAAkB,GAAKlQ,KAAK8I,SAAW,IAAO4O,EAAK2G,eAAiB5G,EAC1EtL,EAAS8K,IAAM/G,EACf/D,EAAS+K,IAAMhH,EAIf,MAAMsO,EAAYrS,EAASmP,IAAM5D,EAAKmD,SAAW,IACjD1O,EAASI,KAAOJ,EAASK,UAAY,EAA0B,GAAtBxM,KAAKiE,IAAIua,IAIlDrS,EAASG,QAAUH,EAASuN,aAAe,GAAsB,GAAhB1Z,KAAK8I,UAItDqD,EAAS8K,IAAMjX,KAAKC,IAAI,IAAMwX,GAC9BtL,EAAS+K,IAAMlX,KAAKC,IAAI,IAAMwX,GAI9B,MAAMtQ,EAAQnH,KAAKkb,KAAK/O,EAAS8K,GAAK9K,EAAS8K,GAAK9K,EAAS+K,GAAK/K,EAAS+K,IACvE/P,EAAQ,KACRgF,EAAS8K,GAAM9K,EAAS8K,GAAK9P,EAAS,GACtCgF,EAAS+K,GAAM/K,EAAS+K,GAAK/P,EAAS,GAE9C,GCqBAsX,GAAe,CACX/Y,KAAM,WACNK,MAAO,KACPC,YAAa,6CACbgR,WAlHG,SAA4B7K,GAE/B,MAAMoM,EAAQvY,KAAK8I,SAAW6O,EACxBxQ,EAAQ,IAAuB,IAAhBnH,KAAK8I,SAC1BqD,EAAS8K,GAAKjX,KAAK0E,IAAI6T,GAASpR,EAChCgF,EAAS+K,GAAKlX,KAAKiE,IAAIsU,GAASpR,EAChCgF,EAASgL,UAAY,KACrBhL,EAASE,KAAO,EAEhBF,EAASI,MAAQ,EAAoB,EAAhBvM,KAAK8I,WACrBqD,EAAS4L,aAAe,IACxB5L,EAASiO,wBAA0B,GACxCjO,EAASK,SAAWL,EAASI,KAC7BJ,EAASuN,YAAc,GAAsB,GAAhB1Z,KAAK8I,SAClCqD,EAASG,QAAUH,EAASuN,YAGxBvN,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkL,aAAe,CACpBqH,WAA4B,EAAhB1e,KAAK8I,SACjB6V,cAAe,GAAsB,GAAhB3e,KAAK8I,SAC1B8V,aAAc,EAAoB,GAAhB5e,KAAK8I,SACvB+V,SAAU7e,KAAK8I,SAAW,GAC1BgW,UAAW,EACXC,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrB+H,YAAa,GAAqB,GAAhBjf,KAAK8I,SAE/B,EAoFIiL,OAtEG,SAAwB5H,EAAUsL,EAAI1d,EAASC,GAClD,MAAM0d,EAAOvL,EAASkL,aAOtB,GAHAK,EAAKoH,WAAarH,EAGdC,EAAKmH,SAEDnH,EAAKoH,UAAYpH,EAAKkH,cACtBlH,EAAKmH,UAAW,EAChBnH,EAAKoH,UAAY,EAEjB3S,EAAS8K,GAAK,EACd9K,EAAS+K,GAAK,IAGd/K,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,iBAIvB,GAAItH,EAAKoH,UAAYpH,EAAKiH,cAAe,CACrCjH,EAAKmH,UAAW,EAChBnH,EAAKoH,UAAY,EAEjB,MAAMvG,EAAQvY,KAAK8I,SAAW6O,EACxBxQ,EAAQ,IAAuB,IAAhBnH,KAAK8I,SAC1BqD,EAAS8K,GAAKjX,KAAK0E,IAAI6T,GAASpR,EAChCgF,EAAS+K,GAAKlX,KAAKiE,IAAIsU,GAASpR,EAEhCuQ,EAAKqH,WAAa5S,EAAS8K,GAC3BS,EAAKsH,WAAa7S,EAAS+K,EAC/B,CAKJ,MAAM+E,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAClBmjB,EAAOnd,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAEtC,GAAIiB,EAAOzF,EAAKuH,YAAa,CAEzB,MAAMC,EAAe,IACrB/S,EAAS8K,IAAOgF,EAAKkB,EAAQ+B,EAAezH,EAC5CtL,EAAS+K,IAAOgF,EAAKiB,EAAQ+B,EAAezH,CAChD,CAIAtL,EAAS8K,IAAMjX,KAAKC,IAAI,KAAOwX,GAC/BtL,EAAS+K,IAAMlX,KAAKC,IAAI,KAAOwX,GAI1BC,EAAKmH,SAGN1S,EAASG,QAAUH,EAASuN,YAF5BvN,EAASG,QAAUH,EAASuN,aAAe,GAAmC,GAA7B1Z,KAAKiE,IAAmB,EAAfkI,EAASmP,KAI3E,GChHA6D,GAAe,CACXzZ,KAAM,eACNK,MAAO,MACPC,YAAa,kDAKbgR,WAAY,SAAS7K,EAAUiT,GAEvBjT,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkT,cAAgB,CAErBnX,UAAWlI,KAAK8I,SAAW9I,KAAKgE,GAAKhE,KAAKgE,GAAG,EAC7Csb,cAAetf,KAAK8I,SAAW,GAAM,GAAI,EACzCyW,UAAW,GAAsB,GAAhBvf,KAAK8I,SACtB0W,UAAWxf,KAAKgE,GAAG,EAAIhE,KAAK8I,SAAW9I,KAAKgE,GAAG,EAC/Cyb,WAAYzf,KAAK8I,SAAW9I,KAAKgE,GAAK,EACtC0a,WAAY,EACZC,cAAe,IAAsB,IAAhB3e,KAAK8I,SAG1BwF,KAAM,WACNoR,UAAW,EACXC,eAAgB,IAAuB,IAAhB3f,KAAK8I,SAG5B8W,WAAY,CAAEnkB,EAAG,EAAGC,EAAG,GACvBmkB,UAAW,EAGXC,aAAc,IAAsB,IAAhB9f,KAAK8I,SACzBiX,YAAa/f,KAAK8I,SAAW9I,KAAKgE,GAAK,EAGvCgc,WAAY,EACZC,aAAc,CAAExkB,EAAG0Q,EAAS1Q,EAAGC,EAAGyQ,EAASzQ,IAI/C,MAAMwkB,EAAOlgB,KAAK8I,SACdoX,EAAO,GACP/T,EAASkT,cAAcc,YAAc,UAC9BD,EAAO,IACd/T,EAASkT,cAAcc,YAAc,YACrChU,EAASkT,cAAc/Q,KAAO,eAE9BnC,EAASkT,cAAcc,YAAc,UACrChU,EAASkT,cAAc/Q,KAAO,SAEtC,EAKAyF,OAAQ,SAAS5H,EAAUsL,EAAI2H,GAC3B,MAAM3T,EAAQU,EAASkT,cACvB,GAAK5T,EAAL,CAaA,OAVAA,EAAMiU,WAAkB,GAALjI,EAGfhM,EAAMiU,UAAYjU,EAAMkU,iBACxBvmB,KAAKgnB,WAAWjU,EAAUV,GAC1BA,EAAMiU,UAAY,EAClBjU,EAAMkU,eAAiB,IAAuB,IAAhB3f,KAAK8I,UAIhC2C,EAAM6C,MACT,IAAK,WACDlV,KAAKinB,eAAelU,EAAUsL,EAAIhM,EAAO2T,GACzC,MACJ,IAAK,UACDhmB,KAAKknB,cAAcnU,EAAUsL,EAAIhM,EAAO2T,GACxC,MACJ,IAAK,SACDhmB,KAAKmnB,aAAapU,EAAUsL,EAAIhM,EAAO2T,GACvC,MACJ,IAAK,aACDhmB,KAAKonB,iBAAiBrU,EAAUsL,EAAIhM,EAAO2T,GAKnDjT,EAAS+K,IAAM,IAAOO,EAGtBtL,EAAS1Q,GAAK0Q,EAAS8K,GAAKQ,EAC5BtL,EAASzQ,GAAKyQ,EAAS+K,GAAKO,EAG5BhM,EAAMwU,aAAaxkB,EAAI0Q,EAAS1Q,EAChCgQ,EAAMwU,aAAavkB,EAAIyQ,EAASzQ,CArCpB,CAsChB,EAKA2kB,eAAgB,SAASlU,EAAUsL,EAAIhM,EAAO2T,GAEtC3T,EAAMiT,WAAa,GAEnBjT,EAAMiT,YAAmB,GAALjH,EACpBtL,EAAS8K,IAAM,GACf9K,EAAS+K,IAAM,KAGfzL,EAAMvD,WAAauD,EAAM6T,cAAgB7T,EAAM8T,UAAY9H,EAAK,IAG5DzX,KAAKib,IAAIxP,EAAMvD,WAAauD,EAAM+T,UAAY,IAC9C/T,EAAM6T,gBAAiB,EACvB7T,EAAMiT,WAAajT,EAAMkT,cACzBlT,EAAMvD,UAAYlI,KAAKygB,KAAKhV,EAAMvD,WAAauD,EAAM+T,UAAY,IAKzE,MAAMkB,EAAcjV,EAAMgU,WAAahU,EAAMvD,UACvCf,EAAQ,GAAyB,GAAnBsE,EAAMuU,WAC1B7T,EAAS8K,GAAKjX,KAAK0E,IAAIgc,GAAevZ,EACtCgF,EAAS+K,GAAKlX,KAAKiE,IAAIyc,GAAevZ,EAAQ,EAClD,EAKAmZ,cAAe,SAASnU,EAAUsL,EAAIhM,EAAO2T,GACzC,MAAMnD,EAAKxQ,EAAMmU,WAAWnkB,EAAI0Q,EAAS1Q,EACnCygB,EAAKzQ,EAAMmU,WAAWlkB,EAAIyQ,EAASzQ,EACnCygB,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAEtCC,EAAW,GAEXhQ,EAAS8K,GAAMgF,EAAKE,EAAY1Q,EAAMoU,UACtC1T,EAAS+K,GAAMgF,EAAKC,EAAY1Q,EAAMoU,YAGtCpU,EAAM6C,KAAO,WACb7C,EAAMiU,UAAY,EAE1B,EAKAa,aAAc,SAASpU,EAAUsL,EAAIhM,EAAO2T,GAExCjT,EAAS8K,IAAM,IACf9K,EAAS+K,IAAM,IAGXlX,KAAK8I,SAAW,MAChBqD,EAAS8K,IAA8B,IAAvBjX,KAAK8I,SAAW,IAChCqD,EAAS+K,IAA8B,IAAvBlX,KAAK8I,SAAW,IAExC,EAKA0X,iBAAkB,SAASrU,EAAUsL,EAAIhM,EAAO2T,GAE5C3T,EAAMsU,aAAe,IAAOtI,EAE5B,MAAMyB,EAAUlZ,KAAK0E,IAAI+G,EAAMsU,aAAetU,EAAMqU,aAC9C3G,EAAUnZ,KAAKiE,IAAIwH,EAAMsU,aAAetU,EAAMqU,aAG9C7D,EAAK/C,EAAU/M,EAAS1Q,EACxBygB,EAAK/C,EAAUhN,EAASzQ,EAE9ByQ,EAAS8K,GAAU,IAALgF,EACd9P,EAAS+K,GAAU,IAALgF,CAClB,EAKAkE,WAAY,SAASjU,EAAUV,GAC3B,MAAMkV,EAAO3gB,KAAK8I,SAGQ,YAAtB2C,EAAM0U,YACFQ,EAAO,IAEPlV,EAAM6C,KAAO,UACb7C,EAAMmU,WAAa,CACfnkB,EAA2B,KAAvBuE,KAAK8I,SAAW,IACpBpN,EAA2B,KAAvBsE,KAAK8I,SAAW,KAExB2C,EAAMoU,UAAY,EAAoB,EAAhB7f,KAAK8I,UAG3B2C,EAAM6C,KAFCqS,EAAO,GAED,SAGA,WAEY,cAAtBlV,EAAM0U,YAET1U,EAAM6C,KADNqS,EAAO,GACM,SAEA,aAKblV,EAAM6C,KADNqS,EAAO,GACM,WAEA,QAGzB,GC1NJC,GAAe,CACXlb,KAAM,UACNK,MAAO,IACPC,YAAa,uDAGb8H,OAAQ,CACJC,SAAS,EAGT8S,aAAc,CACVvS,KAAM,cACNgC,YAAa,YACbwQ,YAAa,GACbC,gBAAiB,EACjBC,iBAAkB,IAItBC,YAAa,CACT3S,KAAM,UACN4S,SAAU,CACNjS,QAAW,CACPkS,cAAc,EACdC,aAAc,KAElBjS,UAAa,CACTkS,aAAc,GACdzZ,SAAU,MAMtB0Z,YAAa,CACTC,UAAW,QACXC,WAAY,SACZC,iBAAkB,IAClBC,UAAU,GAIdC,QAAS,CACL5T,SAAS,EACTwC,OAAQ,YACRqR,UAAW,OACXC,SAAU,IAIdC,YAAa,CACTC,QAAS,SACTna,SAAU,GACVP,UAAW,SAOnB2P,WAAY,SAAS7K,EAAUiT,EAAQrlB,EAASC,GAExCmS,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAGlDjL,EAASkT,cAAgB,CAErB2C,WAAYhiB,KAAK8I,SAAW9I,KAAKgE,GAAK,EACtCie,YAAa,GAAqB,GAAhBjiB,KAAK8I,SACvBoZ,WAAY,IAAuB,IAAhBliB,KAAK8I,SAGxBqZ,YAAa,EACbC,WAA4B,IAAhBpiB,KAAK8I,SAAiB,IAClCuZ,aAAa,EACbC,eAAgB,EAChBC,aAAc,CAAE9mB,EAAG,EAAGC,EAAG,GAGzB8mB,aAAc,EACdC,YAA6B,IAAhBziB,KAAK8I,SAAiB,GACnC4Z,UAAU,EACVC,eAAgB,CAAElnB,EAAG,EAAGC,EAAG,GAC3BknB,eAAgB,CAAEnnB,EAAG,EAAGC,EAAG,GAG3BmnB,SAAU7iB,KAAK8I,SAAW,GAC1Bga,YAA6B,GAAhB9iB,KAAK8I,SAAgB,GAClCia,WAAY/iB,KAAK8I,SAAW9I,KAAKgE,GAAK,EAGtCgf,SAAUhjB,KAAK8I,SAAW,GAC1Bma,SAAUjjB,KAAK8I,SAAW9I,KAAKgE,GAAK,EAGpCkf,WAAY,EACZC,YAAY,EAGZC,UAAWpjB,KAAK8I,SAAW9I,KAAKgE,GAAK,EACrCqf,cAAe,IAAuB,IAAhBrjB,KAAK8I,SAC3Bwa,cAAe,GAInBnX,EAASgL,UAAY,MACrBhL,EAASkO,QAAUra,KAAK8I,SAAW,GAC/BqD,EAASkO,UACTlO,EAASmO,mBAAqB,EAAMta,KAAK8I,SAEjD,EAKAiL,OAAQ,SAAS5H,EAAUsL,EAAI1d,EAASC,GACpC,MAAMyR,EAAQU,EAASkT,cACvB,IAAK5T,EAAO,OAMZA,EAAM0W,aAAoB,GAAL1K,EACrBhM,EAAM+W,cAAqB,GAAL/K,EAGlBhM,EAAM+W,aAAe/W,EAAMgX,cACtBhX,EAAMiX,UASPjX,EAAMiX,UAAW,EACjBjX,EAAM+W,aAAe,EACrB/W,EAAMgX,YAAc,IAAsB,IAAhBziB,KAAK8I,SAG3B9I,KAAK8I,SAAW,KAChBqD,EAAS1Q,GAA6B,IAAvBuE,KAAK8I,SAAW,IAC/BqD,EAASzQ,GAA6B,IAAvBsE,KAAK8I,SAAW,OAdnC2C,EAAMiX,UAAW,EACjBjX,EAAMkX,eAAiB,CAAElnB,EAAG0Q,EAAS1Q,EAAGC,EAAGyQ,EAASzQ,GACpD+P,EAAMmX,eAAiB,CAAEnnB,EAAG0Q,EAAS8K,GAAIvb,EAAGyQ,EAAS+K,IACrDzL,EAAM+W,aAAe,EACrB/W,EAAMgX,YAAc,GAAqB,GAAhBziB,KAAK8I,WAgBlC2C,EAAM0W,YAAc1W,EAAM2W,aAAe3W,EAAM4W,cAC/C5W,EAAM4W,aAAc,EACpB5W,EAAM6W,eAAiB,GAAqB,IAAhBtiB,KAAK8I,SACjC2C,EAAM8W,aAAe,CACjB9mB,EAA2B,IAAvBuE,KAAK8I,SAAW,IACpBpN,EAA2B,IAAvBsE,KAAK8I,SAAW,KAExB2C,EAAM0W,YAAc,EAGhBniB,KAAK8I,SAAW,IAAOqD,EAASiL,gBAChCjL,EAASjP,MAAQkZ,EAAoBjK,EAASiL,iBAKlD3L,EAAM4W,aAAe5W,EAAM0W,YAAc1W,EAAM6W,iBAC/C7W,EAAM4W,aAAc,EACpB5W,EAAM0W,YAAc,EACpB1W,EAAM2W,WAAa,IAAsB,IAAhBpiB,KAAK8I,SAC9B2C,EAAM8W,aAAe,CAAE9mB,EAAG,EAAGC,EAAG,IAIpC+P,EAAM2X,WAAa3X,EAAM4X,cAAgB5L,EACzC,MAAM8L,EAA4C,GAA5BvjB,KAAKiE,IAAIwH,EAAM2X,WAAmB,GAUxD,GAPkB3X,EAAM2X,WAAuB,EAAVpjB,KAAKgE,IAChB,GAAVhE,KAAKgE,GACjByH,EAAM6X,cAAgBtjB,KAAKkB,IAAI,EAAGuK,EAAM6X,cAAqB,GAAL7L,GAExDhM,EAAM6X,cAAgBtjB,KAAKiB,IAAI,EAAGwK,EAAM6X,cAAqB,IAAL7L,GAGvDhM,EAAMiX,SA0CPvW,EAAS8K,GAA6B,IAAvBjX,KAAK8I,SAAW,IAC/BqD,EAAS+K,GAA6B,IAAvBlX,KAAK8I,SAAW,QA3Cd,CAEjB2C,EAAMuW,YAAcvW,EAAMyW,WAAazK,GAAM,EAAoB,GAAhB8L,GAGjD,MAAMC,EAAe/X,EAAMwW,aAAe,EAA0B,GAAtBxW,EAAM6X,cAAsBtjB,KAAKiE,IAAsB,EAAlBwH,EAAM2X,YAGzF,IAAIlK,EAAUnf,EAAUiG,KAAK0E,IAAI+G,EAAMuW,YAAcwB,EACjDrK,EAAUnf,EAAUgG,KAAKiE,IAAIwH,EAAMuW,YAAcwB,EAAe,GASpE,GANI/X,EAAM4W,cACNnJ,GAAWzN,EAAM8W,aAAa9mB,EAAIuE,KAAK8I,SAAW,GAClDqQ,GAAW1N,EAAM8W,aAAa7mB,EAAIsE,KAAK8I,SAAW,IAIlD2C,EAAMuX,SAAU,CAChB,MAAMS,EAAc,GAAK,EAAIhY,EAAM6X,eACnCpK,GAAWlZ,KAAKiE,IAAIwH,EAAMwX,UAAYQ,EACtCtK,GAAWnZ,KAAK0E,IAAI+G,EAAMwX,UAAYQ,EACtChY,EAAMwX,UAAY,GAAMxL,CAC5B,CAGIhM,EAAM6X,cAAgB,IAAOtjB,KAAK8I,SAAW,KAC7CoQ,GAAmC,IAAvBlZ,KAAK8I,SAAW,IAC5BqQ,GAAmC,IAAvBnZ,KAAK8I,SAAW,KAIhC,MAAM4a,EAAYjY,EAAM4W,YAAc,IAAO,IAC7ClW,EAAS8K,IAAMiC,EAAU/M,EAAS1Q,GAAKioB,EACvCvX,EAAS+K,IAAMiC,EAAUhN,EAASzQ,GAAKgoB,EAGvCvX,EAAS8K,KAAOjX,KAAK8I,SAAW,IAAOya,EAAgB,EACvDpX,EAAS+K,KAAOlX,KAAK8I,SAAW,IAAOya,EAAgB,CAE3D,CAOApX,EAAS1Q,GAAK0Q,EAAS8K,GAAKQ,EAC5BtL,EAASzQ,GAAKyQ,EAAS+K,GAAKO,EAGxBzX,KAAK8I,SAAW,MAChBqD,EAASG,QAAU,GAAsB,GAAhBtM,KAAK8I,UAIlCqD,EAASI,KAAOJ,EAASK,UAAY,EAAoB,GAAhB+W,EAA4C,GAAtB9X,EAAM6X,cACzE,GCxQJK,GAAe,CACXje,KAAM,WACNK,MAAO,KACPC,YAAa,gDAKboZ,OAAQ,CACJjY,MAAO,EACPuU,aAAc,IACdkI,cAAe,GACfC,WAAY,GACZC,WAAY,IAMhB,UAAA9M,CAAW7K,EAAUpS,EAASC,EAAS+pB,EAAaC,GAEhD,MAAM/H,EAAKliB,EAAUoS,EAAS1Q,EACxBygB,EAAKliB,EAAUmS,EAASzQ,EACxBygB,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAE1C,GAAIC,EAAW,EACXhQ,EAAS8K,GAAMgF,EAAKE,EAAY/iB,KAAKgmB,OAAOjY,MAC5CgF,EAAS+K,GAAMgF,EAAKC,EAAY/iB,KAAKgmB,OAAOjY,UACzC,CAEH,MAAMoR,EAAQvY,KAAK8I,SAAW9I,KAAKgE,GAAK,EACxCmI,EAAS8K,GAAKjX,KAAK0E,IAAI6T,GAASnf,KAAKgmB,OAAOjY,MAC5CgF,EAAS+K,GAAKlX,KAAKiE,IAAIsU,GAASnf,KAAKgmB,OAAOjY,KAChD,CAGAgF,EAAS+M,QAAUnf,EACnBoS,EAASgN,QAAUnf,EACnBmS,EAAS8X,cAAgB,CAC7B,EAKA,MAAAlQ,CAAO5H,EAAUsL,EAAI1d,EAASC,EAAS+pB,EAAaC,GAEhD7X,EAAS8X,eAAsB,IAALxM,EAG1B,MAAMwE,EAAK9P,EAAS+M,QAAU/M,EAAS1Q,EACjCygB,EAAK/P,EAASgN,QAAUhN,EAASzQ,EACjCygB,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAE1C,GAAIC,EAAW,GAAI,CAEf,MAAM+H,EAAYjI,EAAKE,EAAY/iB,KAAKgmB,OAAOjY,MACzCgd,EAAYjI,EAAKC,EAAY/iB,KAAKgmB,OAAOjY,MAG/CgF,EAAS8K,KAAOiN,EAAW/X,EAAS8K,IAAM7d,KAAKgmB,OAAO1D,aAAejE,EACrEtL,EAAS+K,KAAOiN,EAAWhY,EAAS+K,IAAM9d,KAAKgmB,OAAO1D,aAAejE,EAGrEtL,EAAS8K,KAAOjX,KAAK8I,SAAW,IAAO1P,KAAKgmB,OAAOyE,WACnD1X,EAAS+K,KAAOlX,KAAK8I,SAAW,IAAO1P,KAAKgmB,OAAOyE,UACvD,KAAO,CAEH,MAAMtL,EAAQvY,KAAK8I,SAAW9I,KAAKgE,GAAK,EAClC0I,EAAS,IAAsB,IAAhB1M,KAAK8I,SAC1BqD,EAAS+M,QAAUnf,EAAUiG,KAAK0E,IAAI6T,GAAS7L,EAC/CP,EAASgN,QAAUnf,EAAUgG,KAAKiE,IAAIsU,GAAS7L,EAG/CP,EAAS+M,QAAUlZ,KAAKiB,IAAI7H,KAAKgmB,OAAO0E,WACtB9jB,KAAKkB,IAAI6iB,EAAc3qB,KAAKgmB,OAAO0E,WAAY3X,EAAS+M,UAC1E/M,EAASgN,QAAUnZ,KAAKiB,IAAI7H,KAAKgmB,OAAO0E,WACtB9jB,KAAKkB,IAAI8iB,EAAe5qB,KAAKgmB,OAAO0E,WAAY3X,EAASgN,SAC/E,CAGAhN,EAAS1Q,GAAK0Q,EAAS8K,GAAKQ,EAC5BtL,EAASzQ,GAAKyQ,EAAS+K,GAAKO,GAGxBtL,EAAS1Q,GAAK,GAAK0Q,EAAS1Q,GAAKsoB,KACjC5X,EAAS8K,KAAM,GACf9K,EAAS1Q,EAAIuE,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI6iB,EAAa5X,EAAS1Q,IAExD0Q,EAAS+M,QAAUnf,EAAkC,KAAvBiG,KAAK8I,SAAW,MAE9CqD,EAASzQ,GAAK,GAAKyQ,EAASzQ,GAAKsoB,KACjC7X,EAAS+K,KAAM,GACf/K,EAASzQ,EAAIsE,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI8iB,EAAc7X,EAASzQ,IAEzDyQ,EAASgN,QAAUnf,EAAkC,KAAvBgG,KAAK8I,SAAW,IAEtD,EAKAsb,QAAS,CACLC,YAAa,SACb/X,QAAS,GACTgY,eAAgB,EAChBC,WAAY,KCzGpBC,GAAe,CACX9e,KAAM,QACNK,MAAO,KACPC,YAAa,iDAKboZ,OAAQ,CACJqF,cAAe,IACfC,gBAAiB,GACjBC,gBAAiB,IACjBC,UAAW,KACXC,SAAU,EACVC,UAAW,GACX9K,SAAS,KAMb,UAAAhD,CAAW7K,EAAUpS,EAASC,EAAS+pB,EAAaC,GAEhD7X,EAAS8K,GAA6B,GAAvBjX,KAAK8I,SAAW,IAC/BqD,EAAS+K,IAAM9d,KAAKgmB,OAAOqF,cAAgC,EAAhBzkB,KAAK8I,SAGhDqD,EAAS4Y,YAAc/kB,KAAK8I,SAAW9I,KAAKgE,GAAK,EACjDmI,EAAS6Y,YAAc5rB,KAAKgmB,OAAOuF,iBAAmB,GAAsB,GAAhB3kB,KAAK8I,UACjEqD,EAAS8Y,WAAa,GAAsB,GAAhBjlB,KAAK8I,SACjCqD,EAAS+Y,SAAW,EACpB/Y,EAASgZ,WAAY,CACzB,EAKA,MAAApR,CAAO5H,EAAUsL,EAAI1d,EAASC,EAAS+pB,EAAaC,GAEhD7X,EAAS4Y,aAAe5Y,EAAS6Y,YAAcvN,EAG/C,MAAM2N,EAASplB,KAAKiE,IAAIkI,EAAS4Y,aAAe3rB,KAAKgmB,OAAOsF,gBAQ5D,GAPAvY,EAAS8K,GAAc,IAATmO,GAAiBplB,KAAK8I,SAAW,IAAO1P,KAAKgmB,OAAO0F,UAGlE3Y,EAAS+K,IAAM9d,KAAKgmB,OAAOpF,QAAUvC,EACrCtL,EAAS+K,KAAOlX,KAAK8I,SAAW,IAAO1P,KAAKgmB,OAAO0F,UAG/C9kB,KAAK8I,SAAW1P,KAAKgmB,OAAOwF,UAAW,CAEvC,MAAM7J,EAAW/a,KAAK8I,SAAW9I,KAAKgE,GAAK,EAC3CmI,EAAS8K,GAAKjX,KAAK0E,IAAIqW,GAAY3hB,KAAKgmB,OAAOyF,SAC/C1Y,EAAS+K,GAAKlX,KAAKiE,IAAI8W,GAAY3hB,KAAKgmB,OAAOyF,SAAW,GAC1D1Y,EAAS+Y,SAAW,EAGpB/Y,EAAS8Y,WAAa,GAAsB,GAAhBjlB,KAAK8I,QACrC,CAGIqD,EAAS+Y,SAAW,IACpB/Y,EAAS+Y,UAAiB,IAALzN,EAErBtL,EAAS8K,IAAM,IACf9K,EAAS+K,IAAM,KAInB/K,EAAS1Q,GAAK0Q,EAAS8K,GAAKQ,EAC5BtL,EAASzQ,GAAKyQ,EAAS+K,GAAKO,EAGxBtL,EAASzQ,QACTyQ,EAASzQ,EAAIsoB,EAAe,GAC5B7X,EAAS1Q,EAAI1B,EAAkC,KAAvBiG,KAAK8I,SAAW,IACxCqD,EAAS+K,IAAM9d,KAAKgmB,OAAOqF,cAAgC,EAAhBzkB,KAAK8I,SAChDqD,EAAS8Y,WAAa,GAAsB,GAAhBjlB,KAAK8I,WAIjCqD,EAAS1Q,GAAK,GAAK0Q,EAAS1Q,GAAKsoB,KACjC5X,EAAS8K,KAAM,GACf9K,EAAS1Q,EAAIuE,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI6iB,EAAa5X,EAAS1Q,KAIxD0Q,EAASzQ,EAAIsoB,EAAe,KAC5B7X,EAASzQ,EAAIsoB,EACb7X,EAAS+K,GAAkC,KAA5B9d,KAAKgmB,OAAOqF,eAI/BtY,EAASI,KAAOJ,EAASK,SAAWL,EAAS8Y,YAC7B,EAAyC,GAArCjlB,KAAKiE,IAA2B,EAAvBkI,EAAS4Y,aAC1C,EAKAX,QAAS,CACLC,YAAa,QACb/X,QAAS,GACTgY,eAAgB,IAChBC,WAAY,GACZlV,SAAS,ICxBjB,IAAAgW,GAAe,CACX3f,KAAM,MACNK,MAAO,KACPC,YAAa,iDACbgR,WA9EG,SAAwB7K,GAE3BA,EAAS8K,GAA6B,IAAvBjX,KAAK8I,SAAW,IAC/BqD,EAAS+K,GAA6B,IAAvBlX,KAAK8I,SAAW,IAC/BqD,EAASgL,UAAY,KAGjBhL,EAASiL,eAAiBjL,EAASiL,cAAcjZ,OAAS,IAC1DgO,EAASjP,MAAQkZ,EAAoBjK,EAASiL,gBAIlDjL,EAASkL,aAAe,CACpB2K,WAAYhiB,KAAK8I,SAAW9I,KAAKgE,GAAK,EACtCie,YAAa,GAAqB,GAAhBjiB,KAAK8I,SACvBoZ,WAAY,KAAyB,KAAhBliB,KAAK8I,SAC1B4P,YAAa1Y,KAAK8I,SAAW9I,KAAKgE,GAAK,EACvCshB,gBAAiBtlB,KAAK8I,SAAW9I,KAAKgE,GAAK,EAC3C8W,SAAU,EAElB,EA2DI/G,OAlDG,SAAoB5H,EAAUsL,EAAI1d,EAASC,GAC9C,MAAM0d,EAAOvL,EAASkL,aACtB,IAAKK,EAAM,OAEXA,EAAKoD,UAAYrD,EAGjB,MAAM7L,GAAe8L,EAAKoD,SA7CT,IA6CoBpD,EAAK4N,iBA7CzB,IA8CXC,EAAwD,GAAtCvlB,KAAKiE,IAAI2H,EAAc5L,KAAKgE,GAAK,GAAW,GAGpEmI,EAASI,KAAOJ,EAASK,UAAY,IAAyB,IAAlB+Y,GAG5C7N,EAAKsK,YAActK,EAAKwK,WAAazK,EAGrC,MAAM+N,EAAwE,GAAtDxlB,KAAKiE,IAAoB,KAAhByT,EAAKoD,SAAoBpD,EAAKgB,aACzDO,EAAgBvB,EAAKuK,YAAcuD,EAGnCtM,EAAUnf,EAAUiG,KAAK0E,IAAIgT,EAAKsK,YAAc/I,EAChDE,EAAUnf,EAAUgG,KAAKiE,IAAIyT,EAAKsK,YAAc/I,EAGhDwM,EAAmE,GAA1DzlB,KAAKiE,IAAoB,KAAhByT,EAAKoD,SAAoBpD,EAAK4N,iBAGhDrJ,EAAK/C,EAAU/M,EAAS1Q,EACxBygB,EAAM/C,EAAUsM,EAAUtZ,EAASzQ,EAGzCyQ,EAAS8K,GAAU,IAALgF,EACd9P,EAAS+K,GAAU,IAALgF,EAGd/P,EAAS8K,IAA8B,KAAvBjX,KAAK8I,SAAW,IAChCqD,EAAS+K,IAA8B,KAAvBlX,KAAK8I,SAAW,IAGhCqD,EAAS8K,IAAM,IACf9K,EAAS+K,IAAM,GACnB,GC3EA,MAAMwO,GAAkB,IAAIjpB,IA4K5B,IAAAkpB,GAxHO,SAA2BjgB,GAC9B,OAAOggB,GAAgBznB,IAAIyH,IAAS,IACxC,EAsHAigB,GAhHO,WACH,OAAOhgB,MAAMC,KAAK8f,GAAgB7f,OACtC,EClCA,MA0Ba+f,GAAoB,CAAA,EAY1B,SAASC,GAAYngB,GAExB,GAAIkgB,GAAkBlgB,GAClB,OAAOkgB,GAAkBlgB,GAI7B,OADuB4H,GAAgC5H,IAIhD,IACX,CAQO,SAASogB,GAAmB3Z,EAAU4Z,GACzC,MAAMC,EAAWH,GAAYE,GAC7B,OAAIC,GAAYA,EAAShP,YACrBgP,EAAShP,WAAW7K,IACb,GAGU,YAAjB4Z,GACOD,GAAmB3Z,EAAU,UAG5C,CAWO,SAAS8Z,GAAe9Z,EAAU4Z,EAActO,EAAI1d,EAASC,GAChE,MAAMgsB,EAAWH,GAAYE,GAC7B,SAAIC,IAAYA,EAASjS,SACrBiS,EAASjS,OAAO5H,EAAUsL,EAAI1d,EAASC,GAChC,GAGf,CAtFkB,CACd+c,EACA4M,GACAa,GACA5M,EACAgC,EACAG,EACAI,EACA+L,EACAzK,EACAI,EACAO,EACAI,EACAlK,EACAyK,EACAa,EACAM,EACAO,GACAU,GACAyB,GACAyE,IASMvqB,QAAQkrB,IACdJ,GAAkBI,EAAStgB,MAAQsgB,IAyFjB,oBAAXrsB,QAA0BA,OAAOwsB,kBACxCxsB,OAAOysB,kBAAoB,CACvBC,SAAUT,GACVU,KA9BD,WAqBH,MAAO,IAnBennB,OAAOonB,OAAOX,IAAmBtlB,IAAI0lB,IAAQ,CAC/DtgB,KAAMsgB,EAAStgB,KACfK,MAAOigB,EAASjgB,OAAS,KACzBC,YAAaggB,EAAShgB,aAAe,iBACrCtH,KAAM,aAIkB4O,KACgBhN,IAAIoF,IAC5C,MAAMsgB,EAAW1Y,GAAgC5H,GACjD,MAAO,CACHA,KAAMsgB,EAAStgB,KACfK,MAAOigB,EAASjgB,OAAS,KACzBC,YAAaggB,EAAShgB,aAAe,kBACrCtH,KAAM,YAKlB,EASQT,IAAK4nB,KCpJb,MAAMW,GAAiB,IAAI/pB,IAwG3B,IAAA6Q,GApDO,SAA0B5H,GAC7B,OAAO8gB,GAAevoB,IAAIyH,IAAS,IACvC,EC3CA+gB,GAAe,CACX/gB,KAAM,SACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,0CAGboZ,OAAQ,CACJxX,SAAU,IACV8e,gBAAiB,CAAEC,SAAS,EAAMC,MAAO,GACzCxf,UAAW,GACXkD,UAAW,EACXuc,KAAM,WACNC,SAAS,EACThiB,OAAQ,OACRiiB,SAAU,GAEVC,eAAgB,CACZtoB,KAAM,SACNmoB,KAAM,WACNE,SAAU,GACVzc,UAAW,IAKnBwD,OAAQ,CACJC,SAAS,EACTE,SAAU,OACVgZ,WAAY,WACZC,eAAe,EACfrf,SAAU,EACVsf,WAAW,EACXC,eAAgB,UAGhBC,cAAe,CACXlX,OAAQ,IACRC,QAAS,GACTpB,MAAO,UAIXsY,cAAe,CACXhZ,KAAM,QACNiZ,WAAY,GAIhBC,aAAc,CACVlZ,KAAM,QACNsY,MAAO,GAIXa,eAAgB,CACZ1Z,SAAS,EACTwZ,WAAY,KAIhBG,iBAAkB,CACd5Y,MAAS,CAELwY,cAAe,CAAEC,WAAY,KAC7BC,aAAc,CAAEZ,MAAO,IAE3B7X,MAAS,CAELsY,cAAe,CAAElX,OAAQ,EAAKC,QAAS,GAAKpB,MAAO,SAEvDC,QAAW,CAEPoY,cAAe,CACXlX,OAAQ,IACRwX,SAAU,EACV3Y,MAAO,UAGfG,UAAa,CAETmY,cAAe,CAAEC,WAAY,KAC7BF,cAAe,CAAElX,OAAQ,IAAKC,QAAS,OAWnD4G,WAAY,SAAS7K,EAAUyb,GACtBzb,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAG3B1b,EAAS0b,YAAYpB,OAAS,CAC1BqB,OAAQ3b,EAASzQ,EACjBqsB,OAAQ5b,EAAS1Q,EACjBusB,QAAS7b,EAAS8K,GAClBgR,QAAS9b,EAAS+K,GAClB8E,aAAa,EAErB,EAWAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAapB,QAAQzK,aAC/B5iB,KAAK4d,WAAW7K,EAAUyb,GAG9B,MAAMxI,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAW3H,EAAO2H,UAAY3tB,KAAKgmB,OAAO2H,UAAY,EAGtDoB,EAAe/uB,KAAKyK,eAAe5B,GAGzC,IAAIqI,EAAY8U,EAAO9U,UACvB,MAAM8d,EAAQR,EAAOQ,OAAS,EAG9B,IAAIhhB,EAAYgY,EAAOhY,UAAY2f,EAAW5a,EAAS4L,YACnD6P,EAAOS,mBACPjhB,GAAcwgB,EAAOS,iBAAiBC,qBAAuB,EAC7DlhB,GAAcwgB,EAAOS,iBAAiBE,kBAAoB,EAEtDX,EAAOS,iBAAiBG,sBACxBle,GAAasd,EAAOS,iBAAiBG,sBAI7C,MAAMC,EAAczoB,KAAKiE,KAAKkkB,EAAeC,GAASpoB,KAAKgE,GAAK,EAAIsG,GAyBpE,GAxBI8U,EAAO0H,SAAW7kB,EAAW,KAG7BmF,GAAc,GADQnF,EAAW,IAAO,GACP,IAIjB,aAAhBmd,EAAOyH,MACP1a,EAAS+K,IAAMuR,EAAcrhB,EAAY,IAAOqQ,EAG5CxV,EAAW,KACXkK,EAAS8K,IAAM,MAEI,eAAhBmI,EAAOyH,OACd1a,EAAS8K,IAAMwR,EAAcrhB,EAAY,IAAOqQ,EAG5CxV,EAAW,KACXkK,EAAS+K,IAAM,MAKnBjV,EAAW,GAAK,CAChB,MAAMymB,EAAY,EAAwB,IAAlBzmB,EAAW,IACnCkK,EAAS8K,GAAK9K,EAAS8K,IAAM,IAAmB,IAAZyR,GACpCvc,EAAS+K,GAAK/K,EAAS+K,IAAM,IAAmB,IAAZwR,EACxC,CACJ,EAMAC,QAAS,SAASxc,GACVA,EAAS0b,aAAapB,eACfta,EAAS0b,YAAYpB,MAEpC,EAOA5iB,eAAgB,SAAShC,GACrB,OAAOA,EAAI,GACL,EAAIA,EAAIA,EAAIA,EACZ,EAAI7B,KAAKC,KAAI,EAAK4B,EAAI,EAAG,GAAK,CACxC,GCpMJ+mB,GAAe,CACXljB,KAAM,QACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,+CAGboZ,OAAQ,CACJxX,SAAU,IACVR,UAAW,GACXkD,UAAW,EACXue,SAAU,GACV/jB,OAAQ,OACRgkB,YAAa,GACbC,WAAY,GACZhC,SAAU,IACVnF,UAAW,UAEXoF,eAAgB,CACZtoB,KAAM,QACNqoB,SAAU,IACVnF,UAAW,UACXtX,UAAW,IAKnBwD,OAAQ,CACJC,SAAS,EACTE,SAAU,OAGVoZ,cAAe,CACXlX,OAAQ,IACRC,QAAS,GACTpB,MAAO,SAIXsY,cAAe,CACXhZ,KAAM,SACNgC,YAAa,WAIjBkX,aAAc,CACVlZ,KAAM,QACNsY,MAAO,GAIXa,eAAgB,CACZ1Z,SAAS,EACTwZ,WAAY,GAIhBG,iBAAkB,CACd5Y,MAAS,CAELuY,cAAe,CAAElX,OAAQ,EAAKC,QAAS,IACvCoX,aAAc,CAAEZ,MAAO,IAE3B7X,MAAS,CAELsY,cAAe,CAAElX,OAAQ,IAAKC,QAAS,GAAKpB,MAAO,QACnDsY,cAAe,CAAEhX,YAAa,UAElCrB,QAAW,CAEPoY,cAAe,CACXlX,OAAQ,IACRwX,SAAU,EACV3Y,MAAO,UAGfG,UAAa,CAETmY,cAAe,CAAEhZ,KAAM,SAAU0a,MAAO,CAAC,GAAK,IAC9C3B,cAAe,CAAElX,OAAQ,IAAKC,QAAS,OAYnD4G,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAI3B,MAAM5L,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAClBmiB,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GACpC3D,EAAQvY,KAAKipB,MAAM/M,EAAID,GAE7B9P,EAAS0b,YAAYe,MAAQ,CACzBM,aAAc/M,EACd5D,MAAOA,EACPwP,OAAQ5b,EAAS1Q,EACjBqsB,OAAQ3b,EAASzQ,EACjBsgB,aAAa,EAErB,EAWAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAae,OAAO5M,aAC9B5iB,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAYe,MAC5BxJ,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAWa,EAAOb,UAAY,EAG9BoB,EAAe/uB,KAAKqL,cAAcxC,GAGxC,IAAIknB,EACA7e,EAAY8U,EAAO9U,UACnBlD,EAAYgY,EAAOhY,UAGnBwgB,EAAOS,mBACPjhB,GAAcwgB,EAAOS,iBAAiBC,qBAAuB,EAC7DlhB,GAAcwgB,EAAOS,iBAAiBE,kBAAoB,EACtDX,EAAOS,iBAAiBG,sBACxBle,GAAasd,EAAOS,iBAAiBG,sBAI7C,MAAMY,EAAYjB,EAAe7d,EAAY,EAAK,EAI9C6e,EAFA/J,EAAOyJ,SAAW,GAAKO,EAAY,EAAIhK,EAAOyJ,UAAaO,EAAY,EAAIhK,EAAOyJ,SAErE,EAGA7oB,KAAKiE,IAAIkkB,EAAenoB,KAAKgE,GAAK,EAAIsG,GAIvD,MAAM+e,EAAYF,EAAa/hB,EAAY2f,EAAW5a,EAAS4L,YAGzDuR,EAAiB5R,EAAKwR,aAAeG,EACrCnQ,EAAUnf,EAAUiG,KAAK0E,IAAIgT,EAAKa,OAAS+Q,EAC3CnQ,EAAUnf,EAAUgG,KAAKiE,IAAIyT,EAAKa,OAAS+Q,EAG3CC,EAAY,IAAO9R,EAKzB,GAJAtL,EAAS8K,KAAOiC,EAAU/M,EAAS1Q,GAAK8tB,EAAY,GACpDpd,EAAS+K,KAAOiC,EAAUhN,EAASzQ,GAAK6tB,EAAY,GAGhDtnB,EAAW,GAAK,CAChB,MAAMgc,EAAa,EAAwB,IAAlBhc,EAAW,IACpCkK,EAAS8K,IAAO,GAAmB,GAAbgH,EACtB9R,EAAS+K,IAAO,GAAmB,GAAb+G,CAC1B,CACJ,EAMA0K,QAAS,SAASxc,GACVA,EAAS0b,aAAae,cACfzc,EAAS0b,YAAYe,KAEpC,EAOAnkB,cAAe,SAAS5C,GACpB,QAAS7B,KAAK0E,IAAI1E,KAAKgE,GAAKnC,GAAK,GAAK,CAC1C,GCpMJ2nB,GAAe,CACX9jB,KAAM,QACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,+CAGboZ,OAAQ,CACJxX,SAAU,IACVR,UAAW,GACXkD,UAAW,GACXsE,MAAO,GACP8U,UAAW,GACX+F,KAAM,OACN3kB,OAAQ,SACRiiB,SAAU,EAEVC,eAAgB,CACZtoB,KAAM,QACNqoB,SAAU,EACVzc,UAAW,GACXsE,OAAO,IAKfd,OAAQ,CACJC,SAAS,EACTE,SAAU,cAGVoZ,cAAe,CACX/W,YAAa,YACbH,OAAQ,IACRC,QAAS,GACTpB,MAAO,SAIXsY,cAAe,CACXhZ,KAAM,QACNob,cAAe,GACfC,QAAS,UAIbnC,aAAc,CACVlZ,KAAM,QACNsY,MAAO,GAIXc,iBAAkB,CACdvY,UAAa,CAETkY,cAAe,CAAElX,OAAQ,EAAKC,QAAS,IACvCkX,cAAe,CAAEhZ,KAAM,SAAU0a,MAAO,CAAC,EAAG,MAEhD/Z,QAAW,CAEPoY,cAAe,CACX/W,YAAa,SACbH,OAAQ,EACRwX,SAAU,EACV3Y,MAAO,UAGfD,MAAS,CAELsY,cAAe,CAAElX,OAAQ,IAAKC,QAAS,EAAKpB,MAAO,WAU/DgI,WAAY,SAAS7K,EAAUyb,GACtBzb,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAG3B1b,EAAS0b,YAAY2B,MAAQ,CACzBI,UAAWzd,EAAS1Q,EACpBouB,UAAW1d,EAASzQ,EACpBouB,YAAa9pB,KAAK8I,SAAW9I,KAAKgE,GAAK,EACvCgY,aAAa,EAErB,EAYAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAa2B,OAAOxN,aAC9B5iB,KAAK4d,WAAW7K,EAAUyb,GAG9B,MAAMlQ,EAAOvL,EAAS0b,YAAY2B,MAC5BpK,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAW3H,EAAO2H,UAAY3tB,KAAKgmB,OAAO2H,UAAY,EAG5D,IAAI3f,EAAYgY,EAAOhY,UACnBkD,EAAY8U,EAAO9U,UACnBsd,EAAOS,mBACPjhB,GAAcwgB,EAAOS,iBAAiBC,qBAAuB,EAC7DlhB,GAAcwgB,EAAOS,iBAAiBE,kBAAoB,EACtDX,EAAOS,iBAAiBG,sBACxBle,GAAasd,EAAOS,iBAAiBG,sBAM7C,MAAM5Z,EAAQwQ,EAAOxQ,MAAS,EAAI3M,EAAY,EACxCunB,EAAQxpB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAKsG,GAAalD,EAAYwH,EAAQmY,EAAW5a,EAAS4L,YAG3FgS,EAAUP,EAAQxpB,KAAK0E,IAAIgT,EAAKoS,aAChCE,EAAUR,EAAQxpB,KAAKiE,IAAIyT,EAAKoS,aAItC3d,EAAS1Q,EAAIic,EAAKkS,UAAYG,EAC9B5d,EAASzQ,EAAIgc,EAAKmS,UAAYG,CAClC,EAOAC,aAAc,SAASC,GACnB,MAAMzuB,EAAqB,IAAjBuE,KAAKiE,IAAIimB,GACnB,OAAOzuB,EAAIuE,KAAKgJ,MAAMvN,EAC1B,EAMAktB,QAAS,SAASxc,GACVA,EAAS0b,aAAa2B,QAEtBrd,EAAS1Q,EAAI0Q,EAAS0b,YAAY2B,MAAMI,UACxCzd,EAASzQ,EAAIyQ,EAAS0b,YAAY2B,MAAMK,iBACjC1d,EAAS0b,YAAY2B,MAEpC,GCrLJW,GAAe,CACXzkB,KAAM,MACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,0BAGboZ,OAAQ,CACJxX,SAAU,IACVR,UAAW,GACXkD,UAAW,EACXxF,OAAQ,OACRiiB,SAAU,GAEVC,eAAgB,CACZtoB,KAAM,SACNmoB,KAAM,WACNE,SAAU,GACVzc,UAAW,EACX8d,MAAO,IAKfta,OAAQ,CACJC,SAAS,EACTE,SAAU,OACVgZ,WAAY,WACZC,eAAe,EACfrf,SAAU,EACVsf,WAAW,EACXiD,YAAa,UAGb9C,cAAe,CACXhZ,KAAM,cACNgC,YAAa,OACbiX,WAAY,GAIhBF,cAAe,CACXlX,OAAQ,IACRC,QAAS,GACTpB,MAAO,QAIXwY,aAAc,CACVlZ,KAAM,QACNsY,MAAO,GAIXc,iBAAkB,CACd5Y,MAAS,CAELwY,cAAe,CAAEhX,YAAa,WAC9B+W,cAAe,CAAElX,OAAQ,IAAKnB,MAAO,SAEzCD,MAAS,CAELsY,cAAe,CAAElX,OAAQ,IAAKC,QAAS,KAE3CnB,QAAW,CAEPoY,cAAe,CACXlX,OAAQ,IACRwX,SAAU,EACV3Y,MAAO,YAMvBgI,WAAY,SAAS7K,EAAUyb,GACtBzb,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAE3B1b,EAAS0b,YAAYsC,IAAM,CACvBrC,OAAQ3b,EAASzQ,EACjBsgB,aAAa,EAErB,EAEAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAChDmS,EAAS0b,aAAasC,KAAKnO,aAC5B5iB,KAAK4d,WAAW7K,EAAUyb,GAG9B,MAAMxI,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAW3H,EAAO2H,UAAY3tB,KAAKgmB,OAAO2H,UAAY,EAC5D,IAAIzc,EAAY8U,EAAO9U,UACnBlD,EAAYgY,EAAOhY,UAGnBwgB,EAAOS,mBACPjhB,GAAcwgB,EAAOS,iBAAiBC,qBAAuB,EAC7DlhB,GAAcwgB,EAAOS,iBAAiBE,kBAAoB,EACtDX,EAAOS,iBAAiBG,sBACxBle,GAAasd,EAAOS,iBAAiBG,sBAI7C,MAAMC,EAAczoB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAIsG,GACtDlD,EAAYA,EAAY2f,EAAW5a,EAAS4L,YAG5C5L,EAAS+K,IAAMuR,EAAcrhB,EAAY,IAAOqQ,EAG5CxV,EAAW,KACXkK,EAAS+K,IAAM,IAEvB,EAEAyR,QAAS,SAASxc,GACVA,EAAS0b,aAAasC,YACfhe,EAAS0b,YAAYsC,GAEpC,GCxHJE,GAAe,CACX3kB,KAAM,UACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,2BAGboZ,OAAQ,CACJxX,SAAU,IACV0C,UAAW,GACXlD,UAAW,EACXtC,OAAQ,SACRiiB,SAAU,EAEVC,eAAgB,CACZtoB,KAAM,QACNqoB,SAAU,EACVzc,UAAW,GACXlD,UAAW,IAKnB0G,OAAQ,CACJC,SAAS,EACTE,SAAU,cAGVqZ,cAAe,CACXhX,YAAa,gBACboZ,cAAe,GACfY,cAAc,GAIlBjD,cAAe,CACXlX,OAAQ,IACRC,QAAS,GACTpB,MAAO,SAIXwY,aAAc,CACVlZ,KAAM,QACNsY,MAAO,GAIXc,iBAAkB,CACdzY,QAAW,CAEPqY,cAAe,CAAEhX,YAAa,aAC9B+W,cAAe,CAAElX,OAAQ,EAAKwX,SAAU,IAE5CxY,UAAa,CAETmY,cAAe,CAAEhZ,KAAM,SAAU0a,MAAO,CAAC,GAAI,QAKzDhS,WAAY,SAAS7K,EAAUyb,GACtBzb,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAE3B1b,EAAS0b,YAAYwC,QAAU,CAC3BE,MAAO,EACPL,KAAsB,IAAhBlqB,KAAK8I,SACXkT,aAAa,EAErB,EAEAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAChDmS,EAAS0b,aAAawC,SAASrO,aAChC5iB,KAAK4d,WAAW7K,EAAUyb,GAG9B,MAAMlQ,EAAOvL,EAAS0b,YAAYwC,QAC5BjL,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAW3H,EAAO2H,UAAY3tB,KAAKgmB,OAAO2H,UAAY,EAG5D,IAAI3f,EAAYgY,EAAOhY,UACnBkD,EAAY8U,EAAO9U,UACnBsd,EAAOS,mBACPjhB,GAAcwgB,EAAOS,iBAAiBC,qBAAuB,EAC7DlhB,GAAcwgB,EAAOS,iBAAiBE,kBAAoB,EACtDX,EAAOS,iBAAiBG,sBACxBle,GAAasd,EAAOS,iBAAiBG,sBAK7C9Q,EAAK6S,OAAS9S,EAAKnN,EAGnB,MAAMkgB,GAAYxqB,KAAK8I,SAAW,IAAO1B,EAAY2f,EAC/C0D,GAAYzqB,KAAK8I,SAAW,IAAO1B,EAAY2f,EAWrD,GARA5a,EAAS8K,IAAiB,GAAXuT,EAAiB/S,EAChCtL,EAAS+K,IAAiB,GAAXuT,EAAiBhT,EAGhCtL,EAAS8K,IAAM,GACf9K,EAAS+K,IAAM,GAGXjV,EAAW,GAAK,CAChB,MAAMgc,EAAa,EAAwB,GAAlBhc,EAAW,IACpCkK,EAAS8K,IAAMgH,EACf9R,EAAS+K,IAAM+G,CACnB,CACJ,EAEA0K,QAAS,SAASxc,GACVA,EAAS0b,aAAawC,gBACfle,EAAS0b,YAAYwC,OAEpC,GC2CJK,GAAe,CACXhlB,KAAM,QACNK,MAAO,KACPC,YAAa,kCACbtH,KAAM,WAGN0gB,OAAQ,CACJjY,MAAO,EACPwjB,UAAW,EACXC,WAAY,EACZtjB,WAAY,IACZujB,oBAAqB,EACrBC,aAAa,GAIjBhd,OAAQ,CACJC,SAAS,EACTE,SAAU,MAGV8c,UAAW,CACPzc,KAAM,QACNiT,UAAW,EACXoI,QAAS,UAIbqB,aAAc,CACV1c,KAAM,OACN2c,gBAAiB,EACjBC,OAAO,GAIX7a,WAAY,CACRC,YAAa,UACb6a,WAAY,GACZnc,MAAO,QAIX0Y,iBAAkB,CACd5Y,MAAS,CAELkc,aAAc,CAAEC,gBAAiB,KACjC5a,WAAY,CAAE8a,WAAY,MAE9Bpc,MAAS,CAELgc,UAAW,CAAEzc,KAAM,QAAS8c,MAAO,KACnCP,oBAAqB,IAEzB5b,QAAW,CAEPoB,WAAY,CACRC,YAAa,SACb6a,WAAY,GACZjc,eAAgB,IAGxBC,UAAa,CAET4b,UAAW,CAAEzc,KAAM,SAAU0a,MAAO,CAAC,GAAK,IAC1C8B,aAAa,KAMzB5C,MAvMG,SAAoB/b,EAAU0b,EAAazI,EAAQnd,EAAU8kB,EAAUhtB,EAASC,GAEnF,IAAK6tB,EAAY7L,YAAa,CAE1B6L,EAAY+B,UAAYzd,EAAS1Q,EACjCosB,EAAYgC,UAAY1d,EAASzQ,EACjCmsB,EAAYwD,UAAYlf,EAASmf,GAAK,EACtCzD,EAAY9I,WAAa5S,EAAS8K,IAAM,EACxC4Q,EAAY7I,WAAa7S,EAAS+K,IAAM,EAGxC,MAAM+E,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EACxB6tB,EAAYnb,OAAS1M,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAG1C2L,EAAYnb,OAAS,KACrBmb,EAAYnb,OAAS,GAAqB,IAAhB1M,KAAK8I,UAGnC+e,EAAY0D,aAAevrB,KAAKipB,MAAM/M,EAAID,GAG1C4L,EAAY3F,WAAa9C,EAAOjY,OAAS,GAAsB,GAAhBnH,KAAK8I,UACpD+e,EAAY2D,UAA4B,GAAhBxrB,KAAK8I,SAE7B+e,EAAY7L,aAAc,CAC9B,CAGA,IAAI2O,EAAYvL,EAAOuL,UACnBc,EAAoB,IACpBrM,EAAOiJ,mBACHjJ,EAAOiJ,iBAAiBnY,kBACxB2X,EAAY3F,YAAc9C,EAAOiJ,iBAAiBnY,iBAElDkP,EAAOiJ,iBAAiBqD,qBACxBf,GAAavL,EAAOiJ,iBAAiBqD,oBAErCtM,EAAOiJ,iBAAiBrP,cACxByS,EAAoBrM,EAAOiJ,iBAAiBrP,cAKpD,IAAI2S,EAAmB,EACnBC,EAAqB,EAErB3pB,EAAW,KAEX0pB,EAAmB1pB,EAAW,IAC9B0pB,EAAmBA,EAAmBA,GAAoB,EAAI,EAAIA,GAClEC,EAAqBD,GACd1pB,EAAW,MAElB0pB,GAAoB,EAAI1pB,GAAY,IACpC0pB,EAAmBA,EAAmBA,GAAoB,EAAI,EAAIA,GAClEC,EAAqBD,GAIzB,MAAMpT,EAAQsP,EAAY0D,aAAgBtpB,EAAWjC,KAAKgE,GAAK,EAAI2mB,EAAYgB,EAGzE3S,EAAc,EAAIhZ,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAAKynB,EAAoBE,EACzE1S,EAAgB4O,EAAYnb,OAASqa,EAAW/N,EAAc2S,EAG9DzS,EAAUnf,EAAUiG,KAAK0E,IAAI6T,GAASU,EACtCE,EAAUnf,EAAUgG,KAAKiE,IAAIsU,GAASU,EAItC4S,EAAStT,EAAQ6G,EAAOwL,WAI9B,GAHAze,EAASmf,EAAuB,GAAnBtrB,KAAKiE,IAAI4nB,GAAgBF,EAAmB9D,EAAYwD,WAAa,EAAIM,GAGlF1pB,EAAW,IAAM,CACjB,MAAM6pB,EAA+B,GAAnBH,EAClBxf,EAAS1Q,EAAIosB,EAAY+B,WAAa1Q,EAAU2O,EAAY+B,WAAakC,EACzE3f,EAASzQ,EAAImsB,EAAYgC,WAAa1Q,EAAU0O,EAAYgC,WAAaiC,EAGzE,MAAMC,GAAa/rB,KAAKiE,IAAIsU,GAASU,EAAgB4O,EAAY3F,WAC3D8J,EAAYhsB,KAAK0E,IAAI6T,GAASU,EAAgB4O,EAAY3F,WAChE/V,EAAS8K,GAAK4Q,EAAY9I,YAAcgN,EAAYlE,EAAY9I,YAAc6M,EAC9Ezf,EAAS+K,GAAK2Q,EAAY7I,YAAcgN,EAAYnE,EAAY7I,YAAc4M,CAClF,MAEK,GAAI3pB,EAAW,IAAM,CACtBkK,EAAS1Q,EAAIyd,GAAW2O,EAAY+B,UAAY1Q,IAAY,EAAIyS,GAChExf,EAASzQ,EAAIyd,GAAW0O,EAAYgC,UAAY1Q,IAAY,EAAIwS,GAGhE,MAAMI,GAAa/rB,KAAKiE,IAAIsU,GAASU,EAAgB4O,EAAY3F,WAC3D8J,EAAYhsB,KAAK0E,IAAI6T,GAASU,EAAgB4O,EAAY3F,WAChE/V,EAAS8K,GAAK8U,EAAYH,EAAqB/D,EAAY9I,YAAc,EAAI6M,GAC7Ezf,EAAS+K,GAAK8U,EAAYJ,EAAqB/D,EAAY7I,YAAc,EAAI4M,EACjF,KAEK,CAED,GAAIxM,EAAOyL,oBAAsB,EAAG,CAChC,MAAMoB,EAAiBjsB,KAAKiE,IAAY,EAARsU,GAAa6G,EAAOyL,oBAAsB9D,EAC1E5a,EAASzQ,EAAIyd,EAAU8S,EACvB9f,EAAS1Q,EAAIyd,CACjB,KAAO,CAEH,MAAMgT,EAAa9M,EAAO9X,YAAc,GACxC6E,EAAS1Q,IAAMyd,EAAU/M,EAAS1Q,GAAKywB,EACvC/f,EAASzQ,IAAMyd,EAAUhN,EAASzQ,GAAKwwB,CAC3C,CAGA/f,EAAS8K,IAAMjX,KAAKiE,IAAIsU,GAASU,EAAgB4O,EAAY3F,WAC7D/V,EAAS+K,GAAKlX,KAAK0E,IAAI6T,GAASU,EAAgB4O,EAAY3F,UAChE,CAGA,GAAI9C,EAAO0L,YAAa,CACpB,MAAM3jB,EAAQ,EAAiC,IAA5B,EAAInH,KAAKib,IAAI9O,EAASmf,IACnCa,EAAatE,EAAY0D,aAAgBtpB,EAAWjC,KAAKgE,GAAK,EAAIob,EAAOuL,UAAYxjB,EAC3FgF,EAAS1Q,EAAI1B,EAAUiG,KAAK0E,IAAIynB,GAAclT,EAC9C9M,EAASzQ,EAAI1B,EAAUgG,KAAKiE,IAAIkoB,GAAclT,CAClD,CACJ,EA6EImT,SAAU,CAAC,MAAO,OAAQ,UAAW,YAGrCC,SAAU,CACNC,QAAQ,EACRC,QAAQ,EACRC,SAAS,EACTC,UAAU,IC5OlBC,GAAe,CACXhnB,KAAM,SACNK,MAAO,IACPrH,KAAM,WACNsH,YAAa,8BAGboZ,OAAQ,CACJ/X,UAAW,EACXiD,UAAW,IACX1C,SAAU,IACV+kB,SAAU,IACVC,UAAW,GACXC,UAAW,IAIf/e,OAAQ,CACJC,SAAS,EACTE,SAAU,cAGV6e,gBAAiB,CACbxc,YAAa,YACbH,OAAQ,GACRC,QAAS,IACT2c,YAAa,GAIjBC,cAAe,CACX7c,OAAQ,EACRC,QAAS,GACTpB,MAAO,SAIX0Y,iBAAkB,CACdvY,UAAa,CAET2d,gBAAiB,CAAE3c,OAAQ,GAAKC,QAAS,IACzC4c,cAAe,CAAE7c,OAAQ,EAAKC,QAAS,KAE3CnB,QAAW,CAEP+d,cAAe,CACX7c,OAAQ,IACRwX,SAAU,EACV3Y,MAAO,YAMvBkZ,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAGtB1b,EAAS0b,YAAY6E,SACtBvgB,EAAS0b,YAAY6E,OAAS,CAC1BO,aAAc,CAAExxB,EAAG,EAAGC,EAAG,GACzBwxB,aAAc,CAAEzxB,EAAG,EAAGC,EAAG,GACzByxB,aAAa,EACbC,YAAa,EACbC,cAAe,EACfC,WAAY,IAIpB,MAAM5V,EAAOvL,EAAS0b,YAAY6E,OAC5BtN,EAAShmB,KAAKgmB,OACpB,IAAI/X,EAAYugB,EAAOvgB,WAAa+X,EAAO/X,UAIvCugB,EAAOS,mBACPhhB,GAAcugB,EAAOS,iBAAiBC,qBAAuB,EAC7DjhB,GAAcugB,EAAOS,iBAAiBE,kBAAoB,GAO9D,MAAMgF,EAAc3vB,KAAK+N,MAGzB,IAAK+L,EAAKyV,aAAezV,EAAK2V,eAAiB,GACvCrtB,KAAK8I,UAAY8e,EAAOtd,WAAa8U,EAAO9U,WAAY,CAExDoN,EAAKyV,aAAc,EACnBzV,EAAK0V,YAAchO,EAAOxX,SAC1B8P,EAAK2V,cAAgBjO,EAAOuN,SAG5B,MAAMpU,EAAQvY,KAAK8I,SAAW9I,KAAKgE,GAAK,EAClCmY,EAA+B,GAAnBiD,EAAOwN,UAAmB5sB,KAAK8I,UAA+B,GAAnBsW,EAAOwN,WAEpElV,EAAKwV,aAAe,CAChBzxB,EAAGuE,KAAK0E,IAAI6T,GAAS4D,EAAW9U,EAAY,EAC5C3L,EAAGsE,KAAKiE,IAAIsU,GAAS4D,EAAW9U,EAAY,GAGhDqQ,EAAK4V,WAAaC,CACtB,CASJ,GALI7V,EAAK2V,cAAgB,IACrB3V,EAAK2V,eAAsB,GAAL5V,GAItBC,EAAKyV,YAGL,GAFAzV,EAAK0V,aAAoB,GAAL3V,EAEhBC,EAAK0V,YAAc,EAAG,CAEtB,MAAMP,EAAYzN,EAAOyN,UACzBnV,EAAKuV,aAAaxxB,IAAMic,EAAKwV,aAAazxB,EAAIic,EAAKuV,aAAaxxB,GAAKoxB,EACrEnV,EAAKuV,aAAavxB,IAAMgc,EAAKwV,aAAaxxB,EAAIgc,EAAKuV,aAAavxB,GAAKmxB,CACzE,MAEInV,EAAKyV,aAAc,OAIvBzV,EAAKuV,aAAaxxB,GAAK,IACvBic,EAAKuV,aAAavxB,GAAK,IAI3ByQ,EAAS8K,IAAMS,EAAKuV,aAAaxxB,EAAIgc,EAAK,GAC1CtL,EAAS+K,IAAMQ,EAAKuV,aAAavxB,EAAI+b,EAAK,GAGtCzX,KAAK8I,SAAW,KAChBqD,EAAS8K,KAAOjX,KAAK8I,SAAW,IAAOzB,EAAY,GACnD8E,EAAS+K,KAAOlX,KAAK8I,SAAW,IAAOzB,EAAY,GAE3D,EAEAshB,QAAS,SAASxc,GACVA,EAAS0b,aAAa6E,eACfvgB,EAAS0b,YAAY6E,MAEpC,GC/JJc,GAAe,CACX9nB,KAAM,OACNhH,KAAM,WACNqH,MAAO,KACPC,YAAa,qCAEboZ,OAAQ,CACJxX,SAAU,IACVR,UAAW,GACXkD,UAAW,EACXyc,SAAU,IAIdjZ,OAAQ,CACJC,SAAS,EACTE,SAAU,MAGVoZ,cAAe,CACXlX,OAAQ,IACRC,QAAS,GACTpB,MAAO,QAIXwY,aAAc,CACVlZ,KAAM,OACNmf,KAAM,GAIV/F,iBAAkB,CACd5Y,MAAS,CAEL0Y,aAAc,CAAEiG,KAAM,GACtBpG,cAAe,CAAElX,OAAQ,IAAKnB,MAAO,SAEzCD,MAAS,CAELsY,cAAe,CAAElX,OAAQ,IAAKC,QAAS,GAAKpB,MAAO,aAc/DkZ,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GACrD,MAAMolB,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9BxgB,EAAYgY,EAAOhY,WAAahO,KAAKgmB,OAAOhY,UAC5CkD,EAAY8U,EAAO9U,WAAalR,KAAKgmB,OAAO9U,UAC5Cyc,EAAW3H,EAAO2H,UAAY3tB,KAAKgmB,OAAO2H,SAG1CyG,EAAOxtB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAIsG,GAAalD,EAG5D+E,EAAS8K,IAAa,IAAPuW,EAAc/V,EAAKsP,EAGlC5a,EAAS+K,IAAyC,GAAnClX,KAAK0E,IAAIzC,EAAWjC,KAAKgE,GAAK,GAAWyT,EAAKsP,CACjE,EAMA4B,QAAS,SAASxc,GAElB,GC5EJuhB,GAAe,CACXhoB,KAAM,QACNhH,KAAM,WACNqH,MAAO,KACPC,YAAa,gCAEboZ,OAAQ,CACJxX,SAAU,IACVR,UAAW,GACXumB,aAAc,GACd5G,SAAU,GAIdjZ,OAAQ,CACJC,SAAS,EACTE,SAAU,OAGVoZ,cAAe,CACXlX,OAAQ,IACRC,QAAS,GACTpB,MAAO,UAIXwS,WAAY,CACRlR,YAAa,SACbjJ,UAAW,IAIfmgB,aAAc,CACVlZ,KAAM,OACNmf,KAAM,GAIVhG,eAAgB,CACZ1Z,SAAS,EACTwZ,WAAY,KAIhBG,iBAAkB,CACd5Y,MAAS,CACL0S,WAAY,CAAElR,YAAa,UAAWjJ,UAAW,KAErD4H,QAAW,CACPoY,cAAe,CAAElX,OAAQ,EAAKnB,MAAO,YAcjDkZ,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAEtB1b,EAAS0b,YAAY6F,QACtBvhB,EAAS0b,YAAY6F,MAAQ,CACzBE,aAAczhB,EAASI,KACvBshB,gBAAiB1hB,EAASG,SAAW,IAI7C,MAAM8S,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GACpC,IAAIxgB,EAAYgY,EAAOhY,WAAahO,KAAKgmB,OAAOhY,UAC5CumB,EAAevO,EAAOuO,cAAgBv0B,KAAKgmB,OAAOuO,aACtD,MAAM5G,EAAW3H,EAAO2H,UAAY3tB,KAAKgmB,OAAO2H,SAG5Ca,EAAOS,mBACPjhB,GAAcwgB,EAAOS,iBAAiBC,qBAAuB,EAC7DlhB,GAAcwgB,EAAOS,iBAAiBE,kBAAoB,EAC1DoF,GAAiB/F,EAAOS,iBAAiByF,kBAAoB,GAIjE,MAAM1I,EAASplB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAAK2pB,EAGlDxhB,EAAS+K,IAAkB,IAAZ9P,EAAmBqQ,EAAKsP,GAAY,EAAe,GAAX9kB,GACvDkK,EAAS8K,IAAe,IAATmO,EAAgB3N,EAAKsP,EAGpC5a,EAASI,KAAOJ,EAASK,UAAY,EAAe,GAAXvK,GAGzCkK,EAASG,QAAU,EAAe,GAAXrK,CAC3B,EAMA0mB,QAAS,SAASxc,GAEVA,EAAS0b,aAAa6F,OACtBvhB,EAASG,QAAUH,EAAS0b,YAAY6F,MAAMG,gBAC9C1hB,EAASI,KAAOJ,EAAS0b,YAAY6F,MAAME,oBACpCzhB,EAAS0b,YAAY6F,QAG5BvhB,EAASG,QAAU,EACnBH,EAASI,KAAOJ,EAASK,UAI7BL,EAAS8K,IAAM,GACf9K,EAAS+K,IAAM,EACnB,GCxHJyE,GAAe,CACXjW,KAAM,SACNhH,KAAM,WACNqH,MAAO,KACPC,YAAa,2BAEboZ,OAAQ,CACJxX,SAAU,IACVP,UAAW,GACXiD,UAAW,GACXyc,SAAU,GAIdjZ,OAAQ,CACJC,SAAS,EACTE,SAAU,OAGVoZ,cAAe,CACXlX,OAAQ,EACRC,QAAS,GACTpB,MAAO,SAIX0Y,iBAAkB,CACdvY,UAAa,CAETkY,cAAe,CAAElX,OAAQ,EAAKC,QAAS,KAE3CnB,QAAW,CAEPoY,cAAe,CAAElX,OAAQ,EAAKC,QAAS,GAAKpB,MAAO,YAc/DkZ,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAEtB1b,EAAS0b,YAAYlM,SACtBxP,EAAS0b,YAAYlM,OAAS,CAC1BiS,aAAczhB,EAASI,OAI/B,MAAM6S,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GACpC,IAAIvgB,EAAY+X,EAAO/X,WAAajO,KAAKgmB,OAAO/X,UAChD,MAAM0f,EAAW3H,EAAO2H,UAAY3tB,KAAKgmB,OAAO2H,SAG5Ca,EAAOS,mBACPhhB,GAAcugB,EAAOS,iBAAiBC,qBAAuB,EAC7DjhB,GAAcugB,EAAOS,iBAAiBE,kBAAoB,GAI9D,MAAMwF,GAAW/tB,KAAK8I,SAAW,IAAOzB,EAAY0f,EAC9CiH,GAAWhuB,KAAK8I,SAAW,IAAOzB,EAAY0f,EAG9CkH,EAAU,EAAe,GAAXhsB,EACpBkK,EAAS8K,IAAgB,GAAV8W,EAAgBtW,EAAKwW,EACpC9hB,EAAS+K,IAAgB,GAAV8W,EAAgBvW,EAAKwW,EAGpC9hB,EAASI,KAAOJ,EAASK,UAAY,EAA4B,IAAvBxM,KAAK8I,SAAW,IAC9D,EAMA6f,QAAS,SAASxc,GAEVA,EAAS0b,aAAalM,QACtBxP,EAASI,KAAOJ,EAAS0b,YAAYlM,OAAOiS,oBACrCzhB,EAAS0b,YAAYlM,QAE5BxP,EAASI,KAAOJ,EAASK,SAI7BL,EAAS8K,IAAM,GACf9K,EAAS+K,IAAM,EACnB,GCrEJgX,GAAe,CACXxoB,KAAM,OACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,uCAGboZ,OAAQ,CACJxX,SAAU,IACV8e,gBAAiB,CAAEC,SAAS,EAAMC,MAAO,GACzC+D,UAAW,EACX/I,UAAW,SACXuM,iBAAkB,EAClBC,WAAW,EACXC,YAAY,EACZC,kBAAkB,EAClBxF,YAAa,GACbhkB,OAAQ,SACRiiB,SAAU,GAEVC,eAAgB,CACZtoB,KAAM,OACNqoB,SAAU,GACV4D,UAAW,EACXje,OAAQ,IAKhBoB,OAAQ,CACJC,SAAS,EACTE,SAAU,MAGV+c,aAAc,CACV1c,KAAM,OACN2c,gBAAiB,EACjBsD,kBAAkB,GAItBle,WAAY,CACRC,YAAa,UACbke,aAAc,IACdC,gBAAiB,GACjBzf,MAAO,UAIXwY,aAAc,CACVlZ,KAAM,QACNsY,MAAO,GAIXc,iBAAkB,CACd5Y,MAAS,CAELkc,aAAc,CAAEC,gBAAiB,KACjC5a,WAAY,CAAErB,MAAO,SAEzBD,MAAS,CAELic,aAAc,CAAEuD,kBAAkB,GAClC3M,UAAW,eAEf3S,QAAW,CAEPoB,WAAY,CACRC,YAAa,SACbke,aAAc,IACdtf,eAAgB,GAEpBkf,WAAW,GAEfjf,UAAa,CAET6b,aAAc,CAAE1c,KAAM,SAAU0a,MAAO,CAAC,GAAK,IAC7CpH,UAAW,YAYvB5K,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAI3B,MAAM5L,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAGxB,IAAI4nB,EAAYgG,EAAOhG,WAAaxoB,KAAKgmB,OAAOwC,UAC9B,WAAdA,IACAA,EAAY5hB,KAAK8I,SAAW,GAAM,YAAc,qBAGpDqD,EAAS0b,YAAYqG,KAAO,CACxBQ,WAAY1uB,KAAKipB,MAAM/M,EAAID,GAC3B0S,YAAa3uB,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,IAAO,GAC7C0N,UAAWzd,EAAS1Q,EACpBouB,UAAW1d,EAASzQ,EACpBqjB,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrB0K,UAAWA,EACX5F,aAAa,EAErB,EAWAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAaqG,MAAMlS,aAC7B5iB,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAYqG,KAC5B9O,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAWa,EAAOb,UAAY,EAGpC,IAAI4D,EAAYvL,EAAOuL,UACnBwD,EAAmB/O,EAAO+O,iBAC1BvG,EAAOS,mBACHT,EAAOS,iBAAiBqD,qBACxBf,GAAa/C,EAAOS,iBAAiBqD,oBAErC9D,EAAOS,iBAAiB8F,mBACxBA,GAAoBvG,EAAOS,iBAAiB8F,mBAKpD,IAAIS,EAAgB3sB,EAChBmd,EAAOiP,aAGHO,EADA3sB,EAAW,GACqC,GAAhC7I,KAAKqK,WAAsB,EAAXxB,GAEhB,GAA+C,GAAzC7I,KAAKoK,YAA+B,GAAlBvB,EAAW,MAK3D,MAAM4sB,EAAiBlE,EAAY3qB,KAAKgE,GAAK,EAAI+iB,EAC3CnF,EAA+B,sBAAnBlK,EAAKkK,WAAoC,EAAK,EAC1DkN,EAAepX,EAAKgX,WAAcG,EAAiBD,EAAgBhN,EAGzE,IAAI3I,EAAgBvB,EAAKiX,YACrBvP,EAAOgP,YACPnV,GAAkB,EAAe,GAAXhX,GAED,IAArBksB,IAGAlV,GAAkB,GAAKkV,EAAmB,GADtBnuB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,KAKjD,MAAMkV,EAAUnf,EAAUiG,KAAK0E,IAAIoqB,GAAgB7V,EAC7CE,EAAUnf,EAAUgG,KAAKiE,IAAI6qB,GAAgB7V,EAYnD,GARA9M,EAAS1Q,GADS,KACHyd,EAAU/M,EAAS1Q,GAClC0Q,EAASzQ,GAFS,KAEHyd,EAAUhN,EAASzQ,GAGlCyQ,EAAS8K,GAA8B,IAAxBiC,EAAU/M,EAAS1Q,GAClC0Q,EAAS+K,GAA8B,IAAxBiC,EAAUhN,EAASzQ,GAG9BuG,EAAW,GAAK,CAChB,MAAMymB,EAA6B,IAAhB,EAAIzmB,GACvBkK,EAAS8K,GAAK9K,EAAS8K,GAAKyR,EAAYhR,EAAKqH,YAAc,EAAI2J,GAC/Dvc,EAAS+K,GAAK/K,EAAS+K,GAAKwR,EAAYhR,EAAKsH,YAAc,EAAI0J,EACnE,CACJ,EAMAC,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAaqG,KAAM,CAE5B,MAAMxW,EAAOvL,EAAS0b,YAAYqG,KAClC/hB,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,kBACZ7S,EAAS0b,YAAYqG,IAChC,CACJ,EAOAzqB,WAAY,SAAS5B,GACjB,OAAOA,EAAIA,CACf,EAOA2B,YAAa,SAAS3B,GAClB,OAAOA,GAAK,EAAIA,EACpB,GCnOJktB,GAAe,CACXrpB,KAAM,OACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,2DAGboZ,OAAQ,CACJxX,SAAU,IACVonB,WAAY,GACZC,aAAc,GACdC,cAAe,IACfC,aAAc,GACdC,SAAU,GACVC,eAAe,EACfC,cAAc,EACdxqB,OAAQ,OAERkiB,eAAgB,CACZtoB,KAAM,OACNqoB,SAAU,GACViI,WAAY,GACZO,OAAQ,GACRC,QAAS,MAKjB1hB,OAAQ,CACJC,SAAS,EACTE,SAAU,OAGVwhB,UAAW,CACPN,aAAc,SACdJ,KAAM,OACNW,QAAS,aAIbC,WAAY,CACRxf,OAAQ,IACRC,QAAS,GACTwf,OAAQ,EACR5gB,MAAO,eAIX6gB,gBAAiB,CACbC,aAAc,GACdC,cAAe,IACfC,OAAQ,gBAIZC,aAAc,CACV3hB,KAAM,QACN4hB,aAAc,GACdvG,QAAS,WAIbwG,SAAU,CACNC,MAAO,CAAEpB,WAAY,GAAIQ,QAAS,KAClCa,MAAO,CAAErB,WAAY,GAAIQ,QAAS,OAW1CxY,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAG3B1b,EAAS0b,YAAYkH,KAAO,CACxBhH,OAAQ5b,EAAS1Q,EACjBqsB,OAAQ3b,EAASzQ,EACjB40B,UAAWnkB,EAASI,KACpBwS,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrBqZ,eAAyC,IAAxBpkB,EAAS1Q,EAAI1B,GAC9BiiB,aAAa,EAErB,EAWAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAakH,MAAM/S,aAC7B5iB,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAYkH,KAC5B3P,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAWa,EAAOb,UAAY,EAE9BiI,EAAa5P,EAAO4P,WAAajI,EAAW5a,EAAS4L,YACrDwX,EAASnQ,EAAO6P,aAChBO,EAAUpQ,EAAO8P,cAGjBsB,EAAkBpR,EAAO+P,aACzBsB,EAAU,EAA0B,GAAtBrR,EAAO+P,aAE3B,GAAIltB,EAAWuuB,EAAiB,CAE5B,MAAME,EAAiBzuB,EAAWuuB,EAC5BG,EAAcv3B,KAAKoK,YAAYktB,GAGrCvkB,EAASI,KAAOmL,EAAK4Y,WAAa,GAAK,EAAIf,GAAUoB,GAGrDxkB,EAASzQ,EAAIgc,EAAKoQ,OAAuB,EAAd6I,EAAkBxkB,EAAS4L,YAGtD5L,EAAS8K,GAAK,EACd9K,EAAS+K,GAAK,CAElB,MAAO,GAAIjV,EAAWwuB,EAAS,CAE3B,MAAMG,GAAgB3uB,EAAWuuB,IAAoBC,EAAUD,GAG/D,IAAIK,EAAY7wB,KAAKiE,IAAI2sB,EAAe5wB,KAAKgE,IAG7C,GAAIob,EAAOgQ,SAAW,GAAKwB,EAAe,IAAOA,EAAe,GAAK,CACjE,MAAME,GAAgBF,EAAe,IAAO,GAE5CC,EAAY,IAAmB,IADbz3B,KAAKyK,eAAeitB,EAE1C,CAWA,GARA3kB,EAASzQ,EAAIgc,EAAKoQ,OAAS+I,EAAY7B,EAGnC5P,EAAOkQ,eACPnjB,EAAS1Q,EAAIic,EAAKqQ,OAAS8I,EAAYnZ,EAAK6Y,gBAI5CK,EAAe,GAAK,CAEpB,MAAMG,EAAiC,EAAfH,EACxBzkB,EAASI,KAAOmL,EAAK4Y,WAAaf,GAAUC,EAAUD,GAAUwB,EACpE,KAAO,CAEH,MAAMC,EAAsC,GAAtBJ,EAAe,IACrCzkB,EAASI,KAAOmL,EAAK4Y,WAAad,GAAWA,EAAU,GAAKwB,EAAe,GAC/E,CAGA7kB,EAAS8K,GAA2B,GAAtBS,EAAK6Y,eACnBpkB,EAAS+K,IAAMlX,KAAK0E,IAAIksB,EAAe5wB,KAAKgE,IAAMgrB,EAAa,EAEnE,KAAO,CAEH,MAAMiC,GAAgBhvB,EAAWwuB,IAAY,EAAIA,GAC3CS,EAAY93B,KAAK8K,cAAc+sB,GAKrC,GAFA9kB,EAASzQ,EAAIgc,EAAKoQ,OAEd1I,EAAOiQ,cAEP,GAAI4B,EAAe,GAAK,CACpB,MAAME,EAAiBF,EAAe,GACtC9kB,EAASI,KAAOmL,EAAK4Y,WAAa,GAAK,EAAa,GAATf,IAAiB,EAAI4B,GACpE,KAAO,CAEH,MAAMC,GAAmBH,EAAe,IAAO,GAC/C9kB,EAASI,KAAOmL,EAAK4Y,WAAsB,GAATf,GAAgB,EAAa,GAATA,GAAgB6B,EAC1E,MAGAjlB,EAASI,KAAOmL,EAAK4Y,WAAaf,GAAU,EAAIA,GAAU2B,GAI9D/kB,EAAS8K,GAAKS,EAAKqH,WAAamS,EAChC/kB,EAAS+K,GAAKQ,EAAKsH,WAAakS,CACpC,CACJ,EAMAvI,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAakH,KAAM,CAC5B,MAAMrX,EAAOvL,EAAS0b,YAAYkH,KAElC5iB,EAASI,KAAOmL,EAAK4Y,UACrBnkB,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,kBACZ7S,EAAS0b,YAAYkH,IAChC,CACJ,EAKAvrB,YAAa,SAAS3B,GAClB,OAAOA,GAAK,EAAIA,EACpB,EAEAgC,eAAgB,SAAShC,GACrB,OAAOA,EAAI,GACL,EAAIA,EAAIA,EAAIA,EACZ,EAAI7B,KAAKC,KAAI,EAAK4B,EAAI,EAAG,GAAK,CACxC,EAEAqC,cAAe,SAASrC,GACpB,MAAMsC,EAAK,OACLC,EAAK,KAEX,OAAIvC,EAAI,EAAIuC,EACDD,EAAKtC,EAAIA,EACTA,EAAI,EAAIuC,EACRD,GAAMtC,GAAK,IAAMuC,GAAMvC,EAAI,IAC3BA,EAAI,IAAMuC,EACVD,GAAMtC,GAAK,KAAOuC,GAAMvC,EAAI,MAE5BsC,GAAMtC,GAAK,MAAQuC,GAAMvC,EAAI,OAE5C,GC9OJwvB,GAAe,CACX3rB,KAAM,QACNK,MAAO,IACPrH,KAAM,WACNsH,YAAa,qCAGboZ,OAAQ,CAEJsH,gBAAiB,CACbC,SAAS,EACTC,MAAO,EACP0K,SAAU,EACVC,SAAU,GAIdC,OAAQ,CACJ,CAAE9rB,KAAM,SAAUkhB,MAAO,KACzB,CAAElhB,KAAM,OAAQkhB,MAAO,KACvB,CAAElhB,KAAM,OAAQkhB,MAAO,IACvB,CAAElhB,KAAM,WAAYkhB,MAAO,KAG/B6K,UAAW,QACXpnB,QAAS,OACTqnB,OAAQ,EACRC,YAAa,GACbplB,KAAM,GACNnF,UAAW,GACXxL,SAAU,EACV2wB,QAAQ,EACRqF,gBAAgB,EAChB9sB,OAAQ,OACRiiB,SAAU,IAEVC,eAAgB,CACZtoB,KAAM,QACN2L,QAAS,OACT0c,SAAU,IACVwF,QAAQ,EACRmF,OAAQ,IAKhB5jB,OAAQ,CACJC,SAAS,EACTE,SAAU,SAGV4jB,YAAa,CACTC,MAAO,SACPC,OAAQ,OACRC,OAAQ,QACRC,KAAM,aAIVhL,WAAY,CACRiL,cAAe,EACfC,UAAW,EACXC,aAAc,EACdpjB,MAAO,gBAIXqjB,SAAU,CACNliB,OAAQ,IACRC,QAAS,IACTE,YAAa,UACbtB,MAAO,WAIXgc,aAAc,CACV1c,KAAM,aACNgkB,cAAe,GACf1Q,UAAW,aAIfuO,SAAU,CACNC,MAAO,CAAEsB,OAAQ,EAAGnlB,KAAM,KAC1B8jB,MAAO,CAAEqB,OAAQ,EAAGnlB,KAAM,MAYlCyK,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,EAASu4B,GAChDpmB,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAG3B,MAAMzI,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAG9BG,EAAS5b,EAAS1Q,EAClBqsB,EAAS3b,EAASzQ,EAGlB6c,EAAQvY,KAAKipB,MAAM9c,EAASzQ,EAAI1B,EAASmS,EAAS1Q,EAAI1B,GAGtDy4B,EAAoBxyB,KAAK8I,SAAW,GAAM,GAAI,EAGpD,IAAIoQ,EAASC,EACb,MAAM5M,EAAO6S,EAAO7S,KAAOJ,EAAS4L,YAC9Bnc,GAAawjB,EAAOxjB,UAAY,GAAKoE,KAAKgE,GAAK,IAAOwuB,EAE5D,OAAQpT,EAAO/U,SACX,IAAK,OACD6O,EAAUnf,EACVof,EAAUnf,EACVZ,KAAKq5B,sBAAsBtmB,EAAUoM,EAAOhM,EAAM6S,EAAOsS,OAAQtS,EAAOuS,YAAa/1B,EAAU7B,EAASC,GACxG,MAEJ,IAAK,QACDZ,KAAKs5B,uBAAuBvmB,EAAUoM,EAAOhM,EAAM3Q,EAAU7B,EAASC,GACtE,MAEJ,IAAK,SACDZ,KAAKu5B,wBAAwBxmB,EAAUoM,EAAOhM,EAAM3Q,EAAU7B,EAASC,GACvE,MAEJ,IAAK,WACDZ,KAAKw5B,0BAA0BzmB,EAAUoM,EAAOhM,EAAM3Q,EAAU7B,EAASC,GACzE,MAGJ,QAEI,MAAM64B,EAAetmB,EACrB2M,EAAUnf,EAAUiG,KAAK0E,IAAI6T,EAAQ3c,GAAYi3B,EACjD1Z,EAAUnf,EAAUgG,KAAKiE,IAAIsU,EAAQ3c,GAAYi3B,EAIzD1mB,EAAS0b,YAAYwJ,MAAQ,CACzBtJ,OAAQA,EACRD,OAAQA,EACR5O,QAAS/M,EAAS0b,YAAYiL,cAAgB5Z,EAC9CC,QAAShN,EAAS0b,YAAYkL,cAAgB5Z,EAC9C4F,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrBsb,kBAAmBA,EACnBxW,aAAa,EAErB,EAKAyW,sBAAuB,SAAStmB,EAAUoM,EAAOhM,EAAMmlB,EAAQC,EAAa/1B,EAAU7B,EAASC,GAC3F,MAAMg5B,EAAsB,EAAVhzB,KAAKgE,GAAU0tB,EAE3BuB,EAAWjzB,KAAKgB,MAAMuX,EAAQya,GAAYtB,EAGhD,IAAIhlB,EACAwmB,EAHYlzB,KAAK8I,SAAW,IAO5B4D,EAASH,EACT2mB,EAAcD,EAAWD,EAAWp3B,IAGpC8Q,EAASH,EAAOolB,EAChBuB,EAAcD,EAAWD,EAAsB,GAAXA,EAAiBp3B,GAGzDuQ,EAAS0b,YAAYiL,aAAe/4B,EAAUiG,KAAK0E,IAAIwuB,GAAexmB,EACtEP,EAAS0b,YAAYkL,aAAe/4B,EAAUgG,KAAKiE,IAAIivB,GAAexmB,CAC1E,EAKAgmB,uBAAwB,SAASvmB,EAAUoM,EAAOhM,EAAM3Q,EAAU7B,EAASC,GAEvE,MAAM6H,GAAK0W,EAAQvY,KAAKgE,KAAiB,EAAVhE,KAAKgE,IAG9BnJ,EAAe,IAAP0R,EACd,IAAI9Q,EAAI,GAAKuE,KAAKC,IAAID,KAAKiE,IAAIpC,EAAI7B,KAAKgE,GAAK,GAAI,GAC7CtI,IAAM,GAAKsE,KAAK0E,IAAI7C,EAAI7B,KAAKgE,GAAK,GAAK,EAAIhE,KAAK0E,IAAI,EAAI7C,EAAI7B,KAAKgE,GAAK,GAChE,EAAIhE,KAAK0E,IAAI,EAAI7C,EAAI7B,KAAKgE,GAAK,GAAKhE,KAAK0E,IAAI,EAAI7C,EAAI7B,KAAKgE,GAAK,IAGzE,MAAMmvB,EAAOnzB,KAAK0E,IAAI9I,GAChBw3B,EAAOpzB,KAAKiE,IAAIrI,GAChBy3B,EAAO53B,EAAI03B,EAAOz3B,EAAI03B,EACtBE,EAAO73B,EAAI23B,EAAO13B,EAAIy3B,EAE5BhnB,EAAS0b,YAAYiL,aAAe/4B,EAAUs5B,EAAOx4B,EACrDsR,EAAS0b,YAAYkL,aAAe/4B,EAAUs5B,EAAOz4B,CACzD,EAKA83B,wBAAyB,SAASxmB,EAAUoM,EAAOhM,EAAM3Q,EAAU7B,EAASC,GAExE,MACMu5B,IADehb,EAAQ3c,IACuB,EAAVoE,KAAKgE,IAAqB,EAAVhE,KAAKgE,KAAqB,EAAVhE,KAAKgE,IAE/E,IAAIvI,EAAGC,EACP,MAAM83B,EAAWjnB,EAGbgnB,EAAkBvzB,KAAKgE,GAAK,GAAKuvB,GAAmB,EAAIvzB,KAAKgE,GAAK,GAElEvI,EAAI+3B,EACJ93B,EAAI83B,EAAWxzB,KAAKyzB,IAAIF,IACjBA,EAAkB,EAAIvzB,KAAKgE,GAAK,GAEvCvI,EAAI+3B,EAAWxzB,KAAKyzB,IAAIF,GACxB73B,EAAI83B,GACGD,EAAkB,EAAIvzB,KAAKgE,GAAK,GAEvCvI,GAAK+3B,EACL93B,GAAK83B,EAAWxzB,KAAKyzB,IAAIF,KAGzB93B,GAAK+3B,EAAWxzB,KAAKyzB,IAAIF,GACzB73B,GAAK83B,GAIT,MAAML,EAAOnzB,KAAK0E,IAAI9I,GAChBw3B,EAAOpzB,KAAKiE,IAAIrI,GAChBy3B,EAAO53B,EAAI03B,EAAOz3B,EAAI03B,EACtBE,EAAO73B,EAAI23B,EAAO13B,EAAIy3B,EAE5BhnB,EAAS0b,YAAYiL,aAAe/4B,EAAUs5B,EAC9ClnB,EAAS0b,YAAYkL,aAAe/4B,EAAUs5B,CAClD,EAKAV,0BAA2B,SAASzmB,EAAUoM,EAAOhM,EAAM3Q,EAAU7B,EAASC,GAE1E,MAAM05B,EAAW,CACb,CAAEj4B,EAAG,EAAGC,GAAI6Q,GACZ,CAAE9Q,EAAW,MAAP8Q,EAAc7Q,EAAU,GAAP6Q,GACvB,CAAE9Q,EAAU,KAAP8Q,EAAc7Q,EAAU,GAAP6Q,IAIpBonB,EAAY3zB,KAAKgJ,OAAQuP,EAAQvY,KAAKgE,KAAiB,EAAVhE,KAAKgE,IAAW,GAAK,EAClE4vB,GAAaD,EAAY,GAAK,EAG9BE,EAAe7zB,KAAK8I,SACpBrN,EAAIi4B,EAASC,GAAWl4B,GAAKi4B,EAASE,GAAWn4B,EAAIi4B,EAASC,GAAWl4B,GAAKo4B,EAC9En4B,EAAIg4B,EAASC,GAAWj4B,GAAKg4B,EAASE,GAAWl4B,EAAIg4B,EAASC,GAAWj4B,GAAKm4B,EAG9EV,EAAOnzB,KAAK0E,IAAI9I,GAChBw3B,EAAOpzB,KAAKiE,IAAIrI,GAChBy3B,EAAO53B,EAAI03B,EAAOz3B,EAAI03B,EACtBE,EAAO73B,EAAI23B,EAAO13B,EAAIy3B,EAE5BhnB,EAAS0b,YAAYiL,aAAe/4B,EAAUs5B,EAC9ClnB,EAAS0b,YAAYkL,aAAe/4B,EAAUs5B,CAClD,EAWApL,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAawJ,OAAOrV,aAC9B5iB,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAYwJ,MAC5BjS,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAGpC,IAmBI1O,EAASC,EAnBT2a,EAAgB7xB,EAGpB,GAAImd,EAAO2U,SAAW,EAAG,CACrB,MAAMC,EAAY,GAAM5U,EAAO2U,SAAW,EACpCE,EAAU,GAAM7U,EAAO2U,SAAW,EAGpCD,EADA7xB,EAAW+xB,EACK/xB,EAAW+xB,EAAY,GAChC/xB,EAAWgyB,EACF,GAEA,IAAOhyB,EAAWgyB,IAAY,EAAIA,GAAW,EAErE,CAOA,GALqB76B,KAAKyK,eAAeiwB,GAKrCA,GAAiB,GAAK,CAEtB,MAAMI,EAA+B,EAAhBJ,EACrB5a,EAAUxB,EAAKqQ,QAAUrQ,EAAKwB,QAAUxB,EAAKqQ,QAAU3uB,KAAKoK,YAAY0wB,GACxE/a,EAAUzB,EAAKoQ,QAAUpQ,EAAKyB,QAAUzB,EAAKoQ,QAAU1uB,KAAKoK,YAAY0wB,EAC5E,KAAO,CAEH,MAAMC,EAAyC,GAAvBL,EAAgB,IACxC5a,EAAUxB,EAAKwB,SAAWxB,EAAKqQ,OAASrQ,EAAKwB,SAAW9f,KAAKqK,WAAW0wB,GACxEhb,EAAUzB,EAAKyB,SAAWzB,EAAKoQ,OAASpQ,EAAKyB,SAAW/f,KAAKqK,WAAW0wB,EAC5E,CAGA,GAAI/U,EAAOmN,OAAQ,CAEf,MAAMhD,EAAY,GAClBpd,EAAS1Q,IAAMyd,EAAU/M,EAAS1Q,GAAK8tB,EACvCpd,EAASzQ,IAAMyd,EAAUhN,EAASzQ,GAAK6tB,CAC3C,MAEIpd,EAAS1Q,EAAIyd,EACb/M,EAASzQ,EAAIyd,EAQjB,GAJAhN,EAAS8K,GAA8B,IAAxBiC,EAAU/M,EAAS1Q,GAClC0Q,EAAS+K,GAA8B,IAAxBiC,EAAUhN,EAASzQ,GAG9BuG,EAAW,GAAK,CAChB,MAAMmyB,EAA+B,IAAhB,EAAInyB,GACzBkK,EAAS8K,GAAK9K,EAAS8K,GAAKmd,EAAc1c,EAAKqH,YAAc,EAAIqV,GACjEjoB,EAAS+K,GAAK/K,EAAS+K,GAAKkd,EAAc1c,EAAKsH,YAAc,EAAIoV,EACrE,CACJ,EAMAzL,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAawJ,MAAO,CAC7B,MAAM3Z,EAAOvL,EAAS0b,YAAYwJ,MAClCllB,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,kBACZ7S,EAAS0b,YAAYwJ,aACrBllB,EAAS0b,YAAYiL,oBACrB3mB,EAAS0b,YAAYkL,YAChC,CACJ,EAKAlvB,eAAgB,SAAShC,GACrB,OAAOA,EAAI,GACL,EAAIA,EAAIA,EAAIA,EACZ,EAAI7B,KAAKC,KAAI,EAAK4B,EAAI,EAAG,GAAK,CACxC,EAEA2B,YAAa,SAAS3B,GAClB,OAAOA,GAAK,EAAIA,EACpB,EAEA4B,WAAY,SAAS5B,GACjB,OAAOA,EAAIA,CACf,GC/XJ2tB,GAAe,CACX9pB,KAAM,UACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,qCAGboZ,OAAQ,CACJxX,SAAU,IACViE,OAAQ,IACRC,OAAQ,GACRuoB,WAAW,EACXC,SAAS,EACTC,UAAW,GACXjqB,UAAW,EACXxF,OAAQ,OACRiiB,SAAU,EAEVC,eAAgB,CACZtoB,KAAM,UACNmN,OAAQ,IACRC,OAAQ,GACRib,SAAU,GAEdyN,aAAa,EACbC,cAAc,GAIlB3mB,OAAQ,CACJC,SAAS,EACTE,SAAU,OAGVymB,UAAW,CACPvkB,OAAQ,CAAE1U,EAAG,IAAKC,EAAG,IACrB0U,QAAS,CAAE3U,EAAG,GAAKC,EAAG,KACtB4U,YAAa,SACbtB,MAAO,WAIX2lB,cAAe,CACXtqB,QAAS,OACTuqB,eAAgB,EAChBC,QAAS,IAIbC,cAAe,CACXC,OAAQ,GACRnF,OAAQ,GACRoF,SAAU,GACVhmB,MAAO,UAIXimB,iBAAkB,CACdnD,OAAO,EACPC,QAAQ,EACRC,QAAQ,GAIZ7B,SAAU,CACNC,MAAO,CAAEvkB,OAAQ,EAAKC,OAAQ,GAAKyoB,UAAW,IAC9ClE,MAAO,CAAExkB,OAAQ,IAAKC,OAAQ,IAAMyoB,UAAW,OAWvDvd,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAI3B,MAAM5L,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAExBmS,EAAS0b,YAAY2H,QAAU,CAC3BzF,QAAS9N,EACT+N,QAAS9N,EACT6L,OAAQ5b,EAAS1Q,EACjBqsB,OAAQ3b,EAASzQ,EACjBqjB,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrB8E,aAAa,EAErB,EAWAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAa2H,SAASxT,aAChC5iB,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAY2H,QAC5BpQ,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAWa,EAAOb,UAAY,EAGpC,IAiCI7N,EAASC,EAjCTtN,EAASuT,EAAOvT,OAChBC,EAASsT,EAAOtT,OAGpB,GAAIsT,EAAOqV,cAA2B,IAAX5oB,GAA2B,IAAXC,EAAc,CAErD,MAAMopB,EAAarpB,EAASC,EACtB5I,EAASlD,KAAKkb,KAAK,EAAIga,GAC7BrpB,GAAU3I,EACV4I,GAAU5I,CACd,CAGA,GAAIkc,EAAOiV,UAGP,GAAIpyB,EAAW,GAAK,CAChB,MAAMkzB,EAAyB,EAAXlzB,EACpB4J,EAAS,GAAKA,EAAS,GAAKzS,KAAKg8B,mBAAmBD,EAAa/V,GACjEtT,EAAS,GAAK,EAAID,EAAS,IAAMuT,EAAOqV,aAAe,EAAI,EAC/D,KAAO,CACH,MAAMU,EAAiC,GAAlBlzB,EAAW,IAChC4J,IAAmB,EAAIA,GAAUzS,KAAKg8B,mBAAmBD,EAAa/V,GACtEtT,EAAS,GAAKA,EAAS,GAAK1S,KAAKg8B,mBAAmBD,EAAa/V,EACrE,KACG,CAEH,MAAM+I,EAAe/uB,KAAKg8B,mBAAmBnzB,EAAUmd,GACvDvT,EAAS,GAAKA,EAAS,GAAKsc,EAAepB,EAC3Cjb,EAAS,GAAKA,EAAS,GAAKqc,EAAepB,CAC/C,CAwBA,GAnBI3H,EAAOoV,aAEPtb,EAAUnf,EAAU2d,EAAKqS,QAAUle,EACnCsN,EAAUnf,EAAU0d,EAAKsS,QAAUle,IAGnCoN,EAAUxB,EAAKqQ,OAASlc,EACxBsN,EAAUzB,EAAKoQ,OAAShc,GAI5BK,EAAS1Q,EAAIyd,EACb/M,EAASzQ,EAAIyd,EAGbhN,EAAS8K,GAAKS,EAAKqS,SAAWle,EAAS,GAAKkb,EAAW,GACvD5a,EAAS+K,GAAKQ,EAAKsS,SAAWle,EAAS,GAAKib,EAAW,GAGnD9kB,EAAW,GAAK,CAChB,MAAMymB,EAA6B,IAAhB,EAAIzmB,GACvBkK,EAAS8K,GAAK9K,EAAS8K,GAAKyR,EAAYhR,EAAKqH,YAAc,EAAI2J,GAC/Dvc,EAAS+K,GAAK/K,EAAS+K,GAAKwR,EAAYhR,EAAKsH,YAAc,EAAI0J,EACnE,CACJ,EAQA0M,mBAAoB,SAASnzB,EAAUmd,GACnC,IAAKA,EAAOkV,QACR,OAAOl7B,KAAKyK,eAAe5B,GAI/B,GAAiB,IAAbA,EAAgB,OAAO,EAC3B,GAAiB,IAAbA,EAAgB,OAAO,EAE3B,MAAMsyB,EAAYnV,EAAOmV,WAAa,GAItC,GAAItyB,EAAW,GAAK,CAEhB,MAAMJ,EAAe,EAAXI,EACV,MAAO,GAAM7I,KAAKi8B,cAAcxzB,EAAG0yB,EACvC,CAAO,CAEH,MAAM1yB,EAAuB,GAAlBI,EAAW,IACtB,MAAO,GAAM,GAAM7I,KAAK0K,eAAejC,EAAG0yB,EAC9C,CACJ,EAMA5L,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAa2H,QAAS,CAC/B,MAAM9X,EAAOvL,EAAS0b,YAAY2H,QAClCrjB,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,kBACZ7S,EAAS0b,YAAY2H,OAChC,CACJ,EAKA3rB,eAAgB,SAAShC,GACrB,OAAOA,EAAI,GACL,EAAIA,EAAIA,EAAIA,EACZ,EAAI7B,KAAKC,KAAI,EAAK4B,EAAI,EAAG,GAAK,CACxC,EAEAwzB,cAAe,SAASxzB,EAAG0yB,GACvB,OAAU,IAAN1yB,EAAgB,EACV,IAANA,EAAgB,GAGX7B,KAAKC,IAAI,EAAG,IAAM4B,EAAI,IAAM7B,KAAKiE,KAAKpC,EAAI,EADzCF,OACmD,EAAI3B,KAAKgE,IAF5D,KAEyE,EAAIuwB,EAC3F,EAEAzwB,eAAgB,SAASjC,EAAG0yB,GACxB,OAAU,IAAN1yB,EAAgB,EACV,IAANA,EAAgB,EAGb7B,KAAKC,IAAI,GAAG,GAAM4B,GAAK7B,KAAKiE,KAAKpC,EAD9BF,OACwC,EAAI3B,KAAKgE,IAFjD,KAE6D,EAAIuwB,GAAa,CAC5F,GCrPJe,GAAe,CACX5vB,KAAM,OACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,8CAGboZ,OAAQ,CACJxX,SAAU,IACV2tB,YAAa,GACbC,UAAW,GACX1rB,WAAY,GACZ2rB,WAAY,GACZnrB,UAAW,EACXorB,WAAY,GACZ5wB,OAAQ,OACRiiB,SAAU,IAEVC,eAAgB,CACZtoB,KAAM,OACNqoB,SAAU,IACVzc,UAAW,EACXR,WAAY,GACZ2rB,WAAY,IAEhBnuB,WAAY,KAIhBwG,OAAQ,CACJC,SAAS,EACTE,SAAU,QAGV0nB,UAAW,CACPxlB,OAAQ,GACRC,SAAS,GACTrB,MAAO,GACPuB,YAAa,UACbtB,MAAO,eAIX4mB,WAAY,CACRC,YAAa,GACbC,aAAc,IACdzuB,UAAW,WAIf0uB,SAAU,CACNjE,MAAO,GACPC,OAAQ,IACRC,OAAQ,GACRgE,YAAY,GAIhBC,SAAU,CACNC,UAAU,EACVC,eAAgB,GAChBC,aAAc,GACdpnB,MAAO,UAIXmhB,SAAU,CACNC,MAAO,CAAEoF,UAAW,GAAI1rB,WAAY,IAAKQ,UAAW,GACpD+lB,MAAO,CAAEmF,UAAW,GAAI1rB,WAAY,GAAIQ,UAAW,KAW3D0M,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAI3B,MAAM5L,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAClBue,EAAQvY,KAAKipB,MAAM/M,EAAID,GACvBE,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAGpCgE,EAAOlgB,KAAK8I,SAIZ4sB,GADS,IAAKt8B,KAAKgmB,UAAWwI,GACT8N,WAA6B,GAAhB11B,KAAK8I,UAAiBqD,EAAS4L,YAEvE5L,EAAS0b,YAAYyN,KAAO,CACxBvN,OAAQ5b,EAAS1Q,EACjBqsB,OAAQ3b,EAASzQ,EACjBqjB,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrBqB,MAAOA,EACP4D,SAAUA,EACVuZ,WAAYA,EACZW,MAAOt8B,EAAUiG,KAAK0E,IAAI6T,GAASmd,EACnCY,MAAOt8B,EAAUgG,KAAKiE,IAAIsU,GAASmd,EACnCxV,KAAMA,EACNlE,aAAa,EAErB,EAWAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAayN,MAAMtZ,aAC7B5iB,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAYyN,KAC5BlW,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAWa,EAAOb,UAAY,EAEpC,IAAI7N,EAASC,EAEb,GAAIlX,EAAWmd,EAAOmW,YAAa,CAE/B,MAAMgB,EAAiBt0B,EAAWmd,EAAOmW,YACnCiB,EAAcp9B,KAAKyK,eAAe0yB,GAGxCrd,EAAUxB,EAAKqQ,QAAUrQ,EAAK2e,MAAQ3e,EAAKqQ,QAAUyO,EACrDrd,EAAUzB,EAAKoQ,QAAUpQ,EAAK4e,MAAQ5e,EAAKoQ,QAAU0O,EAGrD,MAAMrvB,EAAQ,GACdgF,EAAS1Q,IAAMyd,EAAU/M,EAAS1Q,GAAK0L,EACvCgF,EAASzQ,IAAMyd,EAAUhN,EAASzQ,GAAKyL,CAE3C,KAAO,CAEH,MACMtF,GADaI,EAAWmd,EAAOmW,cAAgB,EAAInW,EAAOmW,aAC1Cv1B,KAAKgE,GAAKob,EAAO9U,UACjCmsB,EAAez2B,KAAKiE,IAAIpC,GAGxB60B,EAActX,EAAOoW,UAAYx1B,KAAKgE,GAAK,IAAO+iB,EAGlD4P,EAAYjf,EAAKa,MAASke,EAAeC,EAGzCjB,EAAaz1B,KAAKib,IAAIwb,GAAgBrX,EAAOqW,WAAatpB,EAAS4L,YACnEkB,EAAgBvB,EAAKge,WAAaD,EAGxCvc,EAAUnf,EAAUiG,KAAK0E,IAAIiyB,GAAa1d,EAC1CE,EAAUnf,EAAUgG,KAAKiE,IAAI0yB,GAAa1d,EAA6B,GAAbwc,EAG1D,MAAMnuB,EAAa8X,EAAO9X,WAAyB,GAAZoQ,EAAKwI,KAG5C/T,EAAS1Q,IAAMyd,EAAU/M,EAAS1Q,GAAK6L,EACvC6E,EAASzQ,IAAMyd,EAAUhN,EAASzQ,GAAK4L,EAGvC,MAAMsvB,GAAY52B,KAAKiE,IAAI0yB,GACrBE,EAAW72B,KAAK0E,IAAIiyB,GAC1BxqB,EAAS8K,GAAK2f,EAAWH,EAAe,EACxCtqB,EAAS+K,GAAK2f,EAAWJ,EAAe,CAC5C,CASA,GANIx0B,EAAWmd,EAAOmW,cAClBppB,EAAS8K,GAA8B,KAAxBiC,EAAU/M,EAAS1Q,GAClC0Q,EAAS+K,GAA8B,KAAxBiC,EAAUhN,EAASzQ,IAIlCuG,EAAW,GAAK,CAChB,MAAMymB,EAA6B,IAAhB,EAAIzmB,GACjB60B,EAAUpf,EAAKqQ,QAAU5b,EAAS1Q,EAAIic,EAAKqQ,QAAUW,EACrDqO,EAAUrf,EAAKoQ,QAAU3b,EAASzQ,EAAIgc,EAAKoQ,QAAUY,EAE3Dvc,EAAS1Q,EAAIq7B,EACb3qB,EAASzQ,EAAIq7B,EACb5qB,EAAS8K,GAAK9K,EAAS8K,GAAKyR,EAAYhR,EAAKqH,YAAc,EAAI2J,GAC/Dvc,EAAS+K,GAAK/K,EAAS+K,GAAKwR,EAAYhR,EAAKsH,YAAc,EAAI0J,EACnE,CACJ,EAMAC,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAayN,KAAM,CAC5B,MAAM5d,EAAOvL,EAAS0b,YAAYyN,KAClCnpB,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,kBACZ7S,EAAS0b,YAAYyN,IAChC,CACJ,EAOAzxB,eAAgB,SAAShC,GACrB,OAAOA,EAAI,GACL,EAAIA,EAAIA,EAAIA,EACZ,EAAI7B,KAAKC,KAAI,EAAK4B,EAAI,EAAG,GAAK,CACxC,GCzOJm1B,GAAe,CACXtxB,KAAM,UACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,+BAGboZ,OAAQ,CACJjY,MAAO,IACP8vB,gBAAgB,EAChBC,YAAY,EACZC,OAAO,EACPC,aAAc,EACdvM,oBAAqB,EACrBjjB,SAAU,IAEVof,eAAgB,CACZtoB,KAAM,UACNqoB,SAAU,IAKlBjZ,OAAQ,CACJC,SAAS,EACTE,SAAU,WAGV8c,UAAW,CACPsM,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,MAAO,KACPxoB,MAAO,UAIXqB,WAAY,CACRonB,KAAM,IACNC,IAAK,IACLC,OAAQ,GACRhO,QAAS,eAIbiO,UAAW,CACPC,MAAO,CAAEvM,EAAG,EAAKlD,MAAO,GACxB0P,MAAO,CAAExM,GAAG,EAAMlD,MAAOpoB,KAAKgE,IAC9B+zB,WAAY,CAAEzM,EAAG,GAAKlD,MAAOpoB,KAAKgE,GAAG,GACrCg0B,UAAW,CAAE1M,EAAG,GAAKlD,OAAQpoB,KAAKgE,GAAG,IAIzCyrB,UAAW,CACPnhB,KAAM,WACN2pB,UAAW,CAAC,EAAG,IAAK,GACpBC,MAAO,KAIX/H,SAAU,CACNC,MAAO,CAAEjpB,MAAO,IAAM8vB,gBAAgB,GACtC5G,MAAO,CAAElpB,MAAO,IAAM8vB,gBAAgB,KAI9CjgB,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAG3B,MAAM5L,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAClBm+B,EAAmBn4B,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAG5C0F,EAAY5hB,KAAK8I,SAAW,GAAM,GAAI,EAItC4D,EAAS1M,KAAKiB,IAAIk3B,EADL,IACoD,IAAhBn4B,KAAK8I,UAE5DqD,EAAS0b,YAAYmP,QAAU,CAC3BtqB,OAAQA,EACRmmB,aAAcnmB,EACd6L,MAAO4f,EAAmB,EAAIn4B,KAAK8I,SAAW9I,KAAKgE,GAAK,EAAIhE,KAAKipB,MAAM/M,EAAID,GAC3E8C,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrBmU,UAAWlf,EAASmf,GAAK,EACzB8M,OAAQp4B,KAAK8I,SAAW9I,KAAKgE,GAAK,EAClC4d,UAAWA,EAEnB,EAEAsG,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAChDmS,EAAS0b,aAAamP,SACvB59B,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAYmP,QAC5B7vB,GAASygB,EAAOzgB,OAAS/N,KAAKgmB,OAAOjY,QAAUygB,EAAOb,UAAY,GAGxErP,EAAKa,OAASpR,EAAQsQ,EAAKC,EAAKkK,UAGhC,IAAIlV,EAASgL,EAAKhL,OAWlB,GATKkb,EAAOqP,iBAERvqB,EAASgL,EAAKhL,QAAU,EAAuC,GAAnC1M,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,KAG9DmI,EAAS1Q,EAAI1B,EAAUiG,KAAK0E,IAAIgT,EAAKa,OAAS7L,EAC9CP,EAASzQ,EAAI1B,EAAUgG,KAAKiE,IAAIyT,EAAKa,OAAS7L,GAGzB,IAAjBkb,EAAOuP,MAAiB,CAIxB,MAAMtL,EAASnU,EAAKa,MAAQb,EAAK0gB,QAAUxQ,EAAOwP,cAAgB,GAIlE,GAHAjrB,EAASmf,EAAuB,GAAnBtrB,KAAKiE,IAAI4nB,GAGlBjE,EAAOiD,oBAAqB,CAC5B,MAAMoB,EAAiBjsB,KAAK0E,IAAImnB,GAAUjE,EAAOiD,oBAAsBne,EAAS,GAChFP,EAASzQ,GAAKuwB,CAClB,CACJ,CAOA,GAJA9f,EAAS8K,IAAMjX,KAAKiE,IAAIyT,EAAKa,OAAS7L,EAASvF,EAC/CgF,EAAS+K,GAAKlX,KAAK0E,IAAIgT,EAAKa,OAAS7L,EAASvF,EAG1ClF,EAAW,GAAK,CAChB,MAAMmyB,EAA+B,IAAhB,EAAInyB,GACzBkK,EAAS8K,GAAK9K,EAAS8K,GAAKmd,EAAc1c,EAAKqH,YAAc,EAAIqV,GACjEjoB,EAAS+K,GAAK/K,EAAS+K,GAAKkd,EAAc1c,EAAKsH,YAAc,EAAIoV,EACrE,CACJ,EAEAzL,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAamP,QAAS,CAC/B,MAAMtf,EAAOvL,EAAS0b,YAAYmP,QAClC7qB,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,WACnB7S,EAASmf,EAAI5T,EAAK2T,iBACXlf,EAAS0b,YAAYmP,OAChC,CACJ,GChKJqB,GAAe,CACX3yB,KAAM,OACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,uCAGboZ,OAAQ,CACJjY,MAAO,KACP8vB,gBAAgB,EAChBC,YAAY,EACZC,OAAO,EACPC,aAAcp3B,KAAKgE,GAAK,EACxB6mB,oBAAqB,GACrB8C,aAAc,IACd/lB,SAAU,KAEVof,eAAgB,CACZtoB,KAAM,OACNqoB,SAAU,EACV8D,oBAAqB,KAK7B/c,OAAQ,CACJC,SAAS,EACTE,SAAU,MAGV8c,UAAW,CACPzc,KAAM,QACNiT,UAAW,KACXoI,QAAS,gBAIbnI,WAAY,CACRrR,OAAQ,IACRC,QAAS,GACTpB,MAAO,QAIXspB,aAAc,CACVhoB,YAAa,UACblJ,UAAW,GACXghB,MAAO,cAIX+H,SAAU,CACNC,MAAO,CAAEzC,aAAc,GAAKxmB,MAAO,KACnCkpB,MAAO,CAAE1C,aAAc,IAAMxmB,MAAO,MAI5C6P,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAG3B,MAAM5L,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAClBm+B,EAAmBn4B,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAG5C0F,EAAY5hB,KAAK8I,SAAW,GAAM,GAAI,EAItC4D,EAAS1M,KAAKiB,IAAIk3B,EADL,IACoD,IAAhBn4B,KAAK8I,UAE5DqD,EAAS0b,YAAYwQ,KAAO,CACxB3rB,OAAQA,EACR6L,MAAO4f,EAAmB,EAAIn4B,KAAK8I,SAAW9I,KAAKgE,GAAK,EAAIhE,KAAKipB,MAAM/M,EAAID,GAC3E8C,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrBmU,UAAWlf,EAASmf,GAAK,EACzB8M,OAAQp4B,KAAK8I,SAAW9I,KAAKgE,GAAK,EAClC+gB,YAAa/kB,KAAK8I,SAAW9I,KAAKgE,GAAK,EACvC4d,UAAWA,EAEnB,EAEAsG,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAChDmS,EAAS0b,aAAawQ,MACvBj/B,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAYwQ,KAC5BlxB,GAASygB,EAAOzgB,OAAS/N,KAAKgmB,OAAOjY,QAAUygB,EAAOb,UAAY,GAGxE,IAAI4E,EAAmB,EACnB1pB,EAAW,IAEX0pB,EAAmB1pB,EAAW,GAC9B0pB,EAAmB3rB,KAAKiE,IAAI0nB,EAAmB3rB,KAAKgE,GAAK,KAClD/B,EAAW,KAElB0pB,GAAoB,EAAI1pB,GAAY,GACpC0pB,EAAmB3rB,KAAKiE,IAAI0nB,EAAmB3rB,KAAKgE,GAAK,KAI7D0T,EAAKa,OAASpR,EAAQsQ,EAAKC,EAAKkK,UAAY+J,EAG5C,MAAMvG,EAASplB,KAAKiE,IAAiB,EAAbyT,EAAKa,MAAYb,EAAKqN,cAAgB6C,EAAO+F,cAAgBv0B,KAAKgmB,OAAOuO,cAAgBhC,EAGjH,IAAI4M,EAAU7gB,EAAKhL,QAAU,EAAI0Y,GAAUuG,EACvC6M,EAAU9gB,EAAKhL,QAAU,GAAM0Y,GAAUuG,EAG7C,MAAMzS,EAAUnf,EAAUiG,KAAK0E,IAAIgT,EAAKa,OAASggB,EAC3Cpf,EAAUnf,EAAUgG,KAAKiE,IAAIyT,EAAKa,OAASigB,EAEjD,GAAIv2B,EAAW,GAAK,CAEhB,MAAMga,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EACFgG,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAC3B,IAEhB/P,EAAS1Q,EAAI1B,EAAUiG,KAAK0E,IAAIgT,EAAKa,OAASggB,EAC9CpsB,EAASzQ,EAAI1B,EAAUgG,KAAKiE,IAAIyT,EAAKa,OAASigB,IAE9CrsB,EAAS1Q,EAAI0Q,EAAS1Q,GAAKyd,EAAU/M,EAAS1Q,GAAKkwB,EAAmB,GACtExf,EAASzQ,EAAIyQ,EAASzQ,GAAKyd,EAAUhN,EAASzQ,GAAKiwB,EAAmB,GAE9E,MACIxf,EAAS1Q,EAAIyd,EACb/M,EAASzQ,EAAIyd,EAIjB,MAAM0S,EAASnU,EAAKa,MAAQb,EAAK0gB,QAAUxQ,EAAOwP,cAAgBh+B,KAAKgmB,OAAOgY,cAG9EjrB,EAASmf,EAAuB,GAAnBtrB,KAAKiE,IAAI4nB,GAAgBF,EAGtC,MAAM8M,EAAiB7Q,EAAOiD,qBAAuBzxB,KAAKgmB,OAAOyL,oBAC3DoB,EAAiBjsB,KAAK0E,IAAa,EAATmnB,GAAc4M,EAAiB/gB,EAAKhL,OAAS,GAAMif,EACnFxf,EAASzQ,GAAKuwB,EAGd,MAAMyM,EAAavsB,EAASmf,EAAI5T,EAAKhL,OAAS,GAC9CP,EAASzQ,GAAKg9B,EAGd,MAAMxU,GAAYlkB,KAAKiE,IAAIyT,EAAKa,OAASggB,EAAUpxB,EAC7Cgd,EAAWnkB,KAAK0E,IAAIgT,EAAKa,OAASigB,EAAUrxB,EAE9ClF,EAAW,IAEXkK,EAAS8K,GAAKS,EAAKqH,YAAcmF,EAAWxM,EAAKqH,YAAc4M,EAC/Dxf,EAAS+K,GAAKQ,EAAKsH,YAAcmF,EAAWzM,EAAKsH,YAAc2M,GACxD1pB,EAAW,IAElBkK,EAAS8K,GAAKiN,EAAWyH,EAAmBjU,EAAKqH,YAAc,EAAI4M,GACnExf,EAAS+K,GAAKiN,EAAWwH,EAAmBjU,EAAKsH,YAAc,EAAI2M,GACnExf,EAASmf,EAAInf,EAASmf,EAAIK,EAAmBjU,EAAK2T,WAAa,EAAIM,KAEnExf,EAAS8K,GAAKiN,EACd/X,EAAS+K,GAAKiN,EAEtB,EAEAwE,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAawQ,KAAM,CAC5B,MAAM3gB,EAAOvL,EAAS0b,YAAYwQ,KAClClsB,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,WACnB7S,EAASmf,EAAI5T,EAAK2T,iBACXlf,EAAS0b,YAAYwQ,IAChC,CACJ,GChLJM,GAAe,CACXjzB,KAAM,OACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,8BAGboZ,OAAQ,CACJG,UAAW,KACXqZ,UAAW,IACXja,cAAe,IACfka,WAAY,GACZC,OAAQ,EACRlxB,SAAU,KAIdkG,OAAQ,CACJC,SAAS,EACTE,SAAU,UAGV8qB,UAAW,CACPC,cAAe,EACfC,iBAAiB,EACjBC,cAAc,EACdlqB,MAAO,UAIXmqB,UAAW,CACPC,MAAO,EACPC,SAAU,EACVC,KAAM,EACNC,QAAS,cAIbC,UAAW,CACPrpB,OAAQ,IACRC,QAAS,IACTwf,OAAQ,IACRtf,YAAa,WAIjBmpB,UAAW,CACP3H,MAAO,GACPC,OAAQ,IACRC,OAAQ,IACR9d,WAAY,UAIhBic,SAAU,CACNC,MAAO,CAAE7Q,UAAW,KAAOuZ,OAAQ,GACnCzI,MAAO,CAAE9Q,UAAW,KAAOuZ,OAAQ,KAI3C9hB,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAI3B,MAAM6R,EAAQ15B,KAAKgJ,MAAMhJ,KAAK8I,SAAW1P,KAAKgmB,OAAO0Z,QAErD3sB,EAAS0b,YAAY8Q,KAAO,CACxBe,MAAOA,EACPtR,MAAOpoB,KAAK8I,SAAW9I,KAAKgE,GAAK,EACjC4d,UAAW5hB,KAAK8I,SAAW,GAAM,GAAI,EACrC4V,WAAY,EACZib,UAAU,EACV/P,UAAWzd,EAAS1Q,EACpBouB,UAAW1d,EAASzQ,EACpBqjB,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrB0iB,WAAoC,IAAvB55B,KAAK8I,SAAW,IAC7BmjB,eAAwB,GAARyN,EAAa,GAC7B1d,aAAa,EACbvK,UAAW7T,KAAK+N,MAExB,EAEAuc,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAChDmS,EAAS0b,aAAa8Q,MACvBv/B,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAY8Q,KAC5BxxB,EAAQygB,EAAOrI,WAAanmB,KAAKgmB,OAAOG,UACxC1lB,EAAQ+tB,EAAOgR,WAAax/B,KAAKgmB,OAAOwZ,UACxCja,EAAgBiJ,EAAOjJ,eAAiBvlB,KAAKgmB,OAAOT,cAG1D,GAAIjH,EAAKiiB,SACLjiB,EAAKgH,YAAmB,GAALjH,EACfC,EAAKgH,YAAc,IACnBhH,EAAKiiB,UAAW,EAChBjiB,EAAKkK,mBAEN,CAEHlK,EAAK0Q,OAASjhB,EAAQuQ,EAAKkK,UAAYnK,EAGvC,MAAMoiB,EAAe75B,KAAKiE,IAAIyT,EAAK0Q,OAC/BpoB,KAAKib,IAAI4e,GAAgB,MACzBniB,EAAKiiB,UAAW,EAChBjiB,EAAKgH,WAAaC,EAE1B,CAGA,MAAMmb,EAAQ95B,KAAKiE,IAAIyT,EAAK0Q,OAASvuB,EAC/BkgC,EAAQ/5B,KAAK0E,IAAiB,GAAbgT,EAAK0Q,QAAgBhvB,KAAKgmB,OAAOyZ,WAAa,GAGrE,IAAIlN,EAAmB,EACnB1pB,EAAW,KACX0pB,EAAmB1pB,EAAW,IAC9B0pB,GAAsCA,GAGjC1pB,EAAW,MAChB0pB,GAAoB,EAAI1pB,GAAY,IACpC0pB,GAAsCA,GAI1C,MAAMzS,EAAUnf,EAAU+/B,EAAQpiB,EAAKkiB,WACjCzgB,EAAUnf,EAAU+/B,EAAQriB,EAAKuU,eAEvC9f,EAAS1Q,EAAIic,EAAKkS,WAAa1Q,EAAUxB,EAAKkS,WAAa+B,EAC3Dxf,EAASzQ,EAAIgc,EAAKmS,WAAa1Q,EAAUzB,EAAKmS,WAAa8B,EAGvDjU,EAAKiiB,UACLxtB,EAAS8K,IAAM,IACf9K,EAAS+K,IAAM,MAGf/K,EAAS8K,IAAMjX,KAAK0E,IAAIgT,EAAK0Q,OAASvuB,EAAQsN,EAAQ,GACtDgF,EAAS+K,IAAMlX,KAAKiE,IAAiB,GAAbyT,EAAK0Q,OAAehvB,KAAKgmB,OAAOyZ,WAAa1xB,EAAQ,IAI7EnH,KAAK8I,SAAW,MAChBqD,EAAS8K,IAA8B,GAAvBjX,KAAK8I,SAAW,IAChCqD,EAAS+K,IAA8B,GAAvBlX,KAAK8I,SAAW,IAExC,EAEA6f,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAa8Q,KAAM,CAC5B,MAAMjhB,EAAOvL,EAAS0b,YAAY8Q,KAElCxsB,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,kBACZ7S,EAAS0b,YAAY8Q,IAChC,CACJ,GCnJJqB,GAAe,CACXt0B,KAAM,QACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,kDAGboZ,OAAQ,CACJxX,SAAU,KACVqyB,cAAe,GACfC,kBAAmB,GACnBC,eAAgB,EAChBr1B,OAAQ,SACRiiB,SAAU,GAEVC,eAAgB,CACZtoB,KAAM,QACNu7B,cAAe,GACfC,kBAAmB,GACnBC,eAAgB,IAKxBrsB,OAAQ,CACJC,SAAS,EACTE,SAAU,OACVgZ,WAAY,WACZC,eAAe,EACfrf,SAAU,EACVsf,WAAW,EACXC,eAAgB,UAGhBC,cAAe,CACXlX,OAAQ,IACRC,QAAS,GACTpB,MAAO,WAIX0Y,iBAAkB,CACd0S,KAAQ,CAEJH,cAAe,GACfC,kBAAmB,IAEvBG,MAAS,CAELF,eAAgB,EAChBF,cAAe,IAEnBK,MAAS,CAELL,cAAe,GACfC,kBAAmB,IACnBC,eAAgB,OAQ5BnjB,WAAY,SAAS7K,EAAUyb,GACtBzb,EAAS0b,cACV1b,EAAS0b,YAAc,IAG3B1b,EAAS0b,YAAYmS,MAAQ,CACzBjS,OAAQ5b,EAAS1Q,EACjBqsB,OAAQ3b,EAASzQ,EACjBgzB,WAAY1uB,KAAKipB,MAAM9c,EAASzQ,EAAIksB,EAAO5tB,QAASmS,EAAS1Q,EAAImsB,EAAO7tB,SACxEwgC,cAAev6B,KAAKkb,KAChBlb,KAAKC,IAAIkM,EAAS1Q,EAAImsB,EAAO7tB,QAAS,GACtCiG,KAAKC,IAAIkM,EAASzQ,EAAIksB,EAAO5tB,QAAS,IAE1CgiB,aAAa,EAErB,EAWAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAamS,OAAOhe,aAC9B5iB,KAAK4d,WAAW7K,EAAU,IAAKyb,EAAQ7tB,UAASC,YAGpD,MAAMolB,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9BlQ,EAAOvL,EAAS0b,YAAYmS,MAC5BjT,EAAW3H,EAAO2H,UAAY3tB,KAAKgmB,OAAO2H,UAAY,EAGtDyT,EAAgBv4B,EAAWmd,EAAO+a,eAAiBn6B,KAAKgE,GAAK,EAC7Dy2B,EAAcz6B,KAAKiE,IAAIu2B,GAAiBzT,EAG9C,IAAIkT,EAAgB7a,EAAO6a,cACvBC,EAAoB9a,EAAO8a,kBAE3BtS,EAAOS,mBACP4R,GAAkBrS,EAAOS,iBAAiBC,qBAAuB,EACjE4R,EAAoB,GAAM,EAAIA,IAAsBtS,EAAOS,iBAAiBC,qBAAuB,IAIvG,MAAMoS,EAAeT,EAAgBj6B,KAAKgE,GAAK,IAAOy2B,EAGhDE,EAAqB,GAAM,EAAIT,GAAqBl6B,KAAKib,IAAIwf,GAG7Dnc,EAAW5G,EAAKgX,WAAagM,EAC7BE,EAAcljB,EAAK6iB,cAAgBI,EAGnCzhB,EAAUnf,EAAUiG,KAAK0E,IAAI4Z,GAAYsc,EACzCzhB,EAAUnf,EAAUgG,KAAKiE,IAAIqa,GAAYsc,EAGzCC,EAAe,IAAO9T,EAC5B5a,EAAS1Q,IAAMyd,EAAU/M,EAAS1Q,GAAKo/B,EACvC1uB,EAASzQ,IAAMyd,EAAUhN,EAASzQ,GAAKm/B,EAGvC1uB,EAAS8K,GAA8B,KAAxBiC,EAAU/M,EAAS1Q,GAClC0Q,EAAS+K,GAA8B,KAAxBiC,EAAUhN,EAASzQ,GAGlC,MAAMo/B,EAAkD,EAAnC96B,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAAS+iB,EAI5D,GAHA5a,EAASzQ,GAAoB,GAAfo/B,EAGV74B,EAAW,GAAK,CAChB,MAAMymB,EAAY,EAAwB,IAAlBzmB,EAAW,IACnCkK,EAAS8K,IAAMyR,EACfvc,EAAS+K,IAAMwR,CACnB,CAEJ,EAKAC,QAAS,SAASxc,GACVA,EAAS0b,aAAamS,cACf7tB,EAAS0b,YAAYmS,KAEpC,GC1JJe,GAAe,CACXr1B,KAAM,OACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,qCAGboZ,OAAQ,CAEJsH,gBAAiB,CACbC,SAAS,EACT8G,KAAM,EACN6D,SAAU,EACVC,SAAU,IAIdC,OAAQ,CACJ,CAAE9rB,KAAM,SAAUkhB,MAAO,IACzB,CAAElhB,KAAM,OAAQkhB,MAAO,IACvB,CAAElhB,KAAM,WAAYkhB,MAAO,GAC3B,CAAElhB,KAAM,YAAakhB,MAAO,GAC5B,CAAElhB,KAAM,SAAUkhB,MAAO,IAG7Bxf,UAAW,GACXkD,UAAW,EACX0wB,WAAY,GACZC,WAAY,GACZC,WAAW,EACX5zB,WAAY,GACZxC,OAAQ,OACRiiB,SAAU,EAEVC,eAAgB,CACZtoB,KAAM,OACNqoB,SAAU,EACV3f,UAAW,KAKnB0G,OAAQ,CACJC,SAAS,EACTE,SAAU,OAGVoZ,cAAe,CACX8T,OAAQ,GACRC,SAAU,GACVpsB,MAAO,WAIXsY,cAAe,CACXhZ,KAAM,SACN+sB,KAAM,GACNC,KAAM,IACNtsB,MAAO,WAIXwY,aAAc,CACVlZ,KAAM,OACNitB,eAAe,EACfC,SAAS,GAIb/L,UAAW,CACP1hB,SAAS,EACTwZ,WAAY,GACZ7oB,KAAM,YAIV+8B,gBAAiB,CACb1tB,SAAS,EACTwZ,WAAY,IACZ7oB,KAAM,aAIVgpB,iBAAkB,CACd3Q,QAAW,CAEPsQ,cAAe,CAAE8T,OAAQ,GAAIC,SAAU,GAAIpsB,MAAO,YAClDsY,cAAe,CAAE+T,KAAM,GAAKC,KAAM,KAClC9T,aAAc,CAAE8J,SAAU,GAAIC,SAAU,KAE5CmK,MAAS,CAELrU,cAAe,CAAE8T,OAAQ,GAAIC,SAAU,GAAIpsB,MAAO,WAClDygB,UAAW,CAAElI,WAAY,IACzBkU,gBAAiB,CAAElU,WAAY,MAEnCoU,WAAc,CAEVtU,cAAe,CAAE8T,OAAQ,GAAIC,SAAU,GAAIpsB,MAAO,WAClDsY,cAAe,CAAE+T,KAAM,GAAKC,KAAM,IAAKtsB,MAAO,YAElD4sB,WAAc,CAEVvU,cAAe,CAAE8T,OAAQ,GAAIC,SAAU,IACvC3L,UAAW,CAAElI,WAAY,IACzBkU,gBAAiB,CAAElU,WAAY,KAKvC4I,SAAU,CACNC,MAAO,CAEH/I,cAAe,CACX8T,OAAQ,CAAE5T,WAAY,KACtB6T,SAAU,CAAE7T,WAAY,MAE5BD,cAAe,CAAEC,WAAY,KAC7BkU,gBAAiB,CAAElU,WAAY,MAEnC8I,MAAO,CAEHhJ,cAAe,CACX8T,OAAQ,CAAE5T,WAAY,IACtB6T,SAAU,CAAE7T,WAAY,KAE5BD,cAAe,CAAEC,WAAY,IAC7BkU,gBAAiB,CAAElU,WAAY,QAY3CvQ,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAI3B,MAAM5L,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAClBue,EAAQvY,KAAKipB,MAAM/M,EAAID,GACvBvP,EAAS1M,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAGlC0F,EAAY5hB,KAAK8I,SAAW,GAAM,GAAI,EAE5CqD,EAAS0b,YAAYkT,KAAO,CACxBhT,OAAQ5b,EAAS1Q,EACjBqsB,OAAQ3b,EAASzQ,EACjBqjB,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrBwC,YAAavN,EAASG,SAAWH,EAASE,MAAQ,EAClDkM,MAAOA,EACP7L,OAAQA,EACRmvB,OAAQ77B,KAAK8I,SAAW9I,KAAKgE,GAAK,EAClCkc,KAAMlgB,KAAK8I,SACX8Y,UAAWA,EACX5F,aAAa,EAErB,EAWAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAakT,MAAM/e,aAC7B5iB,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAYkT,KAC5B3b,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAWa,EAAOb,UAAY,EAG9BoB,EAAe/uB,KAAKqL,cAAcxC,GAGlC+4B,EAAatjB,EAAKwI,KAAOd,EAAO4b,WAChCc,EAAgB97B,KAAKiB,IAAI,EAAGknB,EAAe6S,GAG3Cn5B,EAAIi6B,EAAgB97B,KAAKgE,GAAK,EAAIob,EAAO9U,UAAYoN,EAAKkK,UAAYlK,EAAKmkB,OAG3EE,EAAe,GAAOrkB,EAAKhL,OAAS,IAAO,GAC3CtF,EAAYgY,EAAOhY,UAAY20B,EAAehV,EAAW5a,EAAS4L,YAUlEmB,EAAUnf,EAPEiG,KAAKiE,IAAIpC,GAAKuF,EAQ1B+R,EAAUnf,EAPEgG,KAAKiE,IAAQ,EAAJpC,GAASuF,EAAY,IAGlCpH,KAAKib,IAAIjb,KAAKiE,IAAIkkB,EAAenoB,KAAKgE,KAAOob,EAAO6b,WAAa9uB,EAAS4L,YAOlFzQ,EAAa8X,EAAO9X,WAAyB,IAAZoQ,EAAKwI,KAW5C,GARA/T,EAAS1Q,IAAMyd,EAAU/M,EAAS1Q,GAAK6L,EACvC6E,EAASzQ,IAAMyd,EAAUhN,EAASzQ,GAAK4L,EAGvC6E,EAAS8K,GAA8B,IAAxBiC,EAAU/M,EAAS1Q,GAClC0Q,EAAS+K,GAA8B,IAAxBiC,EAAUhN,EAASzQ,GAG9B0jB,EAAO8b,UAAW,CAClB,IAAIjd,EAIAA,EAFA6d,EAAgB,GAEHA,EAAgB,GACtBA,EAAgB,IAET,EAAIA,GAAiB,GAGtB,GAA0C,GAApC97B,KAAKiE,IAAI63B,EAAgB97B,KAAKgE,IAGrDmI,EAASG,QAAUoL,EAAKgC,aAAe,GAAmB,GAAbuE,QAGvBxK,IAAlBtH,EAASE,OACTF,EAASE,KAAOF,EAASG,QAEjC,CAGA,GAAIrK,GAAY,IAAM,CAClB,MAAMymB,EAA6B,IAAhB,EAAIzmB,GACvBkK,EAAS8K,GAAK9K,EAAS8K,GAAKyR,EAAYhR,EAAKqH,YAAc,EAAI2J,GAC/Dvc,EAAS+K,GAAK/K,EAAS+K,GAAKwR,EAAYhR,EAAKsH,YAAc,EAAI0J,GAG3DtJ,EAAO8b,YACP/uB,EAASG,QAAUoL,EAAKgC,YAAcgP,OAChBjV,IAAlBtH,EAASE,OACTF,EAASE,KAAOF,EAASG,SAGrC,CACJ,EAMAqc,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAakT,KAAM,CAC5B,MAAMrjB,EAAOvL,EAAS0b,YAAYkT,KAClC5uB,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,WACnB7S,EAASG,QAAUoL,EAAKgC,iBACFjG,IAAlBtH,EAASE,OACTF,EAASE,KAAOqL,EAAKgC,oBAElBvN,EAAS0b,YAAYkT,IAChC,CACJ,EAOAt2B,cAAe,SAAS5C,GACpB,QAAS7B,KAAK0E,IAAI1E,KAAKgE,GAAKnC,GAAK,GAAK,CAC1C,GC9RJq2B,GAAe,CACXxyB,KAAM,QACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,wCAGboZ,OAAQ,CACJxX,SAAU,IACVuU,SAAU,GACV5D,MAAO,GACPyjB,gBAAgB,EAChB/N,SAAS,EACT8F,SAAU,GACVkI,WAAY,GACZC,YAAa,GACb50B,WAAY,IACZxC,OAAQ,OACRiiB,SAAU,EAEVC,eAAgB,CACZtoB,KAAM,QACNqoB,SAAU,EACV5K,SAAU,KAKlBrO,OAAQ,CACJC,SAAS,EACTE,SAAU,UAGVkuB,aAAc,CACV/C,MAAO,GACPE,KAAM,GACN8C,UAAW,SACXC,WAAY,YAIhB1G,UAAW,CACPkC,MAAO,GACPC,MAAO,IACPwE,WAAY,SACZC,QAAS,UAIbC,SAAU,CACNC,YAAa,GACbC,WAAY,GACZC,QAAS,WAIblV,eAAgB,CACZ1Z,SAAS,EACTwZ,WAAY,IACZ7oB,KAAM,YAIVgpB,iBAAkB,CACd3Q,QAAW,CAEPolB,aAAc,CAAE/C,MAAO,GAAIE,KAAM,KACjCkD,SAAU,CAAEC,YAAa,GAAKC,WAAY,KAE9CE,UAAa,CAETjH,UAAW,CAAEkC,MAAO,GAAIC,MAAO,KAC/BqE,aAAc,CAAE/C,MAAO,GAAIE,KAAM,KAErCuD,KAAQ,CAEJlH,UAAW,CACPkC,MAAO,GACPC,MAAO,IACP/oB,OAAO,EACPinB,YAAY,IAGpB8G,QAAW,CAEPX,aAAc,CAAE/C,MAAO,GAAIE,KAAM,IACjCkD,SAAU,CAAEC,YAAa,GAAKC,WAAY,IAC1C/G,UAAW,CAAE2G,WAAY,aAKjCnM,SAAU,CACNC,MAAO,CAEH+L,aAAc,CACV/C,MAAO,CAAE7R,WAAY,KACrB+R,KAAM,CAAE/R,WAAY,MAExBiV,SAAU,CAAEjV,WAAY,KACxBE,eAAgB,CAAEF,WAAY,MAElC8I,MAAO,CAEH8L,aAAc,CACV/C,MAAO,CAAE7R,WAAY,IACrB+R,KAAM,CAAE/R,WAAY,KAExBiV,SAAU,CAAEjV,WAAY,IACxBE,eAAgB,CAAEF,WAAY,QAY1CvQ,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAI3B,MAAM5L,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EACxB,IAAI+iC,EAAa/8B,KAAKipB,MAAM/M,EAAID,GAGhC,MACM+gB,EADS,IAAK5jC,KAAKgmB,UAAWwI,GACVsU,YAAcl8B,KAAKgE,GAAK,IAC5Ci5B,GAAej9B,KAAK8I,SAAW,IAAOk0B,EAC5CD,GAAcE,EAGd,MAAMvH,EAAa,GAAqB,GAAhB11B,KAAK8I,SAE7BqD,EAAS0b,YAAYqQ,MAAQ,CACzBnQ,OAAQ5b,EAAS1Q,EACjBqsB,OAAQ3b,EAASzQ,EACjBqjB,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrBwC,YAAavN,EAASG,SAAWH,EAASE,MAAQ,EAClD0wB,WAAYA,EACZE,YAAaA,EACbvH,WAAYA,EAAavpB,EAAS4L,YAClCse,MAAOt8B,EAAUiG,KAAK0E,IAAIq4B,GAAcrH,EACxCY,MAAOt8B,EAAUgG,KAAKiE,IAAI84B,GAAcrH,EACxCxV,KAAMlgB,KAAK8I,SACXo0B,gBAAiBl9B,KAAK8I,SAAW9I,KAAKgE,GAAK,EAC3CgY,aAAa,EAErB,EAWAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAaqQ,OAAOlc,aAC9B5iB,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAYqQ,MAC5B9Y,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAWa,EAAOb,UAAY,EAG9BoB,EAAe/uB,KAAKyK,eAAe5B,GAGnC65B,EAAgB97B,KAAKiB,IAAI,EAAGknB,EAA2B,GAAZzQ,EAAKwI,MAEtD,IAAIhH,EAASC,EACTF,EAGJ,GAAKmG,EAAO4c,eAKL,GAAIF,EAAgB,GAAK,CAE5B,MAAMqB,EAAerB,EAAgB,GAC/BsB,EAAYhkC,KAAKoK,YAAY25B,GACnCjkB,EAAUxB,EAAKqQ,QAAUrQ,EAAK2e,MAAQ3e,EAAKqQ,QAAUqV,EACrDjkB,EAAUzB,EAAKoQ,QAAUpQ,EAAK4e,MAAQ5e,EAAKoQ,QAAUsV,CAEzD,MAAO,GAAItB,EAAgB,GAAM1c,EAAO2U,SAAU,CAE9C,MAAMsJ,GAAcvB,EAAgB,KAAQ,GAAM1c,EAAO2U,UACzD9a,EAAgBvB,EAAKge,WACjB11B,KAAKiE,IAAIo5B,EAAar9B,KAAKgE,GAAK,IAAOob,EAAOjD,SAAW4K,EAAW5a,EAAS4L,WAErF,KAAO,CAEH,MAAMulB,GAAexB,EAAgB,GAAM1c,EAAO2U,WAAa,GAAM3U,EAAO2U,UAC5E9a,EAAgBvB,EAAKge,WACjB11B,KAAK0E,IAAI44B,EAAct9B,KAAKgE,GAAK,IAAOob,EAAOjD,SAAW4K,EAAW5a,EAAS4L,WACtF,KAvB4B,CAExB,MAAMwlB,EAAgBzB,EACtB7iB,EAAgBvB,EAAKge,WAAa6H,EAAgBne,EAAOjD,SAAW4K,EAAW5a,EAAS4L,WAE5F,CAqBA,QAAsBtE,IAAlBwF,EAA6B,CAE7BvB,EAAKwlB,iBAAmB9d,EAAO6c,WAAaxkB,EAC5C,MAAM+lB,EAAcx9B,KAAKiE,IAAIyT,EAAKwlB,iBAAmB9d,EAAO6c,WAAa,GACnEwB,EAAcz9B,KAAK0E,IAA2B,IAAvBgT,EAAKwlB,iBAAyB9d,EAAO6c,WAAa,GAEzE1jB,EAAQb,EAAKqlB,WAAarlB,EAAKulB,YACrC/jB,EAAUnf,EAAUiG,KAAK0E,IAAI6T,GAASU,EAAgBukB,EACtDrkB,EAAUnf,EAAUgG,KAAKiE,IAAIsU,GAASU,EAAgBwkB,CAC1D,CAGA,MAAMn2B,EAAa8X,EAAO9X,WAAyB,IAAZoQ,EAAKwI,KAS5C,GARA/T,EAAS1Q,IAAMyd,EAAU/M,EAAS1Q,GAAK6L,EACvC6E,EAASzQ,IAAMyd,EAAUhN,EAASzQ,GAAK4L,EAGvC6E,EAAS8K,GAA8B,KAAxBiC,EAAU/M,EAAS1Q,GAClC0Q,EAAS+K,GAA8B,KAAxBiC,EAAUhN,EAASzQ,GAG9B0jB,EAAO6O,QAAS,CAChB,IAAIhQ,EAIAA,EAFAhc,EAAW,IAEE,GAAOA,EAAW,IAAQ,GAChCA,EAAW,IAEL,GAAoD,GAA9CjC,KAAKiE,KAAKhC,EAAW,KAAQjC,KAAKgE,GAAK,IAG5B,GAAhB,EAAI/B,GAGtBkK,EAASG,QAAUoL,EAAKgC,YAAcuE,OAChBxK,IAAlBtH,EAASE,OACTF,EAASE,KAAOF,EAASG,QAEjC,CAGIrK,GAAY,MACZkK,EAAS8K,GAAuB,GAAlBS,EAAKqH,WACnB5S,EAAS+K,GAAuB,GAAlBQ,EAAKsH,WAEfI,EAAO6O,UACP9hB,EAASG,QAAUoL,EAAKgC,iBACFjG,IAAlBtH,EAASE,OACTF,EAASE,KAAOqL,EAAKgC,cAIrC,EAMAiP,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAaqQ,MAAO,CAC7B,MAAMxgB,EAAOvL,EAAS0b,YAAYqQ,MAClC/rB,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,WACnB7S,EAASG,QAAUoL,EAAKgC,iBACFjG,IAAlBtH,EAASE,OACTF,EAASE,KAAOqL,EAAKgC,oBAElBvN,EAAS0b,YAAYqQ,KAChC,CACJ,EAKAr0B,eAAgB,SAAShC,GACrB,OAAOA,EAAI,GACL,EAAIA,EAAIA,EAAIA,EACZ,EAAI7B,KAAKC,KAAI,EAAK4B,EAAI,EAAG,GAAK,CACxC,EAEA2B,YAAa,SAAS3B,GAClB,OAAOA,GAAK,EAAIA,EACpB,GCvSJ67B,GAAe,CACXh4B,KAAM,UACNK,MAAO,IACPrH,KAAM,WACNsH,YAAa,2CAGboZ,OAAQ,CACJxX,SAAU,IACV+1B,YAAa,GACbrzB,UAAW,EACX+N,WAAY,GACZC,WAAY,EACZ3F,aAAc,EACdirB,YAAY,EACZC,QAAQ,EACRC,WAAW,EACXC,aAAc,GACdj5B,OAAQ,SACRiiB,SAAU,GAEVC,eAAgB,CACZtoB,KAAM,UACNqoB,SAAU,GACVzc,UAAW,IAKnBwD,OAAQ,CACJC,SAAS,EACTE,SAAU,cAGV+vB,SAAU,CACN1tB,YAAa,YACbH,OAAQ,GACRC,QAAS,GACT6tB,QAAS,GACTjvB,MAAO,QAIXkvB,YAAa,CACT7zB,QAAS,OACTiG,YAAa,SACb6tB,SAAU,GACVC,QAAS,IAIbttB,WAAY,CACRX,OAAQ,EACRC,QAAS,EACTwf,OAAQ,GACR5gB,MAAO,UAIXqvB,WAAY,CACRvM,OAAO,EACPC,QAAQ,EACRE,KAAM,UACN5nB,QAAS,QAIb8lB,SAAU,CACNC,MAAO,CAAEuN,YAAa,GAAIhrB,aAAc,EAAG0F,WAAY,IACvDgY,MAAO,CAAEsN,YAAa,EAAGhrB,aAAc,EAAG0F,WAAY,MAS9DrB,WAAY,SAAS7K,EAAUyb,GACtBzb,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAG3B,MAAMzI,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAG9B0W,EAAYt+B,KAAK8I,SAAWsW,EAAO2e,aAEzC5xB,EAAS0b,YAAY6V,QAAU,CAC3BhkB,YAAavN,EAASG,SAAWH,EAASE,MAAQ,EAClDkyB,UAAWpyB,EAASjP,MACpBshC,MAAOryB,EAAS1Q,EAChBgjC,MAAOtyB,EAASzQ,EAChBgjC,aAAc,EACdC,YAAa,EACbC,cAAc,EACdN,UAAWA,EACXO,QAASP,EAAYt+B,KAAKgJ,MAAsB,EAAhBhJ,KAAK8I,WAAgB,EACrDsf,MAAOpoB,KAAK8I,SAAW9I,KAAKgE,GAAK,EACjC86B,SAAU,EACV9iB,aAAa,EAErB,EAWAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAa6V,SAAS1hB,aAChC5iB,KAAK4d,WAAW7K,EAAUyb,GAG9B,MAAMlQ,EAAOvL,EAAS0b,YAAY6V,QAC5Bte,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAWa,EAAOb,UAAY,EAMpC,IAAIgY,EAEJ,GALArnB,EAAKgnB,cAAgBjnB,EAAK2H,EAAOue,YAK7Bve,EAAOye,OAGPkB,GADqBrnB,EAAKgnB,aAAehnB,EAAK0Q,OAAS,EACrB,GAAM,EAAIhJ,EAAO/G,gBAEhD,GAAI+G,EAAO0e,UAAW,CAEzB,MAAMkB,EAAatnB,EAAKgnB,aAAehnB,EAAK0Q,MAC5C2W,EAAoB3f,EAAO/G,YACtB+G,EAAO9G,WAAa8G,EAAO/G,aAAsC,GAAvBrY,KAAKiE,IAAI+6B,GAAoB,GAEhF,KAAO,CAEH,GAAItnB,EAAKgnB,aAAehnB,EAAKinB,YAAc,EAIvC,GAHAjnB,EAAKinB,YAAcjnB,EAAKgnB,aAGpBhnB,EAAK4mB,UAAW,CAEhB,MAAMW,EAAaj/B,KAAKgJ,MAAM0O,EAAKgnB,cAAgB,EACnDhnB,EAAKknB,aAAeK,IAAevnB,EAAKmnB,OAC5C,MAEInnB,EAAKknB,aAAe5+B,KAAK8I,SAAW,GAK5C,MAAMo2B,EAAgBxnB,EAAKknB,aACvBxf,EAAO9G,WACP8G,EAAO/G,WAA6B,GAAhBrY,KAAK8I,SAGvBq2B,EAAiBhzB,EAASG,QAAUoL,EAAKgC,YAC/CqlB,EAAoBI,EAAoD,IAAlCD,EAAgBC,EAC1D,CAGA,MAAMC,EAAe1nB,EAAKgC,aAAe,GAAKqlB,EAAoB,GAAKhY,GASvE,GARA5a,EAASG,QAAUtM,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAGk+B,SAGrB3rB,IAAlBtH,EAASE,OACTF,EAASE,KAAOF,EAASG,SAIzB8S,EAAOzM,aAAe,GAAKosB,EAAoB3f,EAAO/G,WAAY,CAClE,MAAMsD,EAASyD,EAAOzM,aAAeoU,EAAW5a,EAAS4L,YACnDgW,GAAW/tB,KAAK8I,SAAW,IAAO6S,EAASojB,EAC3C/Q,GAAWhuB,KAAK8I,SAAW,IAAO6S,EAASojB,EAEjD5yB,EAAS8K,IAAgB,GAAV8W,EAAgBtW,EAC/BtL,EAAS+K,IAAgB,GAAV8W,EAAgBvW,CACnC,CAGA,GAAI2H,EAAOwe,YAAczxB,EAASjP,MAAO,CACrCwa,EAAKonB,UAAY,IAAOrnB,EACxB,MAAM4nB,EAAqC,GAA1Br/B,KAAKiE,IAAIyT,EAAKonB,UAC/B3yB,EAASjP,MAAQ9D,KAAKkmC,SAAS5nB,EAAK6mB,UAAWc,EAAWtY,EAC9D,CAGA,IAAI9I,EAAa,EACbhc,EAAW,GACXgc,EAAahc,EAAW,GACjBA,EAAW,KAClBgc,GAAc,EAAIhc,GAAY,IAGlCkK,EAASG,SAAW2R,OACExK,IAAlBtH,EAASE,OACTF,EAASE,KAAOF,EAASG,SAIzBrK,EAAW,KACXkK,EAAS8K,IAAM,IACf9K,EAAS+K,IAAM,IAEvB,EAQAooB,SAAU,SAASpiC,EAAOqiC,GAGtB,IAAKriC,IAAUA,EAAMsiC,WAAW,KAAM,OAAOtiC,EAG7C,MAAMiD,EAAMjD,EAAMoC,MAAM,GAClBmB,EAAIjG,SAAS2F,EAAIO,OAAO,EAAG,GAAI,IAAM,IACrCC,EAAInG,SAAS2F,EAAIO,OAAO,EAAG,GAAI,IAAM,IACrCE,EAAIpG,SAAS2F,EAAIO,OAAO,EAAG,GAAI,IAAM,IAGrC++B,EAASF,EAAUv/B,KAAKgE,GAAK,IAC7BU,EAAM1E,KAAK0E,IAAI+6B,GACfx7B,EAAMjE,KAAKiE,IAAIw7B,GAIfC,EAAOj/B,EAAIwD,EAAMtD,EAAI+D,EACrBi7B,EAAO/+B,EAGPE,EAAS8+B,GACC5/B,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,IAAKlB,KAAKgB,MAAU,IAAJ4+B,KACtCz+B,SAAS,IAAI8F,SAAS,EAAG,KAGxC,MAAO,IAAMnG,EAVAL,EAAIiE,EAAM/D,EAAIsD,GAUAnD,EAAM4+B,GAAQ5+B,EAAM6+B,EACnD,EAMAhX,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAa6V,QAAS,CAC/B,MAAMhmB,EAAOvL,EAAS0b,YAAY6V,QAClCvxB,EAASG,QAAUoL,EAAKgC,YACxBvN,EAASjP,MAAQwa,EAAK6mB,eACA9qB,IAAlBtH,EAASE,OACTF,EAASE,KAAOqL,EAAKgC,oBAElBvN,EAAS0b,YAAY6V,OAChC,CACJ,GC9RJxX,GAAe,CACXxgB,KAAM,QACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,sCAGboZ,OAAQ,CACJxQ,MAAO,GACPmY,SAAU,GAIdjZ,OAAQ,CACJC,SAAS,EACTE,SAAU,OAGV4xB,aAAc,CACV1vB,OAAQ,IACRC,QAAS,EACTpB,MAAO,aAIX8wB,UAAW,CACPxxB,KAAM,QACNgtB,KAAM,GACND,KAAM,GACNrsB,MAAO,eAIXwY,aAAc,CACVlZ,KAAM,QACNsY,MAAO,GACP4U,SAAS,GAIb/T,eAAgB,CACZ1Z,SAAS,EACTwZ,WAAY,IACZ7oB,KAAM,YAIVgpB,iBAAkB,CACdqY,KAAQ,CAEJF,aAAc,CAAE1vB,OAAQ,EAAKC,QAAS,KACtC0vB,UAAW,CAAExE,KAAM,GAAKD,KAAM,KAElCM,WAAc,CAEVkE,aAAc,CAAE1vB,OAAQ,IAAKC,QAAS,GAAKpB,MAAO,SAClD8wB,UAAW,CAAExE,KAAM,GAAKD,KAAM,KAElCwB,KAAQ,CAEJgD,aAAc,CACV1vB,OAAQ,IACRC,QAAS,IACTrB,OAAO,GAEX+wB,UAAW,CAAExE,KAAM,GAAKD,KAAM,KAElCO,WAAc,CAEViE,aAAc,CAAE1vB,OAAQ,IAAKC,QAAS,IACtCqX,eAAgB,CAAEF,WAAY,KAKtC4I,SAAU,CACNC,MAAO,CAEHyP,aAAc,CACV1vB,OAAQ,CAAEoX,WAAY,GACtBnX,QAAS,CAAEmX,WAAY,MAE3BuY,UAAW,CAAEvY,WAAY,IACzBE,eAAgB,CAAEF,WAAY,MAElC8I,MAAO,CAEHwP,aAAc,CACV1vB,OAAQ,CAAEoX,WAAY,IACtBnX,QAAS,CAAEmX,WAAY,KAE3BuY,UAAW,CAAEvY,WAAY,KACzBE,eAAgB,CAAEF,WAAY,QAS1CW,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAErD,MAAM4U,EAAQgZ,EAAOhZ,OAASxV,KAAKgmB,OAAOxQ,MACpCmY,GAAYa,EAAOb,UAAY3tB,KAAKgmB,OAAO2H,WAAa,EAAI9kB,EAAW2M,GAGvEqN,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAClBmiB,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAGtCC,EAAW,IAEXhQ,EAAS8K,IAAOgF,EAAKE,EAAY4K,EAAW,EAAItP,EAChDtL,EAAS+K,IAAOgF,EAAKC,EAAY4K,EAAW,EAAItP,EAExD,GCrHJuoB,GAAe,CACXt6B,KAAM,cACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,yCAGboZ,OAAQ,CACJ7G,MAAO,EACPyjB,gBAAgB,EAChBjV,SAAU,GAIdjZ,OAAQ,CACJC,SAAS,EACTE,SAAU,OAGV0nB,UAAW,CACP7D,MAAO,EACPC,OAAQ,GACRC,OAAQ,IACRiO,MAAO,IACP/rB,WAAY,UAIhB2rB,aAAc,CACV1vB,OAAQ,IACRC,QAAS,GACTpB,MAAO,QAIXkxB,WAAY,CACRnyB,SAAS,EACToyB,iBAAiB,EACjBv4B,SAAU,aACVmf,SAAU,KAIdU,eAAgB,CACZ1Z,SAAS,EACTwZ,WAAY,EACZ7oB,KAAM,YAIVgpB,iBAAkB,CACd0Y,MAAS,CAELzK,UAAW,CAAE7D,MAAO,EAAGC,OAAQ,GAC/B8N,aAAc,CAAE1vB,OAAQ,IAAKC,QAAS,IAE1CtB,MAAS,CAEL6mB,UAAW,CACP7D,MAAO,GACPC,OAAQ,IACRC,OAAQ,IACRiO,MAAO,IACP/rB,WAAY,aAGpBnF,MAAS,CAEL8wB,aAAc,CACV1vB,OAAQ,IACRC,QAAS,IACTrB,OAAO,IAGf4sB,WAAc,CAEVhG,UAAW,CAAEzhB,WAAY,WACzB2rB,aAAc,CAAE1vB,OAAQ,IAAKC,QAAS,GAAKpB,MAAO,WAK1DmhB,SAAU,CACNC,MAAO,CAEHyP,aAAc,CACV1vB,OAAQ,CAAEoX,WAAY,KACtBnX,QAAS,CAAEmX,WAAY,MAE3BoO,UAAW,CAAEzhB,WAAY,SACzBuT,eAAgB,CAAEF,WAAY,MAElC8I,MAAO,CAEHwP,aAAc,CACV1vB,OAAQ,CAAEoX,WAAY,IACtBnX,QAAS,CAAEmX,WAAY,KAE3BoO,UAAW,CAAEzhB,WAAY,WACzBuT,eAAgB,CAAEF,WAAY,QAS1CvQ,WAAY,SAAS7K,GACZA,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAE3B1b,EAAS0b,YAAYmY,YAAc,CAC/BK,SAAUl0B,EAAS1Q,EACnBqiB,SAAU3R,EAASzQ,EAE3B,EAMAwsB,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAChDmS,EAAS0b,aAAamY,aACvB5mC,KAAK4d,WAAW7K,GAIpB,MAAMoM,GAASqP,EAAOrP,OAASnf,KAAKgmB,OAAO7G,OAASvY,KAAKgE,GAAK,IACxD+iB,EAAWa,EAAOb,UAAY3tB,KAAKgmB,OAAO2H,SAOhD,GAJA5a,EAAS8K,IAAMjX,KAAK0E,IAAI6T,GAASwO,EAAW,GAAMtP,EAClDtL,EAAS+K,IAAMlX,KAAKiE,IAAIsU,GAASwO,EAAW,GAAMtP,EAG9CmQ,EAAOoU,gBAAkB/5B,EAAW,GAAK,CACzC,MAAMkyB,EAAoC,GAAlBlyB,EAAW,IAC7ByV,EAAOvL,EAAS0b,YAAYmY,YAE5B/jB,EAAKvE,EAAK2oB,SAAWl0B,EAAS1Q,EAC9BygB,EAAKxE,EAAKoG,SAAW3R,EAASzQ,EACpCyQ,EAAS8K,IAAMgF,EAAKkY,EAAiB,IAAO1c,EAC5CtL,EAAS+K,IAAMgF,EAAKiY,EAAiB,IAAO1c,CAChD,CACJ,GCjJJ6oB,GAAe,CACX56B,KAAM,SACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,qCAGboZ,OAAQ,CACJ0H,QAAS,IACT/nB,UAAW,KAIf+O,OAAQ,CACJC,SAAS,EACTE,SAAU,aAGVsyB,YAAa,CACTC,aAAc,KACdC,UAAW,KACXzxB,MAAO,WAIX0xB,cAAe,CACXpyB,KAAM,WACN8hB,MAAO,IACPC,MAAO,KACPrhB,MAAO,eAIXwY,aAAc,CACVlZ,KAAM,SACNgjB,SAAU,EACVC,SAAU,GACViK,SAAS,GAIbmF,gBAAiB,CACb5yB,SAAS,EACTwZ,WAAY,IACZ7oB,KAAM,WAIVgpB,iBAAkB,CACd3Q,QAAW,CAEPwpB,YAAa,CAAEC,aAAc,KAAOC,UAAW,KAAOzxB,MAAO,eAC7DwY,aAAc,CAAE8J,SAAU,EAAGC,SAAU,KAE3CsL,KAAQ,CAEJ0D,YAAa,CAAEC,aAAc,IAAOC,UAAW,KAC/CE,gBAAiB,CAAEpZ,WAAY,MAEnCqV,UAAa,CAET2D,YAAa,CAAEC,aAAc,KAAOC,UAAW,KAAOzxB,MAAO,cAC7D2xB,gBAAiB,CAAEpZ,WAAY,IAEnCqZ,WAAc,CAEVL,YAAa,CAAEC,aAAc,IAAOC,UAAW,MAC/CjZ,aAAc,CAAE8J,SAAU,GAAIC,SAAU,MAKhDpB,SAAU,CACNC,MAAO,CAEHmQ,YAAa,CACTC,aAAc,CAAEjZ,WAAY,KAC5BkZ,UAAW,CAAElZ,WAAY,KAE7BmZ,cAAe,CAAEnZ,WAAY,GAC7BoZ,gBAAiB,CAAEpZ,WAAY,MAEnC8I,MAAO,CAEHkQ,YAAa,CACTC,aAAc,CAAEjZ,WAAY,IAC5BkZ,UAAW,CAAElZ,WAAY,MAE7BmZ,cAAe,CAAEnZ,WAAY,IAC7BoZ,gBAAiB,CAAEpZ,WAAY,QAS3CW,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GACrD,MAAM8sB,EAAUc,EAAOd,SAAW1tB,KAAKgmB,OAAO0H,QACxC/nB,EAAY6oB,EAAO7oB,WAAa3F,KAAKgmB,OAAOrgB,UAGlDoN,EAAS8K,IAAMjX,KAAKiB,IAAI,EAAG,EAAI6lB,EAAUrP,EAAK,IAC9CtL,EAAS+K,IAAMlX,KAAKiB,IAAI,EAAG,EAAI6lB,EAAUrP,EAAK,IAG1CzX,KAAKib,IAAI9O,EAAS8K,IAAMlY,IAAWoN,EAAS8K,GAAK,GACjDjX,KAAKib,IAAI9O,EAAS+K,IAAMnY,IAAWoN,EAAS+K,GAAK,EACzD,GC7GJ2pB,GAAe,CACXn7B,KAAM,UACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,0CAGboZ,OAAQ,CAEJsH,gBAAiB,CACbC,SAAS,EACT8G,KAAM,EACN6D,SAAU,EACVC,SAAU,IAIdC,OAAQ,CACJ,CAAE9rB,KAAM,SAAUkhB,MAAO,KACzB,CAAElhB,KAAM,UAAWkhB,MAAO,IAC1B,CAAElhB,KAAM,SAAUkhB,MAAO,KACzB,CAAElhB,KAAM,WAAYkhB,MAAO,KAG/Bka,aAAc,IACdC,aAAc,GACd9jC,WAAY,GACZ+jC,eAAgB,KAChBlY,YAAa,IACbC,WAAY,GACZze,UAAW,EACXxF,OAAQ,OACRiiB,SAAU,GAEVC,eAAgB,CACZtoB,KAAM,UACNqoB,SAAU,GACV+Z,aAAc,IACdC,aAAc,KAKtBjzB,OAAQ,CACJC,SAAS,EACTE,SAAU,SAGVgzB,eAAgB,CACZ3yB,KAAM,QACN4yB,IAAK,OACL5wB,YAAa,QACbtB,MAAO,QAIXqB,WAAY,CACR8wB,OAAQ,CACJC,SAAU,IACVC,WAAY,IACZryB,MAAO,WAEXsyB,OAAQ,CACJF,SAAU,GACVC,WAAY,GACZryB,MAAO,aAKfwY,aAAc,CACVlZ,KAAM,UACNizB,QAAS,EACTC,KAAM,WAIV/Z,eAAgB,CACZ1Z,SAAS,EACTwZ,WAAY,IACZ7oB,KAAM,aAIVgpB,iBAAkB,CACd+Z,OAAU,CAENR,eAAgB,CAAE3wB,YAAa,gBAC/BD,WAAY,CACR8wB,OAAQ,CAAEC,SAAU,IAAKC,WAAY,KACrCC,OAAQ,CAAEF,SAAU,GAAKC,WAAY,MAG7CK,QAAW,CAEPT,eAAgB,CAAE3wB,YAAa,QAC/BD,WAAY,CACR8wB,OAAQ,CAAEC,SAAU,IAAKC,WAAY,KACrCC,OAAQ,CAAEF,SAAU,GAAKC,WAAY,MAG7CtqB,QAAW,CAEPkqB,eAAgB,CAAE3wB,YAAa,QAAStB,MAAO,QAC/CqB,WAAY,CACR8wB,OAAQ,CAAEC,SAAU,IAAKC,WAAY,KACrCC,OAAQ,CAAEF,SAAU,GAAKC,WAAY,OAMjDlR,SAAU,CACNC,MAAO,CAEH/f,WAAY,CACR8wB,OAAQ,CAAE5Z,WAAY,KACtB+Z,OAAQ,CAAE/Z,WAAY,KAE1ByZ,eAAgB,KAChBlY,YAAa,IAEjBuH,MAAO,CAEHhgB,WAAY,CACR8wB,OAAQ,CAAE5Z,WAAY,KACtB+Z,OAAQ,CAAE/Z,WAAY,KAE1ByZ,eAAgB,KAChBlY,YAAa,MASzB9R,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAI3B,MAAM5L,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAExBmS,EAAS0b,YAAYgZ,QAAU,CAC3B9Y,OAAQ5b,EAAS1Q,EACjBqsB,OAAQ3b,EAASzQ,EACjB6c,MAAOvY,KAAKipB,MAAM/M,EAAID,GACtBnE,WAAY9X,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GACrCylB,YAA6B,GAAhB3hC,KAAK8I,SAAiB,GAE3C,EAMAof,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAagZ,SACvBznC,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAI/C,MAAMolB,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAI9Bhc,GAAe5L,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAIob,EAAOniB,YAAc,GAAK,EAI3E2kC,EAAkB,KAAOz1B,EAAS4L,aAAe,GACjD+oB,EAAe1hB,EAAO0hB,aAAec,EACrCb,EAAe3hB,EAAO2hB,aAAea,EAGrC/O,EAAekO,GAAgBD,EAAeC,GAAgBn1B,EAG9Di2B,EAAY11B,EAAS1Q,EAAI1B,EACzB+nC,EAAY31B,EAASzQ,EAAI1B,EACzBif,EAAgBjZ,KAAKkb,KAAK2mB,EAAYA,EAAYC,EAAYA,GAG9DC,EAAalP,EAAe5Z,EAC5B4hB,EAA0C,KAA1BjT,EAAOb,UAAY,IAActP,EAGvD,GAAIwB,EAAgB,EAAG,CAEnB,MAAM+oB,EAASH,EAAY5oB,EAAiB8oB,EAAalH,EACnDoH,EAASH,EAAY7oB,EAAiB8oB,EAAalH,EAEzD1uB,EAAS8K,IAAM+qB,EACf71B,EAAS+K,IAAM+qB,EAIf,MAAMjB,EAAiB5hB,EAAO4hB,eAAiBvpB,GAAMmQ,EAAOb,UAAY,GAClE6P,GAAYkL,EAAY7oB,EACxB4d,EAAWgL,EAAY5oB,EAG7B9M,EAAS8K,IAAM2f,EAAWoK,EAAiBp1B,EAC3CO,EAAS+K,IAAM2f,EAAWmK,EAAiBp1B,CAC/C,CAIAO,EAAS8K,IAAM,IACf9K,EAAS+K,IAAM,GACnB,EAMAyR,QAAS,SAASxc,GACVA,EAAS0b,aAAagZ,gBACf10B,EAAS0b,YAAYgZ,OAEpC,GCjOJqB,GAAe,CACXx8B,KAAM,SACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,+BAGboZ,OAAQ,CACJxX,SAAU,IACVkhB,YAAa,EACbqZ,YAAa,EACbpZ,WAAY,GACZjkB,OAAQ,OACRiiB,SAAU,EAEVC,eAAgB,CACZtoB,KAAM,QACNqoB,SAAU,EACVnF,UAAW,UACXwgB,SAAS,IAKjBt0B,OAAQ,CACJC,SAAS,EACTE,SAAU,YAGV4xB,aAAc,CACVwC,WAAY,IACZC,WAAY,EACZlG,UAAW,QACXmG,UAAW,SAIfC,gBAAiB,CACb1Q,MAAO,EACPC,OAAQ,IACR0Q,OAAQ,EACRzzB,MAAO,eAIXwY,aAAc,CACVlZ,KAAM,UACNo0B,MAAO,IACPC,QAAS,GACTnH,QAAS,QAIb/T,eAAgB,CACZ1Z,SAAS,EACTwZ,WAAY,IACZ7oB,KAAM,YAIVgpB,iBAAkB,CACdkU,WAAc,CAEViE,aAAc,CACVwC,WAAY,EACZC,WAAY,IACZlG,UAAW,YAEfoG,gBAAiB,CAAEC,OAAQ,IAE/B1C,KAAQ,CAEJF,aAAc,CACVwC,WAAY,IACZC,WAAY,IACZtzB,MAAO,SAEXyY,eAAgB,CAAEF,WAAY,MAElCxQ,QAAW,CAEP8oB,aAAc,CACVwC,WAAY,IACZC,WAAY,IACZlG,UAAW,WAEf5U,aAAc,CAAEkb,MAAO,IAAKC,QAAS,MAEzChH,WAAc,CAEVkE,aAAc,CACVwC,WAAY,IACZC,WAAY,IACZtzB,MAAO,WAEXwzB,gBAAiB,CAAExzB,MAAO,YAKlCmhB,SAAU,CACNC,MAAO,CAEHyP,aAAc,CACVwC,WAAY,CAAE9a,WAAY,KAC1B+a,WAAY,CAAE/a,WAAY,MAE9Bib,gBAAiB,CAAEjb,WAAY,KAC/BE,eAAgB,CAAEF,WAAY,MAElC8I,MAAO,CAEHwP,aAAc,CACVwC,WAAY,CAAE9a,WAAY,IAC1B+a,WAAY,CAAE/a,WAAY,MAE9Bib,gBAAiB,CAAEjb,WAAY,IAC/BE,eAAgB,CAAEF,WAAY,MAK1CvQ,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAE3B,MAAM5L,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EACxBmS,EAAS0b,YAAYqa,OAAS,CAC1Bna,OAAQ5b,EAAS1Q,EACjBqsB,OAAQ3b,EAASzQ,EACjB6c,MAAOvY,KAAKipB,MAAM/M,EAAID,GACtBnE,WAAY9X,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GACrCF,aAAa,EAErB,EAMAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAChDmS,EAAS0b,aAAaqa,QAAQlmB,aAC/B5iB,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAYqa,OAC5B9iB,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAW3H,EAAO2H,UAAY,EAG9B6b,EAAe,GAAKxjB,EAAO+iB,YAAc,GAAKlgC,EAAW8kB,EACzD8L,EAAenb,EAAKI,WAAa8qB,EAGjC1pB,EAAUnf,EAAUiG,KAAK0E,IAAIgT,EAAKa,OAASsa,EAC3C1Z,EAAUnf,EAAUgG,KAAKiE,IAAIyT,EAAKa,OAASsa,EAG3C5W,EAAK/C,EAAU/M,EAAS1Q,EACxBygB,EAAK/C,EAAUhN,EAASzQ,EAC9ByQ,EAAS8K,IAAW,GAALgF,EAAWxE,EAC1BtL,EAAS+K,IAAW,GAALgF,EAAWzE,EAG1BtL,EAAS8K,IAAM,IACf9K,EAAS+K,IAAM,GACnB,EAEAyR,QAAS,SAASxc,GACVA,EAAS0b,aAAaqa,eACf/1B,EAAS0b,YAAYqa,MAEpC,GC7KJW,GAAe,CACXn9B,KAAM,WACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,mCAGboZ,OAAQ,CACJxX,SAAU,IACVkhB,YAAa,GACbqZ,YAAa,GACbpZ,YAAY,GACZjkB,OAAQ,QACRiiB,SAAU,IAEVC,eAAgB,CACZtoB,KAAM,QACNqoB,SAAU,IACVnF,UAAW,SACXwgB,SAAS,IAKjBt0B,OAAQ,CACJC,SAAS,EACTE,SAAU,UAGV4xB,aAAc,CACVY,UAAW,EACXqC,UAAW,IACX9zB,MAAO,YAIXwzB,gBAAiB,CACbpS,MAAO,GACPC,MAAO,GACP+L,UAAW,UACXC,WAAY,QAIhB7U,aAAc,CACVlZ,KAAM,UACNmuB,YAAa,GACbC,WAAY,IACZ8E,KAAM,WAIV/Z,eAAgB,CACZ1Z,SAAS,EACTwZ,WAAY,IACZ7oB,KAAM,YAIVgpB,iBAAkB,CACdkV,UAAa,CAETiD,aAAc,CAAEY,UAAW,IAAKqC,UAAW,KAC3CN,gBAAiB,CAAEpS,MAAO,IAAMC,MAAO,MAE3C0S,MAAS,CAELlD,aAAc,CAAEY,UAAW,EAAKqC,UAAW,EAAK9zB,MAAO,SACvDwzB,gBAAiB,CAAEpS,MAAO,IAAMC,MAAO,MAE3CtZ,QAAW,CAEP8oB,aAAc,CAAEY,UAAW,IAAKqC,UAAW,IAAK9zB,MAAO,QACvDwY,aAAc,CAAEiV,YAAa,IAAKC,WAAY,IAElDsG,KAAQ,CAEJnD,aAAc,CACVY,UAAW,IACXqC,UAAW,EACXnb,SAAU,GAEd6a,gBAAiB,CAAEpS,MAAO,IAAMC,MAAO,MAK/CF,SAAU,CACNC,MAAO,CAEHyP,aAAc,CACVY,UAAW,CAAElZ,WAAY,KACzBub,UAAW,CAAEvb,WAAY,MAE7Bib,gBAAiB,CAAEjb,WAAY,IAC/BE,eAAgB,CAAEF,WAAY,MAElC8I,MAAO,CAEHwP,aAAc,CACVY,UAAW,CAAElZ,WAAY,IACzBub,UAAW,CAAEvb,WAAY,KAE7Bib,gBAAiB,CAAEjb,WAAY,KAC/BE,eAAgB,CAAEF,WAAY,QAK1CvQ,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAE3B,MAAM5L,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EACxBmS,EAAS0b,YAAYgb,SAAW,CAC5B9a,OAAQ5b,EAAS1Q,EACjBqsB,OAAQ3b,EAASzQ,EACjB6c,MAAOvY,KAAKipB,MAAM/M,EAAID,GACtBnE,WAAY9X,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GACrCF,aAAa,EAErB,EAMAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAChDmS,EAAS0b,aAAagb,UAAU7mB,aACjC5iB,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAG/C,MAAM0d,EAAOvL,EAAS0b,YAAYgb,SAC5BzjB,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAW3H,EAAO2H,UAAY,EAG9Bkc,EAAiB,GAAK,EAAI7jB,EAAO+iB,aAAelgC,EAAW8kB,EAC3D8L,EAAenb,EAAKI,WAAamrB,EAGjC/pB,EAAUnf,EAAUiG,KAAK0E,IAAIgT,EAAKa,OAASsa,EAC3C1Z,EAAUnf,EAAUgG,KAAKiE,IAAIyT,EAAKa,OAASsa,EAG3C5W,EAAK/C,EAAU/M,EAAS1Q,EACxBygB,EAAK/C,EAAUhN,EAASzQ,EAC9ByQ,EAAS8K,IAAW,GAALgF,EAAWxE,EAC1BtL,EAAS+K,IAAW,GAALgF,EAAWzE,EAG1BtL,EAAS8K,IAAM,IACf9K,EAAS+K,IAAM,GACnB,EAEAyR,QAAS,SAASxc,GACVA,EAAS0b,aAAagb,iBACf12B,EAAS0b,YAAYgb,QAEpC,GChKJK,GAAe,CACXx9B,KAAM,QACNK,MAAO,IACPrH,KAAM,WACNsH,YAAa,4BAGboZ,OAAQ,CACJxX,SAAU,IACVmhB,WAAY,IACZoa,SAAU,EACVC,UAAW,IACXt+B,OAAQ,QACRiiB,SAAU,EAEVC,eAAgB,CACZtoB,KAAM,QACNqoB,SAAU,EACVnY,MAAO,KAKfd,OAAQ,CACJC,SAAS,EACTE,SAAU,OACVgZ,WAAY,YACZC,eAAe,EACfrf,SAAU,EACVsf,WAAW,EAGX6F,cAAe,CACX7c,OAAQ,IACRC,QAAS,EACTwf,OAAQ,EACRtf,YAAa,UACbtB,MAAO,eAIXwY,aAAc,CACVlZ,KAAM,QACN4hB,aAAc,IACdvG,QAAS,WAIb+K,UAAW,CACPvkB,OAAQ,IACRC,QAAS,EACTwf,OAAQ,IACR5gB,MAAO,WAIXqvB,WAAY,CACRtwB,SAAS,EACT1D,QAAS,OACTiG,YAAa,aAIjB6f,SAAU,CACNC,MAAO,CAAE+S,SAAU,EAAKC,UAAW,IAAKx7B,SAAU,KAClDyoB,MAAO,CAAE8S,SAAU,EAAKC,UAAW,KAAMx7B,SAAU,OAI3DoP,WAAY,SAAS7K,EAAUyb,GACtBzb,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAE3B1b,EAAS0b,YAAYqb,MAAQ,CACzBrV,gBAAiB1hB,EAASG,QAC1BshB,aAAczhB,EAASI,KACvByP,aAAa,EAErB,EAMAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAChDmS,EAAS0b,aAAaqb,OAAOlnB,aAC9B5iB,KAAK4d,WAAW7K,EAAUyb,GAG9B,MAAMlQ,EAAOvL,EAAS0b,YAAYqb,MAC5B9jB,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAC9Bb,EAAW3H,EAAO2H,UAAY,EAGpC,IAAIsc,EAcJ,GAXIA,EAFAphC,EAAW,GAEOA,EAAW,GAAOmd,EAAO+jB,SAG1B/jB,EAAO+jB,UAAY,GAAKlhC,EAAW,IAAO,IAI/DkK,EAASG,QAAUtM,KAAKkB,IAAI,EAAGwW,EAAKmW,iBAAmB,EAAIwV,EAAiBtc,IAC5E5a,EAASI,KAAOmL,EAAKkW,cAAgB,GAAKxO,EAAOgkB,UAAY,GAAKC,EAAiBtc,EAAW,IAG1F9kB,EAAW,GAAK,CAChB,MAAMqhC,GAAiB,EAAIrhC,EAAW,IAAO8kB,EACvCxO,EAAQvY,KAAKipB,MAAM9c,EAASzQ,EAAI1B,EAASmS,EAAS1Q,EAAI1B,GAC5DoS,EAAS8K,IAAMjX,KAAK0E,IAAI6T,GAAS+qB,EAAgB,EAAI7rB,EACrDtL,EAAS+K,IAAMlX,KAAKiE,IAAIsU,GAAS+qB,EAAgB,EAAI7rB,CACzD,CAGAtL,EAAS8K,IAAO,EAAkC,GAA9BmI,EAAO4H,eAAepY,MAC1CzC,EAAS+K,IAAO,EAAkC,GAA9BkI,EAAO4H,eAAepY,KAC9C,EAEA+Z,QAAS,SAASxc,GACVA,EAAS0b,aAAaqb,QACtB/2B,EAASG,QAAUH,EAAS0b,YAAYqb,MAAMrV,gBAC9C1hB,EAASI,KAAOJ,EAAS0b,YAAYqb,MAAMtV,oBACpCzhB,EAAS0b,YAAYqb,MAEpC,GCzGJK,GAAe,CACX79B,KAAM,OACNK,MAAO,IACPrH,KAAM,WACNsH,YAAa,sCAGboZ,OAAQ,CACJxX,SAAU,KACVR,UAAW,EACXkD,UAAW,EACXue,SAAU,GACV/jB,OAAQ,OACRgkB,YAAa,GACbC,WAAY,GACZhC,SAAU,EACVnF,UAAW,OAEXoF,eAAgB,CACZtoB,KAAM,OACNqoB,SAAU,EACVnF,UAAW,OACXtX,UAAW,IAKnBwD,OAAQ,CACJC,SAAS,EACTE,SAAU,SAGVoZ,cAAe,CACXlX,OAAQ,EACRC,QAAS,IACTpB,MAAO,UAIXsY,cAAe,CACXhZ,KAAM,SACNgC,YAAa,OAIjBkX,aAAc,CACVlZ,KAAM,OACNmf,KAAM,GAIVhG,eAAgB,CACZ1Z,SAAS,EACTwZ,WAAY,KAIhBG,iBAAkB,CACd3Q,QAAW,CAEPsQ,cAAe,CAAElX,OAAQ,IAAKC,QAAS,KACvCoX,aAAc,CAAEiG,KAAM,IAE1BkO,WAAc,CAEVtU,cAAe,CAAElX,OAAQ,EAAKC,QAAS,GAAKpB,MAAO,SACnDsY,cAAe,CAAEhX,YAAa,cAY1C0G,WAAY,SAAS7K,EAAUyb,EAAQ7tB,EAASC,GACvCmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAI3B1b,EAAS0b,YAAY0b,KAAO,CACxBC,aAAcr3B,EAASG,QACvBm3B,UAAWt3B,EAASmO,oBAAsB,EAC1C0B,aAAa,EAErB,EAWAkM,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAEhDmS,EAAS0b,aAAa0b,MAAMvnB,aAC7B5iB,KAAK4d,WAAW7K,EAAUyb,EAAQ7tB,EAASC,GAI/C,MAAMolB,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAG9BO,EAAe/uB,KAAKqL,cAAcxC,GAGxC,IAAIyhC,EACAp5B,EAAY8U,EAAO9U,UACnBye,EAAa3J,EAAO2J,WAGpBnB,EAAOS,mBACPU,GAAenB,EAAOS,iBAAiBC,qBAAuB,EAC9DS,GAAenB,EAAOS,iBAAiBE,kBAAoB,EACvDX,EAAOS,iBAAiBG,sBACxBle,GAAasd,EAAOS,iBAAiBG,sBAI7C,MAAMY,EAAYjB,EAAe7d,EAAY,EAAK,EAI9Co5B,EAFAtkB,EAAOyJ,SAAW,GAAKO,EAAY,EAAIhK,EAAOyJ,UAAaO,EAAY,EAAIhK,EAAOyJ,SAEtE,EAGA7oB,KAAKiE,IAAIkkB,EAAenoB,KAAKgE,GAAK,EAAIsG,GAOtD,IAAIq5B,EAAiB,EACjB1hC,EAAW,KAEX0hC,EAAkB,GAAmB,IADlB,EAAwB,IAAlB1hC,EAAW,MAQxCkK,EAASpP,cAAgB,EAAI2mC,EAAY3a,EAAa4a,CAC1D,EAMAhb,QAAS,SAASxc,GACVA,EAAS0b,aAAa0b,OAEtBp3B,EAASpP,cAAgB,SAClBoP,EAAS0b,YAAY0b,KAEpC,EAOA9+B,cAAe,SAAS5C,GACpB,QAAS7B,KAAK0E,IAAI1E,KAAKgE,GAAKnC,GAAK,GAAK,CAC1C,GC1LJ+hC,GAAe,CACXl+B,KAAM,OACNK,MAAO,KACPrH,KAAM,SACNsH,YAAa,6BAGboZ,OAAQ,CACJykB,aAAc,GACdC,UAAW,IACXC,aAAc,IACdC,UAAW,IACXzK,SAAS,EACT3xB,SAAU,MAIdkG,OAAQ,CACJC,SAAS,EACTE,SAAU,SAGVkuB,aAAc,CACVgC,SAAU,GACV8F,UAAW,GACXj1B,MAAO,SAIX+b,UAAW,CACPzc,KAAM,QACNgtB,KAAM,IACND,KAAM,GACN6I,eAAgB,KAIpB1c,aAAc,CACVlZ,KAAM,cACNsY,MAAO,IACPud,aAAc,KACd3I,SAAS,GAIb4I,oBAAqB,CACjBr2B,SAAS,EACTwZ,WAAY,IACZ7oB,KAAM,YAIVgpB,iBAAkB,CACd0S,KAAQ,CAEJ+B,aAAc,CAAEgC,SAAU,GAAI8F,UAAW,GAAIj1B,MAAO,SACpDo1B,oBAAqB,CAAE7c,WAAY,MAEvC+S,MAAS,CAELvP,UAAW,CAAEuQ,KAAM,GAAMD,KAAM,KAC/B7T,aAAc,CAAEZ,MAAO,GAAKud,aAAc,MAE9Ch1B,UAAa,CAETgtB,aAAc,CAAEgC,SAAU,GAAI8F,UAAW,IACzCG,oBAAqB,CAAE7c,WAAY,MAEvCqV,UAAa,CAETT,aAAc,CAAEgC,SAAU,GAAI8F,UAAW,GAAIj1B,MAAO,WACpD+b,UAAW,CAAEuQ,KAAM,IAAMD,KAAM,OAKvClL,SAAU,CACNC,MAAO,CAEH+L,aAAc,CACVgC,SAAU,CAAE5W,WAAY,KACxB0c,UAAW,CAAE1c,WAAY,MAE7BwD,UAAW,CAAExD,WAAY,KACzB6c,oBAAqB,CAAE7c,WAAY,MAEvC8I,MAAO,CAEH8L,aAAc,CACVgC,SAAU,CAAE5W,WAAY,IACxB0c,UAAW,CAAE1c,WAAY,KAE7BwD,UAAW,CAAExD,WAAY,IACzB6c,oBAAqB,CAAE7c,WAAY,QAK/CW,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAMrD,GAJKmS,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,IAGtB1b,EAAS0b,YAAY+b,KAAM,CAC5B,MAAM3nB,EAAK9P,EAAS1Q,EAAI1B,EAClBmiB,EAAK/P,EAASzQ,EAAI1B,EAClBue,EAAQvY,KAAKipB,MAAM/M,EAAID,GACvBE,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAE1C/P,EAAS0b,YAAY+b,KAAO,CACxBha,UAAWzd,EAAS1Q,EACpBouB,UAAW1d,EAASzQ,EACpB2oC,UAAW9rB,EACX+rB,iBAAkBnoB,EAClBooB,aAAcnrC,KAAKgmB,OAAOma,QAA0B,GAAhBv5B,KAAK8I,SAAiB,EAC1Dsf,MAAO,UACPoc,WAAY,EACZC,WAAY,CAAEhpC,EAAG,EAAGC,EAAG,GAE/B,CAEA,MAAMgc,EAAOvL,EAAS0b,YAAY+b,KAC5BxkB,EAAShmB,KAAKgmB,OAGdslB,EAAmB1kC,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,GAAIe,EAAWyV,EAAK6sB,eAAiB,EAAI7sB,EAAK6sB,gBAGnE,IAArBG,EACAhtB,EAAK0Q,MAAQ,UACNsc,EAAmB,GAC1BhtB,EAAK0Q,MAAQ,UACNsc,EAAmB,GAC1BhtB,EAAK0Q,MAAQ,UACNsc,EAAmB,IAC1BhtB,EAAK0Q,MAAQ,UAIjB,IAAI8E,EAAe,EAEnB,OAAQxV,EAAK0Q,OACT,IAAK,UAED,MAAMuc,EAAeD,EAAmB,GACxCxX,EAAe9zB,KAAKuK,aAAaghC,GAAgBvlB,EAAOykB,aACxD,MAEJ,IAAK,UAED3W,EAAe9N,EAAOykB,aAElB7jC,KAAK8I,SAAW,KAChB4O,EAAK+sB,WAAWhpC,GAA6B,GAAvBuE,KAAK8I,SAAW,IACtC4O,EAAK+sB,WAAW/oC,GAA6B,GAAvBsE,KAAK8I,SAAW,KAE1C,MAEJ,IAAK,SAED,MAAM87B,GAAgBF,EAAmB,IAAO,GAChDxX,GAAgB,EAAI9zB,KAAKwK,YAAYghC,IAAiBxlB,EAAOykB,aAKrE,GAAmB,YAAfnsB,EAAK0Q,MAAqB,CAC1B,MAAMyc,EAAQ7kC,KAAK0E,IAAIgT,EAAK2sB,WAAanX,EACnC4X,EAAQ9kC,KAAKiE,IAAIyT,EAAK2sB,WAAanX,EAGzCxV,EAAK+sB,WAAWhpC,IAAMopC,EAAQntB,EAAK+sB,WAAWhpC,GAAK2jB,EAAO0kB,UAC1DpsB,EAAK+sB,WAAW/oC,IAAMopC,EAAQptB,EAAK+sB,WAAW/oC,GAAK0jB,EAAO0kB,UAG1D33B,EAAS1Q,EAAIic,EAAKkS,UAAYlS,EAAK+sB,WAAWhpC,EAC9C0Q,EAASzQ,EAAIgc,EAAKmS,UAAYnS,EAAK+sB,WAAW/oC,CAClD,MAGuB+X,IAAnBtH,EAAS5S,QACU,YAAfme,EAAK0Q,OAAsC,YAAf1Q,EAAK0Q,MACjCjc,EAAS5S,MAAQ,GAAsB,GAAhByG,KAAK8I,SAE5BqD,EAAS5S,MAAQ,EAG7B,EAGAoK,aAAc,SAAS9B,GACnB,OAAO,EAAI7B,KAAKC,IAAI,EAAI4B,EAAG,EAC/B,EAEA+B,YAAa,SAAS/B,GAClB,OAAOA,EAAIA,EAAIA,CACnB,EAEA8mB,QAAS,SAASxc,GACVA,EAAS0b,aAAa+b,OAEtBz3B,EAAS1Q,EAAI0Q,EAAS0b,YAAY+b,KAAKha,UACvCzd,EAASzQ,EAAIyQ,EAAS0b,YAAY+b,KAAK/Z,eAChBpW,IAAnBtH,EAAS5S,QACT4S,EAAS5S,MAAQ,UAEd4S,EAAS0b,YAAY+b,KAEpC,GCrJJ,MAAMmB,GAA2B,CAACr/B,EAAMK,EAAQ,OAAG,CAC/CL,OACAK,QACArH,KAAM,WACNsH,YAAa,GAAGN,cAChB0Z,OAAQ,CACJxX,SAAU,IACV8e,gBAAiB,CAAEC,SAAS,EAAMC,MAAO,IAE7C9Y,OAAQ,CACJC,SAAS,EACTE,SAAU,OACVgZ,WAAY,WACZO,aAAc,CAAElZ,KAAM,QAASsY,MAAO,GACtCM,eAAe,EACfrf,SAAU,EACVsf,WAAW,EACXC,eAAgB,UAChB4d,SAAU,GAEd9c,MAAO,CAAC/b,EAAUlK,EAAUuL,KAEjB,EAEXy3B,MAAO,CAAC94B,EAAUlK,EAAUuL,KAEjB,IAIT6B,GAAU01B,GAAyB,UAAW,KA8B9CG,GAASH,GAAyB,SAAU,MAC5CI,GAASJ,GAAyB,SAAU,MAC5CK,GAAQL,GAAyB,QAAS,MAC1CM,GAAON,GAAyB,OAAQ,MACxCO,GAAQP,GAAyB,QAAS,MAC1CQ,GAAUR,GAAyB,UAAW,MA4FvCS,GAAmB,CAAA,EAqBzB,SAASC,GAAW//B,GAEvB,GAAI8/B,GAAiB9/B,GACjB,OAAO8/B,GAAiB9/B,GAK5B,OADsB4H,GAA+B5H,IAK9C,IACX,CA/BA,CA3DI+gB,GACAmC,GACAY,GACAW,GACAE,GACAK,GACAgC,GACAc,GACAE,GACA/R,GAEAtM,GA/EY,CACZ3J,KAAM,UACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,0CACboZ,OAAQ,CACJxX,SAAU,IACV8e,gBAAiB,CAAEC,SAAS,EAAM8G,KAAM,GACxCzG,eAAgB,WAEpBlZ,OAAQ,CACJC,SAAS,EACT23B,SAAU,OACVle,aAAc,CAAElZ,KAAM,OAAQmf,KAAM,GACpCpmB,UAAW,IAEfs+B,SAAU,CAACx5B,EAAUlK,EAAUuL,KAE3BrB,EAASmR,eAAgB,EACzBnR,EAASy5B,gBAAkB3jC,GACpB,GAEXgjC,MAAO,CAAC94B,EAAUlK,EAAUuL,KAEjB,GAyDX03B,GACAC,GACAC,GACAC,GACAC,GACAC,GAnDS,CACT7/B,KAAM,OACNK,MAAO,MACPrH,KAAM,WACNsH,YAAa,qCACboZ,OAAQ,CACJxX,SAAU,IACV8e,gBAAiB,CAAEC,SAAS,EAAM8G,KAAM,GACxCzG,eAAgB,WAEpBlZ,OAAQ,CACJC,SAAS,EACT23B,SAAU,WACVle,aAAc,CAAElZ,KAAM,OAAQmf,KAAM,GACpCpmB,UAAW,IAEf6gB,MAAO,CAAC/b,EAAUlK,EAAUuL,KAGxBrB,EAAS05B,YAAa,EACtB15B,EAAS25B,aAAe7jC,GACjB,GAEXgjC,MAAO,CAAC94B,EAAUlK,EAAUuL,KAEjB,GA+BX0gB,GACAa,GACAsC,GACA7B,GACA8F,GACA0B,GACAqB,GACAM,GACAqB,GAIAe,GACA7C,GACAwF,GACAxX,GACA8Z,GACAM,GChNW,CACX56B,KAAM,OACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,wBAGboZ,OAAQ,CACJ2mB,QAAQ,EACR9X,SAAS,EACT5V,WAAY,EACZC,WAAY,GAIhBxK,OAAQ,CACJC,SAAS,EACTE,SAAU,UAGViwB,YAAa,CACT/tB,OAAQ,GACRC,QAAS,GACTE,YAAa,SACbtB,MAAO,eAIXg3B,cAAe,CACXlU,MAAO,CAAEiU,QAAQ,EAAM9X,SAAS,GAChC8D,OAAQ,CAAEgU,QAAQ,EAAO9X,SAAS,GAClC+D,OAAQ,CAAE+T,QAAQ,EAAM9X,SAAS,GACjCgS,MAAO,CAAE8F,QAAQ,EAAO9X,SAAS,IAIrCgY,UAAW,CACPl4B,SAAS,EACTzD,UAAW,UACXjD,UAAW,GACX82B,SAAU,IAIdhO,SAAU,CACNC,MAAO,CAAE/X,WAAY,GAAKC,WAAY,GACtC+X,MAAO,CAAEhY,WAAY,EAAKC,WAAY,MAQ9CtB,WAAY,SAAS7K,GACZA,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAE3B1b,EAAS0b,YAAYqe,KAAO,CACxBxsB,YAAavN,EAASG,SAAWH,EAASE,MAAQ,EAE1D,EAMA6b,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAChDmS,EAAS0b,aAAaqe,MACvB9sC,KAAK4d,WAAW7K,GAGpB,MAAMuL,EAAOvL,EAAS0b,YAAYqe,KAC5B9mB,EAAS,IAAKhmB,KAAKgmB,UAAWwI,GAEpC,IAAIsX,EAGAA,EAFA9f,EAAO2mB,SAAW3mB,EAAO6O,QAET7O,EAAO/G,YAAc+G,EAAO9G,WAAa8G,EAAO/G,YAAcpW,EACvEmd,EAAO6O,UAAY7O,EAAO2mB,OAEjB3mB,EAAO9G,YAAc8G,EAAO9G,WAAa8G,EAAO/G,YAAcpW,EAG1EA,EAAW,GACKmd,EAAO/G,YAAc+G,EAAO9G,WAAa8G,EAAO/G,aAA0B,EAAXpW,GAE/Dmd,EAAO9G,YAAc8G,EAAO9G,WAAa8G,EAAO/G,aAAkC,GAAlBpW,EAAW,KAKnGkK,EAASG,QAAUoL,EAAKgC,YAAcwlB,OAEhBzrB,IAAlBtH,EAASE,OACTF,EAASE,KAAOF,EAASG,QAEjC,EAMAqc,QAAS,SAASxc,GACVA,EAAS0b,aAAaqe,OACtB/5B,EAASG,QAAUH,EAAS0b,YAAYqe,KAAKxsB,iBACvBjG,IAAlBtH,EAASE,OACTF,EAASE,KAAOF,EAASG,gBAEtBH,EAAS0b,YAAYqe,KAEpC,GC/GW,CACXxgC,KAAM,OACNK,MAAO,KACPrH,KAAM,WACNsH,YAAa,qCAGboZ,OAAQ,CACJ+mB,aAAc,IACdC,YAAY,GAIhBt4B,OAAQ,CACJC,SAAS,EACTE,SAAU,OAGVuuB,SAAU,CACN6J,OAAQ,IACRC,QAAS,GACTt3B,MAAO,aAIXwY,aAAc,CACVlZ,KAAM,QACNgjB,SAAU,GACVC,SAAU,EACViK,SAAS,GAIb+K,cAAe,CACXx4B,SAAS,EACTwZ,WAAY,IACZ7oB,KAAM,YAIVgpB,iBAAkB,CACdkV,UAAa,CAETJ,SAAU,CAAE6J,OAAQ,IAAMC,QAAS,IAAMt3B,MAAO,YAChDu3B,cAAe,CAAEhf,WAAY,IAEjCif,QAAW,CAEPhK,SAAU,CAAE6J,OAAQ,IAAMC,QAAS,KACnC9e,aAAc,CAAE8J,SAAU,EAAGC,SAAU,KAE3CsL,KAAQ,CAEJL,SAAU,CAAE6J,OAAQ,GAAMC,QAAS,IACnCF,YAAY,GAEhBzK,WAAc,CAEVa,SAAU,CAAE6J,OAAQ,IAAMC,QAAS,GAAMt3B,MAAO,WAChDu3B,cAAe,CAAEhf,WAAY,OAKrC4I,SAAU,CACNC,MAAO,CAEHoM,SAAU,CACN6J,OAAQ,CAAE9e,WAAY,MACtB+e,QAAS,CAAE/e,WAAY,KAE3Bgf,cAAe,CAAEhf,WAAY,MAEjC8I,MAAO,CAEHmM,SAAU,CACN6J,OAAQ,CAAE9e,WAAY,KACtB+e,QAAS,CAAE/e,WAAY,MAE3Bgf,cAAe,CAAEhf,WAAY,QAKzCvQ,WAAY,SAAS7K,GACZA,EAAS0b,cACV1b,EAAS0b,YAAc,CAAA,GAE3B1b,EAAS0b,YAAY2Z,KAAO,CACxBiF,MAAOt6B,EAAS1Q,EAChBirC,MAAOv6B,EAASzQ,EAChBqjB,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GAE7B,EAMAgR,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAChDmS,EAAS0b,aAAa2Z,MACvBpoC,KAAK4d,WAAW7K,GAGpB,MAAMuL,EAAOvL,EAAS0b,YAAY2Z,KAC5B2E,EAAeve,EAAOue,cAAgB/sC,KAAKgmB,OAAO+mB,aAexD,GAbIve,EAAOwe,YAEPj6B,EAAS8K,IAAMkvB,EACfh6B,EAAS+K,IAAMivB,IAGfh6B,EAAS1Q,IAAMic,EAAK+uB,MAAQt6B,EAAS1Q,IAAM,EAAI0qC,GAC/Ch6B,EAASzQ,IAAMgc,EAAKgvB,MAAQv6B,EAASzQ,IAAM,EAAIyqC,GAC/Ch6B,EAAS8K,GAAK,EACd9K,EAAS+K,GAAK,GAIdjV,EAAW,GAAK,CAChB,MAAM0kC,EAAmC,IAAlB1kC,EAAW,IAClCkK,EAAS8K,GAAK9K,EAAS8K,IAAM,EAAI0vB,GAAiBjvB,EAAKqH,WAAa4nB,EACpEx6B,EAAS+K,GAAK/K,EAAS+K,IAAM,EAAIyvB,GAAiBjvB,EAAKsH,WAAa2nB,CACxE,CACJ,EAEAhe,QAAS,SAASxc,GACd,GAAIA,EAAS0b,aAAa2Z,KAAM,CAC5B,MAAM9pB,EAAOvL,EAAS0b,YAAY2Z,KAClCr1B,EAAS8K,GAAKS,EAAKqH,WACnB5S,EAAS+K,GAAKQ,EAAKsH,kBACZ7S,EAAS0b,YAAY2Z,IAChC,CACJ,GF4EAX,GACAqB,GACAW,GACAK,GACAK,GACAK,GGxNW,CACXl+B,KAAM,aACNK,MAAO,KACPrH,KAAM,SACNsH,YAAa,8BAGboZ,OAAQ,CACJxX,SAAU,IACVg/B,cAAe,GACfC,WAAY,GACZ1/B,MAAO,IACP4f,SAAU,GAEVC,eAAgB,CACZtoB,KAAM,aACNqoB,SAAU,KAKlBjZ,OAAQ,CACJC,SAAS,EACT+4B,YAAY,EACZC,eAAgB,EAChBC,YAAa,CAAC,EAAG,IAOrB9e,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAErD,OAAO,CACX,EAKAirC,MAAO,SAAS94B,EAAUlK,EAAU2lB,GAEhC,OAAO,CACX,GC3CW,CACXliB,KAAM,aACNK,MAAO,KACPrH,KAAM,SACNsH,YAAa,6CAGboZ,OAAQ,CACJxX,SAAU,KACVq/B,aAAc,GACdC,YAAa,GACbC,aAAc,GACdpgB,SAAU,GAEVC,eAAgB,CACZtoB,KAAM,aACNqoB,SAAU,KAKlBjZ,OAAQ,CACJC,SAAS,EACT+4B,YAAY,EACZC,eAAgB,EAChBC,YAAa,CAAC,EAAG,IAAK,EAAG,MAO7B9e,MAAO,SAAS/b,EAAUlK,EAAU2lB,EAAQnQ,EAAI1d,EAASC,GAErD,OAAO,CACX,EAKAirC,MAAO,SAAS94B,EAAUlK,EAAU2lB,GAEhC,OAAO,CACX,IJwL4D9sB,QAAQ8B,IACpE4oC,GAAiB5oC,EAAQ8I,MAAQ9I,IKkSrC,MAAMwqC,GAAe,IA7erB,MACI,WAAAluC,GAEIE,KAAK8nC,IAAM,IACX9nC,KAAKiuC,cAAgB,CAAC,EAAG,GACzBjuC,KAAKkuC,WAAY,EAGjBluC,KAAKqY,UAAY,EACjBrY,KAAKmuC,YAAc,EACnBnuC,KAAKouC,WAAa,EAClBpuC,KAAKquC,aAAe,EACpBruC,KAAKsuC,YAAc,EAGnBtuC,KAAKuuC,aAAe,IAAQvuC,KAAK8nC,IACjC9nC,KAAKwuC,YAAcxuC,KAAKuuC,aAAevuC,KAAKiuC,cAAc,GAC1DjuC,KAAKyuC,aAAe,EACpBzuC,KAAK0uC,aAAe,EAGpB1uC,KAAK2uC,UAAY,IAAItrC,IACrBrD,KAAK4uC,cAAgB,IAAIz0B,IACzBna,KAAK6uC,aAAe,IAAI10B,IAGxBna,KAAK8uC,aAAe,CAChBC,UAAW,EACXC,OAAQ,EACRnK,QAAS,EACTlvB,MAAO,GAIX3V,KAAKivC,UAAY,KACjBjvC,KAAKkvC,WAAa,EAClBlvC,KAAKmvC,UAAW,EAGhBnvC,KAAKiO,UAAY,EACjBjO,KAAK+rC,OAAS,EACd/rC,KAAKovC,SAAW,IAGhBpvC,KAAK8nB,SAAW,IAAIzkB,IACpBrD,KAAKqvC,eAAiB,KAGtBrvC,KAAKsvC,oBACT,CAKA,kBAAAA,GAKItvC,KAAK8nB,SAAShjB,IAAI,MAAO,CACrBwH,KAAM,MACNM,YAAa,gCACbqhC,cAAe,CAAC,EAAG,GACnBlC,OAAQ,EACRwD,QAAS,CAAC,EAAG,GAAK,GAAK,MAG3BvvC,KAAK8nB,SAAShjB,IAAI,WAAY,CAC1BwH,KAAM,WACNM,YAAa,wBACbm/B,OAAQ,EACRwD,QAAS,CAAC,EAAG,GAAK,GAAK,MAG3BvvC,KAAK8nB,SAAShjB,IAAI,QAAS,CACvBwH,KAAM,QACNM,YAAa,uBACbm/B,OAAQ,IACRwD,QAAS,CAAC,EAAG,GAAK,GAAK,MAG3BvvC,KAAK8nB,SAAShjB,IAAI,MAAO,CACrBwH,KAAM,MACNM,YAAa,+BACbqhC,cAAe,CAAC,EAAG,GACnBsB,QAAS,CAAC,EAAG,GAAK,MAGtBvvC,KAAK8nB,SAAShjB,IAAI,QAAS,CACvBwH,KAAM,QACNM,YAAa,mBACbqhC,cAAe,CAAC,EAAG,GACnBsB,QAAS,CAAC,EAAG,GAAK,MAGtBvvC,KAAK8nB,SAAShjB,IAAI,MAAO,CACrBwH,KAAM,MACNM,YAAa,sBACbqhC,cAAe,CAAC,EAAG,GACnBsB,QAAS,CAAC,EAAG,GAAK,GAAK,GAAK,GAAK,MAGrCvvC,KAAK8nB,SAAShjB,IAAI,MAAO,CACrBwH,KAAM,MACNM,YAAa,kCACbqhC,cAAe,CAAC,EAAG,GACnBsB,QAAS,CAAC,EAAG,GAAK,GAAK,GAAK,MAGhCvvC,KAAK8nB,SAAShjB,IAAI,MAAO,CACrBwH,KAAM,MACNM,YAAa,kBACbqhC,cAAe,CAAC,EAAG,GACnBsB,QAAS,CAAC,EAAG,GAAK,GAAK,GAAK,GAAK,GAAK,MAG1CvvC,KAAK8nB,SAAShjB,IAAI,UAAW,CACzBwH,KAAM,UACNM,YAAa,yBACb2iC,QAAS,CAAC,GAAK,GAAK,EAAG,IACvBT,aAAc,CAAE9iB,QAAQ,KAG5BhsB,KAAK8nB,SAAShjB,IAAI,YAAa,CAC3BwH,KAAM,YACNM,YAAa,sBACb2iC,QAAS,CAAC,EAAG,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,KAEnD,CAKA,KAAA/jC,GACQxL,KAAKkuC,YAETluC,KAAKkuC,WAAY,EACjBluC,KAAKwvC,WAAY,EACjBxvC,KAAKqY,UAAY+B,YAAY7H,MAC7BvS,KAAKyuC,aAAezuC,KAAKqY,UACzBrY,KAAK0uC,aAAe1uC,KAAKqY,UAAYrY,KAAKuuC,aAC1CvuC,KAAKmuC,YAAc,EACnBnuC,KAAKouC,WAAa,EAGlBpuC,KAAKyvC,KAAK,QAAS,CACf3H,IAAK9nC,KAAK8nC,IACVmG,cAAejuC,KAAKiuC,cACpBh9B,QAASjR,KAAKqvC,iBAIlBrvC,KAAK2a,SACT,CAKA,IAAA+0B,GACS1vC,KAAKkuC,YAEVluC,KAAKkuC,WAAY,EACjBluC,KAAKyvC,KAAK,OAAQ,CACdE,WAAY3vC,KAAKmuC,YACjByB,UAAW5vC,KAAKouC,aAExB,CAKA,MAAAzzB,GACI,IAAK3a,KAAKkuC,UAAW,OAErB,MAIM2B,GAJMz1B,YAAY7H,MACFvS,KAAKqY,WAGOrY,KAAKuuC,aACjCuB,EAAUlpC,KAAKgJ,MAAMigC,GAC3B7vC,KAAKquC,aAAewB,EAAkB,EAGlCC,EAAU9vC,KAAKmuC,aACfnuC,KAAK+W,OAAO+4B,GAIhB,MAAMC,EAASnpC,KAAKgJ,MAAMkgC,EAAU9vC,KAAKiuC,cAAc,IACnD8B,EAAS/vC,KAAKouC,YACdpuC,KAAKgwC,MAAMD,GAGf/vC,KAAKmuC,YAAc2B,EACnB9vC,KAAKouC,WAAa2B,EAClB/vC,KAAKsuC,YAAewB,EAAU9vC,KAAKiuC,cAAc,GAAMjuC,KAAKiuC,cAAc,GAG1EjuC,KAAKiwC,qBAGLjwC,KAAKyvC,KAAK,SAAUzvC,KAAKkwC,eAGrBlwC,KAAKkuC,WACLiC,sBAAsB,IAAMnwC,KAAK2a,SAEzC,CAKA,MAAA5D,CAAOq5B,GACH,MAAMC,EAAYD,EAAapwC,KAAKiuC,cAAc,GAC5CzX,EAASx2B,KAAKswC,UAAUD,GAGxBE,EAAcvwC,KAAKovC,UAAYxoC,KAAK8I,SAAW,IAAO1P,KAAKuuC,aAE3DiC,EAAW,CACbC,KAAML,EACNC,UAAWA,EACXK,IAAK1wC,KAAKouC,WACV5X,OAAQA,EACRvoB,UAAWjO,KAAKiO,UAAYuoB,EAC5B+Z,YAAaA,EACbhsC,UAAW6V,YAAY7H,OAI3BvS,KAAKyvC,KAAK,OAAQe,GAGlBxwC,KAAK4uC,cAAcltC,QAAQC,GAAYA,EAAS6uC,IAGhDxwC,KAAKyuC,aAAer0B,YAAY7H,MAChCvS,KAAK0uC,aAAe1uC,KAAKyuC,aAAezuC,KAAKuuC,YACjD,CAKA,KAAAyB,CAAMW,GACF,MAAMC,EAAU,CACZF,IAAKC,EACL1C,cAAejuC,KAAKiuC,cACpBh9B,QAASjR,KAAKqvC,eACd9qC,UAAW6V,YAAY7H,OAI3BvS,KAAKyvC,KAAK,MAAOmB,GAGjB5wC,KAAK6uC,aAAantC,QAAQC,GAAYA,EAASivC,GACnD,CAKA,kBAAAX,GAOI,GALAjwC,KAAK8uC,aAAaC,UAAiC,EAApB/uC,KAAKquC,aAAoB,EACxDruC,KAAK8uC,aAAaE,OAA8B,EAApBhvC,KAAKquC,aAAoB,EACrDruC,KAAK8uC,aAAajK,QAA+B,EAApB7kC,KAAKquC,aAAoB,EAGlDruC,KAAK+rC,OAAS,EAAG,CACjB,MAAM8E,EAAa,GAAoB,IAAd7wC,KAAK+rC,OAC1B/rC,KAAK8uC,aAAaE,OAAS,GAC3BhvC,KAAK8uC,aAAan5B,MAAQ3V,KAAK8uC,aAAaE,OAAS6B,EAErD7wC,KAAK8uC,aAAan5B,MAAQ,IAAO3V,KAAK8uC,aAAaE,OAAS,KAAQ,EAAI6B,EAEhF,MACI7wC,KAAK8uC,aAAan5B,MAAQ3V,KAAK8uC,aAAaE,MAEpD,CAKA,SAAAsB,CAAUD,GACN,GAAIrwC,KAAKqvC,gBAAkBrvC,KAAK8nB,SAAS/N,IAAI/Z,KAAKqvC,gBAAiB,CAC/D,MAAMp+B,EAAUjR,KAAK8nB,SAASjjB,IAAI7E,KAAKqvC,gBACvC,GAAIp+B,EAAQs+B,cAA0Cl1B,IAA/BpJ,EAAQs+B,QAAQc,GACnC,OAAOp/B,EAAQs+B,QAAQc,EAE/B,CAGA,OAAkB,IAAdA,EAAwB,EACV,IAAdA,GAA6C,IAA1BrwC,KAAKiuC,cAAc,GAAiB,GACpD,EACX,CAKA,WAAAiC,GACI,MAAO,CAEHn1B,QAASX,YAAY7H,MAAQvS,KAAKqY,UAGlCo4B,KAAMzwC,KAAKmuC,YACXuC,IAAK1wC,KAAKouC,WACViC,UAAWrwC,KAAKmuC,YAAcnuC,KAAKiuC,cAAc,GAGjDI,aAAcruC,KAAKquC,aACnBC,YAAatuC,KAAKsuC,YAGlBQ,aAAc,IAAK9uC,KAAK8uC,cAGxBhH,IAAK9nC,KAAK8nC,IACVyG,aAAcvuC,KAAKuuC,aACnBN,cAAe,IAAIjuC,KAAKiuC,eAGxBhgC,UAAWjO,KAAKiO,UAChB89B,OAAQ/rC,KAAK+rC,OACb96B,QAASjR,KAAKqvC,eAGdyB,WAAY9wC,KAAK0uC,aAAet0B,YAAY7H,MAG5CikB,OAAQx2B,KAAKswC,UAAUtwC,KAAKmuC,YAAcnuC,KAAKiuC,cAAc,IAErE,CAKA,MAAA8C,CAAOjJ,GACH9nC,KAAK8nC,IAAMlhC,KAAKiB,IAAI,GAAIjB,KAAKkB,IAAI,IAAKggC,IACtC9nC,KAAKuuC,aAAe,IAAQvuC,KAAK8nC,IACjC9nC,KAAKwuC,YAAcxuC,KAAKuuC,aAAevuC,KAAKiuC,cAAc,GAE1DjuC,KAAKyvC,KAAK,cAAe,CAAE3H,IAAK9nC,KAAK8nC,KACzC,CAKA,gBAAAkJ,CAAiBC,EAAWC,GACxBlxC,KAAKiuC,cAAgB,CAACgD,EAAWC,GACjClxC,KAAKwuC,YAAcxuC,KAAKuuC,aAAe0C,EAEvCjxC,KAAKyvC,KAAK,sBAAuB,CAC7BxB,cAAejuC,KAAKiuC,eAE5B,CAKA,UAAAkD,CAAWC,GACP,IAAKpxC,KAAK8nB,SAAS/N,IAAIq3B,GACnB,OAGJ,MAAMngC,EAAUjR,KAAK8nB,SAASjjB,IAAIusC,GAClCpxC,KAAKqvC,eAAiB+B,EAGlBngC,EAAQg9B,eACRjuC,KAAKgxC,oBAAoB//B,EAAQg9B,oBAEd5zB,IAAnBpJ,EAAQ86B,SACR/rC,KAAK+rC,OAAS96B,EAAQ86B,QAG1B/rC,KAAKyvC,KAAK,gBAAiB,CAAEx+B,QAASmgC,GAC1C,CAKA,cAAAC,CAAe1vC,GAEX,OADA3B,KAAK4uC,cAAc0C,IAAI3vC,GAChB,IAAM3B,KAAK4uC,cAAc2C,OAAO5vC,EAC3C,CAKA,aAAA6vC,CAAc7vC,GAEV,OADA3B,KAAK6uC,aAAayC,IAAI3vC,GACf,IAAM3B,KAAK6uC,aAAa0C,OAAO5vC,EAC1C,CAKA,IAAA8tC,CAAKgC,EAAOnzB,GACJte,KAAK2uC,UAAU50B,IAAI03B,IACnBzxC,KAAK2uC,UAAU9pC,IAAI4sC,GAAO/vC,QAAQC,GAAYA,EAAS2c,GAE/D,CAKA,EAAAozB,CAAGD,EAAO9vC,GAON,OANK3B,KAAK2uC,UAAU50B,IAAI03B,IACpBzxC,KAAK2uC,UAAU7pC,IAAI2sC,EAAO,IAAIt3B,KAElCna,KAAK2uC,UAAU9pC,IAAI4sC,GAAOH,IAAI3vC,GAGvB,KACC3B,KAAK2uC,UAAU50B,IAAI03B,IACnBzxC,KAAK2uC,UAAU9pC,IAAI4sC,GAAOF,OAAO5vC,GAG7C,CAKA,WAAAgwC,CAAYC,EAAcC,GACtB7xC,KAAKivC,UAAY,CAAEhrC,QAAS2tC,EAAcE,OAAQD,EAEtD,CAMA,UAAAE,GACI,MAAO,CAEH7B,YAAa,IAAMlwC,KAAKkwC,cAGxB8B,SAAU,CAACC,EAAY,KACZjyC,KAAKquC,aAAe4D,GAAajyC,KAAKquC,aAAgB,EAAI4D,EAIrEC,gBAAiB,CAACh7B,EAAa+6B,EAAY,MACvC,MAAM5sC,EAAQrF,KAAK8uC,aAAa53B,IAAgB,EAChD,OAAO7R,EAAQ4sC,GAAa5sC,EAAS,EAAI4sC,GAI7CE,YAAa,CAACrqC,EAAM,EAAGD,EAAM,EAAG+N,EAAQ,YACpC,IAAI/M,EAAW7I,KAAKquC,aAGpB,OAAOz4B,GACH,IAAK,OACD/M,EAAW,GAAMjC,KAAK0E,IAAIzC,EAAWjC,KAAKgE,IAAM,EAChD,MACJ,IAAK,SACD/B,EAAWjC,KAAKib,IAAIjb,KAAKiE,IAAIhC,EAAWjC,KAAKgE,KAC7C,MACJ,IAAK,QACD/B,EAAWjC,KAAKC,IAAID,KAAKiE,IAAIhC,EAAWjC,KAAKgE,IAAK,GAI1D,OAAO9C,GAAOD,EAAMC,GAAOe,GAI/BupC,iBAAkB,CAACC,EAAWljB,EAAmB,IAEtCkjB,GAAa,GADLryC,KAAKswC,UAAUtwC,KAAKmuC,YAAcnuC,KAAKiuC,cAAc,IAClC,IAAO9e,GAI7CpY,OAASpV,GAAa3B,KAAKqxC,eAAe1vC,GAC1CquC,MAAQruC,GAAa3B,KAAKwxC,cAAc7vC,GAGxC2wC,UAAY9kB,GAAUA,EAAQxtB,KAAKuuC,aACnCgE,UAAYC,GAAOA,EAAKxyC,KAAKuuC,aAG7BL,UAAW,IAAMluC,KAAKkuC,UACtBuE,OAAQ,IAAMzyC,KAAK8nC,IACnB4K,WAAY,IAAM1yC,KAAKqvC,eAE/B,GC3IEsD,GAAoB,IA7V1B,MACI,WAAA7yC,GACIE,KAAK2U,SAAU,EACf3U,KAAK4yC,QAAU,KACf5yC,KAAK6yC,iBAAmB,IAAIxvC,IAC5BrD,KAAK8yC,kBAAoB,IAAIzvC,GACjC,CAKA,UAAAua,GACI5d,KAAK4yC,QAAU5E,GAAa+D,aAC5B/xC,KAAK2U,SAAU,EAGf3U,KAAK4yC,QAAQ77B,OAAO/W,KAAK+yC,WAAWhyC,KAAKf,OACzCA,KAAK4yC,QAAQ5C,MAAMhwC,KAAKgzC,UAAUjyC,KAAKf,MAE3C,CAMA,SAAAizC,CAAUC,GACN,GAAIA,GAAU,IAAMA,GAAU,IAAK,CAE/B,GAAI3yC,OAAO4yC,qCACP,OAIJ,IAAKnF,GAAawB,UAWd,OARAxvC,KAAKwL,MAAM0nC,EAAQ,iBAGf3yC,OAAO6yC,uBAAyB7yC,OAAO6yC,qBAAqB/gC,MAAMghC,QAElE9yC,OAAO6yC,qBAAqB5nC,SAQpCwiC,GAAa+C,OAAOmC,EAGxB,CACJ,CAMA,cAAAI,CAAehuC,EAAMgH,EAAM0Z,GACvB,IAAKA,EAAOtR,SAAWsR,EAAOtR,OAAOC,QAAS,OAE9C,MAAMN,EAAM,GAAG/O,KAAQgH,IACvBtM,KAAK6yC,iBAAiB/tC,IAAIuP,EAAK,CAC3B/O,OACAgH,OACAinC,aAAcvtB,EAAOtR,OACrB8+B,eAAgBxtB,GAGxB,CAKA,kBAAAytB,CAAmBjwC,EAASuP,EAAUlK,EAAUwV,GAC5C,IAAKre,KAAK2U,UAAYnR,EAAQkR,QAAQC,QAAS,MAAO,GAErC3U,KAAK4yC,QAAQ1C,cAC9B,MAAMqD,EAAe/vC,EAAQkR,OACvBwuB,EAAa,CAAA,EAGnB,GAAIqQ,EAAatlB,cAAe,CAC5B,MAAMylB,EAAOH,EAAatlB,cACpB0lB,EAAW3zC,KAAK4yC,QAAQT,YAC1BuB,EAAK18B,SAAW,GAChB08B,EAAK38B,QAAU,IACf28B,EAAK99B,OAAS,UAElBstB,EAAWhU,oBAAsBykB,CACrC,CAGA,GAAIJ,EAAanrB,WAAY,CACzB,MAAMsrB,EAAOH,EAAanrB,WACtBpoB,KAAK4yC,QAAQV,gBAAgBwB,EAAKx8B,YAAa,IAC/CgsB,EAAWxO,iBAAmB,EAAIgf,EAAKzlC,UAEvCi1B,EAAWxO,iBAAmB,CAEtC,CAGA,GAAI6e,EAAallB,gBAAgB1Z,QAAS,CACtC,MAAMi/B,EAAgB5zC,KAAK4yC,QAAQR,iBAC/B,EACAmB,EAAallB,eAAeF,YAAc,KAE9C+U,EAAW/T,iBAAmBykB,CAClC,CAGA,MAAMvE,EAAiBrvC,KAAK4yC,QAAQF,aAKpC,OAJIrD,GAAkBkE,EAAajlB,mBAAmB+gB,IAClDtpC,OAAO8tC,OAAO3Q,EAAYqQ,EAAajlB,iBAAiB+gB,IAGrDnM,CACX,CAKA,mBAAA4Q,CAAoBC,EAAcC,GAC9B,IAAKh0C,KAAK2U,UAAYo/B,EAAar/B,QAAQC,QAAS,MAAO,GAE3D,MAAMs/B,EAAWj0C,KAAK4yC,QAAQ1C,cACxBqD,EAAeQ,EAAar/B,OAC5BwuB,EAAa,CAAA,EAGnB,GAAIqQ,EAAa3+B,iBAAkB,CAC/B,MAAMs/B,EAAWX,EAAa3+B,iBAEJ,SAAtBs/B,EAASr/B,UAAuB7U,KAAK4yC,QAAQZ,SAAS,IAEtD9O,EAAWiR,UAAYD,EAASp/B,WAAa,OACbuF,IAAzB65B,EAASn/B,cAEhBmuB,EAAWkR,aAAeF,EAASn/B,YAE3C,CAGA,GAAIw+B,EAAan+B,SAAU,CACvB,MAAM+0B,EAAOoJ,EAAan+B,SACpBzR,EAAgB3D,KAAK4yC,QAAQT,YAC/BhI,EAAK90B,eAAe,IAAM,EAC1B80B,EAAK90B,eAAe,IAAM,EAC1B,SAEJ6tB,EAAWv/B,cAAgBA,CAC/B,CAGA,GAAsC,SAAlC4vC,EAAat+B,YAAYC,KAAiB,CAC1C,MAAMm/B,EAASd,EAAat+B,WAEtBq/B,EADcL,EAASvD,IAAM2D,EAAOj9B,cACLi9B,EAAOj9B,cAC5C8rB,EAAW1wB,YAAc8hC,EAAiB1tC,KAAKgE,GAAK,CACxD,CAEA,OAAOs4B,CACX,CAKA,mBAAAqR,CAAoB3nB,EAAU7Z,EAAUsL,GACpC,IAAKre,KAAK2U,UAAYiY,EAASlY,QAAQC,QAAS,MAAO,GAEvD,MAAMs/B,EAAWj0C,KAAK4yC,QAAQ1C,cACxBqD,EAAe3mB,EAASlY,OACxBwuB,EAAa,CAAA,EAGnB,GAAIqQ,EAAa9rB,aAAc,CAC3B,MAAMtY,EAASokC,EAAa9rB,aAG5B,GAFwBznB,KAAK4yC,QAAQV,gBAAgB/iC,EAAO+H,YAAa,MAElDtQ,KAAK8I,SAAWP,EAAOuY,YAAa,CACvD,MAAMzZ,EAAYjO,KAAK4yC,QAAQZ,WACzB7iC,EAAOwY,gBACPxY,EAAOyY,iBACbsb,EAAWsR,eAAgB,EAC3BtR,EAAW5zB,gBAAkBrB,CACjC,CACJ,CAGA,GAAIslC,EAAarrB,YAAa,CAC1B,MAAMoJ,EAAQiiB,EAAarrB,YAEH,UAApBoJ,EAAMnJ,YACN+a,EAAWpsB,gBAAkB9W,KAAK4yC,QAAQH,SAAW,KAGrDnhB,EAAMjJ,kBAAoBroB,KAAK4yC,QAAQZ,SAAS,MAChD9O,EAAWuR,WAAanjB,EAAMjJ,kBAG9BiJ,EAAMhJ,UAAmC,IAAvB2rB,EAAS5D,YAC3BnN,EAAWwR,YAAa,EAEhC,CAGA,GAAInB,EAAa1rB,YAAa,CAC1B,MAAM8sB,EAAUpB,EAAa1rB,YACvB5W,EAAUjR,KAAK4yC,QAAQF,aAE7B,GAAIzhC,GAAW0jC,EAAQ7sB,WAAW7W,GAAU,CACxC,MAAM2jC,EAAgBD,EAAQ7sB,SAAS7W,GAEnC2jC,EAAc7sB,cAAuC,IAAvBksB,EAAS5D,WACvCnN,EAAW2R,QAAS,EACpB3R,EAAW4R,eAAiBF,EAAc5sB,cACnC4sB,EAAc3sB,cAAgBrhB,KAAK8I,SAAWklC,EAAc3sB,eACnEib,EAAW2R,QAAS,EACpB3R,EAAW4R,eAAiBF,EAAcpmC,SAElD,CACJ,CAEA,OAAO00B,CACX,CAKA,UAAA6P,CAAWvC,GAEPxwC,KAAK+0C,aAAevE,CAIxB,CAKA,SAAAwC,CAAUpC,GAEN5wC,KAAKg1C,YAAcpE,CACvB,CAKA,kBAAAqE,CAAmB1B,EAAc2B,GAC7B,IAAKl1C,KAAK2U,UAAY4+B,GAAcnlB,aAAc,OAAO8mB,EAEzD,MAAMxB,EAAOH,EAAanlB,aAE1B,MAAkB,SAAdslB,EAAKx+B,KACElV,KAAK4yC,QAAQN,UAAsB,EAAZoB,EAAKrf,MACd,UAAdqf,EAAKx+B,KACLlV,KAAK4yC,QAAQN,UAAUoB,EAAKlmB,OAGhC0nB,CACX,CAKA,SAAAC,GACI,OAAOn1C,KAAK2U,SAAW3U,KAAK4yC,QAAQ1E,WACxC,CAKA,KAAA1iC,CAAMs8B,EAAM,IAAK72B,EAAU,YACnB62B,GAAKkG,GAAa+C,OAAOjJ,GACzB72B,GAAS+8B,GAAamD,WAAWlgC,GACrC+8B,GAAaxiC,QACbxL,KAAK2U,SAAU,CACnB,CAKA,IAAA+6B,GACI1B,GAAa0B,OACb1vC,KAAK2U,SAAU,EAEf3U,KAAKo1C,WAAY,EACjBp1C,KAAKq1C,UAAY,IACrB,CAKA,UAAAlE,CAAWlgC,GACP+8B,GAAamD,WAAWlgC,EAC5B,CAKA,MAAA8/B,CAAOjJ,GACHkG,GAAa+C,OAAOjJ,GAEhB9nC,KAAKo1C,YACLp1C,KAAKq1C,UAAYvN,EAGzB,CAKA,WAAAwN,GAEIt1C,KAAKo1C,WAAY,EACjBp1C,KAAKq1C,UAAY,IACrB,CAKA,gBAAArE,CAAiBuE,GACbv1C,KAAKiuC,cAAgBsH,EAGrB,MAAMC,EAAiBC,SAASC,eAAe,oBAC3CF,IACAA,EAAeG,YAAcJ,GAKf,QAAdA,GAAuBvH,GAAa0E,YAI5C,CAKA,WAAAf,CAAYC,EAAcC,GACtB7D,GAAa2D,YAAYC,EAAcC,EAC3C,GCrUJ,MAAM+D,GAWF,WAAA91C,CAAYuC,EAAGC,EAAGsqB,EAAW,UAAWjO,EAAc,EAAGqC,EAAyB,EAAGhD,EAAgB,MAGjG,MAAM63B,EAAQjvC,KAAK8I,SACnB1P,KAAKkyB,EAAI2jB,EAAS,EAAE,GAAM,GAAsB,GAAhBjvC,KAAK8I,SAAsC,GAAhB9I,KAAK8I,SAAV,EAItD,MAAM2B,EAAcrR,KAAKkyB,EAAI,GAAK,GAAqB,GAAhBtrB,KAAK8I,UAAiBiP,EAAc,EAAIA,EACzEQ,EAAQvY,KAAK8I,SAAW9I,KAAKgE,GAAK,EACxC5K,KAAKqC,EAAIA,EAAIuE,KAAK0E,IAAI6T,GAAS9N,EAC/BrR,KAAKsC,EAAIA,EAAIsE,KAAKiE,IAAIsU,GAAS9N,EAC/BrR,KAAK6d,GAAK,EACV7d,KAAK8d,GAAK,EACV9d,KAAK81C,GAAK,EAGV91C,KAAKiT,KAAO,EACZjT,KAAK+1C,QAAU,EACf/1C,KAAK+d,UAAY,IACjB/d,KAAKg2C,WAAa,IAClBh2C,KAAKi2C,YAAc,GACnBj2C,KAAKk2C,aAAc,EACnBl2C,KAAKkiB,IAAM,EAGXliB,KAAK2e,YAAcA,EACnB3e,KAAKghB,uBAAyBA,EAC9BhhB,KAAKmT,MAAQ,EAAoB,EAAhBvM,KAAK8I,UAAgBiP,EAAcqC,EACpDhhB,KAAKoT,SAAWpT,KAAKmT,KACrBnT,KAAKge,cAAgBA,EACrBhe,KAAK8D,MAAQ,UACb9D,KAAKkT,QAAU,EAGflT,KAAKihB,QAAUra,KAAK8I,SAAW,KAC/B1P,KAAKkhB,mBAAqBlhB,KAAKihB,QAAW,KAAuB,IAAhBra,KAAK8I,SAAmB,EAGzE1P,KAAKm2C,aAAevvC,KAAK8I,SAAW,KAGpC1P,KAAKsgB,YAAc,GAAsB,GAAhB1Z,KAAK8I,SAG9B1P,KAAKo2C,aAAe,IAAI/yC,IACxBrD,KAAKq2C,UAAY,KACjBr2C,KAAKs2C,eAGLt2C,KAAK4sB,SAAWA,EAChB5sB,KAAKie,aAAe,GAGpBje,KAAKyuB,YAAc,CACfwY,SAAU5kC,EACVqiB,SAAUpiB,GAIdoqB,GAAmB1sB,KAAM4sB,EAC7B,CAWA,MAAAjS,CAAO3H,EAAWrS,EAASC,EAAS21C,EAAoB,KAAMC,EAAgB,KAAMC,EAAkB,GAElG,MAEMp4B,EAFkBzX,KAAKkB,IAAIkL,EAAW,IAEf,MAIvB0jC,EAAsBF,GAAiBA,EAAclxC,MAAQmxC,EAAkB,GP0ItF,SAA2BnqC,GAC9B,MAAM9I,EAAU6oC,GAAW//B,GAC3B,QAAO9I,GAA2B,aAAjBA,EAAQ8B,IAC7B,CQlMWqxC,CDsDqBH,EAAclxC,MAElCoxC,EAEA12C,KAAK42C,mBAAmBJ,EAAeC,EAAiBp4B,EAAI1d,EAASC,GACrC,YAAzBZ,KAAK62C,gBAEZhqB,GAAe7sB,KAAM,UAAWqe,EAAI1d,EAASC,GACb,YAAzBZ,KAAK62C,gBAEZhqB,GAAe7sB,KAAM,UAAWqe,EAAI1d,EAASC,IAG7CisB,GAAe7sB,KAAMA,KAAK4sB,SAAUvO,EAAI1d,EAASC,GAM7C41C,GAAiBC,EAAkB,GACnCz2C,KAAK42C,mBAAmBJ,EAAeC,EAAiBp4B,EAAI1d,EAASC,IAKxE81C,IACD12C,KAAKqC,GAAKrC,KAAK6d,GAAKQ,EACpBre,KAAKsC,GAAKtC,KAAK8d,GAAKO,GAIxB,MAAMsM,EAAwB,EAAVhqB,EACdiqB,EAAyB,EAAVhqB,EACfk2C,EAAS,GAGX92C,KAAKqC,EAAIrC,KAAKmT,KAAO2jC,GACrB92C,KAAKqC,EAAIy0C,EAAS92C,KAAKmT,KACvBnT,KAAK6d,GAAyB,GAApBjX,KAAKib,IAAI7hB,KAAK6d,KACjB7d,KAAKqC,EAAIrC,KAAKmT,KAAOwX,EAAcmsB,IAC1C92C,KAAKqC,EAAIsoB,EAAcmsB,EAAS92C,KAAKmT,KACrCnT,KAAK6d,GAA0B,IAApBjX,KAAKib,IAAI7hB,KAAK6d,KAGzB7d,KAAKsC,EAAItC,KAAKmT,KAAO2jC,GACrB92C,KAAKsC,EAAIw0C,EAAS92C,KAAKmT,KACvBnT,KAAK8d,GAAyB,GAApBlX,KAAKib,IAAI7hB,KAAK8d,KACjB9d,KAAKsC,EAAItC,KAAKmT,KAAOyX,EAAeksB,IAC3C92C,KAAKsC,EAAIsoB,EAAeksB,EAAS92C,KAAKmT,KACtCnT,KAAK8d,GAA0B,IAApBlX,KAAKib,IAAI7hB,KAAK8d,KAI7B9d,KAAKkiB,KAAOliB,KAAK+d,UAAYM,EAGzBre,KAAKkiB,IAAMliB,KAAKg2C,WAChBh2C,KAAKiT,KAAOjT,KAAKkiB,IAAMliB,KAAKg2C,WAGvBh2C,KAAKkiB,IAAO,EAAMliB,KAAKi2C,YAC5Bj2C,KAAKiT,KAAO,GAIZjT,KAAKiT,MAAQ,EAAMjT,KAAKkiB,KAAOliB,KAAKi2C,YACpCj2C,KAAKk2C,aAAc,EAGG,YAAlBl2C,KAAK4sB,WACL5sB,KAAKmT,KAAOnT,KAAKoT,UAAY,GAAM,GAAMpT,KAAKiT,QAItDjT,KAAKiT,KAAOrM,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAG9H,KAAKiT,OAGzCjT,KAAKkT,QAAUlT,KAAKyK,eAAezK,KAAKiT,MAGlB,UAAlBjT,KAAK4sB,UAAwB5sB,KAAKie,cAAgBje,KAAKiT,KAAOjT,KAAKie,aAAakE,YAChFniB,KAAKmT,KAAOnT,KAAKoT,UAAYpT,KAAKiT,KAAOjT,KAAKie,aAAakE,WAEnE,CASA,sBAAAxG,CAAuB0C,EAAI5D,GAI3B,CAUA,kBAAAm8B,CAAmBpoB,EAAQ3lB,EAAUwV,EAAI1d,EAASC,IC9N/C,SAA4BmS,EAAUsL,EAAImQ,EAAQ3lB,EAAUlI,EAASC,GAExE,IAAK4tB,IAAWA,EAAOlpB,MAAQuD,GAAY,EACvC,OAICkK,EAAS0b,cACV1b,EAAS0b,YAAc,CACnB9I,WAAY5S,EAAS8K,GACrB+H,WAAY7S,EAAS+K,GACrBmpB,SAAUl0B,EAAS1Q,EACnBqiB,SAAU3R,EAASzQ,EAEnBgzB,WAAY1uB,KAAKipB,MAAM9c,EAASzQ,EAAI1B,EAASmS,EAAS1Q,EAAI1B,GAC1D40B,YAAa3uB,KAAKkb,KAAKlb,KAAKC,IAAIkM,EAAS1Q,EAAI1B,EAAS,GAAKiG,KAAKC,IAAIkM,EAASzQ,EAAI1B,EAAS,MAKlG,MAAM4C,EAAU6oC,GAAW7d,EAAOlpB,MAElC,IAAK9B,EACD,OAIJ,IAAIuzC,EAAuBvoB,EAC3B,GAAImkB,GAAkBwC,aAAe3xC,EAAQkR,QAAQC,QAAS,CAC1D,MAAMuuB,EAAayP,GAAkBc,mBAAmBjwC,EAASuP,EAAUlK,EAAUwV,GAGrF04B,EAAuB,IAChBvoB,EACHxgB,WAAYwgB,EAAOxgB,WAAa,IAAMk1B,EAAWhU,qBAAuB,IAAMgU,EAAW/T,kBAAoB,GAC7GoF,cAAe/F,EAAO+F,cAAgB,IAAM2O,EAAWxO,kBAAoB,GAE3EzF,iBAAkBiU,EAE1B,CAGI1/B,EAAQsrB,OACRtrB,EAAQsrB,MAAM/b,EAAUlK,EAAUkuC,EAAsB14B,EAAI1d,EAASC,GAIrEiI,GAAY,KAAQrF,EAAQ+rB,UAC5B/rB,EAAQ+rB,QAAQxc,GAEhBA,EAAS0b,YAAc,KAE/B,CD4KQuoB,CAAuBh3C,KAAMqe,EAAImQ,EAAQ3lB,EAAUlI,EAASC,EAChE,CAQA,aAAAq2C,CAAcx2C,EAAOC,GAEjB,OAAOV,KAAKqC,GADG,IACYrC,KAAKqC,EAAI5B,EADrB,IAERT,KAAKsC,GAFG,IAEYtC,KAAKsC,EAAI5B,EAFrB,EAGnB,CAMA,OAAAw2C,GACI,OAAOl3C,KAAKiT,KAAO,CACvB,CAMA,kBAAAkkC,CAAmBh4B,GACf,GAAInf,KAAKie,mBAAmD5D,IAAnCra,KAAKie,aAAam5B,aAA4B,CACnE,MAAMrpC,EAAQ/N,KAAKie,aAAam5B,aAChCp3C,KAAK6d,GAAKjX,KAAK0E,IAAI6T,GAASpR,EAC5B/N,KAAK8d,GAAKlX,KAAKiE,IAAIsU,GAASpR,GAAS/N,KAAKie,aAAao5B,YAAc,EACzE,CACJ,CAaA,oBAAAC,GAGI,MAAMC,EAAa,EAAc,GAATv3C,KAAKkyB,EAC7B,OAAOlyB,KAAKmT,KAAOokC,CACvB,CAMA,QAAAC,GACI,MAAO,CACHC,SAAU,CAAEp1C,EAAGrC,KAAKqC,EAAGC,EAAGtC,KAAKsC,EAAG4vB,EAAGlyB,KAAKkyB,GAC1CwlB,SAAU,CAAEr1C,EAAGrC,KAAK6d,GAAIvb,EAAGtC,KAAK8d,GAAIoU,EAAGlyB,KAAK81C,IAC5C7iC,KAAMjT,KAAKiT,KACX2Z,SAAU5sB,KAAK4sB,SACfzZ,KAAMnT,KAAKmT,KACXD,QAASlT,KAAKkT,QAEtB,CAYA,KAAAmJ,CAAMha,EAAGC,EAAGsqB,EAAW,UAAWjO,EAAc,EAAGqC,EAAyB,EAAGhD,EAAgB,MAE3F,MAAM63B,EAAQjvC,KAAK8I,SACnB1P,KAAKkyB,EAAI2jB,EAAS,EAAE,GAAM,GAAsB,GAAhBjvC,KAAK8I,SAAsC,GAAhB9I,KAAK8I,SAAV,EAItD,MAAM2B,EAAcrR,KAAKkyB,EAAI,GAAK,GAAqB,GAAhBtrB,KAAK8I,UAAiBiP,EAAc,EAAIA,EACzEQ,EAAQvY,KAAK8I,SAAW9I,KAAKgE,GAAK,EA0BxC,GAzBA5K,KAAKqC,EAAIA,EAAIuE,KAAK0E,IAAI6T,GAAS9N,EAC/BrR,KAAKsC,EAAIA,EAAIsE,KAAKiE,IAAIsU,GAAS9N,EAC/BrR,KAAK6d,GAAK,EACV7d,KAAK8d,GAAK,EACV9d,KAAK81C,GAAK,EACV91C,KAAKiT,KAAO,EACZjT,KAAKkiB,IAAM,EACXliB,KAAK2e,YAAcA,EACnB3e,KAAKghB,uBAAyBA,EAC9BhhB,KAAKmT,MAAQ,EAAoB,EAAhBvM,KAAK8I,UAAgBiP,EAAcqC,EACpDhhB,KAAKoT,SAAWpT,KAAKmT,KACrBnT,KAAKge,cAAgBA,EAGrBhe,KAAKo2C,aAAal0C,QAClBlC,KAAKkT,QAAU,EACflT,KAAKk2C,aAAc,EACnBl2C,KAAKsgB,YAAc,GAAsB,GAAhB1Z,KAAK8I,SAC9B1P,KAAK8D,MAAQ,UACb9D,KAAK4sB,SAAWA,EAGhB5sB,KAAKyuB,YAAc,KAGdzuB,KAAKie,aAIN,IAAK,IAAI5J,KAAOrU,KAAKie,oBACVje,KAAKie,aAAa5J,QAJ7BrU,KAAKie,aAAe,GASxByO,GAAmB1sB,KAAM4sB,EAC7B,CAQA,cAAA+qB,CAAeC,EAAU1kC,GAErB,MAAM2kC,EAAiBjxC,KAAKgB,MAAgB,IAAVsL,GAAiB,IAC7C4kC,EAAW,GAAGF,KAAYC,IAMhC,OAJK73C,KAAKo2C,aAAar8B,IAAI+9B,IACvB93C,KAAKo2C,aAAatxC,IAAIgzC,EAAU93C,KAAK+3C,UAAUH,EAAUC,IAGtD73C,KAAKo2C,aAAavxC,IAAIizC,EACjC,CAQA,SAAAC,CAAUhxC,EAAK5G,GACX,MAAM63C,EAAS,4CAA4CC,KAAKlxC,GAChE,OAAKixC,EAEE,QAAQ52C,SAAS42C,EAAO,GAAI,QAAQ52C,SAAS42C,EAAO,GAAI,QAAQ52C,SAAS42C,EAAO,GAAI,QAAQ73C,KAF/E,uBAAuBA,IAG/C,CAOA,cAAAsK,CAAehC,GACX,OAAOA,EAAI,GACL,EAAIA,EAAIA,EAAIA,EACZ,EAAI7B,KAAKC,KAAI,EAAK4B,EAAI,EAAG,GAAK,CACxC,CAOA,MAAAyvC,CAAOj4C,EAAKk4C,EAAe,WACvB,GAAIn4C,KAAKiT,MAAQ,EAAG,OAGpB,IAAKmlC,SAASp4C,KAAKqC,KAAO+1C,SAASp4C,KAAKsC,GACpC,OAIJ,MAAM+1C,EAAUr4C,KAAKqC,EACfi2C,EAAUt4C,KAAKsC,EAGfi2C,EAAW3xC,KAAKiB,IAAI,GAAK7H,KAAKmT,MAG9BqlC,EAAgBx4C,KAAKugB,WAAavgB,KAAK8D,OAASq0C,EAItD,GAFAl4C,EAAIwC,OAEAzC,KAAKm2C,aAAc,CAInBl2C,EAAIw4C,YAAcz4C,KAAK23C,eAAea,EAA8B,GAAfx4C,KAAKkT,SAC1DjT,EAAIy4C,UAAY,EAChBz4C,EAAI04C,YACJ14C,EAAI24C,IAAIP,EAASC,EAASC,EAAU,EAAa,EAAV3xC,KAAKgE,IAC5C3K,EAAI44C,SAGJ,MAAMC,EAAkBlyC,KAAKgJ,MAAqB,EAAf5P,KAAKkT,SAAe,EACvDjT,EAAI84C,UAAY/4C,KAAK23C,eAAea,EAAeM,GAAmB94C,KAAKsgB,aAAe,IAAO,IACjGrgB,EAAI04C,YACJ14C,EAAI24C,IAAIP,EAASC,EAAS1xC,KAAKiB,IAAI,GAAK0wC,EAAW,GAAI,EAAa,EAAV3xC,KAAKgE,IAC/D3K,EAAI+4C,OAGAF,EAAkB,KAClB74C,EAAI84C,UAAY/4C,KAAK23C,eAAe,UAAW,IAC/C13C,EAAI04C,YACJ14C,EAAI24C,IAAIP,EAAqB,GAAXE,EAAgBD,EAAqB,GAAXC,EAA2B,GAAXA,EAAgB,EAAa,EAAV3xC,KAAKgE,IACpF3K,EAAI+4C,OAEZ,KAAO,CAIH,MAAMC,EAAWh5C,EAAIi5C,qBAAqBb,EAASC,EAAS,EAAGD,EAASC,EAASC,GAejF,GAZAU,EAASE,aAAa,EAAGn5C,KAAK23C,eAAea,EAAex4C,KAAKkT,SAAWlT,KAAKsgB,aAAe,MAEhG24B,EAASE,aAAa,GAAKn5C,KAAK23C,eAAea,EAAex4C,KAAKkT,SAAWlT,KAAKsgB,aAAe,IAAO,KAEzG24B,EAASE,aAAa,EAAGn5C,KAAK23C,eAAea,EAAe,IAE5Dv4C,EAAI84C,UAAYE,EAChBh5C,EAAI04C,YACJ14C,EAAI24C,IAAIP,EAASC,EAASC,EAAU,EAAa,EAAV3xC,KAAKgE,IAC5C3K,EAAI+4C,OAGAh5C,KAAKihB,SAAWjhB,KAAKkhB,mBAAqB,EAAG,CAC7C,MAAMk4B,EAAWb,EAAWv4C,KAAKkhB,mBAC3Bm4B,EAAep5C,EAAIi5C,qBAAqBb,EAASC,EAAoB,GAAXC,EAAgBF,EAASC,EAASc,GAI5FE,EAAiB,GACjBC,EAAkB3yC,KAAKiB,IAAIyxC,EAAgBt5C,KAAKkT,SAIhDvP,EAAgBiD,KAAKkB,IAAI,EAAK9H,KAAKkhB,mBAAqB,GAG9Dm4B,EAAaF,aAAa,EAAGn5C,KAAK23C,eAAea,EAAe5xC,KAAKiB,IAAI,GAAuB,GAAlB0xC,GAAyB51C,IACvG01C,EAAaF,aAAa,IAAMn5C,KAAK23C,eAAea,EAAe5xC,KAAKiB,IAAI,GAAuB,GAAlB0xC,GAAyB51C,IAC1G01C,EAAaF,aAAa,GAAKn5C,KAAK23C,eAAea,EAAe5xC,KAAKiB,IAAI,GAAuB,GAAlB0xC,GAAyB51C,IACzG01C,EAAaF,aAAa,IAAMn5C,KAAK23C,eAAea,EAAe5xC,KAAKiB,IAAI,GAAuB,GAAlB0xC,GAAyB51C,IAC1G01C,EAAaF,aAAa,EAAGn5C,KAAK23C,eAAea,EAAe,IAGhEv4C,EAAIwC,OACJxC,EAAIu5C,yBAA2B,SAC/Bv5C,EAAI84C,UAAYM,EAChBp5C,EAAI04C,YACJ14C,EAAI24C,IAAIP,EAASC,EAASc,EAAU,EAAa,EAAVxyC,KAAKgE,IAC5C3K,EAAI+4C,OACJ/4C,EAAI4C,SACR,CACJ,CAEA5C,EAAI4C,SACR,EE7bJ,MAAM42C,GACF,WAAA35C,CAAYmN,EAAe,GAAI8K,EAAgB,MAC3C/X,KAAK+X,cAAgBA,EACrB/X,KAAKiN,aAAeA,EACpBjN,KAAK05C,qBAAsC,EAAfzsC,EAG5BjN,KAAK25C,UAAY,GAGjB35C,KAAK45C,KAAO,GACZ55C,KAAK65C,SAAWjzC,KAAKkB,IAAImF,EAAc,IAGvCjN,KAAK85C,sBAAwB,EAC7B95C,KAAK+5C,wBAA0B,EAC/B/5C,KAAKg6C,iBAAmB,EACxBh6C,KAAKi6C,gBAAkBz1C,KAAK+N,MAC5BvS,KAAKk6C,gBAAkB,EAGvBl6C,KAAKm6C,iBAAmB,EAGxBn6C,KAAK0D,cAAgB,EACrB1D,KAAKo6C,SAAW,EAChBp6C,KAAKq6C,WAAa,EAGlBr6C,KAAKs6C,aAAe,EACpBt6C,KAAKu6C,gBAAkB,IAGvBv6C,KAAKw6C,gBAGT,CAKA,cAAAA,GAGIx6C,KAAK45C,KAAO,EAChB,CASA,mBAAAa,CAAoBp4C,EAAGC,EAAGsqB,GACtB,IAAI7Z,EAsBJ,OApBI/S,KAAK45C,KAAK70C,OAAS,GAEnBgO,EAAW/S,KAAK45C,KAAKc,MACrB3nC,EAASsJ,MAAMha,EAAGC,EAAGsqB,EAAU5sB,KAAK2e,aAAe,EAAG3e,KAAKghB,wBAA0B,EAAGhhB,KAAK26C,sBAC7F36C,KAAKo6C,aAGLrnC,EAAW,IAAI6iC,GAASvzC,EAAGC,EAAGsqB,EAAU5sB,KAAK2e,aAAe,EAAG3e,KAAKghB,wBAA0B,EAAGhhB,KAAK26C,sBACtG36C,KAAKq6C,aACLr6C,KAAK85C,yBAIT/mC,EAASxP,QAAUvD,KAAK46C,eAGpB56C,KAAK62C,kBACL9jC,EAAS8jC,gBAAkB72C,KAAK62C,iBAG7B9jC,CACX,CAMA,oBAAA8nC,CAAqB9nC,GACjB,GAAI/S,KAAK45C,KAAK70C,OAAS/E,KAAK65C,SAAU,CAKlC,GAHA9mC,EAAS+nC,eAAiB,KAC1B/nC,EAASgoC,kBAAoB,KAEzBhoC,EAASkL,aACT,IAAK,IAAI5J,KAAOtB,EAASkL,oBACdlL,EAASkL,aAAa5J,GAGrCrU,KAAK45C,KAAK93C,KAAKiR,EACnB,MAEI/S,KAAK+5C,yBAEb,CAsBA,KAAAiB,CAAMpuB,EAAUrpB,EAASwJ,EAAcpM,EAASC,EAASoS,EAAWpO,EAAQ,KAAMoI,EAAe,EAAGC,EAAe,GAAI0R,EAAc,EAAGqC,EAAyB,EAAGhD,EAAgB,KAAMnU,EAAY,MAGlM,GAFA7J,KAAK2e,YAAcA,EACnB3e,KAAKghB,uBAAyBA,EAC1BhhB,KAAK+X,cACL,OAAO/X,KAAK+X,cAAchU,KAAK,KAC3B/D,KAAKi7C,EAAOruB,EAAUrpB,EAASwJ,EAAcpM,EAASC,EAASoS,EAAWpO,EAAOoI,EAAcC,EAAc+Q,EAAenU,IAC7H,iBAFI7J,GAIPA,KAAKi7C,EAAOruB,EAAUrpB,EAASwJ,EAAcpM,EAASC,EAASoS,EAAWpO,EAAOoI,EAAcC,EAAc+Q,EAAenU,EAEpI,CAKA,gBAAAqxC,GACIl7C,KAAKm6C,iBAAmB,CAC5B,CAeA,CAAAc,CAAOruB,EAAUrpB,EAASwJ,EAAcpM,EAASC,EAASoS,EAAWpO,EAAOoI,EAAe,EAAGC,EAAe,GAAI+Q,EAAgB,KAAMnU,EAAY,MAE/I7J,KAAK46C,eAAiBr3C,EAGN,YAAZA,GAA0BvD,KAAKm7C,IAU/Bn7C,KAAKm7C,GAAsB,EAC3Bl5C,WAAW,KAAQjC,KAAKm7C,GAAsB,GAAU,MAI5Dn7C,KAAKo7C,kBAAoBp9B,EACzBhe,KAAKq7C,iBAAmBxxC,EAKxB7J,KAAK26C,qBAAuB38B,GAAiBnU,EtF+E9C,SAAyCoT,EAAQpT,GACpD,OAAKoT,GAAW1Q,MAAM+uC,QAAQr+B,IACzBpT,GAA2B,UAAdA,EAEXoT,EAAO/V,IAAIq0C,GACW,iBAAdA,EAEA3xC,EAAyB2xC,EAAW1xC,GACpC0xC,GAAkC,iBAAdA,GAA0BA,EAAUz3C,MAExD,IACAy3C,EACHz3C,MAAO8F,EAAyB2xC,EAAUz3C,MAAO+F,IAGlD0xC,GAdmCt+B,CAgBlD,CsF/FYu+B,CAAgCx9B,EAAenU,GAC/CmU,EAGJ,IAAIy9B,EAAsB1uC,EAC1B,GAAI4lC,GAAkBwC,YAAa,CAC/B,MAAMuG,EAAgB5nC,EAAWvQ,GACjC,GAAIm4C,EAAe,CACf,MAAMxY,EAAayP,GAAkBmB,oBAAoB4H,EAAe17C,MAGxE,GAAIkjC,EAAWiR,UACX,IAAK,IAAIwH,EAAI,EAAGA,EAAIzY,EAAWiR,WAAan0C,KAAK25C,UAAU50C,OAASkI,EAAc0uC,IAC9E37C,KAAK47C,oBAAoBhvB,EAAUjsB,EAASC,QAKpByZ,IAA5B6oB,EAAWkR,eACXqH,GAAuBvY,EAAWkR,aAE1C,CACJ,CAIA,GAAc,OAAVxvC,EAAgB,CAChB,IAAK,IAAI+2C,EAAI,EAAGA,EAAI/2C,GAAS5E,KAAK25C,UAAU50C,OAAS/E,KAAKiN,aAAc0uC,IACpE37C,KAAK47C,oBAAoBhvB,EAAUjsB,EAASC,GAEhD,MACJ,CAGA,GAAIZ,KAAK67C,mBACL,OAIJ,KAAO77C,KAAK25C,UAAU50C,OAASiI,GAAgBhN,KAAK25C,UAAU50C,OAAS/E,KAAKiN,cACxEjN,KAAK47C,oBAAoBhvB,EAAUjsB,EAASC,GAIhD,GAAIZ,KAAK25C,UAAU50C,QAAUkI,EACzB,OAIJ,GAAIwuC,GAAuB,EAAG,OAM9B,MAAMK,EAAkBl1C,KAAKkB,IAAIkL,EAAW,IAEtC+oC,EADqBN,EACiB,IAS5C,IANAz7C,KAAKm6C,kBAAoB4B,EAAiBD,EAG1C97C,KAAKm6C,iBAAmBvzC,KAAKkB,IAAI9H,KAAKm6C,iBAAkB,GAGjDn6C,KAAKm6C,kBAAoB,GAAOn6C,KAAK25C,UAAU50C,OAASkI,GAC3DjN,KAAK47C,oBAAoBhvB,EAAUjsB,EAASC,GAC5CZ,KAAKm6C,kBAAoB,CAEjC,CAQA,mBAAAyB,CAAoBhvB,EAAUjsB,EAASC,GAEnC,GAAIZ,KAAK25C,UAAU50C,QAAU/E,KAAK05C,qBAC9B,OAIJ,IAAIsC,EAAWh8C,KAAKi8C,iBAAiBrvB,EAAUjsB,EAASC,GAGxD,MAAMs7C,EAAal8C,KAAKm8C,cAAcH,EAAS35C,EAAG25C,EAAS15C,EAAG3B,EAASC,GACvEo7C,EAAS35C,EAAI65C,EAAW75C,EACxB25C,EAAS15C,EAAI45C,EAAW55C,EAGxB,MAAMyQ,EAAW/S,KAAKy6C,oBAAoBuB,EAAS35C,EAAG25C,EAAS15C,EAAGsqB,GAGjD,qBAAbA,GAAmCovB,EAASI,aAC5CrpC,EAASqpC,WAAaJ,EAASI,WAC/BrpC,EAASspC,WAAaL,EAASK,YAInCr8C,KAAK25C,UAAU73C,KAAKiR,GACpB/S,KAAK0D,eAMT,CASA,gBAAAu4C,CAAiBrvB,EAAUjsB,EAASC,GAEhC,MACM07C,EADa11C,KAAKkB,IAAc,EAAVnH,EAAuB,EAAVC,GACV,GACzB27C,EAAyB,IAAZD,EAQbE,EAA8B,IAAbD,EACjBE,EAAiB71C,KAAKkB,IAAiB,IAAby0C,EAC5B57C,EALW,GAKOC,EALP,IAOf,OAAQgsB,GACJ,IAAK,UACL,IAAK,UAGD,MAAM8vB,EAAe91C,KAAK8I,SAAW9I,KAAKgE,GAAK,EACzC+xC,EAA6B,GAAbJ,EACtB,MAAO,CACHl6C,EAAG1B,EAAUiG,KAAK0E,IAAIoxC,GAAgBC,EACtCr6C,EAAG1B,EAAUgG,KAAKiE,IAAI6xC,GAAgBC,EACtCx9B,MAAOu9B,GAGf,IAAK,SACL,IAAK,UAED,MAAMv9B,EAAQvY,KAAK8I,SAAW9I,KAAKgE,GAAK,EAClC0I,EAASkpC,EAAiB51C,KAAK8I,UAAY+sC,EAAiBD,GAClE,MAAO,CACHn6C,EAAG1B,EAAUiG,KAAK0E,IAAI6T,GAAS7L,EAC/BhR,EAAG1B,EAAUgG,KAAKiE,IAAIsU,GAAS7L,GAGvC,IAAK,aAED,MAAMspC,EAAkBh2C,KAAK8I,SAAW9I,KAAKgE,GAAK,EAC5CiyC,EAAmBN,EAAa31C,KAAK8I,SAAW4sC,EACtD,MAAO,CACHj6C,EAAG1B,EAAUiG,KAAK0E,IAAIsxC,GAAmBC,EACzCv6C,EAAG1B,EAAUgG,KAAKiE,IAAI+xC,GAAmBC,GAGjD,IAAK,aA2CL,QACI,MAAO,CAAEx6C,EAAG1B,EAAS2B,EAAG1B,GAxC5B,IAAK,QAED,MAAMk8C,EAAal2C,KAAK8I,SAAW9I,KAAKgE,GAAK,EAC7C,GAA4B,cAAxB5K,KAAK46C,eAAgC,CACrC,MAAMmC,EAA0B,IAAZT,EACpB,MAAO,CACHj6C,EAAG1B,EAAUiG,KAAK0E,IAAIwxC,GAAcC,EACpCz6C,EAAG1B,EAAUgG,KAAKiE,IAAIiyC,GAAcC,EAE5C,CAAO,GAA4B,aAAxB/8C,KAAK46C,eAA+B,CAE3C,MAAMmC,EAA0B,IAAZT,EACpB,MAAO,CACHj6C,EAAG1B,EAAUiG,KAAK0E,IAAIwxC,GAAcC,EACpCz6C,EAAG1B,EAAUgG,KAAKiE,IAAIiyC,GAAcC,EAE5C,CAEI,MAAO,CAAE16C,EAAG1B,EAAS2B,EAAG1B,GAGhC,IAAK,YAED,MAAMo8C,EAAap2C,KAAK8I,SAAW9I,KAAKgE,GAAK,EACvCqyC,EAA2B,GAAbV,EACpB,MAAO,CACHl6C,EAAG1B,EAAUiG,KAAK0E,IAAI0xC,GAAcC,EACpC36C,EAAG1B,EAAUgG,KAAKiE,IAAImyC,GAAcC,GAG5C,IAAK,WAED,MAAMr0B,EAAahiB,KAAK8I,SAAW9I,KAAKgE,GAAK,EACvCie,EAA2B,IAAb0zB,EAAmB31C,KAAK8I,SAAW6sC,EAAa,GACpE,MAAO,CACHl6C,EAAG1B,EAAUiG,KAAK0E,IAAIsd,GAAcC,EACpCvmB,EAAG1B,EAAUgG,KAAKiE,IAAI+d,GAAcC,GAMpD,CAKA,aAAAszB,CAAc95C,EAAGC,EAAG3B,EAASC,EAASk2C,EAAS,IAC3C,MAAMnsB,EAAwB,EAAVhqB,EACdiqB,EAAyB,EAAVhqB,EACrB,MAAO,CACHyB,EAAGuE,KAAKiB,IAAIivC,EAAQlwC,KAAKkB,IAAI6iB,EAAcmsB,EAAQz0C,IACnDC,EAAGsE,KAAKiB,IAAIivC,EAAQlwC,KAAKkB,IAAI8iB,EAAeksB,EAAQx0C,IAE5D,CAWA,MAAAqY,CAAO3H,EAAWrS,EAASC,EAAS41C,EAAgB,KAAMC,EAAkB,EAAGF,EAAoB,MAC/F,GAAIv2C,KAAK+X,cAKL,OAJsB/X,KAAK+X,cAAchU,KACrC,CAACsa,EAAI6+B,EAAIC,EAAIC,EAAIC,EAAIC,IAAOt9C,KAAKu9C,EAAQl/B,EAAI6+B,EAAIC,EAAIC,EAAIC,EAAIC,GAC7D,kBAEGE,CAAcxqC,EAAWrS,EAASC,EAAS41C,EAAeC,EAAiBF,GAElFv2C,KAAKu9C,EAAQvqC,EAAWrS,EAASC,EAAS41C,EAAeC,EAAiBF,EAElF,CAKA,CAAAgH,CAAQvqC,EAAWrS,EAASC,EAAS41C,EAAgB,KAAMC,EAAkB,EAAGF,EAAoB,MAWhG,GATAv2C,KAAKs6C,cAAgBtnC,EAGjBhT,KAAKs6C,cAAgBt6C,KAAKu6C,kBAC1Bv6C,KAAKy9C,iBACLz9C,KAAKs6C,aAAe,GAIpB91C,KAAK+N,MAAQvS,KAAKi6C,gBAAkB,IAAO,CAC3C,MAAMyD,EAAS19C,KAAK85C,sBAAwB95C,KAAK+5C,wBAE7C2D,EAAS,KAAOA,EAAS19C,KAAKk6C,gBAAkB,KAChDl6C,KAAKk6C,gBAAkBwD,GAE3B19C,KAAKi6C,gBAAkBz1C,KAAK+N,KAChC,CAGA,IAAK,IAAIopC,EAAI37C,KAAK25C,UAAU50C,OAAS,EAAG42C,GAAK,EAAGA,IAAK,CACjD,MAAM5oC,EAAW/S,KAAK25C,UAAUgC,GAGhC5oC,EAAS4H,OAAO3H,EAAWrS,EAASC,EAAS21C,EAAmBC,EAAeC,GAG1E1jC,EAASmkC,WACVl3C,KAAK29C,eAAehC,EAE5B,CAGA,KAAO37C,KAAK25C,UAAU50C,OAAS/E,KAAKiN,cAChCjN,KAAK29C,eAAe,EAE5B,CAOA,kBAAAC,CAAmBjxB,EAAc0mB,GAC7BrzC,KAAK62C,gBAAkBxD,EAAS1mB,EAAe,KAG3C0mB,EACArzC,KAAK25C,UAAUj4C,QAAQqR,IACnBA,EAAS8jC,gBAAkBlqB,IAI/B3sB,KAAK25C,UAAUj4C,QAAQqR,IACnBA,EAAS8jC,gBAAkB,MAGvC,CAMA,cAAA8G,CAAeE,GACX,GAAIA,GAAS,GAAKA,EAAQ79C,KAAK25C,UAAU50C,OAAQ,CAC7C,MAAMgO,EAAW/S,KAAK25C,UAAUmE,OAAOD,EAAO,GAAG,GAEjD9qC,EAAS+nC,eAAiB,KAC1B/nC,EAASgoC,kBAAoB,KAE7B/6C,KAAK66C,qBAAqB9nC,GAC1B/S,KAAK0D,cAAgBkD,KAAKiB,IAAI,EAAG7H,KAAK0D,cAAgB,EAC1D,CACJ,CAQA,MAAAw0C,CAAOj4C,EAAKk4C,EAAe,UAAW4F,EAAmB,MACrD,GAAI/9C,KAAK+X,cACL,OAAO/X,KAAK+X,cAAchU,KAAK,KAC3B/D,KAAKg+C,EAAQ/9C,EAAKk4C,EAAc4F,IACjC,kBAFI/9C,GAIPA,KAAKg+C,EAAQ/9C,EAAKk4C,EAAc4F,EAExC,CAaA,gBAAAE,CAAiBh+C,EAAKk4C,EAAe,UAAW4F,EAAmB,MAC/D,GAAI/9C,KAAK+X,cACL,OAAO/X,KAAK+X,cAAchU,KAAK,KAC3B/D,KAAKk+C,EAAaj+C,EAAKk4C,GAAc,EAAO4F,IAC7C,qBAFI/9C,GAIPA,KAAKk+C,EAAaj+C,EAAKk4C,GAAc,EAAO4F,EAEpD,CAcA,gBAAAI,CAAiBl+C,EAAKk4C,EAAe,UAAW4F,EAAmB,MAC/D,GAAI/9C,KAAK+X,cACL,OAAO/X,KAAK+X,cAAchU,KAAK,KAC3B/D,KAAKk+C,EAAaj+C,EAAKk4C,GAAc,EAAM4F,IAC5C,qBAFI/9C,GAIPA,KAAKk+C,EAAaj+C,EAAKk4C,GAAc,EAAM4F,EAEnD,CAQA,CAAAG,CAAaj+C,EAAKk4C,EAAciG,EAAcL,EAAmB,MAE7D,MAAMM,EAAmB,GAInB1zB,EAAc1qB,EAAIF,OAAOU,MACzBmqB,EAAe3qB,EAAIF,OAAOW,OAEhC,IAAK,MAAMqS,KAAY/S,KAAK25C,UAEK5mC,EAASmf,GAAK,IACdksB,IAKzBrrC,EAAS1Q,GAZF,IAYiB0Q,EAAS1Q,EAAIsoB,EAZ9B,IAaP5X,EAASzQ,GAbF,IAaiByQ,EAASzQ,EAAIsoB,EAb9B,IAkBP7X,EAASE,MAAQ,GAErBorC,EAAiBv8C,KAAKiR,IAI1BsrC,EAAiBC,KAAK,CAACC,EAAG/2C,IAClB+2C,EAAEpI,eAAiB3uC,EAAE2uC,aACdoI,EAAEpI,cAAe,EAAK,EAE7BoI,EAAEt9B,UAAYzZ,EAAEyZ,QACTs9B,EAAEt9B,SAAU,EAAK,EAErB,GAIXjhB,KAAKw+C,EAAiBv+C,EAAKo+C,EAAkBlG,EAAc4F,EAC/D,CAKA,CAAAC,CAAQ/9C,EAAKk4C,EAAc4F,EAAmB,MAE1C,MAAMM,EAAmB,GAInB1zB,EAAc1qB,EAAIF,OAAOU,MACzBmqB,EAAe3qB,EAAIF,OAAOW,OAEhC,IAAK,MAAMqS,KAAY/S,KAAK25C,UAEpB5mC,EAAS1Q,GANF,IAMiB0Q,EAAS1Q,EAAIsoB,EAN9B,IAOP5X,EAASzQ,GAPF,IAOiByQ,EAASzQ,EAAIsoB,EAP9B,IAYP7X,EAASE,MAAQ,GAErBorC,EAAiBv8C,KAAKiR,GAK1BsrC,EAAiBC,KAAK,CAACC,EAAG/2C,KACtB,GAAI+2C,EAAEpI,eAAiB3uC,EAAE2uC,aACrB,OAAOoI,EAAEpI,cAAe,EAAK,EAEjC,GAAIoI,EAAEt9B,UAAYzZ,EAAEyZ,QAChB,OAAOs9B,EAAEt9B,SAAU,EAAK,EAG5B,MAAMw9B,EAASF,EAAEz6C,OAASq0C,EACpBuG,EAASl3C,EAAE1D,OAASq0C,EAC1B,OAAIsG,IAAWC,EACJD,EAASC,GAAS,EAAK,EAE3B,IAIX1+C,KAAKw+C,EAAiBv+C,EAAKo+C,EAAkBlG,EAAc4F,EAC/D,CASA,CAAAS,CAAiBv+C,EAAKo+C,EAAkBlG,EAAc4F,EAAmB,MAErE99C,EAAIwC,OACJ,IAAIk8C,EAAgB,KAIpB,IAAK,MAAM5rC,KAAYsrC,EAEnB,GAAItrC,EAASojC,aACTpjC,EAASmlC,OAAOj4C,EAAKk4C,GAErBwG,EAAgB,SAGb,CAEH,MAAMnG,EAAgBzlC,EAASjP,OAASq0C,EASxC,GANIK,IAAkBmG,IAClB1+C,EAAI84C,UAAYP,EAChBmG,EAAgBnG,IAIfJ,SAASrlC,EAAS1Q,KAAO+1C,SAASrlC,EAASzQ,GAAI,SAGpD,MAAMs8C,EAAY7rC,EAASukC,qBAAuBvkC,EAASukC,uBAAyBvkC,EAASI,KACvFolC,EAAW3xC,KAAKiB,IAAI,GAAK+2C,GAG/B,IAAIC,EAAc,EAClB,GAAId,GAAoBA,EAAiBe,cAAe,CAEpD,MAAMC,GAA8B,IAAbhsC,EAAS1Q,EAAwB,IAAb0Q,EAASzQ,EAA2B,GAAhByQ,EAASI,OAAyB,EAAVvM,KAAKgE,IACtF0H,EAAOyrC,EAAiBiB,aAA6B,KAAbx6C,KAAK+N,MAC7CtE,EAAY8vC,EAAiBkB,cAAgB,EAGnDJ,EAAc,GAAMj4C,KAAKiB,IAAI,EAAGjB,KAAKiE,IAAW,EAAPyH,EAAWysC,IAAkB9wC,CAC1E,CAGA,GAAI8vC,GAAoBA,EAAiBmB,cAAe,CAEpD,MAAMH,GAA8B,IAAbhsC,EAAS1Q,EAAwB,IAAb0Q,EAASzQ,IAAuB,EAAVsE,KAAKgE,IAChE0H,EAAOyrC,EAAiBoB,aAA6B,KAAb36C,KAAK+N,MAC7CtE,EAAY8vC,EAAiBkB,cAAgB,EAGnDJ,EAAc,GAAMj4C,KAAKiE,IAAW,GAAPyH,EAAYysC,GAAiB9wC,EAAY,EAC1E,CAGA,GAAI8vC,GAAoBA,EAAiB75B,cAAe,CAEpD,MAAMrB,EAAK9P,EAAS1Q,EAAKpC,EAAIF,OAAOU,MAAQ,EACtCqiB,EAAK/P,EAASzQ,EAAKrC,EAAIF,OAAOW,OAAS,EAEvC0+C,EADWx4C,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GACJ,IAEhCxQ,EAAOyrC,EAAiBsB,aAA6B,KAAb76C,KAAK+N,MAC7CovB,EAAOoc,EAAiBuB,aAAe,EACvCrxC,EAAY8vC,EAAiBkB,cAAgB,IAMnDJ,EAAc,EAAoB,IAHZj4C,KAAKiE,IAAW,EAAPyH,EAAW8sC,EAAqBzd,GAGtB1zB,CAC7C,CAGA,GAAI8vC,GAAoBA,EAAiBwB,WAAY,CAEjD,MAAM12C,EAAWk1C,EAAiByB,cAAgB,EAC5CvxC,EAAY8vC,EAAiBkB,cAAgB,EAG7Cp8B,EAAK9P,EAAS1Q,EAAKpC,EAAIF,OAAOU,MAAQ,EACtCqiB,EAAK/P,EAASzQ,EAAKrC,EAAIF,OAAOW,OAAS,EAEvC0+C,EADWx4C,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GACJ,IAGhC28B,EAAe74C,KAAKkB,IAAyB,GAArBs3C,EAA0B,IAClDM,EAAgB94C,KAAKiB,IAAI,GAAIgB,EAAW42C,IAAiB,EAAIA,IAC7DE,EAAgB/4C,KAAKiE,IAAI60C,EAAgB94C,KAAKgE,IAI/CmI,EAAS6sC,IACV7sC,EAAS6sC,EAAgB,CACrB3+B,QAASlO,EAASkO,QAClBC,mBAAoBnO,EAASmO,oBAAsB,IAK3DnO,EAASkO,SAAU,EACnBlO,EAASmO,mBAAqBta,KAAKiB,IAAI,EAAKkL,EAAS6sC,EAAc1+B,oBAAsBy+B,EAAgB1xC,EAAY,EAIrHsqC,GADsB,EAAoB,GAAhBoH,EAItB92C,GAAY,KAAQkK,EAAS6sC,IAC7B7sC,EAASkO,QAAUlO,EAAS6sC,EAAc3+B,QAC1ClO,EAASmO,mBAAqBnO,EAAS6sC,EAAc1+B,0BAC9CnO,EAAS6sC,EAExB,CAGA,GAAI7sC,EAASkO,SAAW49B,EAAc,EAAK,CACvC,MAAMtC,EAAa31C,KAAKiB,IAAI,GAAK0wC,GAAYxlC,EAASmO,oBAAsB,KAAO29B,GAGnF5+C,EAAI4/C,YAAiC,IAAnB9sC,EAASG,QAAiB2rC,EAC5C5+C,EAAI04C,YACJ14C,EAAI24C,IAAI7lC,EAAS1Q,EAAG0Q,EAASzQ,EAAGi6C,EAAY,EAAa,EAAV31C,KAAKgE,IACpD3K,EAAI+4C,OAGJ/4C,EAAI4/C,YAAiC,IAAnB9sC,EAASG,QAAiB2rC,EAC5C5+C,EAAI04C,YACJ14C,EAAI24C,IAAI7lC,EAAS1Q,EAAG0Q,EAASzQ,EAAgB,GAAbi6C,EAAkB,EAAa,EAAV31C,KAAKgE,IAC1D3K,EAAI+4C,MACR,CAGA/4C,EAAI4/C,YAAc9sC,EAASG,SAAWH,EAASuN,aAAe,IAAO,GAAM1Z,KAAKkB,IAAI,EAAK+2C,GACzF5+C,EAAI04C,YACJ14C,EAAI24C,IAAI7lC,EAAS1Q,EAAG0Q,EAASzQ,EAAGi2C,EAAU,EAAa,EAAV3xC,KAAKgE,IAClD3K,EAAI+4C,MACR,CAGJ/4C,EAAI4C,SACR,CAKA,KAAAX,GAII,IAHAlC,KAAKg6C,mBAGEh6C,KAAK25C,UAAU50C,OAAS,GAAG,CAC9B,MAAMgO,EAAW/S,KAAK25C,UAAUe,MAMhC,GAJI3nC,EAASqjC,cACTrjC,EAASqjC,aAAal0C,QAGtB6Q,EAASkL,aACT,IAAK,IAAI5J,KAAOtB,EAASkL,oBACdlL,EAASkL,aAAa5J,GAIjCrU,KAAK45C,KAAK70C,OAAS/E,KAAK65C,WAAa75C,KAAK45C,KAAKp0C,SAASuN,IACxD/S,KAAK45C,KAAK93C,KAAKiR,EAEvB,CAOA,GALA/S,KAAK25C,UAAU50C,OAAS,EACxB/E,KAAK0D,cAAgB,EACrB1D,KAAKm6C,iBAAmB,EAGpBn6C,KAAK45C,KAAK70C,OAAS/E,KAAK65C,SAAU,CAElC,MAAMiG,EAAS9/C,KAAK45C,KAAK70C,OAAS/E,KAAK65C,SACvC75C,KAAK45C,KAAKkE,OAAO99C,KAAK65C,SAAUiG,EACpC,CAEJ,CASA,KAAAhzB,CAAMloB,EAAOgoB,EAAUjsB,EAASC,GAC5B,GAAIZ,KAAK+X,cACL,OAAO/X,KAAK+X,cAAchU,KAAK,KAC3B/D,KAAK+/C,EAAOn7C,EAAOgoB,EAAUjsB,EAASC,IACvC,iBAFIZ,GAIPA,KAAK+/C,EAAOn7C,EAAOgoB,EAAUjsB,EAASC,EAE9C,CAKA,CAAAm/C,CAAOn7C,EAAOgoB,EAAUjsB,EAASC,GAC7B,MAAMo/C,EAAcp5C,KAAKkB,IAAIlD,EAAO5E,KAAKiN,aAAejN,KAAK25C,UAAU50C,QAEvE,IAAK,IAAI42C,EAAI,EAAGA,EAAIqE,EAAarE,IAC7B37C,KAAK47C,oBAAoBhvB,EAAUjsB,EAASC,EAEpD,CAKA,cAAA68C,GAEI,GAAIz9C,KAAK45C,KAAK70C,OAAS/E,KAAK65C,SAAU,CAElC,MAAMiG,EAAS9/C,KAAK45C,KAAK70C,OAAS/E,KAAK65C,SACvC,IAAK,IAAI8B,EAAI,EAAGA,EAAImE,EAAQnE,IAAK,CAC7B,MAAM5oC,EAAW/S,KAAK45C,KAAKc,MAEvB3nC,IACAA,EAAS+nC,eAAiB,KAC1B/nC,EAASgoC,kBAAoB,KAC7BhoC,EAASkL,aAAe,KAEhC,CACJ,CAGA,IAAK,MAAMlL,KAAY/S,KAAK25C,UACpB5mC,EAAS+nC,gBAAkB/nC,EAASE,KAAO,KAE3CF,EAAS+nC,eAAiB,KAC1B/nC,EAASgoC,kBAAoB,KAGzC,CAMA,QAAAkF,GACI,MAAO,CACHC,gBAAiBlgD,KAAK25C,UAAU50C,OAChCkI,aAAcjN,KAAKiN,aACnB4sC,SAAU75C,KAAK45C,KAAK70C,OACpBq1C,SAAUp6C,KAAKo6C,SACfC,WAAYr6C,KAAKq6C,WACjB8F,eAAgBngD,KAAKo6C,SAAWxzC,KAAKiB,IAAI,EAAG7H,KAAKo6C,SAAWp6C,KAAKq6C,YACjEF,iBAAkBn6C,KAAKm6C,iBAE/B,CAMA,eAAAiG,CAAgBnzC,GAKZ,IAJAjN,KAAKqgD,qBAAuBrgD,KAAKqgD,sBAAwBrgD,KAAKiN,aAC9DjN,KAAKiN,aAAerG,KAAKiB,IAAI,EAAGoF,GAGzBjN,KAAK25C,UAAU50C,OAAS/E,KAAKiN,cAChCjN,KAAK29C,eAAe,EAE5B,CAKA,oBAAA2C,GAEI,MAAMC,EAAcvgD,KAAK25C,UAAU50C,OACnC/E,KAAK25C,UAAY35C,KAAK25C,UAAU6G,OAAOztC,GAAYA,EAASmkC,WAC5D,MAAMuJ,EAAUF,EAAcvgD,KAAK25C,UAAU50C,OAO7C,OAJI/E,KAAK45C,KAAK70C,OAAS,KACnB/E,KAAK45C,KAAK70C,OAAS,IAGhB07C,CACX,CAOA,sBAAAC,CAAuB9zB,GACnB,OAAO5sB,KAAK25C,UAAU6G,OAAOztC,GAAYA,EAAS6Z,WAAaA,EACnE,CAMA,iBAAA+zB,GACI,IAAK,MAAM5tC,KAAY/S,KAAK25C,UACxB,IAAK5mC,EAASmkC,WAAankC,EAASE,KAAO,GAAKF,EAASE,KAAO,EAC5D,OAAO,EAGf,OAAO,CACX,CAKA,OAAAsc,GACI,IAAK,IAAIosB,EAAI37C,KAAK25C,UAAU50C,OAAS,EAAG42C,GAAK,EAAGA,IACvC37C,KAAK25C,UAAUgC,GAAGzE,WACnBl3C,KAAK29C,eAAehC,EAGhC,CAKA,OAAA54C,GACI/C,KAAKkC,QACLlC,KAAK45C,KAAK70C,OAAS,EACnB/E,KAAKo6C,SAAW,EAChBp6C,KAAKq6C,WAAa,CAEtB,ECn/BG,MAAMuG,GAAsB,CAE/BC,KAAM,CACF9yC,MAAO,EACPC,UAAW,EACXC,UAAW,EACXC,WAAY,EACZC,WAAY,GAGhB1E,QAAS,CACLsE,MAAO,IACPC,UAAW,GACXC,UAAW,IACXC,WAAY,GACZC,WAAY,GACZ2yC,YAAY,EACZC,eAAe,GAGnBv3C,UAAW,CACPuE,MAAO,GACPC,UAAW,IACXC,UAAW,IACXC,WAAY,IACZC,WAAY,IACZ6yC,UAAU,EACVC,SAAS,GAGbv3C,MAAO,CACHqE,MAAO,GACPC,UAAW,GACXC,UAAW,GACXC,WAAY,IACZC,WAAY,GACZ+yC,UAAU,EACVC,UAAU,GAGd53C,QAAS,CACLwE,MAAO,IACPC,UAAW,IACXC,UAAW,IACXC,WAAY,GACZC,WAAY,GACZizC,UAAU,EACVC,UAAU,GAGd13C,QAAS,CACLoE,MAAO,GACPC,UAAW,GACXC,UAAW,GACXC,WAAY,IACZC,WAAY,IACZmzC,aAAa,EACbC,SAAS,IC7EjB,MAAMC,GACF,WAAA1hD,GAEIE,KAAKyhD,MAAQ,IAAIp+C,IAGjBrD,KAAK0hD,YAAc,IAAIr+C,IACvBrD,KAAK2hD,0BACT,CAKA,wBAAAA,GACI,MACMC,EAAc,CAAC,SAAU,UAAW,WAAY,cAAe,UAErE,IAAK,MAAMt8C,KAAQs8C,EAAa,CAC5B,MAAMhsC,EAAQ,IAAIisC,aAAaC,KAC/B,IAAK,IAAInG,EAAI,EAAGA,GALN,IAKkBA,IAAK,CAC7B,MAAMlzC,EAAIkzC,EANJ,IAON/lC,EAAM+lC,GAAK37C,KAAK+hD,gBAAgBt5C,EAAGnD,EACvC,CACAtF,KAAK0hD,YAAY58C,IAAIQ,EAAMsQ,EAC/B,CACJ,CAKA,eAAAmsC,CAAgBt5C,EAAGnD,GACf,OAAOA,GACH,IAAK,UACD,OAAOmD,EAAIA,EACf,IAAK,WACD,OAAOA,GAAK,EAAIA,GACpB,IAAK,cACD,OAAOA,EAAI,GAAM,EAAIA,EAAIA,GAAU,EAAI,EAAIA,GAAKA,EAAnB,EACjC,IAAK,SACD,OAAIA,EAAI,QAAiB,OAASA,EAAIA,EAClCA,EAAI,QAAiB,QAAUA,GAAK,SAAYA,EAAI,IACpDA,EAAI,OAAiB,QAAUA,GAAK,SAAYA,EAAI,MACjD,QAAUA,GAAK,SAAYA,EAAI,QAC1C,QACI,OAAOA,EAEnB,CAKA,cAAAu5C,CAAen5C,EAAUvD,GACrB,MAAMsQ,EAAQ5V,KAAK0hD,YAAY78C,IAAIS,GACnC,OAAKsQ,EAGEA,EADOhP,KAAKkB,IAAIlB,KAAKgJ,MAAiB,IAAX/G,GAAiB,MAFhCA,CAIvB,CASA,OAAAo5C,CAAQz+C,EAASD,EAASsG,EAAY,MAElC,MAAMiuC,EAAW,GAAGt0C,KAAWD,KAAWsG,GAAa,SACvD,GAAI7J,KAAKyhD,MAAM1nC,IAAI+9B,GACf,OAAO93C,KAAKyhD,MAAM58C,IAAIizC,GAI1B,MAAMoK,EAAgB7V,GAAW7oC,GAC3B2+C,EAAOD,EAAgBA,EAAcl8B,OAAS,CAChDxX,SAAU,IACVR,UAAW,GACXtC,OAAQ,QAEN02C,ElFwBP,SAA6BruC,GAChC,MAAMxQ,EAAUuQ,EAAWC,GAC3B,OAAKxQ,EAGEA,EAAQuK,UAFJgG,EAAW,WAAWhG,SAGrC,CkF9B2Bu0C,CAAoB9+C,GACjC++C,EDKP,SAA8Bz4C,GACjC,OAAKA,GAA2B,KAAdA,GAGX+2C,GAAoB/2C,IAFhB+2C,GAAoBC,IAGnC,CCV6BhlC,CAAqBhS,GAGpC04C,EAAWviD,KAAKwiD,eAAeL,EAAMC,EAAYE,EAAc9+C,GASrE,OANIxD,KAAKyhD,MAAMtuC,KAAO,KAElBnT,KAAKyhD,MAAMv/C,QAEflC,KAAKyhD,MAAM38C,IAAIgzC,EAAUyK,GAElBA,CACX,CAUA,cAAAC,CAAeL,EAAMC,EAAYE,EAAc9+C,GAC3C,MAAMw0C,EAAS,IAAKmK,GAGdrrC,EAAkBsrC,EAAWr0C,MAAQu0C,EAAav0C,MAYxD,GAXAiqC,EAAOxpC,SAAW5H,KAAKgB,MAAMu6C,EAAK3zC,SAAWsI,QAGpBuD,IAArB29B,EAAOhqC,YACPgqC,EAAOhqC,UAAYm0C,EAAKn0C,UAAYo0C,EAAWp0C,UAAYs0C,EAAat0C,gBAIjDqM,IAAvB29B,EAAOtoB,cACPsoB,EAAOtoB,YAAcyyB,EAAKzyB,YAAc0yB,EAAWn0C,UAAYq0C,EAAar0C,gBAErDoM,IAAvB29B,EAAOjP,YAA2B,CAClC,MAAM0Z,EAAgBL,EAAWp0C,UAAYs0C,EAAat0C,UAC1DgqC,EAAOjP,YAAc,GAAKoZ,EAAKpZ,YAAc,GAAK0Z,CACtD,MAG0BpoC,IAAtB29B,EAAOroB,aACPqoB,EAAOroB,WAAawyB,EAAKxyB,WAAayyB,EAAWn0C,UAAYq0C,EAAar0C,gBAEtDoM,IAApB29B,EAAOjO,WACPiO,EAAOjO,SAAW,GAAKoY,EAAKpY,SAAW,GAAKqY,EAAWn0C,UAAYq0C,EAAar0C,gBAI3DoM,IAArB29B,EAAOzmB,YACPymB,EAAOzmB,UAAY4wB,EAAK5wB,UAAY6wB,EAAWp0C,UAAYs0C,EAAat0C,gBAEvDqM,IAAjB29B,EAAO74B,QACP64B,EAAO74B,MAAQgjC,EAAKhjC,MAAQijC,EAAWp0C,UAAYs0C,EAAat0C,gBAI5CqM,IAApB29B,EAAOj1B,WACPi1B,EAAOj1B,SAAWo/B,EAAKp/B,SAAWq/B,EAAWp0C,UAAYs0C,EAAat0C,WAI1E,MAAME,EAAak0C,EAAWl0C,WAAao0C,EAAap0C,WA2DxD,OA1DA8pC,EAAO9pC,WAAaA,EACpB8pC,EAAOtsC,OAAS1L,KAAK0iD,aAAaP,EAAKz2C,OAAQwC,GAG/C8pC,EAAO7pC,WAAai0C,EAAWj0C,WAAam0C,EAAan0C,WAGzD6pC,EAAO2K,QAAU,GACbP,EAAW5tC,WAAWwjC,EAAO2K,QAAQ7gD,KAAK,UAC1CsgD,EAAWlsC,YAAY8hC,EAAO2K,QAAQ7gD,KAAK,WAC3CsgD,EAAWjsC,UAAU6hC,EAAO2K,QAAQ7gD,KAAK,SACzCsgD,EAAW3rC,WAAWuhC,EAAO2K,QAAQ7gD,KAAK,SAC1CsgD,EAAW1rC,QAAQshC,EAAO2K,QAAQ7gD,KAAK,OACvCsgD,EAAWzrC,WAAWqhC,EAAO2K,QAAQ7gD,KAAK,UAC1CsgD,EAAWxrC,WAAWohC,EAAO2K,QAAQ7gD,KAAK,UAC1CsgD,EAAWQ,SAAS5K,EAAO2K,QAAQ7gD,KAAK,QACxCsgD,EAAW/zC,WAAW2pC,EAAO2K,QAAQ7gD,KAAK,UAC1CsgD,EAAW3qC,cAAcugC,EAAO2K,QAAQ7gD,KAAK,aAC7CsgD,EAAWS,SAAS7K,EAAO2K,QAAQ7gD,KAAK,QACxCsgD,EAAW5xC,WAAWwnC,EAAO2K,QAAQ7gD,KAAK,UAC1CsgD,EAAWU,YAAY9K,EAAO2K,QAAQ7gD,KAAK,WAC3CsgD,EAAWvqC,cAAcmgC,EAAO2K,QAAQ7gD,KAAK,aAG7CwgD,EAAaxB,YAAY9I,EAAO2K,QAAQ7gD,KAAK,WAC7CwgD,EAAavB,eAAe/I,EAAO2K,QAAQ7gD,KAAK,cAChDwgD,EAAatB,UAAUhJ,EAAO2K,QAAQ7gD,KAAK,SAC3CwgD,EAAarB,SAASjJ,EAAO2K,QAAQ7gD,KAAK,QAC1CwgD,EAAapB,UAAUlJ,EAAO2K,QAAQ7gD,KAAK,SAC3CwgD,EAAanB,UAAUnJ,EAAO2K,QAAQ7gD,KAAK,SAC3CwgD,EAAalB,UAAUpJ,EAAO2K,QAAQ7gD,KAAK,SAC3CwgD,EAAajB,UAAUrJ,EAAO2K,QAAQ7gD,KAAK,SAC3CwgD,EAAahB,aAAatJ,EAAO2K,QAAQ7gD,KAAK,YAC9CwgD,EAAaf,SAASvJ,EAAO2K,QAAQ7gD,KAAK,QAG9C9B,KAAK+iD,yBAAyB/K,EAAQx0C,EAAS4+C,EAAYE,GAGvDH,EAAKv0B,iBACLoqB,EAAOpqB,eAAiB,IAAKu0B,EAAKv0B,qBAGKvT,IAAnC29B,EAAOpqB,eAAeD,WACtBqqB,EAAOpqB,eAAeD,UAAYy0B,EAAWn0C,UAAYq0C,EAAar0C,gBAIlCoM,IAApC29B,EAAOpqB,eAAe1c,YACtB8mC,EAAOpqB,eAAe1c,WAAa4F,QAICuD,IAApC29B,EAAOpqB,eAAe5f,YACtBgqC,EAAOpqB,eAAe5f,WAAao0C,EAAWp0C,UAAYs0C,EAAat0C,YAIxEgqC,CACX,CAQA,YAAA0K,CAAaM,EAAY90C,GACrB,OAAIA,EAAa,GACN,SACAA,EAAa,GACb,OACAA,EAAa,IACb80C,EACA90C,EAAa,IACb,QAEA,MAEf,CASA,wBAAA60C,CAAyB/K,EAAQx0C,EAAS4+C,EAAYE,GAClD,OAAO9+C,GACH,IAAK,SAEG4+C,EAAWjsC,WACX6hC,EAAO9mC,UAAYtK,KAAKgJ,MAAyB,IAAnBooC,EAAO9mC,YAGrCkxC,EAAWlsC,aACX8hC,EAAOhqC,WAAa,GACpBgqC,EAAO9mC,UAAY,GAEvB,MAEJ,IAAK,QAEGkxC,EAAWxrC,YACXohC,EAAO9mC,UAAY,EACnB8mC,EAAOroB,YAAc,KAGrB2yB,EAAaxB,aACb9I,EAAOiL,WAAY,GAEvB,MAEJ,IAAK,QAEGb,EAAW3rC,YACXuhC,EAAO9mC,WAAa,IACpB8mC,EAAOhqC,WAAa,KAGpBo0C,EAAWjsC,WACX6hC,EAAOhqC,WAAa,IACpBgqC,EAAOxiC,OAAQ,GAEnB,MAEJ,IAAK,OAEG4sC,EAAW5tC,YACXwjC,EAAOzmB,WAAa,KAGpB6wB,EAAW/zC,YACX2pC,EAAOhsB,QAAS,GAMhC,CAKA,UAAAk3B,GACIljD,KAAKyhD,MAAMv/C,OACf,ECzUJ,IAAAihD,GAAe,CACX72C,KAAM,aACNK,MAAO,KACPC,YAAa,oCAGboZ,OAAQ,CACJo9B,YAAa,IACbC,gBAAiB,IACjBC,UAAW,IACX5K,UAAW,EACX6K,SAAU,GACVC,KAAM,EACNrhC,UAAW,GACX7B,YAAa,GACbmjC,WAAY,KAIhBpxC,MAAO,CACH7P,SAAU,EACVojC,WAAY,EACZ33B,UAAW,GAQfy1C,eAAgB,SAASrxC,GACrB,MAAyB,QAAlBA,EAAM9O,SAAqB8O,EAAMsxC,eAAetQ,MAC3D,EAOAvkB,MAAO,SAAS7uB,EAAKmU,GACjB,MAAM/R,EAAEA,EAACC,EAAEA,EAACgR,OAAEA,EAAMrF,UAAEA,EAAY,EAAG+E,UAAEA,EAAY,OAAUoB,EAG7DpU,KAAKqS,MAAM7P,UAAYxC,KAAKgmB,OAAOo9B,aAAepwC,EAAY,OAC9DhT,KAAKqS,MAAMuzB,YAAc5lC,KAAKgmB,OAAOy9B,YAAczwC,EAAY,OAC/DhT,KAAKqS,MAAMpE,UAAYA,EAEvBhO,EAAIwC,OAGJ,IAAK,IAAImhD,EAAM,EAAGA,EAAM5jD,KAAKgmB,OAAOw9B,KAAMI,IAAO,CAC7C,MAAMC,EAAuB,EAAVj9C,KAAKgE,GAAS5K,KAAKgmB,OAAOw9B,KAAQI,EACrD5jD,KAAK8jD,cAAc7jD,EAAKoC,EAAGC,EAAGgR,EAAQuwC,EAC1C,CAGA7jD,KAAK+jD,mBAAmB9jD,EAAKoC,EAAGC,EAAY,GAATgR,EAAcrF,GAEjDhO,EAAI4C,SACR,EAKAihD,cAAe,SAAS7jD,EAAKU,EAASC,EAAS8d,EAAY+jB,GACvDxiC,EAAI04C,YAEJ,MAAMqL,EAAW,EAAsC,GAAlCp9C,KAAKiE,IAAI7K,KAAKqS,MAAMuzB,YAEzC,IAAK,IAAI+V,EAAI,EAAGA,GAAK37C,KAAKgmB,OAAOu9B,SAAU5H,IAAK,CAC5C,MAAMlzC,EAAIkzC,EAAI37C,KAAKgmB,OAAOu9B,SACpBpkC,EAAQnf,KAAKqS,MAAM7P,SAAWigC,EAASh6B,EAAI7B,KAAKgE,GAAK,EACrDq5C,EAAex7C,EAAIiW,EAAa1e,KAAKgmB,OAAOs9B,UAAYU,EAGxD3hD,EAAI1B,EAAUiG,KAAK0E,IAAI6T,GAAS8kC,EAChC3hD,EAAI1B,EAAUgG,KAAKiE,IAAIsU,GAAS8kC,EAE5B,IAANtI,EACA17C,EAAIikD,OAAO7hD,EAAGC,GAEdrC,EAAIkkD,OAAO9hD,EAAGC,EAEtB,CAGA,MAAM22C,EAAWh5C,EAAImkD,qBACjBzjD,EAAU+d,EAAY9d,EACtBD,EAAU+d,EAAY9d,GAGpBsS,EAAUlT,KAAKgmB,OAAO1F,YAActgB,KAAKqS,MAAMpE,UACrDgrC,EAASE,aAAa,EAAG,0BACzBF,EAASE,aAAa,GAAK,uBAAiC,GAAVjmC,MAClD+lC,EAASE,aAAan5C,KAAKgmB,OAAO7D,UAAW,uBAAuBjP,MACpE+lC,EAASE,aAAa,EAAG,0BAEzBl5C,EAAIw4C,YAAcQ,EAClBh5C,EAAIy4C,UAAY14C,KAAKgmB,OAAO0yB,UAC5Bz4C,EAAI44C,QACR,EAKAkL,mBAAoB,SAAS9jD,EAAKoC,EAAGC,EAAGgR,EAAQrF,GAC5ChO,EAAIwC,OAEJ,MAAM4hD,EAAoB,GAAT/wC,EAEXgxC,EAAsB,GAAThxC,EAEnBrT,EAAIw4C,YAAc,uBAAuB,GAAMxqC,KAC/ChO,EAAIy4C,UAAY,EAGhBz4C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIiiD,EAAYhiD,EAAG+hD,EAAUz9C,KAAKgE,GAAI,GAAG,GACjD3K,EAAI44C,SAGJ54C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIiiD,EAAYhiD,EAAG+hD,EAAUz9C,KAAKgE,GAAI,GAAG,GACjD3K,EAAI44C,SAEJ54C,EAAI4C,SACR,EAKAwZ,MAAO,WACHrc,KAAKqS,MAAM7P,SAAW,EACtBxC,KAAKqS,MAAMuzB,WAAa,EACxB5lC,KAAKqS,MAAMpE,UAAY,CAC3B,GCvIJs2C,GAAe,CACXj4C,KAAM,iBACNK,MAAO,KACPC,YAAa,oCAGboZ,OAAQ,CACJliB,MAAO,UACP2/C,WAAY,IACZe,aAAc,GACdC,aAAc,EACd1vB,iBAAkB,EAClB2vB,cAAe,CACX,CAAEjN,SAAU,EAAGvkC,QAAS,GACxB,CAAEukC,SAAU,GAAKvkC,QAAS,IAC1B,CAAEukC,SAAU,GAAKvkC,QAAS,IAC1B,CAAEukC,SAAU,IAAMvkC,QAAS,IAC3B,CAAEukC,SAAU,EAAGvkC,QAAS,KAKhCb,MAAO,CACHuzB,WAAY,EACZ33B,UAAW,IAQfy1C,eAAgB,SAASrxC,GACrB,OAA2B,IAApBA,EAAMsyC,SACjB,EAOA71B,MAAO,SAAS7uB,EAAKmU,GACjB,MAAMpB,UAAEA,EAAY,OAAUoB,EAG9BpU,KAAKqS,MAAMuzB,YAAc5lC,KAAKgmB,OAAOy9B,YAAczwC,EAAY,OAG/D,MAAMwc,GAAS5oB,KAAKiE,IAAI7K,KAAKqS,MAAMuzB,YAAc,GAAK,EAMtD,OALA5lC,KAAKqS,MAAMpE,UAAYjO,KAAKgmB,OAAOw+B,cAC9BxkD,KAAKgmB,OAAOy+B,aAAezkD,KAAKgmB,OAAOw+B,cAAgBh1B,GAIrD,CACX,EAKAo1B,uBAAwB,SAAS3kD,EAAK0qB,EAAaC,GAC/C3qB,EAAIwC,OAGJ,MAAM2Q,EAAWxM,KAAKkB,IAAI6iB,EAAaC,GACjCi6B,EAAWj+C,KAAKgJ,MAAiB,IAAXwD,GAGtB/Q,EAAe,IAAXwiD,EACJviD,EAAe,IAAXuiD,EAGJC,EAAuB,GAAXD,EAClB5kD,EAAI84C,UAAY/4C,KAAK+3C,UAAU,UAAW/3C,KAAKqS,MAAMpE,WACrDhO,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIwiD,EAAUviD,EAAGwiD,EAAW,EAAa,EAAVl+C,KAAKgE,IAC5C3K,EAAI+4C,OAGJ/4C,EAAIw4C,YAAcz4C,KAAK+3C,UAAU,UAAkC,GAAvB/3C,KAAKqS,MAAMpE,WACvDhO,EAAIy4C,UAAY,EAChBz4C,EAAI8kD,KAAO,QAAQF,0BACnB5kD,EAAI+kD,UAAY,OAChB/kD,EAAIglD,aAAe,SACnBhlD,EAAIilD,WAAW,MAAO7iD,EAAGC,GAGzBrC,EAAI84C,UAAY/4C,KAAK+3C,UAAU,UAAW/3C,KAAKqS,MAAMpE,WACrDhO,EAAIklD,SAAS,MAAO9iD,EAAGC,GAEvBrC,EAAI4C,SACR,EAKAk1C,UAAW,SAAShxC,EAAK5G,GAIrB,MAAO,QAHGiB,SAAS2F,EAAIb,MAAM,EAAG,GAAI,QAC1B9E,SAAS2F,EAAIb,MAAM,EAAG,GAAI,QAC1B9E,SAAS2F,EAAIb,MAAM,EAAG,GAAI,QACH/F,IACrC,EAKAkc,MAAO,WACHrc,KAAKqS,MAAMuzB,WAAa,EACxB5lC,KAAKqS,MAAMpE,UAAY,CAC3B,GCjHJm3C,GAAe,CACX94C,KAAM,iBACNK,MAAO,MACPC,YAAa,qCAEboZ,OAAQ,CACJq/B,gBAAiB,IACjB/6B,UAAW,GACXg7B,SAAU,IACV9gB,YAAY,EACZ+gB,YAAY,GAGhBlzC,MAAO,CACH5O,WAAY,EACZ+hD,cAAe,EACfC,MAAO,IAGX/B,eAAgB,SAASrxC,GACrB,OAA0B,IAAnBA,EAAM4F,QACjB,EAEA6W,MAAO,SAAS7uB,EAAKmU,GACjB,MAAM/R,EAAEA,EAACC,EAAEA,EAACgR,OAAEA,EAAM7P,WAAEA,EAAa,EAACuP,UAAEA,EAAY,OAAUoB,EAG5DpU,KAAKqS,MAAMmzC,gBAAkB/hD,EAAazD,KAAKqS,MAAMmzC,eAAiBxlD,KAAKgmB,OAAOsE,UAG9E7mB,EAAa,IAAOzD,KAAKqS,MAAM5O,YAAc,IAC7CzD,KAAKqS,MAAMozC,MAAM3jD,KAAK,CAClBwR,OAAQA,EACRJ,QAAS,GACTnF,MAAO,IAKX/N,KAAKgmB,OAAOu/B,YACZvlD,KAAK0lD,UAAUzlD,EAAKoC,EAAGC,EAAG0Q,GAI9BhT,KAAKqS,MAAM5O,WAAaA,CAC5B,EAEAiiD,UAAW,SAASzlD,EAAKoC,EAAGC,EAAG0Q,GAC3B/S,EAAIwC,OACJxC,EAAIw4C,YAAc,2BAClBx4C,EAAIy4C,UAAY,EAGhB,IAAK,IAAIiD,EAAI37C,KAAKqS,MAAMozC,MAAM1gD,OAAS,EAAG42C,GAAK,EAAGA,IAAK,CACnD,MAAMgK,EAAO3lD,KAAKqS,MAAMozC,MAAM9J,GAG9BgK,EAAKryC,QAAUqyC,EAAK53C,OAASiF,EAAY,OACzC2yC,EAAKzyC,SAAmBF,EAAY,MAApB,IAGZ2yC,EAAKzyC,SAAW,EAChBlT,KAAKqS,MAAMozC,MAAM3H,OAAOnC,EAAG,IAK/B17C,EAAI4/C,YAAc8F,EAAKzyC,QACvBjT,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAGC,EAAGqjD,EAAKryC,OAAQ,EAAa,EAAV1M,KAAKgE,IACnC3K,EAAI44C,SACR,CAEA54C,EAAI4C,SACR,EAEA+iD,iBAAkB,WACd,OAAO,EAAK5lD,KAAKqS,MAAMmzC,cAAgBxlD,KAAKgmB,OAAOq/B,eACvD,GC9EJQ,GAAe,CACXv5C,KAAM,WACNK,MAAO,KACPC,YAAa,4CAEboZ,OAAQ,CACJ8/B,eAAgB,GAChBC,eAAgB,IAChBC,cAAe,GACfC,kBAAmB,IACnBC,YAAa,EACbC,WAAY,IACZC,WAAY,GACZC,YAAa,IAGjBh0C,MAAO,CACHi0C,WAAY,EACZC,WAAY,IAGhB7C,eAAgB,SAASrxC,GACrB,OAA0B,IAAnBA,EAAMm0C,UAAuC,YAAlBn0C,EAAM9O,OAC5C,EAEAurB,MAAO,SAAS7uB,EAAKmU,GACjB,MAAM/R,EAAEA,EAACC,EAAEA,EAACgR,OAAEA,EAAMN,UAAEA,EAAY,OAAUoB,EACtC7B,EAAM/N,KAAK+N,MAGjB,GAAIA,EAAMvS,KAAKqS,MAAMi0C,WAAatmD,KAAKgmB,OAAOigC,kBAAmB,CAE7D,MAAMQ,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACnDC,EAAeD,EAAQ7/C,KAAKgJ,MAAMhJ,KAAK8I,SAAW+2C,EAAQ1hD,SAEhE/E,KAAKqS,MAAMk0C,WAAWzkD,KAAK,CACvBO,EAAGA,EAAIiR,EACPhR,EAAGA,EAAIgR,EACPJ,QAAS,EACTC,KAAM,GAAqB,EAAhBvM,KAAK8I,SAChBovB,MAAuB,GAAhBl4B,KAAK8I,SAAiB,IAC7BnC,OAAQm5C,EACRlkD,SAA0B,GAAhBoE,KAAK8I,SAAgB,KAEnC1P,KAAKqS,MAAMi0C,WAAa/zC,CAC5B,CAGAvS,KAAK2mD,eAAe1mD,EAAK+S,EAC7B,EAEA2zC,eAAgB,SAAS1mD,EAAK+S,GAC1B/S,EAAIwC,OACJxC,EAAI+kD,UAAY,SAChB/kD,EAAIglD,aAAe,SAEnB,IAAK,IAAItJ,EAAI37C,KAAKqS,MAAMk0C,WAAWxhD,OAAS,EAAG42C,GAAK,EAAGA,IAAK,CACxD,MAAMzpB,EAAIlyB,KAAKqS,MAAMk0C,WAAW5K,GAGhCzpB,EAAE5vB,GAAKtC,KAAKgmB,OAAOkgC,aAAelzC,EAAY,OAC9Ckf,EAAE7vB,GAAK6vB,EAAE4M,OAAS9rB,EAAY,OAC9Bkf,EAAEhf,SAAWlT,KAAKgmB,OAAOmgC,YAAcnzC,EAAY,OACnDkf,EAAE1vB,UAAmBwQ,EAAY,MAAnB,GAGVkf,EAAEhf,SAAW,EACblT,KAAKqS,MAAMk0C,WAAWzI,OAAOnC,EAAG,IAKpC17C,EAAIwC,OACJxC,EAAIyC,UAAUwvB,EAAE7vB,EAAG6vB,EAAE5vB,GACrBrC,EAAI0C,OAAOuvB,EAAE1vB,SAAWoE,KAAKgE,GAAK,KAClC3K,EAAI4/C,YAA0B,GAAZ3tB,EAAEhf,QACpBjT,EAAI84C,UAAY,2BAChB94C,EAAI8kD,KAAO,GAAG7yB,EAAE3kB,UAAU2kB,EAAE/e,+BAC5BlT,EAAIklD,SAAS,IAAK,EAAG,GAGrBllD,EAAI2mD,WAAa,EACjB3mD,EAAI4mD,YAAc,2BAClB5mD,EAAIklD,SAAS,IAAK,EAAG,GACrBllD,EAAI4C,UACR,CAEA5C,EAAI4C,SACR,EAEAikD,eAAgB,WACZ,OAAO9mD,KAAKgmB,OAAO8/B,cACvB,EAEAiB,sBAAuB,WACnB,MAAO,CACHC,KAAMhnD,KAAKgmB,OAAOggC,cAClBiB,MAAOjnD,KAAKgmB,OAAO+/B,eAE3B,EAEAmB,iBAAkB,WACd,MAAO,CACHd,WAAYpmD,KAAKgmB,OAAOogC,WACxBC,YAAarmD,KAAKgmB,OAAOqgC,YAEjC,GC1GJc,GAAe,CACX76C,KAAM,iBACNK,MAAO,KACPC,YAAa,oCAEboZ,OAAQ,CACJohC,aAAc,GACdx4C,aAAc,IACdC,aAAc,IACdC,UAAW,GACXu4C,YAAa,IACbC,WAAY,IAGhBj1C,MAAO,CACHk1C,cAAe,EACfC,aAAc,EACdC,aAAc,EACdC,UAAW,EACXC,UAAU,GAGdjE,eAAgB,SAASrxC,GACrB,MAAyB,cAAlBA,EAAM9O,UAAgD,IAArB8O,EAAMu1C,UAClD,EAEA94B,MAAO,SAAS7uB,EAAKmU,GACjB,MAAMpB,UAAgBA,EAAY,OAAUoB,EACtC7B,EAAM/N,KAAK+N,MAGjBvS,KAAK6nD,aAAa70C,GAGdT,EAAMvS,KAAKqS,MAAMo1C,aAAeznD,KAAKgmB,OAAOpX,eAC5C5O,KAAK8nD,YACL9nD,KAAKqS,MAAMo1C,aAAel1C,GAG1BvS,KAAKqS,MAAMs1C,UACX3nD,KAAK+nD,WAAWx1C,EAAKS,EAE7B,EAEA60C,aAAc,SAAS70C,GAEnBhT,KAAKqS,MAAMm1C,aAAexnD,KAAKgmB,OAAOohC,aAGtC,MAAMY,EAAOhoD,KAAKqS,MAAMm1C,aAAexnD,KAAKqS,MAAMk1C,cAC9C3gD,KAAKib,IAAImmC,GAAQ,IACjBhoD,KAAKqS,MAAMk1C,eAAiBS,EAAOhoD,KAAKgmB,OAAOqhC,aAAer0C,EAAY,OAE1EhT,KAAKqS,MAAMk1C,cAAgBvnD,KAAKqS,MAAMm1C,YAE9C,EAEAM,UAAW,WACP9nD,KAAKqS,MAAMs1C,UAAW,EACtB3nD,KAAKqS,MAAM41C,cAAgBzjD,KAAK+N,MAChCvS,KAAKqS,MAAMq1C,YACf,EAEAK,WAAY,SAASx1C,EAAKS,GACtB,MACMnK,GADU0J,EAAMvS,KAAKqS,MAAM41C,eACNjoD,KAAKgmB,OAAOnX,aAEnChG,EAAW,IAEX7I,KAAKqS,MAAMq1C,WAAY,EAChB7+C,EAAW,IAElB7I,KAAKqS,MAAMq1C,UAAY,GAChB7+C,EAAW,IAKlB7I,KAAKqS,MAAMs1C,UAAW,GAHtB3nD,KAAKqS,MAAMq1C,UAAY,EAM/B,EAEAQ,gBAAiB,WACb,MAAO,CACHx1C,OAAQ,EAAI1S,KAAKqS,MAAMk1C,cACvB90C,OAAQ,EAA+B,GAA3BzS,KAAKqS,MAAMk1C,cACvB52B,QAAS3wB,KAAKqS,MAAMq1C,UAAY1nD,KAAKgmB,OAAOshC,WAEpD,EAEAa,cAAe,SAASloD,EAAKoC,EAAGC,EAAGgR,GAC/B,IAAKtT,KAAKqS,MAAMs1C,SAAU,OAE1B1nD,EAAIwC,OACJxC,EAAIw4C,YAAc,yBAClBx4C,EAAIy4C,UAAY,EAChBz4C,EAAImoD,YAAY,CAAC,EAAG,IAGpB,MAAMjpC,EAAQnf,KAAKqS,MAAMq1C,WAAa1nD,KAAKgmB,OAAOlX,UAAYlI,KAAKgE,GAAK,KAClEy9C,EAAOhmD,EAAIuE,KAAK0E,IAAI6T,GAAS7L,EAAS,EACtCg1C,EAAOhmD,EAAIsE,KAAKiE,IAAIsU,GAAS7L,EAAS,GAE5CrT,EAAI04C,YACJ14C,EAAIikD,OAAO7hD,EAAGC,GACdrC,EAAIkkD,OAAOkE,EAAMC,GACjBroD,EAAI44C,SAEJ54C,EAAI4C,SACR,GC9GJ0lD,GAAe,CACXj8C,KAAM,iBACNK,MAAO,MACPC,YAAa,wCAEboZ,OAAQ,CACJwiC,mBAAoB,IACpBC,iBAAkB,GAClBn+B,UAAW,GACXo+B,eAAgB,IAGpBr2C,MAAO,CACHs2C,cAAe,EACfC,cAAe,EACfC,aAAc,EACdC,aAAc,GAGlBpF,eAAgB,SAASrxC,GACrB,OAAOA,EAAM02C,cAAgB,GAAK12C,EAAM22C,UAC5C,EAEAl6B,MAAO,SAAS7uB,EAAKmU,GACjB,MAAM20C,cAAEA,EAAgB,EAAC/1C,UAAEA,EAAY,OAAUoB,EAGjD,GAAI20C,EAAgB/oD,KAAKgmB,OAAO0iC,eAAgB,CAC5C,MAAMO,GAAgBF,EAAgB/oD,KAAKgmB,OAAO0iC,iBAC7B,EAAI1oD,KAAKgmB,OAAO0iC,gBAErC1oD,KAAKqS,MAAMw2C,aAAe,GAAK7oD,KAAKgmB,OAAOwiC,mBAAqB,GAAKS,EACrEjpD,KAAKqS,MAAMy2C,aAAe,GAAK,EAAI9oD,KAAKgmB,OAAOyiC,kBAAoBQ,CACvE,MACIjpD,KAAKqS,MAAMw2C,aAAe,EAC1B7oD,KAAKqS,MAAMy2C,aAAe,EAI9B9oD,KAAKkpD,cAAcl2C,EACvB,EAEAk2C,cAAe,SAASl2C,GACpB,MAAMjF,EAAQ/N,KAAKgmB,OAAOsE,WAAatX,EAAY,OAG7Cm2C,EAAQnpD,KAAKqS,MAAMw2C,aAAe7oD,KAAKqS,MAAMs2C,cAC/C/hD,KAAKib,IAAIsnC,GAAS,OAClBnpD,KAAKqS,MAAMs2C,eAAiBQ,EAAQp7C,GAIxC,MAAMq7C,EAAQppD,KAAKqS,MAAMy2C,aAAe9oD,KAAKqS,MAAMu2C,cAC/ChiD,KAAKib,IAAIunC,GAAS,OAClBppD,KAAKqS,MAAMu2C,eAAiBQ,EAAQr7C,EAE5C,EAEAs7C,aAAc,WACV,MAAO,CACH52C,OAAQzS,KAAKqS,MAAMs2C,cACnBj2C,OAAQ1S,KAAKqS,MAAMu2C,cAE3B,EAEAU,mBAAoB,SAASrpD,EAAKoC,EAAGC,EAAGgR,EAAQrF,GAC5C,GAAIA,EAAYjO,KAAKgmB,OAAO0iC,eAAgB,OAE5CzoD,EAAIwC,OAGJ,MAAMtC,EAAmD,IAA1C8N,EAAYjO,KAAKgmB,OAAO0iC,gBACvCzoD,EAAIw4C,YAAc,uBAAuBt4C,KACzCF,EAAIy4C,UAAY,EAChBz4C,EAAImoD,YAAY,CAAC,EAAG,IAGpB,MAAMmB,EAAS,CAAC,EAAG,GAAI,IAAK,IAAK,IAAK,KACtC,IAAK,MAAMpqC,KAASoqC,EAAQ,CACxB,MAAMC,EAAMrqC,EAAQvY,KAAKgE,GAAK,IACxB6+C,EAAqB,EAATn2C,EACZo2C,EAAmB,IAATp2C,EAEhBrT,EAAI04C,YACJ14C,EAAIikD,OACA7hD,EAAIuE,KAAK0E,IAAIk+C,GAAOC,EACpBnnD,EAAIsE,KAAKiE,IAAI2+C,GAAOC,GAExBxpD,EAAIkkD,OACA9hD,EAAIuE,KAAK0E,IAAIk+C,GAAOE,EACpBpnD,EAAIsE,KAAKiE,IAAI2+C,GAAOE,GAExBzpD,EAAI44C,QACR,CAEA54C,EAAI4C,SACR,GCzFJ8mD,GAAe,CACXr9C,KAAM,cACNK,MAAO,KACPC,YAAa,sDAGboZ,OAAQ,CACJy/B,MAAO,EACPmE,YAAa,GACblR,UAAW,IACXmR,cAAe,KACfpG,WAAY,IACZqG,cAAe,EACfxlC,cAAe,EACfylC,YAAa,EACb72C,QAAS,GACT82C,cAAe,IACfC,cAAe,EACfnmD,MAAO,UACPgJ,UAAW,UACXo9C,aAAc,UACdC,UAAW,WAIf93C,MAAO,CACH7P,SAAU,EACVojC,WAAY,EACZnF,aAAc,EACdva,cAAe,EACfkkC,YAAY,EACZC,WAAY,KACZC,OAAQ,GACRC,OAAQ,IAQZ7G,eAAgB,SAASrxC,GACrB,OAA2B,IAApBA,EAAMm4C,YAA4C,IAAtBn4C,EAAMs3C,cAAiD,IAAzBt3C,EAAMo4C,cAC3E,EAKA7sC,WAAY,WAER5d,KAAKqS,MAAMi4C,OAAS,GACpB,IAAK,IAAI3O,EAAI,EAAGA,EAAI37C,KAAKgmB,OAAOy/B,MAAO9J,IAAK,CACxC,MAAM+O,EAAa,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI3qD,KAAKgmB,OAAO+jC,YAAaY,IACzCD,EAAW5oD,KAAK8E,KAAK8I,SAAW9I,KAAKgE,GAAK,GAE9C5K,KAAKqS,MAAMi4C,OAAOxoD,KAAK4oD,EAC3B,CAGA1qD,KAAKqS,MAAMk4C,OAAS,CAChB,CAAEloD,EAAG,GAAKC,GAAG,GAAMqrB,SAAU,IAC7B,CAAEtrB,GAAG,IAAOC,EAAG,GAAKqrB,SAAU,KAC9B,CAAEtrB,EAAG,EAAGC,EAAG,EAAGqrB,SAAU,IAEhC,EAOAmB,MAAO,SAAS7uB,EAAKmU,GACjB,MAAM/R,EAAEA,EAACC,EAAEA,EAACgR,OAAEA,EAAMN,UAAEA,EAAY,MAAK20C,SAAEA,GAAW,EAAKiD,WAAEA,EAAa,MAASx2C,EAGhD,IAA7BpU,KAAKqS,MAAMi4C,OAAOvlD,QAClB/E,KAAK4d,aAIT5d,KAAKqS,MAAM7P,UAAYxC,KAAKgmB,OAAO6jC,eAAiB72C,EAAY,OAChEhT,KAAKqS,MAAMuzB,YAAc5lC,KAAKgmB,OAAOy9B,YAAczwC,EAAY,QAG3D20C,GAAY3nD,KAAKqS,MAAM+3C,cACvBpqD,KAAKqS,MAAM+3C,YAAa,EACxBpqD,KAAKqS,MAAMouB,cAAgBzgC,KAAKgmB,OAAOgkC,cAAgBhqD,KAAKqS,MAAM6T,eAAiBlT,EAAY,OAG3FhT,KAAKqS,MAAMouB,aAAe,GAC1BzgC,KAAKqS,MAAMouB,aAAe,EAC1BzgC,KAAKqS,MAAM6T,eAAgB,GACpBlmB,KAAKqS,MAAMouB,cAAe,IACjCzgC,KAAKqS,MAAMouB,cAAe,EAC1BzgC,KAAKqS,MAAM6T,cAAgB,IAInCjmB,EAAIwC,OAGJzC,KAAK6qD,uBAAuB5qD,EAAKoC,EAAGC,EAAGgR,GAGnCtT,KAAKqS,MAAM+3C,YACXpqD,KAAK8qD,aAAa7qD,EAAKoC,EAAGC,EAAGgR,GAI7Bs3C,GACA5qD,KAAK+qD,eAAe9qD,EAAKoC,EAAGC,EAAGgR,EAAQs3C,GAG3C3qD,EAAI4C,SACR,EAKAgoD,uBAAwB,SAAS5qD,EAAKU,EAASC,EAAS8d,GACpD,MAAM8Q,EAA0C,GAAlC5oB,KAAKiE,IAAI7K,KAAKqS,MAAMuzB,YAAoB,EAEtD,IAAK,IAAI+f,EAAO,EAAGA,EAAO3lD,KAAKgmB,OAAOy/B,MAAOE,IAAQ,CACjD,MAAMqF,GAAcrF,EAAO,GAAK3lD,KAAKgmB,OAAO4jC,YAAcp6B,EAG1D,KAAIw7B,EAA0B,EAAbtsC,GAAjB,CAEAze,EAAI04C,YACJ14C,EAAIw4C,YAAcz4C,KAAKgmB,OAAOliB,MAC9B7D,EAAIy4C,UAAY14C,KAAKgmB,OAAO0yB,UAC5Bz4C,EAAI4/C,YAAc7/C,KAAKgmB,OAAO9S,SAAW,EAAIyyC,EAAO3lD,KAAKgmB,OAAOy/B,MAAQ,IAGxE,IAAK,IAAItmC,EAAQ,EAAGA,EAAkB,EAAVvY,KAAKgE,GAAQuU,GAAS,IAAM,CAEpD,IAAI8rC,GAAc,EAClB,IAAK,MAAMC,KAAclrD,KAAKqS,MAAMi4C,OAAO3E,IAAS,GAChD,GAAI/+C,KAAKib,IAAI1C,EAAQ+rC,GAAc,GAAK,CACpCD,GAAc,EACd,KACJ,CAGJ,GAAIA,EAAa,CACbhrD,EAAI44C,SACJ54C,EAAI04C,YACJ,QACJ,CAGA,IAAIwS,EAAkBH,EAClBI,EAAiBjsC,EAAQnf,KAAKqS,MAAM7P,SAExC,IAAK,MAAM6oD,KAASrrD,KAAKqS,MAAMk4C,OAAQ,CACnC,MAAMe,EAAU3qD,EAAU0qD,EAAMhpD,EAAIqc,EAC9B6sC,EAAU3qD,EAAUyqD,EAAM/oD,EAAIoc,EAC9B8sC,EAAS7qD,EAAUiG,KAAK0E,IAAI8/C,GAAkBD,EAC9CM,EAAS7qD,EAAUgG,KAAKiE,IAAIugD,GAAkBD,EAE9CpoC,EAAWnc,KAAKkb,KAClBlb,KAAKC,IAAI2kD,EAASF,EAAS,GAC3B1kD,KAAKC,IAAI4kD,EAASF,EAAS,IAI/BH,GADkBxkD,KAAK8kD,KAAK3oC,GAAyB,GAAbrE,IAAqB2sC,EAAM19B,SACrC,EAClC,CAIAw9B,GADavkD,KAAKiE,IAAIsU,EAAQnf,KAAKgmB,OAAO1B,eAAiBtkB,KAAKgmB,OAAO8jC,cAIvE,MAAM6B,EAAKhrD,EAAUiG,KAAK0E,IAAI8/C,GAAkBD,EAC1CS,EAAKhrD,EAAUgG,KAAKiE,IAAIugD,GAAkBD,EAElC,IAAVhsC,EACAlf,EAAIikD,OAAOyH,EAAIC,GAEf3rD,EAAIkkD,OAAOwH,EAAIC,EAEvB,CAEA3rD,EAAI44C,QA1D6B,CA2DrC,CACJ,EAKAiS,aAAc,SAAS7qD,EAAKoC,EAAGC,EAAGgR,GAC9B,MAAMqtB,EAAQr+B,EAAItC,KAAKqS,MAAMouB,aAAentB,EAGtC2lC,EAAWh5C,EAAImkD,qBAAqB/hD,EAAIiR,EAAQqtB,EAAOt+B,EAAIiR,EAAQqtB,GACzEsY,EAASE,aAAa,EAAG,wBACzBF,EAASE,aAAa,GAAKn5C,KAAKgmB,OAAOlZ,WACvCmsC,EAASE,aAAa,EAAG,wBAEzBl5C,EAAIw4C,YAAcQ,EAClBh5C,EAAIy4C,UAAY14C,KAAKgmB,OAAOikC,cAC5BhqD,EAAI4/C,YAAc,GAClB5/C,EAAI2mD,WAAa,GACjB3mD,EAAI4mD,YAAc7mD,KAAKgmB,OAAOlZ,UAE9B7M,EAAI04C,YACJ14C,EAAIikD,OAAO7hD,EAAIiR,EAAQqtB,GACvB1gC,EAAIkkD,OAAO9hD,EAAIiR,EAAQqtB,GACvB1gC,EAAI44C,SAEJ54C,EAAI2mD,WAAa,CACrB,EAKAmE,eAAgB,SAAS9qD,EAAKoC,EAAGC,EAAGgR,EAAQ0kC,GACxC,MAAMl0C,EAAmB,YAAXk0C,EAAuBh4C,KAAKgmB,OAAOkkC,aAAelqD,KAAKgmB,OAAOmkC,UACtE0B,EAAkB,YAAX7T,EAAuB,kBAAoB,kBAExD/3C,EAAI84C,UAAYj1C,EAChB7D,EAAI8kD,KAAO,QAAiB,IAATzxC,gBACnBrT,EAAI+kD,UAAY,SAChB/kD,EAAIglD,aAAe,SACnBhlD,EAAI4/C,YAAc,GAElB5/C,EAAIklD,SAAS0G,EAAMxpD,EAAGC,EAAa,IAATgR,GAG1BrT,EAAIw4C,YAAc30C,EAClB7D,EAAIy4C,UAAY,EAChBz4C,EAAI4/C,YAAc,GAClB5/C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAGC,EAAY,IAATgR,EAAc,EAAa,EAAV1M,KAAKgE,IACpC3K,EAAI44C,QACR,EAKAiP,UAAW,WACP9nD,KAAKqS,MAAM+3C,YAAa,EACxBpqD,KAAKqS,MAAMouB,cAAe,EAC1BzgC,KAAKqS,MAAM6T,cAAgB,EAC3BlmB,KAAKqS,MAAMg4C,WAAa,IAC5B,EAKAyB,aAAc,SAASC,GAAU,GAC7B/rD,KAAKqS,MAAM+3C,YAAa,EACxBpqD,KAAKqS,MAAMg4C,WAAa0B,EAAU,UAAY,OAG9C9pD,WAAW,KACPjC,KAAKqS,MAAMg4C,WAAa,MACzB,IACP,EAKAhuC,MAAO,WACHrc,KAAKqS,MAAM7P,SAAW,EACtBxC,KAAKqS,MAAMuzB,WAAa,EACxB5lC,KAAKqS,MAAMouB,aAAe,EAC1BzgC,KAAKqS,MAAM6T,cAAgB,EAC3BlmB,KAAKqS,MAAM+3C,YAAa,EACxBpqD,KAAKqS,MAAMg4C,WAAa,IAC5B,GCzQJ,MAAM2B,GAAiB,IAAI3oD,IAMpB,SAAS4oD,GAAeC,GACtBA,EAAa5/C,MAGlB0/C,GAAelnD,IAAIonD,EAAa5/C,KAAM4/C,EAC1C,CAOO,SAASC,GAAUC,GACtB,OAAOJ,GAAennD,IAAIunD,IAAe,IAC7C,CASO,SAASC,GAAYD,EAAYnsD,EAAKmU,GACzC,MAAMk4C,EAASH,GAAUC,GACzB,QAAKE,KAIDA,EAAOx9B,QACPw9B,EAAOx9B,MAAM7uB,EAAKmU,IACX,EAIf,CAQO,SAASm4C,GAAeH,EAAY/5C,GACvC,MAAMi6C,EAASH,GAAUC,GACzB,SAAKE,IAAWA,EAAO5I,iBAGhB4I,EAAO5I,eAAerxC,EACjC,CAWA45C,GAAe9I,IACf8I,GAAe1H,IACf0H,GAAe7G,IACf6G,GAAepG,IACfoG,GAAe9E,IACf8E,GAAe1D,IACf0D,GAAetC,ICyKf,MAAMr8B,GAAkB,IAjPxB,MACI,WAAAxtB,GAEIE,KAAKwsD,cAAgB,CACjBC,MAAS,EACTC,KAAQ,EACRC,QAAW,EACX3d,OAAU,GACVD,UAAa,IACblK,QAAW,KACX,iBAAkB,IAClB,cAAe,GAInB7kC,KAAKyhD,MAAQ,IAAIp+C,IACjBrD,KAAK4sD,QAAU,EAGf5sD,KAAK6sD,cACT,CAKA,YAAAA,GACI,MACMC,EAAkB,CACpB,CAAEv/B,SAAS,EAAMC,MAAO,GACxB,CAAED,SAAS,EAAM8G,KAAM,GACvB,CAAE9G,SAAS,EAAMC,MAAO,IACxB,CAAED,SAAS,EAAMC,MAAO,IALT,CAAC,GAAI,GAAI,IAAK,IAAK,IAAK,KAQhC9rB,QAAQomC,IACfglB,EAAgBprD,QAAQ8M,IACpB,MAAM6F,EAAM,GAAGyzB,KAAOilB,KAAKC,UAAUx+C,KAC/BgkC,EAAKxyC,KAAKitD,eAAez+C,EAAUs5B,GACzC9nC,KAAKyhD,MAAM38C,IAAIuP,EAAKm+B,MAGhC,CAQA,cAAAya,CAAez+C,EAAUs5B,EAAM,MAC3B,MAAMolB,EAAaplB,GAAOkG,GAAalG,KAAO,IAG9C,GAAwB,iBAAbt5B,EAEP,OAAOA,EAGX,GAAwB,iBAAbA,GAAyBA,EAAS+e,QAAS,CAClD,MAAMghB,EAAe,IAAQ2e,EAE7B,QAAuB7yC,IAAnB7L,EAASgf,MAET,OAAOhf,EAASgf,MAAQ+gB,EACrB,QAAsBl0B,IAAlB7L,EAAS6lB,KAAoB,CAEpC,MAAM4Z,EAAgBD,GAAaC,eAAiB,CAAC,EAAG,GACxD,OAAOz/B,EAAS6lB,KAAO4Z,EAAc,GAAKM,CAC9C,CAAO,QAA6Bl0B,IAAzB7L,EAAS0I,YAGhB,OADclX,KAAKwsD,cAAch+C,EAAS0I,cAAgB,GAC3Cq3B,CAEvB,CAGA,OAAO,GACX,CAQA,SAAA4e,CAAU3a,EAAI1K,EAAM,MAChB,MAEMta,EAAQglB,GADO,KADF1K,GAAOkG,GAAalG,KAAO,MAK9C,IAAIslB,EAAc,UACdC,EAAczmD,KAAKib,IAAI2L,EAAQ,GAEnC,IAAK,MAAO8/B,EAAM9+C,KAAazI,OAAO4F,QAAQ3L,KAAKwsD,eAAgB,CAC/D,MAAMxE,EAAOphD,KAAKib,IAAI2L,EAAQhf,GAC1Bw5C,EAAOqF,IACPA,EAAcrF,EACdoF,EAAcE,EAEtB,CAEA,MAAO,CACH//B,SAAS,EACTC,MAAOA,EACP6G,KAAM7G,EAAQ,EACd+/B,mBAAoBH,EACpBI,MAAOH,EAAc,IAE7B,CAQA,eAAAI,CAAgBr1B,EAAQuX,GACpB,IAAKvX,GAA4B,IAAlBA,EAAOrzB,OAClB,MAAO,CAAC,CAAEuH,KAAM,OAAQkhB,MAAOmiB,EAAYnkC,MAAO,EAAGC,IAAK,IAI9D,MAAMiiD,EAAat1B,EAAOu1B,OAAO,CAACC,EAAK5+B,IAAU4+B,GAAO5+B,EAAMxB,OAAS,GAAI,GACrE7O,EAAcgxB,EAAa+d,EAEjC,IAAIG,EAAkB,EACtB,OAAOz1B,EAAOlxB,IAAI8nB,IACd,MAAMxB,GAASwB,EAAMxB,OAAS,GAAK7O,EAC7BnT,EAAQqiD,EAAkBle,EAChCke,GAAmBrgC,EACnB,MAAM/hB,EAAMoiD,EAAkBle,EAE9B,MAAO,CACHrjC,KAAM0iB,EAAM1iB,KACZkhB,MAAOA,EACPhiB,MAAOA,EACPC,IAAKA,EACL+C,SAAUxO,KAAKitD,eAAe,CAAE1/B,SAAS,EAAMC,YAG3D,CAMA,eAAAsgC,GACI,MAAM7Z,EAAWjG,GAAakC,cAC9B,OAAO+D,EAAWA,EAAS5F,aAAe,CAC9C,CAMA,cAAA0f,GACI,MAAM9Z,EAAWjG,GAAakC,cAC9B,OAAO+D,EAAWA,EAAS3F,YAAc,CAC7C,CAOA,kBAAA0f,CAAmBC,EAAW,QAC1B,MAAMha,EAAWjG,GAAakC,cAC9B,IAAK+D,EAAU,OAAO,IAEtB,OAAQga,GACJ,IAAK,OAYL,QACI,OAAOha,EAASnD,WAXpB,IAAK,MACD,MAAMod,EAAaja,EAAShG,cAAc,GAE1C,OADmBigB,EAAaja,EAAS5D,WACrB4D,EAAS1F,aACjC,IAAK,SAED,MAAM4f,EAAe,EAGrB,OADqBA,GADFla,EAASvD,KAAO,GACeyd,GAC5BD,EAAaja,EAAS1F,aAIxD,CAQA,QAAA6f,CAAS5b,EAAIt7B,EAAc,UACvB,MACMq3B,EAAe,KADTP,GAAalG,KAAO,KAG1BumB,GADcruD,KAAKwsD,cAAct1C,IAAgB,GACxBq3B,EAI/B,OADiB3nC,KAAKgB,MAAM4qC,EAAK6b,GACfA,CACtB,CAQA,YAAAC,CAAaL,EAAW,OAAQhc,EAAY,IACxC,MAAMsc,EAAavuD,KAAKguD,mBAAmBC,GACrCha,EAAWjG,GAAakC,cAE9B,QAAK+D,IAGEsa,EAAatc,GACZgC,EAAS1F,aAAeggB,EAActc,EAClD,CAOA,kBAAAuc,CAAmBC,EAAY,KAC3B,MACMC,GADe1gB,GAAalG,KAAO,KACP2mB,EAElC,MAAO,CACH1gD,MAAO2gD,EACPC,OAAQ/nD,KAAKkB,IAAI,EAAGlB,KAAKiB,IAAI,GAAK6mD,IAClCxgD,WAAYwgD,EAAa,GAAM,IAAMA,EAAa,IAAM,GAAM,EAC9DzgD,UAAWygD,EAAa,IAAM,IAAMA,EAAa,GAAM,GAAM,EAErE,GC3PG,MAAME,GACT,WAAA9uD,CAAYgc,GACR9b,KAAK8b,SAAWA,EAChB9b,KAAK6uD,eAAiB,IAAIxrD,IAC1BrD,KAAKgY,aAAe,GACpBhY,KAAK2e,YAAc7C,EAAS6C,aAAe,EAG3C3e,KAAK8uD,kBAAoB,CACrBzhC,OAAQ,CAAEgmB,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC9Cob,MAAO,CAAE6jB,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC7Cgc,MAAO,CAAEijB,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC7C0gB,KAAM,CAAEue,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC5C2c,IAAK,CAAEsiB,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC3C8nB,KAAM,CAAEmX,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC5C00B,OAAQ,CAAEuK,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC9Cq1B,SAAU,CAAE4J,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAChD01B,MAAO,CAAEuJ,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC7C0qB,MAAO,CAAEuU,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC7CgiB,QAAS,CAAEid,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC/C+1B,KAAM,CAAEkJ,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC5CkwB,QAAS,CAAE+O,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC/C6c,QAAS,CAAEoiB,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC/CwpB,QAAS,CAAEyV,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC/C6qB,KAAM,CAAEoU,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC5CutB,KAAM,CAAE0R,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC5CqzB,QAAS,CAAE4L,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC/C6jB,MAAO,CAAEob,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC7C26C,UAAW,CAAE1b,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IACjD46C,KAAM,CAAE3b,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC5C8yB,OAAQ,CAAEmM,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC9C66C,SAAU,CAAE5b,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAChD86C,UAAW,CAAE7b,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IACjD+6C,WAAY,CAAE9b,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAClDg7C,gBAAiB,CAAE/b,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IACvDuhB,KAAM,CAAE0d,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC5CggB,KAAM,CAAEif,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC5CkgB,MAAO,CAAE+e,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC7C6B,QAAS,CAAEo9B,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC/CyP,QAAS,CAAEwvB,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC/C03B,OAAQ,CAAEuH,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC9C23B,OAAQ,CAAEsH,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC9C43B,MAAO,CAAEqH,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC7C63B,KAAM,CAAEoH,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC5C83B,MAAO,CAAEmH,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC7C+3B,QAAS,CAAEkH,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC/Ckd,MAAO,CAAE+hB,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC7Ci7C,KAAM,CAAEhc,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAC5Ck7C,WAAY,CAAEjc,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAClDm7C,WAAY,CAAElc,QAAQ,EAAOxqC,SAAU,EAAGuL,OAAQ,IAE1D,CAMA,YAAAo7C,CAAaC,GAGT,MAAMjsD,EAAU6oC,GAAWojB,GAI3B,GADuB,CAAC,SAAU,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,WAClEjqD,SAASiqD,IAAgBzvD,KAAK8b,SAAS4zC,eAAgB,CAEtE,MAUMzhD,EAVc,CAChB67B,MAAS,EACTnU,KAAQ,EACRvF,MAAS,GACT/C,OAAU,GACVmC,MAAS,GACTmgC,KAAQ,EACR76B,KAAQ,GACRwP,QAAW,GAEemrB,IAAgB,GAC9CzvD,KAAK8b,SAAS4zC,eAAeE,2BAA2B3hD,EAE5D,CAIA,IAAImG,EAEAA,EADApU,KAAK8b,SAAS+zC,kBACL7vD,KAAK8b,SAAS+zC,kBAAkB5N,QACrCwN,EACAzvD,KAAK8b,SAASzJ,MAAM9O,QACpBvD,KAAK8b,SAASu/B,kBAIT73C,GAASwiB,QAAU,CACxBhY,UAAW,GACXkD,UAAW,EACX1C,SAAU,IACVkhB,YAAa,GACbC,WAAY,GACZ4B,UAAW,EACXxO,SAAU,GACV5D,MAAO,GACP4pB,YAAa,IACbgB,SAAU,EACVC,UAAW,IACXv3B,OAAQ,IACRC,OAAQ,GACRwM,WAAY,EACZD,WAAY,GACZtN,cAAe,SACfm+C,aAAc,EACdC,WAAY,EACZl6B,aAAc,GACdC,cAAe,IACfF,WAAY,IACZpgB,OAAO,EACP9J,OAAQ,OACRi3C,QAAS,IAKjB,IAAIn0C,EAAW,IACXhL,GAAWA,EAAQwiB,SACfxiB,EAAQwiB,OAAOsH,gBAEf9e,EAAW8e,GAAgB2/B,eAAezpD,EAAQwiB,OAAOsH,iBAClD9pB,EAAQwiB,OAAOxX,WAEtBA,EAAWhL,EAAQwiB,OAAOxX,WAKlC,MAAMwhD,EAAOhwD,KAAK8uD,kBAAkBW,GAChCO,IACAA,EAAK3c,QAAS,EACd2c,EAAK33C,UAAY+B,YAAY7H,MAC7By9C,EAAKnnD,SAAW,EAChBmnD,EAAK57C,OAASA,EACd47C,EAAKxhD,SAAWA,EAGI,UAAhBihD,EACAO,EAAKt/B,iBAAcrW,EACI,UAAhBo1C,GACPO,EAAKrhC,YAAStU,EACd21C,EAAKthC,YAASrU,EACd21C,EAAKC,uBAAoB51C,GACF,SAAhBo1C,EACPO,EAAKE,mBAAgB71C,EACE,YAAhBo1C,IACPO,EAAKG,mBAAgB91C,GAIjC,CAMA,sBAAA+1C,GACI,MAAM79C,EAAM6H,YAAY7H,MAClB89C,EAAY,CACd1/B,QAAS,EACTC,QAAS,EACTnvB,MAAO,EACPe,SAAU,EACV2nC,KAAM,GAIV,IAAK,MAAOslB,EAAaO,KAASjqD,OAAO4F,QAAQ3L,KAAK8uD,mBAAoB,CACtE,IAAKkB,EAAK3c,OAAQ,SAElB,MAAMt4B,EAAUxI,EAAMy9C,EAAK33C,UAErB7J,EAAWwhD,EAAKxhD,WAAawhD,EAAK57C,OAAS47C,EAAK57C,OAAO5F,SAAW,KACxEwhD,EAAKnnD,SAAWjC,KAAKkB,IAAIiT,EAAUvM,EAAU,GAG7C,MAAMwM,EAAgBhb,KAAKuL,YAAYykD,EAAKnnD,SAAUmnD,EAAK57C,OAAO1I,QAGlE,IAAIqyC,EAAmB,CAAA,EACvB,OAAQ0R,GACJ,IAAK,SACD1R,EAAmB/9C,KAAKswD,YAAYN,EAAMh1C,GAC1C,MACJ,IAAK,QACD+iC,EAAmB/9C,KAAKuwD,WAAWP,EAAMh1C,GACzC,MACJ,IAAK,QACD+iC,EAAmB/9C,KAAKwwD,WAAWR,EAAMh1C,GACzC,MACJ,IAAK,OACD+iC,EAAmB/9C,KAAKywD,UAAUT,EAAMh1C,GACxC,MACJ,IAAK,MACD+iC,EAAmB/9C,KAAK0wD,SAASV,EAAMh1C,GACvC,MACJ,IAAK,OACD+iC,EAAmB/9C,KAAK2wD,UAAUX,EAAMh1C,GACxC,MACJ,IAAK,SACD+iC,EAAmB/9C,KAAK4wD,YAAYZ,EAAMh1C,GAC1C,MACJ,IAAK,WACD+iC,EAAmB/9C,KAAK6wD,cAAcb,EAAMh1C,GAC5C,MACJ,IAAK,QACD+iC,EAAmB/9C,KAAK8wD,WAAWd,EAAMh1C,GACzC,MACJ,IAAK,QACD+iC,EAAmB/9C,KAAK+wD,WAAWf,EAAMh1C,GACzC,MACJ,IAAK,UACD+iC,EAAmB/9C,KAAKgxD,aAAahB,EAAMh1C,GAC3C,MACJ,IAAK,OACD+iC,EAAmB/9C,KAAKixD,UAAUjB,EAAMh1C,GACxC,MACJ,IAAK,UACD+iC,EAAmB/9C,KAAKkxD,aAAalB,EAAMh1C,GAC3C,MACJ,IAAK,UACD+iC,EAAmB/9C,KAAKmxD,aAAanB,EAAMh1C,GAC3C,MACJ,IAAK,UACD+iC,EAAmB/9C,KAAKoxD,aAAapB,EAAMh1C,GAC3C,MACJ,IAAK,OACD+iC,EAAmB/9C,KAAKqxD,UAAUrB,EAAMh1C,GACxC,MACJ,IAAK,OACD+iC,EAAmB/9C,KAAKsxD,UAAUtB,EAAMh1C,GACxC,MACJ,IAAK,UACD+iC,EAAmB/9C,KAAKuxD,aAAavB,EAAMh1C,GAC3C,MACJ,IAAK,QACD+iC,EAAmB/9C,KAAKwxD,WAAWxB,EAAMh1C,GACzC,MACJ,IAAK,YACD+iC,EAAmB/9C,KAAKyxD,eAAezB,EAAMh1C,GAC7C,MACJ,IAAK,OACD+iC,EAAmB/9C,KAAK0xD,UAAU1B,EAAMh1C,GACxC,MACJ,IAAK,SACD+iC,EAAmB/9C,KAAK2xD,YAAY3B,EAAMh1C,GAC1C,MACJ,IAAK,WACD+iC,EAAmB/9C,KAAK4xD,cAAc5B,EAAMh1C,GAC5C,MACJ,IAAK,YACD+iC,EAAmB/9C,KAAK6xD,eAAe7B,EAAMh1C,GAC7C,MACJ,IAAK,aACD+iC,EAAmB/9C,KAAK8xD,gBAAgB9B,EAAMh1C,GAC9C,MACJ,IAAK,kBACD+iC,EAAmB/9C,KAAK+xD,qBAAqB/B,EAAMh1C,GACnD,MACJ,IAAK,OACD+iC,EAAmB/9C,KAAKgyD,UAAUhC,EAAMh1C,GACxC,MACJ,IAAK,OACD+iC,EAAmB/9C,KAAKiyD,UAAUjC,EAAMh1C,GACxC,MACJ,IAAK,QACD+iC,EAAmB/9C,KAAKkyD,WAAWlC,EAAMh1C,GACzC,MACJ,IAAK,OACD+iC,EAAmB/9C,KAAKmyD,UAAUnC,EAAMh1C,GACxC,MACJ,IAAK,aACD+iC,EAAmB/9C,KAAKoyD,gBAAgBpC,EAAMh1C,GAC9C,MACJ,IAAK,aACD+iC,EAAmB/9C,KAAKqyD,gBAAgBrC,EAAMh1C,GAC9C,MACJ,IAAK,UACD+iC,EAAmB/9C,KAAKsyD,aAAatC,EAAMh1C,GAC3C,MACJ,IAAK,UACD+iC,EAAmB/9C,KAAKuyD,aAAavC,EAAMh1C,GAC3C,MACJ,IAAK,SACD+iC,EAAmB/9C,KAAKwyD,YAAYxC,EAAMh1C,GAC1C,MACJ,IAAK,SACD+iC,EAAmB/9C,KAAKyyD,YAAYzC,EAAMh1C,GAC1C,MACJ,IAAK,QACD+iC,EAAmB/9C,KAAK0yD,WAAW1C,EAAMh1C,GACzC,MACJ,IAAK,OACD+iC,EAAmB/9C,KAAK2yD,UAAU3C,EAAMh1C,GACxC,MACJ,IAAK,QACD+iC,EAAmB/9C,KAAK4yD,WAAW5C,EAAMh1C,GACzC,MACJ,IAAK,UACD+iC,EAAmB/9C,KAAK6yD,aAAa7C,EAAMh1C,GAC3C,MACJ,IAAK,QACD+iC,EAAmB/9C,KAAK8yD,WAAW9C,EAAMh1C,GAKjDq1C,EAAU1/B,SAAWotB,EAAiBptB,SAAW,EACjD0/B,EAAUz/B,SAAWmtB,EAAiBntB,SAAW,EACjDy/B,EAAU5uD,OAASs8C,EAAiBt8C,OAAS,EAC7C4uD,EAAU7tD,UAAYu7C,EAAiBv7C,UAAY,EAEnD6tD,EAAUlmB,KAAOvjC,KAAKiB,IAAIwoD,EAAUlmB,KAAM4T,EAAiB5T,MAAQ,GAG/D4T,EAAiBgV,YACjB1C,EAAU0C,UAAYhV,EAAiBgV,WAIvChV,EAAiBe,gBACjBuR,EAAUvR,cAAgBf,EAAiBe,cAC3CuR,EAAUpR,aAAelB,EAAiBkB,aAC1CoR,EAAUrR,YAAcjB,EAAiBiB,aAIzCjB,EAAiBmB,gBACjBmR,EAAUnR,cAAgBnB,EAAiBmB,cAC3CmR,EAAUpR,aAAelB,EAAiBkB,aAC1CoR,EAAUlR,YAAcpB,EAAiBoB,aAIzCpB,EAAiB75B,gBACjBmsC,EAAUnsC,cAAgB65B,EAAiB75B,cAC3CmsC,EAAUpR,aAAelB,EAAiBkB,aAC1CoR,EAAUhR,YAActB,EAAiBsB,YACzCgR,EAAU/Q,YAAcvB,EAAiBuB,aAIzCvB,EAAiBwB,aACjB8Q,EAAU9Q,WAAaxB,EAAiBwB,WACxC8Q,EAAUpR,aAAelB,EAAiBkB,aAC1CoR,EAAU2C,SAAWjV,EAAiBiV,SACtC3C,EAAU7Q,aAAezB,EAAiByB,aAC1C6Q,EAAU4C,aAAelV,EAAiBkV,cAI1CjD,EAAKnnD,UAAY,IACjBmnD,EAAK3c,QAAS,EACd2c,EAAKnnD,SAAW,EAChBmnD,EAAK33C,UAAY,EAEG,UAAhBo3C,IACAO,EAAK+C,UAAY,KACjB/C,EAAKkD,cAAgB,MAGjC,CAEA,OAAO7C,CACX,CAMA,MAAA11C,CAAO3H,GAEH,OAAOhT,KAAKowD,wBAChB,CAKA,eAAA+C,GAEIptD,OAAO0G,KAAKzM,KAAK8uD,mBAAmBptD,QAAQ2S,IACxCrU,KAAK8uD,kBAAkBz6C,GAAKg/B,QAAS,EACrCrzC,KAAK8uD,kBAAkBz6C,GAAKgE,UAAY,EACxCrY,KAAK8uD,kBAAkBz6C,GAAKxL,SAAW,EACvC7I,KAAK8uD,kBAAkBz6C,GAAKD,OAAS,OAEzCpU,KAAK6uD,eAAe3sD,QACpBlC,KAAKgY,aAAe,EACxB,CAMA,iBAAAo7C,GAEI,MAAMC,EAAmB,CAAC,UAAW,OAAQ,OAAQ,QAGrD,IAAK,MAAM5D,KAAe4D,EAAkB,CACxC,MAAMrD,EAAOhwD,KAAK8uD,kBAAkBW,GACpC,GAAIO,GAAQA,EAAK3c,OAAQ,CAErB,MAAM7vC,EAAU6oC,GAAWojB,GAe3B,MAPoB,CAChBnjD,KAAMmjD,EACN7hC,eAPmBpqB,GAASwiB,QAAQ4H,gBAAkB,CACtDtoB,KAAMmqD,EACN9hC,SAAUqiC,EAAK57C,QAAQuZ,UAAY,GAMnC9kB,SAAUmnD,EAAKnnD,UAAY,EAC3BuL,OAAQ47C,EAAK57C,OAIrB,CACJ,CAGA,IAAK,MAAOq7C,EAAaO,KAASjqD,OAAO4F,QAAQ3L,KAAK8uD,mBAClD,GAAIkB,EAAK3c,OAAQ,CAEb,MAAM7vC,EAAU6oC,GAAWojB,GAOrB6D,EAAc,CAChBhnD,KAAMmjD,EACN7hC,eANmBpqB,GAASwiB,QAAQ4H,gBAClBoiC,EAAK57C,QAAQwZ,gBACb,CAAEtoB,KAAMmqD,EAAa9hC,SAAUqiC,EAAK57C,QAAQuZ,UAAY,GAK1E9kB,SAAUmnD,EAAKnnD,UAAY,EAC3BuL,OAAQ47C,EAAK57C,QAQjB,MAJoB,YAAhBq7C,QAAkDp1C,IAArB21C,EAAKx9C,cAClC8gD,EAAY9gD,YAAcw9C,EAAKx9C,aAG5B8gD,CACX,CAEJ,OAAO,IACX,CAKA,WAAA/nD,CAAY1C,EAAU6C,GAClB,OAAQA,GACJ,IAAK,SAUL,QACI,OAAO7C,EATX,IAAK,OACD,OAAOA,EAAWA,EACtB,IAAK,QACD,OAAOA,EAAWA,EAAWA,EACjC,IAAK,OACD,OAAOjC,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GACzC,IAAK,OACD,OAAO/B,EAAWA,GAAY,IAAMA,EAAW,KAI3D,CAGA,WAAAynD,CAAYN,EAAMnnD,GAId,MAAO,CAAE+nB,SAHMhqB,KAAKib,IAAIjb,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAKolD,EAAK57C,OAAOlD,YAAc8+C,EAAK57C,OAAOpG,UAAYhO,KAAK2e,aAE1FqxC,EAAK57C,OAAOuuC,SAAWqN,EAAK57C,OAAOuuC,QAAQn9C,SAAS,WAAa,GAAM,GAE9F,CAEA,UAAA+qD,CAAWP,EAAMnnD,GACb,MAAM2mB,EAAQ5oB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAKolD,EAAK57C,OAAOlD,WACxD,MAAO,CACHzP,MAAO,EAAI+tB,EAAQwgC,EAAK57C,OAAOsb,YAC/Bya,KAAM,EAAI3a,EAAQwgC,EAAK57C,OAAOub,WAEtC,CAEA,UAAA6gC,CAAWR,EAAMnnD,GAERmnD,EAAKt/B,cACNs/B,EAAKt/B,YAAc9pB,KAAK8I,SAAW9I,KAAKgE,GAAK,GAEjD,MAAM4K,EAAQw6C,EAAK57C,OAAOoB,MAAS,EAAI3M,EAAY,EAC7CunB,EAAQxpB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAKolD,EAAK57C,OAAOlD,WAAa8+C,EAAK57C,OAAOpG,UAAYwH,EAAQxV,KAAK2e,YAC1G,MAAO,CACHgS,QAASP,EAAQxpB,KAAK0E,IAAI0kD,EAAKt/B,aAC/BE,QAASR,EAAQxpB,KAAKiE,IAAImlD,EAAKt/B,aAEvC,CAEA,SAAA+/B,CAAUT,EAAMnnD,GAGZ,MAAO,CACHrG,SAFmBoE,KAAKkB,IAAe,KAAXe,EAAiB,GAElBmnD,EAAK57C,OAAOmd,UAAY,IACnD9vB,MAAO,EAAImF,KAAKiE,IAAIhC,EAAWjC,KAAKgE,IAAMolD,EAAK57C,OAAOsb,YAE9D,CAEA,QAAAghC,CAASV,EAAMnnD,GAEX,MAAO,CAAE+nB,QADGhqB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAKolD,EAAK57C,OAAOlD,WAAa8+C,EAAK57C,OAAOpG,UAAYhO,KAAK2e,YAEpG,CAEA,SAAAgyC,CAAUX,EAAMnnD,GACPmnD,EAAKE,gBAENF,EAAKE,cAAgBtpD,KAAK8I,SAAW,IAAM,EAAK,GAEpD,MAAMwB,EAAY8+C,EAAK57C,OAAOlD,WAAa,EACrCiO,GAAS6wC,EAAK57C,OAAO+K,OAAS,IAAMvY,KAAKgE,GAAK,IAC9CyyB,EAAez2B,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAKsG,GAAa8+C,EAAKE,cAGrE,MAAO,CACH1tD,SAAU66B,EAAele,EAEzB1M,OAAQ,EAA6B,GAAzB7L,KAAKib,IAAIwb,GACrB3qB,OAAQ,EAA6B,IAAzB9L,KAAKib,IAAIwb,GAErB1M,QAAwB,GAAf0M,EACTzM,SAAkC,EAAzBhqB,KAAKib,IAAIwb,GAE1B,CAEA,WAAAuzB,CAAYZ,EAAMnnD,GAGd,MAAM0qD,EAAc3sD,KAAKiB,IAAImoD,EAAK57C,OAAOsb,aAAesgC,EAAK57C,OAAO20B,aAAe,IAAK,GAClF/tB,EAAgBpU,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAEpD,MAAO,CACHnJ,MAFU,GAAK8xD,EAAc,GAAKv4C,EAGlCmvB,KAAM,EAAIvjC,KAAKib,IAAImuC,EAAK57C,OAAOub,YAAc,IAAO3U,EAE5D,CAEA,aAAA61C,CAAcb,EAAMnnD,GAEhB,MAAM0qD,EAAcvD,EAAK57C,OAAOsb,aAAesgC,EAAK57C,OAAO20B,aAAe,GACpE/tB,EAAgBpU,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAEpD,MAAO,CACHnJ,MAFU,GAAK8xD,EAAc,GAAKv4C,EAGlCmvB,KAAM,GAAK6lB,EAAK57C,OAAOub,aAAc,IAAQ3U,EAErD,CAEA,UAAA81C,CAAWd,EAAMnnD,GACb,MAAMihC,EAAQljC,KAAKiE,IAAIhC,EAAWjC,KAAKgE,IAGvC,MAAO,CACHu/B,KAAM,IAHO6lB,EAAK57C,OAAO21B,UAAY,GAGf,GAAKD,EAC3BroC,MAAO,IAHOuuD,EAAK57C,OAAO41B,WAAa,KAGf,GAAKF,EAErC,CAEA,UAAAinB,CAAWf,EAAMnnD,GAETA,GAAY,MAASmnD,EAAKC,oBAE1BD,EAAKC,kBAAoBrpD,KAAK8I,SAAW9I,KAAKgE,GAAK,GAGvD,MAAMmY,EAAWitC,EAAK57C,OAAO2O,SAAWnc,KAAKiE,IAAIhC,EAAWjC,KAAKgE,IAAM5K,KAAK2e,YACtEQ,EAAQ6wC,EAAKC,mBAAqB,EAOxC,OAJIpnD,GAAY,MACZmnD,EAAKC,kBAAoB,MAGtB,CACHt/B,QAAS/pB,KAAK0E,IAAI6T,GAAS4D,EAC3B6N,QAAShqB,KAAKiE,IAAIsU,GAAS4D,EAEnC,CAEA,YAAAiuC,CAAahB,EAAMnnD,GACf,MAAMutB,EAAUxvB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAKolD,EAAK57C,OAAOlD,WAI1D,MAAO,CAAEzP,MAAO,IADEuuD,EAAK57C,OAAO3B,OAASu9C,EAAK57C,OAAO1B,QAAU,EAC7B,GAAK0jB,EACzC,CAEA,SAAA66B,CAAUjB,EAAMnnD,GAIZ,MAAMgK,EAAYjM,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAKolD,EAAK57C,OAAOlD,WAE5D,MAAO,CACHzP,MAAO,EAAIoR,GAAam9C,EAAK57C,OAAOsb,aAAe,IACnDya,KAAM,EAAIt3B,GAAam9C,EAAK57C,OAAOub,YAAc,IAEzD,CAEA,UAAAmhC,CAAWd,EAAMnnD,GAGRmnD,EAAK+C,YACN/C,EAAK+C,UAAY,CACbx6B,YAAa,EACbi7B,YAAa,EACblQ,UAAW,IAKnB0M,EAAK+C,UAAUS,YAAc3qD,EAAWmnD,EAAK+C,UAAUzP,UACvD0M,EAAK+C,UAAUx6B,YAAc3xB,KAAKiB,IAAI,GAAIgB,EAAW,IAAOmnD,EAAK+C,UAAUzP,WAG3E,MAAMmQ,EAAgB7sD,KAAKiB,IAAI,EAAG,EAAe,GAAXgB,GAUtC,OAPAmnD,EAAKkD,cAAgB,CACjB36B,YAAay3B,EAAK+C,UAAUx6B,YAC5Bi7B,YAAaxD,EAAK+C,UAAUS,YAC5BvlD,UAAWwlD,GAIR,CACHtpB,KAAM,EAAoB,GAAhBspB,EACVV,UAAW/C,EAAKkD,cAExB,CAEA,YAAAhC,CAAalB,EAAMnnD,GAEf,MAAMoF,EAAY+hD,EAAK57C,QAAQnG,WAAa,EACtC6V,EAAeksC,EAAK57C,QAAQrG,OAAS,EAGrCo8B,EAAO,EAAIvjC,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAIkZ,GAAgB7V,EAAY,GAGzEylD,EAA2C,EAAnC9sD,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAAS5K,KAAK2e,YAGpDrM,EAAoB,KAAb9N,KAAK+N,MAKlB,MAAO,CACHoe,QAAS+iC,EACTvpB,KAAMA,EACN8U,aAAchxC,GALkD,GAAlDrH,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAKkZ,EAAe,GAAW,IAMtEq7B,YAAa7sC,EACb4sC,eAAe,EAEvB,CAEA,YAAAiS,CAAanB,EAAMnnD,GAEf,IAAKmnD,EAAKG,cAAe,CACrBH,EAAKG,cAAgB,CACjB9tD,EAAmB,EAAhBuE,KAAK8I,SAAe,EACvBpN,EAAmB,EAAhBsE,KAAK8I,SAAe,GAG3B,MAAMikD,EAAM/sD,KAAKkb,KAAKkuC,EAAKG,cAAc9tD,GAAK,EAAI2tD,EAAKG,cAAc7tD,GAAK,GAC1E0tD,EAAKG,cAAc9tD,GAAKsxD,EACxB3D,EAAKG,cAAc7tD,GAAKqxD,CAC5B,CACA,MAAMC,EAAYhtD,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAIolD,EAAK57C,OAAOlD,WAAa8+C,EAAK57C,OAAOpG,UAAYhO,KAAK2e,YAC1G,MAAO,CACHgS,QAASijC,EAAY5D,EAAKG,cAAc9tD,EACxCuuB,QAASgjC,EAAY5D,EAAKG,cAAc7tD,EAEhD,CAEA,SAAAgvD,CAAUtB,EAAMnnD,GAEZ,MAAMgrD,GAAO7D,EAAK57C,OAAOpG,WAAa,IAAMhO,KAAK2e,YAI3ClW,EAAII,EAAWjC,KAAKgE,GAAK,EAIzBkpD,EAAYltD,KAAKiE,IAAIpC,GAAKorD,EAI1Bx3B,GAAcz1B,KAAKiE,IAAIhC,EAAWjC,KAAKgE,IAAMipD,EAAM,GAazD,MAAO,CACHljC,QAASmjC,EACTljC,QAdchqB,KAAKiE,IAAQ,EAAJpC,GAASorD,EAAM,GAAMx3B,EAe5C75B,SAXuB,EAAdoE,KAAKiE,IAAIpC,GAYlBhH,MATe,EAAuC,IAAnCmF,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAUjDu/B,KAPc,EAAmC,GAA/BvjC,KAAKiE,IAAIhC,EAAWjC,KAAKgE,IASnD,CAEA,YAAA2mD,CAAavB,EAAMnnD,GAEf,MAAMuL,EAAS47C,EAAK57C,OACd2/C,EAAc3/C,EAAOwZ,gBAAgBmmC,aAAe,GAG1D,IAAIvhD,EACJ,GAAI3J,EAAW,GAEX2J,EAAc5L,KAAKiE,IAAKhC,EAAW,GAAOjC,KAAKgE,GAAK,QACjD,GAAI/B,EAAW,GAAMkrD,EAExBvhD,EAAc,OACX,GAAI3J,EAAW,GAAK,CAEvB,MAAMmrD,GAAkBnrD,EAAW,GAAMkrD,IAAgB,GAAMA,GAC/DvhD,EAAc5L,KAAK0E,IAAI0oD,EAAiBptD,KAAKgE,GAAK,EACtD,MAEI4H,EAAc,EAIlB,MACM/Q,EAAQ,EAAI+Q,GADE4B,EAAOsb,aAAe,KAKpCya,EAAO,EAAI33B,GADE4B,EAAOub,YAAc,IAMxC,OAFAqgC,EAAKx9C,YAAcA,EAEZ,CACH/Q,MAAOA,EACP0oC,KAAMA,EACN33B,YAAaA,EAErB,CAEA,UAAAg/C,CAAWxB,EAAMnnD,GAEb,MAAMovB,EAAQrxB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAC5C,MAAO,CACHnJ,MAAO,EAAY,GAARw2B,EACXz1B,SAAkB,GAARy1B,EAElB,CAEA,cAAAw5B,CAAezB,EAAMnnD,GAEjB,IAAI6J,EAAS,EAgBb,OAbIA,EAFA7J,EAAW,GAEF,EAAKA,EAAW,GAClBA,EAAW,GAET,EACFA,EAAW,IAERA,EAAW,IAAO,GAGnB,EAIN,CACHshC,KAAMz3B,EAEd,CAEA,SAAAg/C,CAAU1B,EAAMnnD,GAEZ,IAAKmnD,EAAKlwC,QAAS,CACf,MAAM0I,EAAYwnC,EAAK57C,OAAOzC,cACxBoR,EAAsC,GAA3BitC,EAAK57C,OAAO07C,aAAoB9vD,KAAK2e,YAEtD,OAAO6J,GACH,IAAK,OACDwnC,EAAKlwC,SAAWiD,EAChBitC,EAAKjwC,QAAU,EACf,MACJ,IAAK,QACDiwC,EAAKlwC,QAAUiD,EACfitC,EAAKjwC,QAAU,EACf,MACJ,IAAK,KACDiwC,EAAKlwC,QAAU,EACfkwC,EAAKjwC,SAAWgD,EAChB,MACJ,IAAK,OACDitC,EAAKlwC,QAAU,EACfkwC,EAAKjwC,QAAUgD,EACf,MACJ,QACI,MAAM5D,EAAQvY,KAAK8I,SAAW9I,KAAKgE,GAAK,EACxColD,EAAKlwC,QAAUlZ,KAAK0E,IAAI6T,GAAS4D,EACjCitC,EAAKjwC,QAAUnZ,KAAKiE,IAAIsU,GAAS4D,EAE7C,CAGA,IAAIkxC,EAAeprD,EAYnB,OATIorD,EAFAprD,EAAW,GAEIA,EAAW,GACnBA,EAAW,GAEH,EAGA,GAAKA,EAAW,IAAO,GAGnC,CACH8nB,QAASq/B,EAAKlwC,QAAUm0C,EACxBrjC,QAASo/B,EAAKjwC,QAAUk0C,EAEhC,CAEA,WAAAtC,CAAY3B,EAAMnnD,GAEd,MAAMmjB,EAASplB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAKolD,EAAK57C,OAAO27C,YAC3CnpD,KAAK8kD,IAAgB,GAAX7iD,GAAgB,GAAK7I,KAAK2e,YAClD,MAAO,CACHiS,QAAS5E,EACTvqB,MAAO,EAAa,IAATuqB,EAEnB,CAEA,aAAA4lC,CAAc5B,EAAMnnD,GAEhB,MAAO,CACHpH,MAFgB,GAAKuuD,EAAK57C,OAAOsb,YAAc,GAAK9oB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAI1F,CAEA,cAAAinD,CAAe7B,EAAMnnD,GAEjB,MAAO,CACHpH,MAFgB,GAAK,EAAIuuD,EAAK57C,OAAOsb,aAAe9oB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAI1F,CAEA,eAAAknD,CAAgB9B,EAAMnnD,GAElB,MAAO,CACHpH,MAAOuuD,EAAK57C,OAAOsb,YAE3B,CAEA,oBAAAqiC,CAAqB/B,EAAMnnD,GAEvB,MAAO,CACHpH,MAAOuuD,EAAK57C,OAAOsb,YAE3B,CAEA,SAAAsiC,CAAUhC,EAAMnnD,GACZ,IAAIqrD,EAAU,EACVzyD,EAAQ,EAEZ,GAAIoH,EAAW,GAAK,CAEhB,MAAMyuB,EAAiBzuB,EAAW,GAClCpH,EAAQ,GAAK,EAAIuuD,EAAK57C,OAAOyhB,cAAgByB,CACjD,MAAO,GAAIzuB,EAAW,GAAK,CAEvB,MAAM2uB,GAAgB3uB,EAAW,IAAO,GAClC4uB,EAAY7wB,KAAKiE,IAAI2sB,EAAe5wB,KAAKgE,IAC/CspD,GAAWlE,EAAK57C,OAAOwhB,WAAa6B,EAAYz3B,KAAK2e,YACrDld,EAAQuuD,EAAK57C,OAAOyhB,cACZm6B,EAAK57C,OAAO0hB,cAAgBk6B,EAAK57C,OAAOyhB,cAAgB4B,CACpE,KAAO,CAEH,MAAMI,GAAgBhvB,EAAW,IAAO,GACxCpH,EAAQuuD,EAAK57C,OAAO0hB,eACZk6B,EAAK57C,OAAO0hB,cAAgB,GAAK+B,CAC7C,CAEA,MAAO,CACHjH,QAASsjC,EACTzyD,MAAOA,EAEf,CAEA,SAAAwwD,CAAUjC,EAAMnnD,GAEZ,MAAMqJ,GAAiB89C,EAAK57C,QAAQpG,WAAa,IAAMhO,KAAK2e,YACtDw1C,EAAgBnE,EAAK57C,QAAQlD,WAAa,EAWhD,MAAO,CACHyf,QATU/pB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAIupD,GAAiBjiD,EAU7D0e,QAPShqB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAIupD,GAAiBjiD,EAAgB,GAQ5E1P,SALgE,EAAnDoE,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAIupD,GAOvD,CAEA,SAAAhC,CAAUnC,EAAMnnD,GAKZ,MAAMurD,EAAgBpE,EAAK57C,QAAQnG,WAAa,EAG1ComD,EAAoB,GAAXxrD,EAAgB7I,KAAK2e,YAAcy1C,EAG5CE,EAA2C,EAAnC1tD,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAAS5K,KAAK2e,YAQ1D,OALI3e,KAAK8b,UAAY9b,KAAK8b,SAASk4B,gBAE/Bh0C,KAAK8b,SAASk4B,eAAe4J,mBAAmB,UAAW/0C,EAAW,GAAKA,EAAW,GAGnF,CACH8nB,QAAS2jC,EACT1jC,QAASyjC,EACTE,eAAgB,UAExB,CAEA,UAAArC,CAAWlC,EAAMnnD,GAEb,MAAMkJ,GAAkBi+C,EAAK57C,QAAQpG,WAAa,IAAMhO,KAAK2e,YACvDY,EAAaywC,EAAK57C,QAAQrG,OAAS,EAGnCse,EAASzlB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAI2U,GAAcxN,EAQ/D,MAAO,CACH4e,QANW/pB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAI2U,GAAcxN,EAAiB,GAO5E6e,QAASvE,EACT5qB,MALe,EAAoD,IAAhDmF,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAI2U,GAO7D,CAEA,YAAA6xC,CAAapB,EAAMnnD,GAGf,MAAO,CAEH8nB,QAAS,EACTC,QAAS,EAEjB,CAEA,SAAAygC,CAAUrB,EAAMnnD,GAEZ,MAAMmF,GAAagiD,EAAK57C,QAAQpG,WAAa,IAAMhO,KAAK2e,YAClDlW,EAAII,EAAWjC,KAAKgE,GAAK,EAM/B,MAAO,CACH+lB,QAJM/pB,KAAKiE,IAAIpC,GAAKuF,EAKpB4iB,QAJMhqB,KAAKiE,IAAQ,EAAJpC,GAASuF,EAAY,GAM5C,CAEA,YAAAskD,CAAatC,EAAMnnD,GAGf,MAAMoF,EAAY+hD,EAAK57C,QAAQnG,WAAa,EAKtCqE,EAAoB,KAAb9N,KAAK+N,MAOlB,MAAO,CACH0sC,aAAchxC,EACdk8B,KANiD,GAAnCvjC,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAAW,GAOvDo0C,YAAa1sC,EACbwsC,eAAe,EAEvB,CAEA,YAAAyT,CAAavC,EAAMnnD,GAIf,MAAMyJ,EAAoB,KAAb9N,KAAK+N,MACZtE,EAAY+hD,EAAK57C,QAAQnG,WAAa,GAGtC0zB,EAAO/6B,KAAKiE,IAAW,EAAPyH,EAAWzJ,EAAWjC,KAAKgE,GAAK,GAQtD,MAAO,CACH+lB,QAAS,EACTC,QAAS,EACTuZ,KARe,EAAIxI,EAAO1zB,EAS1BxM,MANgB,EAAW,IAAPkgC,EAQpBsd,aAAc,EAAW,GAAPtd,EAClB0d,YAAa/sC,EACbgtC,YAAa3d,EACbzd,eAAe,EAEvB,CAEA,WAAAsuC,CAAYxC,EAAMnnD,GAEd,MAAMmF,GAAagiD,EAAK57C,QAAQpG,WAAa,IAAMhO,KAAK2e,iBAG3BtE,IAAzB21C,EAAKwE,kBACLxE,EAAKwE,gBAAkB5tD,KAAK8I,SAAW,GAAM,MAEjD,MAAM8Y,EAAYwnC,EAAKwE,gBAGvB,IAAIC,EAAU,EACVjyD,EAAW,EAEf,GAAIqG,EAAW,IAAM,CAEjB,MAAMmmB,EAAQnmB,EAAW,IACzB4rD,EAAUzmD,EAAYwa,EAAYwG,EAClCxsB,EAAW,EAAIgmB,EAAYwG,CAC/B,MAAO,GAAInmB,EAAW,GAAK,CAEvB,MAAMmmB,GAASnmB,EAAW,KAAQ,IAClC4rD,EAAUzmD,EAAYwa,GAAa,EAAI,EAAIwG,GAC3CxsB,EAAW,EAAIgmB,GAAa,EAAI,EAAIwG,EACxC,MAAO,GAAInmB,EAAW,IAAM,CAExB,MAAMmmB,GAASnmB,EAAW,IAAO,IACjC4rD,EAAUzmD,GAAawa,GAAa,EAAI,EAAIwG,GAC5CxsB,EAAW,GAAKgmB,GAAa,EAAI,EAAIwG,EACzC,KAAO,CAEH,MAAMA,GAASnmB,EAAW,KAAQ,IAClC4rD,EAAUzmD,EAAYwa,GAAa,EAAIwG,GACvCxsB,EAAW,EAAIgmB,GAAa,EAAIwG,EACpC,CAKA,MAAO,CACH2B,QAAS8jC,EACT7jC,SAJYhqB,KAAKib,IAAIjb,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,IAAMoD,EAAY,IAKrExL,SAAUA,EAElB,CAEA,WAAAiwD,CAAYzC,EAAMnnD,GAEd,MAAMmF,GAAagiD,EAAK57C,QAAQpG,WAAa,IAAMhO,KAAK2e,YAgBxD,MAAO,CACHgS,QAdU/pB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAAKoD,EACnCpH,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAI,IAAOoD,EAAY,GAc/D4iB,QAVYhqB,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAI,IAAOoD,EAAY,IAWjEvM,MARU,EAA6C,IAAzCmF,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAI,IAShDpI,SANsD,EAAzCoE,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,EAAI,IAQvD,CAEA,UAAA8nD,CAAW1C,EAAMnnD,QAIewR,IAAxB21C,EAAK0E,iBAEL1E,EAAK0E,eAAiB9tD,KAAK8I,SAAW,IAAM,EAAK,GAGrD,MAAM8Y,OAAuCnO,IAA3B21C,EAAK57C,QAAQoU,UAA0BwnC,EAAK57C,OAAOoU,UAAYwnC,EAAK0E,eAChF3xC,GAAYitC,EAAK57C,QAAQ2O,UAAY,IAAM/iB,KAAK2e,YAMtD,IAAIg2C,EACAC,EA0BJ,OAxBI/rD,EAAW,IAEX8rD,EAAiB,EAAI/tD,KAAKC,IAAI,EAAKgC,EAAW,GAAM,GACpD+rD,EAAgBD,GACT9rD,EAAW,IAElB8rD,EAAiB,EACjBC,EAAgB,IAGhBD,EAAiB/tD,KAAKC,IAAI,GAAMgC,EAAW,IAAO,GAAM,GACxD+rD,EAAgBD,GAab,CACHhkC,QAVYnI,EAAYzF,EAAW4xC,EAWnC/jC,SAVahqB,KAAKib,IAAe,IAAXkB,EAAkB4xC,GAWxClzD,MARU,EAAI,IAAOmzD,EASrBpyD,SANyB,EAAZgmB,EAAgBosC,EAQrC,CAEA,SAAAjC,CAAU3C,EAAMnnD,GAEZ,MAAMsW,EAAQ6wC,EAAK57C,QAAQ+K,OAAS,GAC9B01C,EAAO7E,EAAK57C,QAAQygD,MAAQ,EAG5B75C,EAAgBpU,KAAKiE,IAAIhC,EAAWjC,KAAKgE,IAGzCpI,EAAW2c,EAAQ01C,EAAO75C,EAGhC,MAAO,CACH2V,QAHmB,GAAPkkC,EAAY70D,KAAK2e,YAAc3D,EAI3CxY,SAAUA,EAElB,CAEA,UAAAowD,CAAW5C,EAAMnnD,GAEb,MAAM2f,EAAYwnC,EAAK57C,QAAQoU,YAAc5hB,KAAKgE,GAAG,EAC/CmY,GAAYitC,EAAK57C,QAAQ2O,UAAY,IAAM/iB,KAAK2e,YAGtD,IAAIg2C,EAqBJ,OAlBIA,EAFA9rD,EAAW,GAEMA,EAAW,GACrBA,EAAW,GAED,EAGA,GAAKA,EAAW,IAAO,GAI5C8rD,EAAiBA,EAAiBA,GAAkB,EAAI,EAAIA,GAQrD,CACHhkC,QAPY/pB,KAAK0E,IAAIkd,GAAazF,EAAW4xC,EAQ7C/jC,QAPYhqB,KAAKiE,IAAI2d,GAAazF,EAAW4xC,EAQ7ClzD,MALU,EAAqB,IAAjBkzD,EAOtB,CAEA,YAAA9B,CAAa7C,EAAMnnD,GAEf,MAAMmF,GAAagiD,EAAK57C,QAAQpG,WAAa,IAAMhO,KAAK2e,YAIlDm2C,EAAYjsD,GAHAmnD,EAAK57C,QAAQlD,WAAa,GAGF,EAC1C,IAAI6jD,EAYJ,OATIA,EAFAD,EAAW,GAEUA,EAAW,IAAxB9mD,GAGAA,GAAa,GAAK8mD,EAAW,IAAO,IAMzC,CACHlkC,QAASmkC,EACTvyD,SAJasyD,EAAW,IAAM,EAAK,EAM3C,CAEA,UAAAhC,CAAW9C,EAAMnnD,GAEb,MAAMyK,GAAU08C,EAAK57C,QAAQd,QAAU,IAAMtT,KAAK2e,YAC5C5Q,EAAQiiD,EAAK57C,QAAQrG,OAAS,EAG9BoR,EAAQtW,EAAWjC,KAAKgE,GAAK,EAAImD,EAIvC,MAAO,CACH4iB,QAJY/pB,KAAK0E,IAAI6T,GAAS7L,EAK9Bsd,QAJYhqB,KAAKiE,IAAIsU,GAAS7L,EAMtC,CAGA,WAAA0hD,GAAgBh1D,KAAKwvD,aAAa,SAAW,CAC7C,UAAAyF,GAAej1D,KAAKwvD,aAAa,QAAU,CAC3C,UAAA0F,GAAel1D,KAAKwvD,aAAa,QAAU,CAC3C,SAAA2F,GAAcn1D,KAAKwvD,aAAa,OAAS,CACzC,QAAA4F,GAAap1D,KAAKwvD,aAAa,MAAQ,CACvC,SAAA6F,GAAcr1D,KAAKwvD,aAAa,OAAS,CACzC,WAAA8F,GAAgBt1D,KAAKwvD,aAAa,SAAW,CAC7C,aAAA+F,GAAkBv1D,KAAKwvD,aAAa,WAAa,CACjD,UAAAgG,GAAex1D,KAAKwvD,aAAa,QAAU,CAC3C,UAAAiG,GAAez1D,KAAKwvD,aAAa,QAAU,CAC3C,YAAAkG,GAAiB11D,KAAKwvD,aAAa,UAAY,CAC/C,SAAAnlB,GAAcrqC,KAAKwvD,aAAa,OAAS,CACzC,YAAAmG,GAAiB31D,KAAKwvD,aAAa,UAAY,CAC/C,YAAAoG,GAAiB51D,KAAKwvD,aAAa,UAAY,CAC/C,YAAAqG,GAAiB71D,KAAKwvD,aAAa,UAAY,CAC/C,SAAAsG,GAAc91D,KAAKwvD,aAAa,OAAS,CACzC,SAAAuG,GAAc/1D,KAAKwvD,aAAa,OAAS,CACzC,YAAAwG,GAAiBh2D,KAAKwvD,aAAa,UAAY,CAC/C,UAAAyG,GAAej2D,KAAKwvD,aAAa,QAAU,CAC3C,cAAA0G,GAAmBl2D,KAAKwvD,aAAa,YAAc,CACnD,SAAA2G,GAAcn2D,KAAKwvD,aAAa,OAAS,CACzC,WAAA4G,GAAgBp2D,KAAKwvD,aAAa,SAAW,CAC7C,aAAA6G,GAAkBr2D,KAAKwvD,aAAa,WAAa,CACjD,cAAA8G,GAAmBt2D,KAAKwvD,aAAa,YAAc,CACnD,eAAA+G,GAAoBv2D,KAAKwvD,aAAa,aAAe,CACrD,oBAAAgH,GAAyBx2D,KAAKwvD,aAAa,kBAAoB,CAC/D,SAAAiH,GAAcz2D,KAAKwvD,aAAa,OAAS,CACzC,SAAAkH,GAAc12D,KAAKwvD,aAAa,OAAS,CACzC,UAAAmH,GAAe32D,KAAKwvD,aAAa,QAAU,CAC3C,SAAAoH,GAAc52D,KAAKwvD,aAAa,OAAS,CACzC,eAAAqH,GAAoB72D,KAAKwvD,aAAa,aAAe,CACrD,eAAAsH,GAAoB92D,KAAKwvD,aAAa,aAAe,CACrD,YAAAuH,GAAiB/2D,KAAKwvD,aAAa,UAAY,CAC/C,YAAAwH,GAAiBh3D,KAAKwvD,aAAa,UAAY,CAC/C,WAAAyH,GAAgBj3D,KAAKwvD,aAAa,SAAW,CAC7C,WAAA0H,GAAgBl3D,KAAKwvD,aAAa,SAAW,CAC7C,UAAA2H,GAAen3D,KAAKwvD,aAAa,QAAU,CAC3C,SAAA4H,GAAcp3D,KAAKwvD,aAAa,OAAS,CACzC,UAAA6H,GAAer3D,KAAKwvD,aAAa,QAAU,CAC3C,YAAA8H,GAAiBt3D,KAAKwvD,aAAa,UAAY,CAC/C,UAAA+H,GAAev3D,KAAKwvD,aAAa,QAAU,CAE3C,eAAA4C,CAAgBpC,EAAMnnD,GAElB,MAAM2uD,EAA2C,GAAnC5wD,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAAU5K,KAAK2e,YAG3D,MAAO,CACHgS,QAAS6mC,EACT5mC,QAJuD,IAA7ChqB,KAAKib,IAAIjb,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,IAAW5K,KAAK2e,YAKjEnc,SAAkB,GAARg1D,EACV9kD,OAAQ,EAAiD,IAA7C9L,KAAKib,IAAIjb,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,IAE3D,CAEA,eAAAynD,CAAgBrC,EAAMnnD,GAElB,MAAM4uD,EAA0C,GAAnC7wD,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAAU5K,KAAK2e,YAG1D,MAAO,CACHgS,QAAS8mC,EACT7mC,QAJsD,IAA7ChqB,KAAKib,IAAIjb,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,IAAW5K,KAAK2e,YAKhEnc,SAAiB,GAAPi1D,EACV/kD,OAAQ,EAAiD,IAA7C9L,KAAKib,IAAIjb,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,IAE3D,CAEA,eAAAisD,GAAoB72D,KAAKwvD,aAAa,aAAe,CACrD,eAAAsH,GAAoB92D,KAAKwvD,aAAa,aAAe,ECp0ClD,MAAMkI,GACT,WAAA53D,GACIE,KAAK23D,gBAAkB,IAC3B,CAMA,uBAAAC,CAAwB/tD,EAAWguD,GAE/B,OAAOA,CACX,CAQA,qBAAAC,CAAsB3yB,EAAWt7B,GAE7B,GAAIA,GAAkC,iBAAdA,QAA+CwQ,IAArBxQ,EAAU0D,OAAsB,CAC9E,MAAMA,EAAS1D,EAAU0D,OACnBwqD,EAAgBluD,EAAUvE,MAAQ,QAExC,GAAsB,UAAlByyD,GAAwC,IAAXxqD,EAC7B,OAAO43B,EAIX,MAAM6yB,EAAiBh4D,KAAK4J,yBAAyBu7B,EAAW4yB,GAG1DjvD,EAAO9I,KAAK8G,SAASq+B,GACrBp8B,EAAO/I,KAAK8G,SAASkxD,GAErB3wD,EAAIT,KAAKgB,MAAMkB,EAAKzB,GAAK0B,EAAK1B,EAAIyB,EAAKzB,GAAKkG,GAC5ChG,EAAIX,KAAKgB,MAAMkB,EAAKvB,GAAKwB,EAAKxB,EAAIuB,EAAKvB,GAAKgG,GAC5C/F,EAAIZ,KAAKgB,MAAMkB,EAAKtB,GAAKuB,EAAKvB,EAAIsB,EAAKtB,GAAK+F,GAElD,OAAOvN,KAAKyH,SAASJ,EAAGE,EAAGC,EAC/B,CAGA,OAAKqC,GAA2B,UAAdA,EAEX7J,KAAK4J,yBAAyBu7B,EAAWt7B,GAFAs7B,CAGpD,CAOA,QAAAr+B,CAASC,GACL,MAAMixC,EAAS,4CAA4CC,KAAKlxC,GAChE,OAAOixC,EAAS,CACZ3wC,EAAGjG,SAAS42C,EAAO,GAAI,IACvBzwC,EAAGnG,SAAS42C,EAAO,GAAI,IACvBxwC,EAAGpG,SAAS42C,EAAO,GAAI,KACvB,IACR,CAKA,QAAAhwC,CAASX,EAAGE,EAAGC,GACXH,GAAK,IACLE,GAAK,IACLC,GAAK,IAEL,MAAMK,EAAMjB,KAAKiB,IAAIR,EAAGE,EAAGC,GACrBM,EAAMlB,KAAKkB,IAAIT,EAAGE,EAAGC,GAC3B,IAAIS,EAAGC,EAAGC,GAAKN,EAAMC,GAAO,EAE5B,GAAID,IAAQC,EACRG,EAAIC,EAAI,MACL,CACH,MAAME,EAAIP,EAAMC,EAGhB,OAFAI,EAAIC,EAAI,GAAMC,GAAK,EAAIP,EAAMC,GAAOM,GAAKP,EAAMC,GAEvCD,GACJ,KAAKR,EAAGY,IAAMV,EAAIC,GAAKY,GAAKb,EAAIC,EAAI,EAAI,IAAM,EAAG,MACjD,KAAKD,EAAGU,IAAMT,EAAIH,GAAKe,EAAI,GAAK,EAAG,MACnC,KAAKZ,EAAGS,IAAMZ,EAAIE,GAAKa,EAAI,GAAK,EAExC,CAEA,MAAO,CAAEH,EAAO,IAAJA,EAASC,EAAO,IAAJA,EAASC,EAAO,IAAJA,EACxC,CAKA,QAAA8vD,CAAShwD,EAAGC,EAAGC,GAKX,IAAId,EAAGE,EAAGC,EAEV,GANAS,GAAQ,IAERE,GAAQ,IAIE,IALVD,GAAQ,KAMJb,EAAIE,EAAIC,EAAIW,MACT,CACH,MAAMG,EAAU,CAACC,EAAGC,EAAGC,KACfA,EAAI,IAAGA,GAAK,GACZA,EAAI,IAAGA,GAAK,GACZA,EAAI,EAAE,EAAUF,EAAc,GAATC,EAAID,GAASE,EAClCA,EAAI,GAAYD,EAChBC,EAAI,EAAE,EAAUF,GAAKC,EAAID,IAAM,EAAE,EAAIE,GAAK,EACvCF,GAGLC,EAAIL,EAAI,GAAMA,GAAK,EAAID,GAAKC,EAAID,EAAIC,EAAID,EACxCK,EAAI,EAAIJ,EAAIK,EAClBnB,EAAIiB,EAAQC,EAAGC,EAAGP,EAAI,EAAE,GACxBV,EAAIe,EAAQC,EAAGC,EAAGP,GAClBT,EAAIc,EAAQC,EAAGC,EAAGP,EAAI,EAAE,EAC5B,CAEA,MAAMP,EAAQrF,IACV,MAAM0E,EAAMH,KAAKgB,MAAU,IAAJvF,GAAS0F,SAAS,IACzC,OAAsB,IAAfhB,EAAIhC,OAAe,IAAMgC,EAAMA,GAG1C,MAAO,IAAIW,EAAML,KAAKK,EAAMH,KAAKG,EAAMF,IAC3C,CAKA,wBAAAoC,CAAyBu7B,EAAWt7B,GAChC,MAAMR,EAAMrJ,KAAK8G,SAASq+B,GACpBn7B,EAAMhK,KAAKgI,SAASqB,EAAIhC,EAAGgC,EAAI9B,EAAG8B,EAAI7B,GAiBtCiT,EAdsB,CAExBlR,QAAW,IACXC,UAAa,IACb0uD,UAAa,IACbC,OAAU,IAEV1uD,QAAW,KAEX2uD,OAAU,GACV1uD,MAAS,GACTC,QAAW,IAGsBE,IAAc,EAGnD,OAFAG,EAAI9B,EAAItB,KAAKkB,IAAI,IAAKkC,EAAI9B,EAAIuS,GAEvBza,KAAKi4D,SAASjuD,EAAI/B,EAAG+B,EAAI9B,EAAG8B,EAAI7B,EAC3C,CAKA,QAAAV,CAASJ,EAAGE,EAAGC,GACX,MAAME,EAAQrF,IACV,MAAM0E,EAAMH,KAAKgB,MAAMvF,GAAG0F,SAAS,IACnC,OAAsB,IAAfhB,EAAIhC,OAAe,IAAMgC,EAAMA,GAE1C,MAAO,IAAIW,EAAML,KAAKK,EAAMH,KAAKG,EAAMF,IAC3C,CAKA,oBAAA6wD,CAAqBC,EAAaC,EAAiB/pD,EAAW,MAEtDxO,KAAKw4D,eAAiBF,GACtBt4D,KAAKy4D,mBAAqBF,IAI9Bv4D,KAAK23D,gBAAkB,CACnBtkB,QAAQ,EACRqlB,UAAW14D,KAAKw4D,cAAgB,UAChCG,QAASL,EACTM,cAAe54D,KAAKy4D,kBAAoB,EACxCI,YAAaN,EACb1vD,SAAU,EACVwP,UAAW+B,YAAY7H,MACvB/D,SAAUA,GAElB,CAKA,qBAAAsqD,CAAsB9lD,GAClB,IAAKhT,KAAK23D,kBAAoB33D,KAAK23D,gBAAgBtkB,OAAQ,OAAO,KAElE,MAAMt4B,EAAUX,YAAY7H,MAAQvS,KAAK23D,gBAAgBt/C,UACnDxP,EAAWjC,KAAKkB,IAAIiT,EAAU/a,KAAK23D,gBAAgBnpD,SAAU,GAG7DuqD,EAAQ,EAAInyD,KAAKC,IAAI,EAAIgC,EAAU,GAGnC2D,EAAOxM,KAAK8G,SAAS9G,KAAK23D,gBAAgBe,WAC1C77C,EAAK7c,KAAK8G,SAAS9G,KAAK23D,gBAAgBgB,SAExCtxD,EAAIT,KAAKgB,MAAM4E,EAAKnF,GAAKwV,EAAGxV,EAAImF,EAAKnF,GAAK0xD,GAC1CxxD,EAAIX,KAAKgB,MAAM4E,EAAKjF,GAAKsV,EAAGtV,EAAIiF,EAAKjF,GAAKwxD,GAC1CvxD,EAAIZ,KAAKgB,MAAM4E,EAAKhF,GAAKqV,EAAGrV,EAAIgF,EAAKhF,GAAKuxD,GAE1CP,EAAex4D,KAAKyH,SAASJ,EAAGE,EAAGC,GACnCixD,EAAmBz4D,KAAK23D,gBAAgBiB,eACzC54D,KAAK23D,gBAAgBkB,YAAc74D,KAAK23D,gBAAgBiB,eAAiBG,EAW9E,OARA/4D,KAAKw4D,aAAeA,EACpBx4D,KAAKy4D,iBAAmBA,EAGpB5vD,GAAY,IACZ7I,KAAK23D,gBAAgBtkB,QAAS,GAG3B,CACHvvC,MAAO00D,EACPvqD,UAAWwqD,EAEnB,ECnOG,MAAMO,GACT,WAAAl5D,CAAYgc,GACR9b,KAAK8b,SAAWA,EAChB9b,KAAKC,IAAM6b,EAAS7b,IACpBD,KAAKD,OAAS+b,EAAS/b,OAIvBC,KAAKi5D,iBAAkB,EACvBj5D,KAAKk5D,WAAY,EACjBl5D,KAAKm5D,gBAAiB,EACtBn5D,KAAKo5D,eAAgB,EAGrBp5D,KAAKq5D,cAAgB,GACrBr5D,KAAKs5D,eAAiB,EACtBt5D,KAAKu5D,kBAAoB,IACzBv5D,KAAKw5D,SAAW,EAGhBx5D,KAAKy5D,OAAS,GAGdz5D,KAAK05D,SAAW,GAGhB15D,KAAK25D,oBAAsB,CACvBtmB,QAAQ,EACRplC,UAAW,EACXsqD,gBAAiB,EACjBv5C,UAAW,IACXwU,UAAW,IAIfxzB,KAAK45D,WAAcv0D,GAAUyW,EAAS89C,WAAWv0D,GACjDrF,KAAK+3C,UAAY,CAAChxC,EAAK5G,IAAU2b,EAASi8B,UAAUhxC,EAAK5G,EAC7D,CAKA,mBAAA05D,CAAoBx3D,EAAGC,EAAGgR,EAAQrF,GAC9B,MAAMhO,EAAMD,KAAKC,IACXm5C,EAAoB,IAAT9lC,EACX2lC,EAAWh5C,EAAIi5C,qBAAqB72C,EAAGC,EAAG,EAAGD,EAAGC,EAAG82C,GAEzDH,EAASE,aAAa,EAAG,mBAAmB,GAAMlrC,MAClDgrC,EAASE,aAAa,GAAK,mBAAmB,IAAOlrC,MACrDgrC,EAASE,aAAa,EAAG,sBAEzBl5C,EAAIwC,OACJxC,EAAIu5C,yBAA2B,SAC/Bv5C,EAAI84C,UAAYE,EAChBh5C,EAAI65D,SAASz3D,EAAI+2C,EAAU92C,EAAI82C,EAAqB,EAAXA,EAAyB,EAAXA,GACvDn5C,EAAI4C,SACR,CAKA,wBAAAk3D,CAAyB13D,EAAGC,GACxB,MAAMgQ,EAAO9N,KAAK+N,MAAQ,IACpBid,EAAQ,GAA2B,GAArB5oB,KAAKiE,IAAW,EAAPyH,GAE7BtS,KAAKC,IAAIwC,OACTzC,KAAKC,IAAIyC,UAAUL,EAAGC,GAGtBtC,KAAKC,IAAI2mD,WAAa5mD,KAAK45D,WAAW,IACtC55D,KAAKC,IAAI4mD,YAAc,mBAA2B,GAARr3B,KAG1C,MAAMwqC,EAAUh6D,KAAK45D,WAAW,IAChC55D,KAAKC,IAAI8kD,KAAO,cAAciV,4BAC9Bh6D,KAAKC,IAAI84C,UAAY,mBAAmBvpB,KACxCxvB,KAAKC,IAAI+kD,UAAY,SACrBhlD,KAAKC,IAAIglD,aAAe,SACxBjlD,KAAKC,IAAIklD,SAAS,MAAO,EAAG,GAG5BnlD,KAAKC,IAAI2mD,WAAa,EACtB5mD,KAAKC,IAAI8kD,KAAO,cAAciV,EAAU,4BACxCh6D,KAAKC,IAAI84C,UAAY,uBAA+B,GAARvpB,KAC5CxvB,KAAKC,IAAIklD,SAAS,OAAO,IAAM,IAE/BnlD,KAAKC,IAAI4C,SACb,CAKA,oBAAAo3D,CAAqB53D,EAAGC,EAAG0Q,GAGvB,GADAhT,KAAKs5D,gBAAkBtmD,EACnBhT,KAAKs5D,gBAAkB,KAAQt5D,KAAKy5D,OAAO10D,OAAS,EAAG,CACvD,MAAM0hD,EAAU,CAAC,MAAO,MAAO,MAAO,OAChCC,EAAeD,EAAQ7/C,KAAKgJ,MAAMhJ,KAAK8I,SAAW+2C,EAAQ1hD,SAC1Dm1D,EAAatzD,KAAK8I,SAAW,GAAM,IAAM,IAE/C1P,KAAKy5D,OAAO33D,KAAK,CACbO,EAAGA,EAAIuE,KAAK8I,SAAW1P,KAAK45D,WAAW,IAAM55D,KAAK45D,WAAW,IAC7Dt3D,EAAGA,EAAItC,KAAK45D,WAAW,IACvBzmD,KAAMnT,KAAK45D,WAAsC,GAA1B,GAAqB,EAAhBhzD,KAAK8I,WACjCwD,QAAS,EACTnF,OAAO,KACP+wB,MAAOl4B,KAAK8I,SAAW1P,KAAK45D,WAAW,IAAM55D,KAAK45D,WAAW,IAC7Dl4C,SAAU,EACVlf,SAA0B,GAAhBoE,KAAK8I,SAAgB,GAC/Bm8C,KAAMqO,EACN3sD,OAAQm5C,IAEZ1mD,KAAKs5D,eAAiB,CAC1B,CAGAt5D,KAAKy5D,OAASz5D,KAAKy5D,OAAOjZ,OAAOtuB,IAC7BA,EAAExQ,UAAY1O,EACdkf,EAAE5vB,GAAK4vB,EAAEnkB,MAAQiF,EACjBkf,EAAE7vB,GAAKuE,KAAKiE,IAAiB,KAAbqnB,EAAExQ,UAAqBwQ,EAAE4M,MAAQ,KACjD5M,EAAE1vB,UAAwB,IAAZwQ,EAad,GARIkf,EAAExQ,SAFY,IAGdwQ,EAAEhf,QAAU,EACLgf,EAAExQ,SAHG,IAIZwQ,EAAEhf,QAAU,GAAQgf,EAAExQ,SALR,KAK4B,IAE1CwQ,EAAEhf,QAAU,EAGZgf,EAAEhf,QAAU,IAAM,CAClBlT,KAAKC,IAAIwC,OACTzC,KAAKC,IAAIyC,UAAUwvB,EAAE7vB,EAAG6vB,EAAE5vB,GAC1BtC,KAAKC,IAAI0C,OAAOuvB,EAAE1vB,SAAWoE,KAAKgE,GAAK,KAEvC,MAAMu6B,EAAYnlC,KAAK8b,SAASzJ,MAAMvF,WAAa,UAGnD9M,KAAKC,IAAI2mD,WAAa5mD,KAAK45D,WAAW,IACtC55D,KAAKC,IAAI4mD,YAAc7mD,KAAK+3C,UAAU5S,EAAuB,GAAZjT,EAAEhf,SAGnD,MAAM+lC,EAAWj5C,KAAKC,IAAImkD,sBAAsBlyB,EAAE/e,KAAK,GAAI+e,EAAE/e,KAAK,EAAG+e,EAAE/e,KAAK,EAAG+e,EAAE/e,KAAK,GAkBtF,OAjBA8lC,EAASE,aAAa,EAAGn5C,KAAK+3C,UAAU5S,EAAWjT,EAAEhf,UACrD+lC,EAASE,aAAa,GAAKn5C,KAAK+3C,UAAU,UAAuB,GAAZ7lB,EAAEhf,UACvD+lC,EAASE,aAAa,EAAGn5C,KAAK+3C,UAAU5S,EAAuB,GAAZjT,EAAEhf,UAErDlT,KAAKC,IAAI8kD,KAAO,UAAU7yB,EAAE3kB,QAAU,SAAS2kB,EAAE/e,+BACjDnT,KAAKC,IAAI84C,UAAYE,EACrBj5C,KAAKC,IAAI+kD,UAAY,SACrBhlD,KAAKC,IAAIglD,aAAe,SACxBjlD,KAAKC,IAAIklD,SAASjzB,EAAE25B,MAAQ,IAAK,EAAG,GAGpC7rD,KAAKC,IAAI2mD,WAAa,EACtB5mD,KAAKC,IAAI8kD,KAAO,UAAU7yB,EAAE3kB,QAAU,SAAkB,GAAT2kB,EAAE/e,+BACjDnT,KAAKC,IAAI84C,UAAY/4C,KAAK+3C,UAAU,UAAuB,GAAZ7lB,EAAEhf,SACjDlT,KAAKC,IAAIklD,SAASjzB,EAAE25B,MAAQ,KAAK,MAEjC7rD,KAAKC,IAAI4C,WACF,CACX,CACA,OAAO,GAEf,CAKA,mBAAAs3D,CAAoBx5D,EAASC,EAASw5D,EAAYpnD,GAE9ChT,KAAKs5D,gBAAkBtmD,EACnBhT,KAAKs5D,gBAAkBt5D,KAAKu5D,mBAAqBv5D,KAAKq5D,cAAct0D,OAAS/E,KAAKw5D,WAClFx5D,KAAKq5D,cAAcv3D,KAAK,CACpBwR,OAAQ8mD,EACRlnD,QAAS,GACTnF,MAAO,MAEX/N,KAAKs5D,eAAiB,GAI1Bt5D,KAAKq5D,cAAgBr5D,KAAKq5D,cAAc7Y,OAAOmF,IAC3CA,EAAKryC,QAAUqyC,EAAK53C,MAAQiF,EAC5B2yC,EAAKzyC,QAAUtM,KAAKiB,IAAI,EAAG,IAAO,GAAK89C,EAAKryC,OAAS8mD,IAA4B,EAAbA,KAEhEzU,EAAKzyC,QAAU,MACflT,KAAKC,IAAIw4C,YAAcz4C,KAAK+3C,UAAU/3C,KAAK8b,SAASzJ,MAAMvF,UAAW64C,EAAKzyC,SAC1ElT,KAAKC,IAAIy4C,UAAY14C,KAAK45D,WAAW,GACrC55D,KAAKC,IAAI04C,YACT34C,KAAKC,IAAI24C,IAAIj4C,EAASC,EAAS+kD,EAAKryC,OAAQ,EAAa,EAAV1M,KAAKgE,IACpD5K,KAAKC,IAAI44C,UACF,IAInB,CAKA,aAAAwhB,CAAch4D,EAAGC,EAAGgR,EAAQhB,GACxB,MAAMrS,EAAMD,KAAKC,IAEXq6D,EAAYhnD,GAAU,GAAoB,IADH,GAAzB1M,KAAKiE,IAAW,KAAPyH,GAAsB,KAI7C2mC,EAAWh5C,EAAIi5C,qBAAqB72C,EAAGC,EAAG,EAAGD,EAAGC,EAAGg4D,GACzDrhB,EAASE,aAAa,EAAG,4BACzBF,EAASE,aAAa,GAAK,4BAC3BF,EAASE,aAAa,EAAG,0BAEzBl5C,EAAIwC,OACJxC,EAAIu5C,yBAA2B,SAC/Bv5C,EAAI84C,UAAYE,EAChBh5C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAGC,EAAe,IAAZg4D,EAAiB,EAAa,EAAV1zD,KAAKgE,IACvC3K,EAAI+4C,OACJ/4C,EAAI4C,SACR,CAKA,cAAA03D,GACIv6D,KAAKi5D,iBAAkB,CAC3B,CAKA,aAAAuB,GACIx6D,KAAKi5D,iBAAkB,CAC3B,CAKA,cAAAwB,GACIz6D,KAAKk5D,WAAY,CACrB,CAKA,MAAAwB,GACI16D,KAAKk5D,WAAY,CACrB,CAKA,aAAAyB,GACI36D,KAAKm5D,gBAAiB,CAC1B,CAKA,YAAAyB,GACI56D,KAAKm5D,gBAAiB,CAC1B,CAKA,aAAA0B,CAAcx4D,EAAGC,EAAGw4D,EAAU,CAAA,GAC1B96D,KAAK05D,SAAS53D,KAAK,CACfO,IACAC,IACAub,GAAIi9C,EAAQpjB,UAAUr1C,GAAK,EAC3Byb,GAAIg9C,EAAQpjB,UAAUp1C,GAAK,EAC3B6Q,KAAM2nD,EAAQ3nD,MAAQ,EACtBrP,MAAOg3D,EAAQh3D,OAAS,qBACxB4d,SAAUo5C,EAAQp5C,UAAY,IAC9Bq5C,YAAaD,EAAQp5C,UAAY,IACjClf,SAAUoE,KAAK8I,SAAW9I,KAAKgE,GAAK,EACpCi/C,cAAuC,IAAvBjjD,KAAK8I,SAAW,KAExC,CAKA,cAAAsrD,GACI,MAAM/6D,EAAMD,KAAKC,IAEjBD,KAAK05D,SAASh4D,QAAQuU,IAClB,MAAMpN,EAAW,EAAKoN,EAAQyL,SAAWzL,EAAQ8kD,YAC3C7nD,EAAU,EAAIrK,EAEpB5I,EAAIwC,OACJxC,EAAIyC,UAAUuT,EAAQ5T,EAAG4T,EAAQ3T,GACjCrC,EAAI0C,OAAOsT,EAAQzT,UAGnB,MAAM2Q,EAAOnT,KAAK45D,WAAW3jD,EAAQ9C,MAAQ,EAAe,GAAXtK,IAGjD5I,EAAI04C,YACJ,MACM6a,EAAcrgD,EACdolB,EAAqB,IAAPplB,EAEpB,IAAK,IAAIwoC,EAAI,EAAGA,EAAIrjB,GAAYqjB,IAAK,CACjC,MAAMx8B,EAASw8B,EAAI/0C,KAAKgE,GALb,EAK4BhE,KAAKgE,GAAK,EAC3C0I,EAASqoC,EAAI,GAAM,EAAI6X,EAAcj7B,EAEjC,IAANojB,EACA17C,EAAIikD,OACAt9C,KAAK0E,IAAI6T,GAAS7L,EAClB1M,KAAKiE,IAAIsU,GAAS7L,GAGtBrT,EAAIkkD,OACAv9C,KAAK0E,IAAI6T,GAAS7L,EAClB1M,KAAKiE,IAAIsU,GAAS7L,EAG9B,CACArT,EAAIg7D,YAGJh7D,EAAI2mD,WAAa5mD,KAAK45D,WAAW,IACjC35D,EAAI4mD,YAAc5wC,EAAQnS,MAE1B7D,EAAI84C,UAAY9iC,EAAQnS,MAAMkD,QAAQ,MAAU,GAAgB,GAAX6B,EAAR,KAA0B7B,QAAQ,IAAK,KAAKkM,MAAYlM,QAAQ,MAAO,QACpH/G,EAAI+4C,OAEJ/4C,EAAI4C,WAEZ,CAMA,0BAAA+sD,CAA2B3hD,EAAY,IACnCjO,KAAK25D,oBAAoBtmB,QAAS,EAClCrzC,KAAK25D,oBAAoBpB,gBAAkB3xD,KAAKkB,IAAI,EAAGmG,GACvDjO,KAAK25D,oBAAoB1rD,UAAYjO,KAAK25D,oBAAoBpB,gBAG9D,MAAM2C,EAAgBzlB,SAASC,eAAe,mBAC1BD,SAAS0lB,cAAc,WACvBn7D,KAAKD,OAKzB,GAAIm7D,EAAe,CAQf,GANAA,EAAcE,MAAMC,UAAY,QAM3B5lB,SAASC,eAAe,oBAAqB,CAC9C,MAAM0lB,EAAQ3lB,SAAS6lB,cAAc,SACrCF,EAAMh5C,GAAK,mBACXg5C,EAAMzlB,YAAc,w0CA4BpBF,SAAS8lB,KAAKC,YAAYJ,EAC9B,CAGAF,EAAcE,MAAMC,UAAY,mBAAmB,IAAM,IAAMptD,cACnE,CACJ,CAOA,wBAAAwtD,CAAyBx7D,EAAKy7D,GAC1B,IAAK17D,KAAK25D,oBAAoBtmB,QAAUrzC,KAAK25D,oBAAoB1rD,WAAa,EAC1E,OAGJ,MAAMA,EAAYjO,KAAK25D,oBAAoB1rD,UACrCw0B,EAASziC,KAAK45D,WAAW55D,KAAK25D,oBAAoBnmC,UAAYvlB,GAG9D0tD,EAAgB17D,EAAIu5C,yBAG1Bv5C,EAAIwC,OACJxC,EAAIkC,UAAU,EAAG,EAAGlC,EAAIF,OAAOU,MAAOR,EAAIF,OAAOW,QAGjDT,EAAIu5C,yBAA2B,cAC/Bv5C,EAAIugD,OAAS,oBACbvgD,EAAI27D,UAAUF,GAAej5B,EAAQ,GAGrCxiC,EAAIu5C,yBAA2B,SAC/Bv5C,EAAIugD,OAAS,sBACbvgD,EAAI27D,UAAUF,EAAc,EAAG,GAG/Bz7D,EAAIu5C,yBAA2B,SAC/Bv5C,EAAIugD,OAAS,qBACbvgD,EAAI27D,UAAUF,EAAcj5B,EAAQ,GAGpCxiC,EAAIugD,OAAS,OACbvgD,EAAIu5C,yBAA2BmiB,EAC/B17D,EAAI4C,SACR,CAMA,8BAAAg5D,CAA+B57D,EAAKU,EAASC,EAAS0S,EAAQwoD,GAC1D,IAAK97D,KAAK25D,oBAAoBtmB,QAAUrzC,KAAK25D,oBAAoB1rD,WAAa,EAE1E,YADA6tD,IAIJ,MAAM7tD,EAAYjO,KAAK25D,oBAAoB1rD,UACrCw0B,EAASziC,KAAK45D,WAAW55D,KAAK25D,oBAAoBnmC,UAAYvlB,GAEpEhO,EAAIwC,OAGJxC,EAAIu5C,yBAA2B,cAC/Bv5C,EAAIyC,WAAW+/B,EAAQ,GACvBxiC,EAAI4/C,YAAc,IAClB5/C,EAAI84C,UAAY,UAChB94C,EAAIugD,OAAS,gBACbsb,IACA77D,EAAIyC,UAAU+/B,EAAQ,GAGtBxiC,EAAIu5C,yBAA2B,SAC/Bv5C,EAAI4/C,YAAc,IAClB5/C,EAAI84C,UAAY,UAChB+iB,IAGA77D,EAAIyC,UAAU+/B,EAAQ,GACtBxiC,EAAI4/C,YAAc,IAClB5/C,EAAI84C,UAAY,UAChB+iB,IAEA77D,EAAI4C,SACR,CAKA,MAAA8X,CAAO3H,GAEHhT,KAAK05D,SAAW15D,KAAK05D,SAASlZ,OAAOvqC,IACjCA,EAAQ5T,GAAK4T,EAAQ4H,GACrB5H,EAAQ3T,GAAK2T,EAAQ6H,GACrB7H,EAAQzT,UAAYyT,EAAQ4zC,cAC5B5zC,EAAQyL,UAAY1O,EACpBiD,EAAQ6H,IAAM,GAEP7H,EAAQyL,SAAW,IAI1B1hB,KAAK25D,oBAAoBtmB,SAEzBrzC,KAAK25D,oBAAoB1rD,WAAajO,KAAK25D,oBAAoB36C,UAE3Dhf,KAAK25D,oBAAoB1rD,WAAa,IACtCjO,KAAK25D,oBAAoB1rD,UAAY,EACrCjO,KAAK25D,oBAAoBtmB,QAAS,EAClCrzC,KAAK25D,oBAAoBpB,gBAAkB,GAIvD,EC3fG,MAAMwD,GACT,WAAAj8D,CAAYgc,GACR9b,KAAK8b,SAAWA,EAChB9b,KAAKC,IAAM6b,EAAS7b,IACpBD,KAAKD,OAAS+b,EAAS/b,OAGvBC,KAAKg8D,UAAW,EAChBh8D,KAAKi8D,iBAAkB,EACvBj8D,KAAKk8D,WAAa,EAClBl8D,KAAKm8D,cAAgBn8D,KAAKo8D,qBAG1Bp8D,KAAKonD,aAAe,EACpBpnD,KAAKq8D,SAAW,KAChBr8D,KAAKs8D,QAAU,KAGft8D,KAAK45D,WAAcv0D,GAAUyW,EAAS89C,WAAWv0D,GACjDrF,KAAK+3C,UAAY,CAAChxC,EAAK5G,IAAU2b,EAASi8B,UAAUhxC,EAAK5G,EAC7D,CAMA,MAAAwa,CAAO3H,GAEChT,KAAKg8D,WACLh8D,KAAKk8D,YAAclpD,EACfhT,KAAKk8D,YAAc,MACnBl8D,KAAKg8D,UAAW,EAChBh8D,KAAKk8D,WAAa,EAClBl8D,KAAKm8D,cAAgB33D,KAAK+N,MAAQvS,KAAKo8D,uBAK3Cp8D,KAAKi8D,kBAAoBj8D,KAAKg8D,UAAYx3D,KAAK+N,OAASvS,KAAKm8D,eAC7Dn8D,KAAKu8D,YAEb,CAKA,UAAAA,GACSv8D,KAAKi8D,kBACVj8D,KAAKg8D,UAAW,EAChBh8D,KAAKk8D,WAAa,EACtB,CAMA,kBAAAE,GACI,OAAO,IAAuB,IAAhBx1D,KAAK8I,QACvB,CAMA,aAAA8sD,GACI,IAAKx8D,KAAKg8D,SAAU,OAAO,EAE3B,MAAMS,EAAgB71D,KAAKkB,IAAI9H,KAAKk8D,WAAa,IAAK,GAEtD,OAAO,EAAiB,GADLt1D,KAAKiE,IAAI4xD,EAAgB71D,KAAKgE,GAErD,CAUA,QAAA8xD,CAASr6D,EAAGC,EAAGgR,EAAQ/P,EAAS6Q,EAAS,IACrC,MAAMnU,EAAMD,KAAKC,IAGXoP,EAAc+E,EAAO/E,aAAe,EACpCsD,EAAgByB,EAAOzB,eAAiB,UAG9C,GAAgB,QAAZpP,GAAiC,YAAZA,GAAyB8L,GAAe,EAC7D,OAGJpP,EAAIwC,OAGJxC,EAAIw4C,YAAc,qBAClBx4C,EAAIy4C,UAAY14C,KAAK45D,WAAW,GAChC35D,EAAI08D,QAAU,QAGd,MAAMrY,EAAsB,GAAThxC,EACbspD,EAAOt6D,EAAa,GAATgR,EACXupD,EAAmB,IAATvpD,EAGhB,OAAQX,GACJ,IAAK,QACD3S,KAAK88D,cAAc78D,EAAKoC,EAAGu6D,EAAMtY,EAAYuY,EAASxtD,GACtD,MACJ,IAAK,MACDrP,KAAK+8D,YAAY98D,EAAKoC,EAAGu6D,EAAMtY,EAAYuY,EAASxtD,GACpD,MACJ,IAAK,QACDrP,KAAKg9D,cAAc/8D,EAAKoC,EAAGu6D,EAAMtY,EAAYuY,EAASxtD,GACtD,MACJ,IAAK,YACDrP,KAAKi9D,kBAAkBh9D,EAAKoC,EAAGu6D,EAAMtY,EAAYuY,EAASxtD,GAC1D,MACJ,IAAK,UACDrP,KAAKk9D,gBAAgBj9D,EAAKoC,EAAGu6D,EAAMtY,EAAYuY,EAASxtD,GACxD,MACJ,IAAK,SACDrP,KAAKm9D,eAAel9D,EAAKoC,EAAGu6D,EAAMtY,EAAYuY,EAASxtD,GACvD,MACJ,IAAK,aACDrP,KAAKo9D,mBAAmBn9D,EAAKoC,EAAGu6D,EAAMtY,EAAYuY,EAASxtD,GAOnEpP,EAAI4C,SACR,CAKA,aAAAi6D,CAAc78D,EAAKoC,EAAGC,EAAG+6D,EAASlqD,EAAMmqD,GAEpCr9D,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIg7D,EAAS/6D,EAAG6Q,EAAgB,GAAVvM,KAAKgE,GAAoB,GAAVhE,KAAKgE,IAAU,GAC5D3K,EAAI44C,SAGJ54C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIg7D,EAAS/6D,EAAG6Q,EAAgB,GAAVvM,KAAKgE,GAAoB,GAAVhE,KAAKgE,IAAU,GAC5D3K,EAAI44C,QACR,CAKA,WAAAkkB,CAAY98D,EAAKoC,EAAGC,EAAG+6D,EAASlqD,EAAMmqD,GAElCr9D,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIg7D,EAAS/6D,EAAW,GAAP6Q,EAAYA,EAAgB,IAAVvM,KAAKgE,GAAoB,IAAVhE,KAAKgE,IAAU,GACzE3K,EAAI44C,SAGJ54C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIg7D,EAAS/6D,EAAW,GAAP6Q,EAAYA,EAAgB,IAAVvM,KAAKgE,GAAoB,IAAVhE,KAAKgE,IAAU,GACzE3K,EAAI44C,QACR,CAKA,aAAAmkB,CAAc/8D,EAAKoC,EAAGC,EAAG+6D,EAASlqD,EAAMmqD,GAEpCr9D,EAAI04C,YACJ14C,EAAIikD,OAAO7hD,EAAIg7D,EAAUlqD,EAAM7Q,EAAW,GAAP6Q,GACnClT,EAAIkkD,OAAO9hD,EAAIg7D,EAAiB,GAAPlqD,EAAY7Q,EAAW,GAAP6Q,GACzClT,EAAI44C,SAGJ54C,EAAI04C,YACJ14C,EAAIikD,OAAO7hD,EAAIg7D,EAAUlqD,EAAM7Q,EAAW,GAAP6Q,GACnClT,EAAIkkD,OAAO9hD,EAAIg7D,EAAiB,GAAPlqD,EAAY7Q,EAAW,GAAP6Q,GACzClT,EAAI44C,QACR,CAKA,iBAAAokB,CAAkBh9D,EAAKoC,EAAGC,EAAG+6D,EAASlqD,EAAMmqD,GAExCr9D,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIg7D,EAAS/6D,EAAU,IAAP6Q,EAAY,EAAa,EAAVvM,KAAKgE,IAC5C3K,EAAI44C,SAGJ54C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIg7D,EAAS/6D,EAAU,IAAP6Q,EAAY,EAAa,EAAVvM,KAAKgE,IAC5C3K,EAAI44C,QACR,CAKA,eAAAqkB,CAAgBj9D,EAAKoC,EAAGC,EAAG+6D,EAASlqD,EAAMmqD,GACtCr9D,EAAI84C,UAAY,qBAGhB94C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIg7D,EAAS/6D,EAAU,GAAP6Q,EAAY,EAAa,EAAVvM,KAAKgE,IAC5C3K,EAAI+4C,OAGJ/4C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIg7D,EAAS/6D,EAAU,GAAP6Q,EAAY,EAAa,EAAVvM,KAAKgE,IAC5C3K,EAAI+4C,MACR,CAKA,cAAAmkB,CAAel9D,EAAKoC,EAAGC,EAAG+6D,EAASlqD,EAAMmqD,GAErCr9D,EAAI04C,YACJ14C,EAAIikD,OAAO7hD,EAAIg7D,EAAUlqD,EAAM7Q,GAC/BrC,EAAIkkD,OAAO9hD,EAAIg7D,EAAUlqD,EAAM7Q,GAC/BrC,EAAI44C,SAGJ54C,EAAI04C,YACJ14C,EAAIikD,OAAO7hD,EAAIg7D,EAAUlqD,EAAM7Q,GAC/BrC,EAAIkkD,OAAO9hD,EAAIg7D,EAAUlqD,EAAM7Q,GAC/BrC,EAAI44C,QACR,CAKA,kBAAAukB,CAAmBn9D,EAAKoC,EAAGC,EAAG+6D,EAASlqD,EAAMmqD,GAEzCr9D,EAAI04C,YACJ14C,EAAIikD,OAAO7hD,EAAIg7D,EAAUlqD,EAAM7Q,GAC/BrC,EAAIkkD,OAAO9hD,EAAIg7D,EAAiB,GAAPlqD,EAAY7Q,GACrCrC,EAAI44C,SAGJ54C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAIg7D,EAAS/6D,EAAU,GAAP6Q,EAAsB,GAAVvM,KAAKgE,GAAoB,GAAVhE,KAAKgE,IAAU,GAClE3K,EAAI44C,QACR,CAMA,kBAAA0kB,CAAmB5oD,GACf3U,KAAKi8D,gBAAkBtnD,EAClBA,IACD3U,KAAKg8D,UAAW,EAChBh8D,KAAKk8D,WAAa,EAE1B,CAMA,eAAAsB,CAAgBrmD,GACZnX,KAAKonD,aAAexgD,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAGqP,GAChD,CAKA,UAAAsmD,GACIz9D,KAAKu8D,YACT,EChRG,MAAMmB,GACT,WAAA59D,CAAYgc,GACR9b,KAAK8b,SAAWA,EAGhB9b,KAAK29D,eAAiB,IACtB39D,KAAK+lD,eAAiB,IAGtB/lD,KAAK49D,eAAiB,EACtB59D,KAAK6D,WAAa,EAClB7D,KAAKoN,YAAcpN,KAAK+lD,eACxB/lD,KAAK69D,eAAiB,EACtB79D,KAAK89D,gBAAkB,EACvB99D,KAAK+9D,iBAAkB,EAGvB/9D,KAAKg+D,YAAc,KAGnBh+D,KAAKi+D,sBAAwB,CACzBxqD,MAAO,CAAEuzC,KAAM,IAAKC,MAAO,KAC3BpzC,IAAK,CAAEmzC,KAAM,GAAKC,MAAO,IACzBiX,MAAO,CAAElX,KAAM,IAAKC,MAAO,KAC3B12C,KAAM,CAAEy2C,KAAM,GAAKC,MAAO,IAC1BhuC,QAAS,CAAE+tC,KAAM,IAAKC,MAAO,KAC7B7tC,QAAS,CAAE4tC,KAAM,GAAKC,MAAO,IAC7Br7C,QAAS,CAAEo7C,KAAM,EAAKC,MAAO,GAC7B96C,KAAM,CAAE66C,KAAM,IAAKC,MAAO,KAC1BkX,UAAW,CAAEnX,KAAM,IAAKC,MAAO,KAC/BmX,SAAU,CAAEpX,KAAM,IAAKC,MAAO,IAC9BoX,OAAQ,CAAErX,KAAM,IAAKC,MAAO,KAC5BqX,MAAO,CAAEtX,KAAM,GAAKC,MAAO,IAC3Bv9C,MAAO,CAAEs9C,KAAM,GAAKC,MAAO,KAC3BsX,QAAS,CAAEvX,KAAM,IAAKC,MAAO,IAC7BuX,WAAY,CAAExX,KAAM,IAAKC,MAAO,GAChCwX,MAAO,CAAEzX,KAAM,GAAKC,MAAO,KAC3ByX,QAAS,CAAE1X,KAAM,GAAKC,MAAO,GAC7B0X,QAAS,CAAE3X,KAAM,EAAKC,MAAO,KAC7Bh7B,IAAK,CAAE+6B,KAAM,GAAKC,MAAO,KACzB2X,UAAW,CAAE5X,KAAM,IAAKC,MAAO,IAC/B4X,YAAa,CAAE7X,KAAM,IAAKC,MAAO,IACjC6X,SAAU,CAAE9X,KAAM,GAAKC,MAAO,KAC9B8X,SAAU,CAAE/X,KAAM,EAAKC,MAAO,KAC9B+X,MAAO,CAAEhY,KAAM,IAAKC,MAAO,KAC3BgY,OAAQ,CAAEjY,KAAM,GAAKC,MAAO,KAEpC,CAQA,MAAAtsC,CAAO3H,EAAWzP,EAASsG,EAAY,CAAA,GAEnCA,EAAYA,GAAa,CAAA,EAGzB,MAAMoH,EAAUjR,KAAKi+D,sBAAsB16D,IAAY,CAAEyjD,KAAM,EAAKC,MAAO,GAGrEiY,EAAoBr1D,GAAWg0D,gBAAkB,EACjDsB,EAAqBt1D,GAAWi0D,iBAAmB,EAGzD99D,KAAK6D,WAAaoN,EAAQ+1C,KAAOhnD,KAAK69D,eAAiBqB,EACvDl/D,KAAKoN,YAAcpN,KAAK+lD,eAAiB90C,EAAQg2C,MAAQjnD,KAAK89D,gBAAkBqB,EAGhF,IAAIC,EAAiBp/D,KAAK29D,eAAiB39D,KAAK6D,YAAcmP,EAAY,KACtEhT,KAAK+9D,iBAAmBl0D,GAAWk0D,kBACnCqB,GAAkB,GAAsC,GAAhCx4D,KAAKiE,IAAiB,KAAbrG,KAAK+N,QAI1CvS,KAAK49D,gBAAkBwB,EACnBp/D,KAAK49D,eAA2B,EAAVh3D,KAAKgE,KAC3B5K,KAAK49D,gBAA4B,EAAVh3D,KAAKgE,GAEpC,CAMA,iBAAAy0D,GAEI,OAAyB,OAArBr/D,KAAKg+D,YACEh+D,KAAKg+D,YAKT,EADcp3D,KAAKiE,IAAI7K,KAAK49D,gBACT59D,KAAKoN,WACnC,CAMA,cAAAkyD,CAAe79D,GACXzB,KAAKg+D,YAAcv8D,CACvB,CAMA,iBAAA89D,CAAkBxxD,GACd/N,KAAK29D,eAAiB5vD,CAC1B,CAMA,iBAAAyxD,CAAkBvY,GACdjnD,KAAK+lD,eAAiBn/C,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAGm/C,GAClD,CAMA,uBAAAwY,CAAwBC,GACpB1/D,KAAK69D,eAAiB6B,CAC1B,CAMA,wBAAAC,CAAyBD,GACrB1/D,KAAK89D,gBAAkB4B,CAC3B,CAMA,qBAAAE,CAAsB3c,GAClBjjD,KAAK+9D,gBAAkB9a,CAC3B,CAKA,KAAA5mC,GACIrc,KAAK49D,eAAiB,EACtB59D,KAAK6D,WAAa,EAClB7D,KAAKoN,YAAcpN,KAAK+lD,eACxB/lD,KAAK69D,eAAiB,EACtB79D,KAAK89D,gBAAkB,EACvB99D,KAAK+9D,iBAAkB,EACvB/9D,KAAKg+D,YAAc,IACvB,CAMA,UAAA6B,CAAWC,GAAQ,GAEf9/D,KAAKg+D,YAAc8B,EAAQ,IAAO,IACtC,CAKA,aAAAC,GACI//D,KAAKg+D,YAAc,IACvB,CAMA,gBAAAgC,GACI,MAAO,CACHhxC,MAAOhvB,KAAK49D,eACZ5W,KAAMhnD,KAAK6D,WACXojD,MAAOjnD,KAAKoN,YACZ3L,MAAOzB,KAAKq/D,oBACZY,SAA+B,OAArBjgE,KAAKg+D,YACfkC,YAAalgE,KAAK+9D,gBAE1B,ECuCG,MAAMoC,GAAgB,IA7NtB,MACH,WAAArgE,GAEIE,KAAKyhD,MAAQ,IAAIp+C,IAGjBrD,KAAKogE,MAAQ,CACTC,KAAM,EACNC,OAAQ,EACRC,UAAW,GAIfvgE,KAAKwgE,QAAU,IACfxgE,KAAKygE,IAAM,IAGXzgE,KAAK0gE,YAAc,EACvB,CAMA,WAAAC,CAAYr7D,EAAM8O,GACd,GAAa,WAAT9O,EAAmB,CACnB,MAAMs7D,GAAEA,EAAEC,GAAEA,EAAEC,GAAEA,EAAEC,GAAEA,EAAEC,GAAEA,EAAEC,GAAEA,EAAEC,MAAEA,GAAU9sD,EAE1C,MAAO,UAAUwsD,KAAMC,KAAMC,KAAMC,KAAMC,KAAMC,KAD/BC,EAAMh6D,IAAIgB,GAAK,GAAGA,EAAEu6B,UAAUv6B,EAAEpE,SAASsD,KAAK,MAElE,CAAO,GAAa,WAAT9B,EAAmB,CAC1B,MAAMs7D,GAAEA,EAAEC,GAAEA,EAAEE,GAAEA,EAAEC,GAAEA,EAAEE,MAAEA,GAAU9sD,EAElC,MAAO,UAAUwsD,KAAMC,KAAME,KAAMC,KADnBE,EAAMh6D,IAAIgB,GAAK,GAAGA,EAAEu6B,UAAUv6B,EAAEpE,SAASsD,KAAK,MAElE,CACA,OAAO,IACX,CAcA,iBAAA+5D,CAAkBlhE,EAAK2gE,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAC3C,MAAM7sD,EAAMrU,KAAK2gE,YAAY,SAAU,CAAEC,KAAIC,KAAIC,KAAIC,KAAIC,KAAIC,KAAIC,UAG3DE,EAASphE,KAAKyhD,MAAM58C,IAAIwP,GAC9B,GAAI+sD,GAAU58D,KAAK+N,MAAQ6uD,EAAO78D,UAAYvE,KAAKygE,IAG/C,OAFAzgE,KAAKogE,MAAMC,OACXrgE,KAAKqhE,kBAAkBhtD,GAChB+sD,EAAOnoB,SAIlBj5C,KAAKogE,MAAME,SACX,MAAMrnB,EAAWh5C,EAAIi5C,qBAAqB0nB,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAU9D,OAPAC,EAAMx/D,QAAQguC,IACVuJ,EAASE,aAAazJ,EAAKjN,OAAQiN,EAAK5rC,SAI5C9D,KAAK8E,IAAIuP,EAAK4kC,GAEPA,CACX,CAYA,iBAAAqoB,CAAkBrhE,EAAK2gE,EAAIC,EAAIE,EAAIC,EAAIE,GACnC,MAAM7sD,EAAMrU,KAAK2gE,YAAY,SAAU,CAAEC,KAAIC,KAAIE,KAAIC,KAAIE,UAGnDE,EAASphE,KAAKyhD,MAAM58C,IAAIwP,GAC9B,GAAI+sD,GAAU58D,KAAK+N,MAAQ6uD,EAAO78D,UAAYvE,KAAKygE,IAG/C,OAFAzgE,KAAKogE,MAAMC,OACXrgE,KAAKqhE,kBAAkBhtD,GAChB+sD,EAAOnoB,SAIlBj5C,KAAKogE,MAAME,SACX,MAAMrnB,EAAWh5C,EAAImkD,qBAAqBwc,EAAIC,EAAIE,EAAIC,GAUtD,OAPAE,EAAMx/D,QAAQguC,IACVuJ,EAASE,aAAazJ,EAAKjN,OAAQiN,EAAK5rC,SAI5C9D,KAAK8E,IAAIuP,EAAK4kC,GAEPA,CACX,CAMA,GAAAn0C,CAAIuP,EAAK4kC,GAEDj5C,KAAKyhD,MAAMtuC,MAAQnT,KAAKwgE,UAAYxgE,KAAKyhD,MAAM1nC,IAAI1F,IACnDrU,KAAKuhE,WAITvhE,KAAKyhD,MAAM38C,IAAIuP,EAAK,CAChB4kC,WACA10C,UAAWC,KAAK+N,QAGpBvS,KAAKqhE,kBAAkBhtD,EAC3B,CAMA,iBAAAgtD,CAAkBhtD,GAEd,MAAMwpC,EAAQ79C,KAAK0gE,YAAYc,QAAQntD,GACnCwpC,GAAQ,GACR79C,KAAK0gE,YAAY5iB,OAAOD,EAAO,GAGnC79C,KAAK0gE,YAAY5+D,KAAKuS,EAC1B,CAMA,QAAAktD,GACI,GAAIvhE,KAAK0gE,YAAY37D,OAAS,EAAG,CAC7B,MAAM08D,EAAazhE,KAAK0gE,YAAY17D,QACpChF,KAAKyhD,MAAMlQ,OAAOkwB,GAClBzhE,KAAKogE,MAAMG,WACf,CACJ,CAKA,KAAAr+D,GACIlC,KAAKyhD,MAAMv/C,QACXlC,KAAK0gE,YAAc,EACvB,CAKA,YAAAgB,GACI,MAAMnvD,EAAM/N,KAAK+N,MACXovD,EAAe,GAErB,IAAK,MAAOttD,EAAKhP,KAAUrF,KAAKyhD,MAAM91C,UAC9B4G,EAAMlN,EAAMd,WAAavE,KAAKygE,KAC9BkB,EAAa7/D,KAAKuS,GAI1BstD,EAAajgE,QAAQ2S,IACjBrU,KAAKyhD,MAAMlQ,OAAOl9B,GAClB,MAAMwpC,EAAQ79C,KAAK0gE,YAAYc,QAAQntD,GACnCwpC,GAAQ,GACR79C,KAAK0gE,YAAY5iB,OAAOD,EAAO,IAG3C,CAMA,QAAAoC,GACI,MAAM2hB,EAAU5hE,KAAKogE,MAAMC,KAAOrgE,KAAKogE,MAAME,OAAS,GAC/CtgE,KAAKogE,MAAMC,MAAQrgE,KAAKogE,MAAMC,KAAOrgE,KAAKogE,MAAME,QAAU,KAAKuB,QAAQ,GACxE,EAEN,MAAO,CACH1uD,KAAMnT,KAAKyhD,MAAMtuC,KACjBqtD,QAASxgE,KAAKwgE,QACdH,KAAMrgE,KAAKogE,MAAMC,KACjBC,OAAQtgE,KAAKogE,MAAME,OACnBC,UAAWvgE,KAAKogE,MAAMG,UACtBqB,QAAS,GAAGA,KAEpB,CAOA,YAAAE,CAAa7hE,GACT,MAAO,CACH8hE,OAAQ,CAACnB,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,IAC7BlhE,KAAKmhE,kBAAkBlhE,EAAK2gE,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GACxD/2D,OAAQ,CAACy2D,EAAIC,EAAIE,EAAIC,EAAIE,IACrBlhE,KAAKshE,kBAAkBrhE,EAAK2gE,EAAIC,EAAIE,EAAIC,EAAIE,GAExD,GC7NG,MAAMc,GACT,WAAAliE,CAAYgc,GACR9b,KAAK8b,SAAWA,EAChB9b,KAAKC,IAAM6b,EAAS7b,IACpBD,KAAKD,OAAS+b,EAAS/b,OAGvBC,KAAK2D,cAAgB,EACrB3D,KAAK8M,UAAY,UACjB9M,KAAKiiE,gBAAkB,UACvBjiE,KAAKkiE,oBAAsB,EAC3BliE,KAAKmiE,yBAA2B,IAGhCniE,KAAKoiE,gBAAkB,KACvBpiE,KAAKqiE,aAAe,KACpBriE,KAAKsiE,gBAAkB,KACvBtiE,KAAKuiE,iBAAmB,EAGxBviE,KAAK45D,WAAcv0D,GAAUyW,EAAS89C,WAAWv0D,GACjDrF,KAAK+3C,UAAY,CAAChxC,EAAK5G,IAAU2b,EAASi8B,UAAUhxC,EAAK5G,GAEzDH,KAAKwiE,qBACT,CAKA,mBAAAA,GACIxiE,KAAKoiE,gBAAkB3sB,SAAS6lB,cAAc,UAC9Ct7D,KAAKqiE,aAAeriE,KAAKoiE,gBAAgBliE,WAAW,KACxD,CAMA,mBAAAuiE,CAAoBtvD,GACZnT,KAAKoiE,gBAAgB3hE,QAAU0S,GAAQnT,KAAKoiE,gBAAgB1hE,SAAWyS,IACvEnT,KAAKoiE,gBAAgB3hE,MAAQ0S,EAC7BnT,KAAKoiE,gBAAgB1hE,OAASyS,EAC9BnT,KAAKsiE,gBAAkB,KAE/B,CASA,UAAAI,CAAWrgE,EAAGC,EAAGgR,EAAQc,EAAS,CAAA,GAC9B,MAAMnU,EAAMD,KAAKC,IACX6D,EAAQsQ,EAAOtQ,OAAS9D,KAAK8M,UAC7BmB,OAAiCoM,IAArBjG,EAAOnG,UAA0BmG,EAAOnG,UAAYjO,KAAK2D,cAGvEsK,EAAY,MAGCjO,KAAK45D,WAAW,KAGjC55D,KAAK2iE,iBAAiB1iE,EAAKoC,EAAGC,EAAGgR,EAAQxP,EAAOmK,GAwBpD,CAOA,iBAAA20D,CAAkB9+D,EAAOqP,GACrB,MAAM0vD,EAAS7iE,KAAKqiE,aACdS,EAAS3vD,EAGfnT,KAAKyiE,oBAA2B,EAAPtvD,GAGzB0vD,EAAO1gE,UAAU,EAAG,EAAGnC,KAAKoiE,gBAAgB3hE,MAAOT,KAAKoiE,gBAAgB1hE,QAGxE,MAAMu4C,EAAWknB,GAAcgB,kBAC3B0B,EAAQC,EAAQA,EAAQ,EAAGA,EAAQA,EAAQ3vD,EAC3C,CACI,CAAEsvB,OAAQ,EAAG3+B,MAAO9D,KAAK+3C,UAAUj0C,EAAO,KAC1C,CAAE2+B,OAAQ,GAAK3+B,MAAO9D,KAAK+3C,UAAUj0C,EAAO,KAC5C,CAAE2+B,OAAQ,GAAK3+B,MAAO9D,KAAK+3C,UAAUj0C,EAAO,KAC5C,CAAE2+B,OAAQ,EAAG3+B,MAAO9D,KAAK+3C,UAAUj0C,EAAO,MAKlD++D,EAAO9pB,UAAYE,EACnB4pB,EAAO/I,SAAS,EAAG,EAAU,EAAP3mD,EAAiB,EAAPA,GAGhCnT,KAAKsiE,gBAAkBx+D,EACvB9D,KAAKuiE,iBAAmBpvD,CAC5B,CAWA,gBAAAwvD,CAAiB1iE,EAAKoC,EAAGC,EAAGgR,EAAQxP,EAAOmK,GAEvChO,EAAIwC,OAGJ,MACMiiD,EAAgB,GACtB,IAAK,IAAI/I,EAAI,EAAGA,GAFF,GAEcA,IAAK,CAC7B,MAAMlE,EAAWkE,EAHP,GAKJzoC,EADc,GAAMtM,KAAKC,IAAI,EAAI4wC,EAAU,KACnBxpC,EAC9By2C,EAAc5iD,KAAK,CAAE2gC,OAAQgV,EAAU3zC,MAAO9D,KAAK+3C,UAAUj0C,EAAOoP,IACxE,CAGA,MAAM+lC,EAAWknB,GAAcgB,kBAC3BlhE,EAAKoC,EAAGC,EAAG,EAAGD,EAAGC,EAAGgR,EAAQoxC,GAGhCzkD,EAAI84C,UAAYE,EAChBh5C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAGC,EAAGgR,EAAQ,EAAa,EAAV1M,KAAKgE,IAC9B3K,EAAI+4C,OAEJ/4C,EAAI4C,SACR,CASA,mBAAAg3D,CAAoBx3D,EAAGC,EAAGgR,EAAQrF,GAC9B,MAAMhO,EAAMD,KAAKC,IACXm5C,EAAoB,IAAT9lC,EACX2lC,EAAWknB,GAAcgB,kBAC3BlhE,EAAKoC,EAAGC,EAAG,EAAGD,EAAGC,EAAG82C,EACpB,CACI,CAAE3W,OAAQ,EAAG3+B,MAAO,mBAAmB,GAAMmK,MAC7C,CAAEw0B,OAAQ,GAAK3+B,MAAO,mBAAmB,IAAOmK,MAChD,CAAEw0B,OAAQ,EAAG3+B,MAAO,wBAI5B7D,EAAIwC,OACJxC,EAAIu5C,yBAA2B,SAC/Bv5C,EAAI84C,UAAYE,EAChBh5C,EAAI65D,SAASz3D,EAAI+2C,EAAU92C,EAAI82C,EAAqB,EAAXA,EAAyB,EAAXA,GACvDn5C,EAAI4C,SACR,CASA,aAAAkgE,CAAc1gE,EAAGC,EAAGgR,EAAQhB,GACxB,MAAMrS,EAAMD,KAAKC,IAEXq6D,EAAYhnD,GAAU,GAAoB,IADH,GAAzB1M,KAAKiE,IAAW,KAAPyH,GAAsB,KAI7C2mC,EAAWknB,GAAcgB,kBAC3BlhE,EAAKoC,EAAGC,EAAG,EAAGD,EAAGC,EAAGg4D,EACpB,CACI,CAAE73B,OAAQ,EAAG3+B,MAAO,4BACpB,CAAE2+B,OAAQ,GAAK3+B,MAAO,4BACtB,CAAE2+B,OAAQ,EAAG3+B,MAAO,4BAI5B7D,EAAIwC,OACJxC,EAAIu5C,yBAA2B,SAC/Bv5C,EAAI84C,UAAYE,EAChBh5C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAGC,EAAe,IAAZg4D,EAAiB,EAAa,EAAV1zD,KAAKgE,IACvC3K,EAAI+4C,OACJ/4C,EAAI4C,SACR,CAOA,eAAAmgE,CAAgB1K,EAAatlD,GACrBhT,KAAKiiE,kBAAoB3J,IACzBt4D,KAAKiiE,gBAAkB3J,EACvBt4D,KAAKkiE,oBAAsB,GAI3BliE,KAAKkiE,oBAAsB,IAC3BliE,KAAKkiE,oBAAsBt7D,KAAKkB,IAAI,EAAG9H,KAAKkiE,oBAAsBliE,KAAKmiE,0BACvEniE,KAAK8M,UAAY9M,KAAKijE,UAAUjjE,KAAK8M,UAAW9M,KAAKiiE,gBAAiBjiE,KAAKkiE,qBAEnF,CASA,SAAAe,CAAUt6D,EAAQC,EAAQH,GAEtB,MAAMK,EAAO9I,KAAK8G,SAAS6B,GACrBI,EAAO/I,KAAK8G,SAAS8B,GAQ3B,MAAO,MAAM,GAAK,KALRhC,KAAKgB,MAAMkB,EAAKzB,GAAK0B,EAAK1B,EAAIyB,EAAKzB,GAAKoB,IAKpB,KAJpB7B,KAAKgB,MAAMkB,EAAKvB,GAAKwB,EAAKxB,EAAIuB,EAAKvB,GAAKkB,IAIR,GAHhC7B,KAAKgB,MAAMkB,EAAKtB,GAAKuB,EAAKvB,EAAIsB,EAAKtB,GAAKiB,IAGAV,SAAS,IAAI7B,MAAM,IACzE,CAOA,QAAAY,CAASC,GACL,MAAMixC,EAAS,4CAA4CC,KAAKlxC,GAChE,OAAOixC,EAAS,CACZ3wC,EAAGjG,SAAS42C,EAAO,GAAI,IACvBzwC,EAAGnG,SAAS42C,EAAO,GAAI,IACvBxwC,EAAGpG,SAAS42C,EAAO,GAAI,KACvB,CAAE3wC,EAAG,EAAGE,EAAG,EAAGC,EAAG,EACzB,CAMA,gBAAA07D,CAAiBj1D,GACbjO,KAAK2D,cAAgBiD,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAGmG,GACjD,CAMA,YAAAk1D,CAAar/D,GACT9D,KAAK8M,UAAYhJ,EACjB9D,KAAKiiE,gBAAkBn+D,EACvB9D,KAAKkiE,oBAAsB,CAC/B,CAKA,OAAAn/D,GACI/C,KAAKoiE,gBAAkB,KACvBpiE,KAAKqiE,aAAe,KACpBriE,KAAKsiE,gBAAkB,IAC3B,ECzSG,MAAMc,GACT,WAAAtjE,CAAYgc,GACR9b,KAAK8b,SAAWA,EAChB9b,KAAKC,IAAM6b,EAAS7b,IACpBD,KAAKD,OAAS+b,EAAS/b,OAGvBC,KAAKqjE,UAAY,UACjBrjE,KAAKsjE,YAAc,EACnBtjE,KAAKujE,gBAAkB,EACvBvjE,KAAKwjE,gBAAkB,KAGvBxjE,KAAKyjE,YAAc,KACnBzjE,KAAK0jE,YAAa,EAGlB1jE,KAAK45D,WAAcv0D,GAAUyW,EAAS89C,WAAWv0D,GACjDrF,KAAK+3C,UAAY,CAAChxC,EAAK5G,IAAU2b,EAASi8B,UAAUhxC,EAAK5G,EAC7D,CASA,UAAAkT,CAAWhR,EAAGC,EAAGgR,EAAQc,EAAS,CAAA,GAC9B,MAAMnU,EAAMD,KAAKC,IAGXwS,EAAS2B,EAAO3B,QAAU,EAC1BC,EAAS0B,EAAO1B,QAAU,EAC1BlQ,EAAW4R,EAAO5R,UAAY,EAC9B0Q,OAA6BmH,IAAnBjG,EAAOlB,QAAwBkB,EAAOlB,QAAUlT,KAAKsjE,YAC/Dx/D,EAAQsQ,EAAOtQ,OAAS9D,KAAKqjE,UAC7BI,EAAcrvD,EAAOqvD,aAAezjE,KAAKyjE,YAE/CxjE,EAAIwC,OAGJxC,EAAIyC,UAAUL,EAAGC,GACA,IAAbE,GACAvC,EAAI0C,OAAOH,GAEfvC,EAAIwB,MAAMgR,EAAQC,GAGlBzS,EAAI84C,UAAY/4C,KAAK+3C,UAAUj0C,EAAOoP,GAGlCuwD,GAAeA,EAAY1+D,OAAS,EACpC/E,KAAK2jE,iBAAiB1jE,EAAKwjE,EAAanwD,GAExCtT,KAAK4jE,WAAW3jE,EAAKqT,GAIrBtT,KAAKujE,gBAAkB,GAAKvjE,KAAKwjE,kBACjCvjE,EAAIw4C,YAAcz4C,KAAKwjE,gBACvBvjE,EAAIy4C,UAAY14C,KAAK45D,WAAW55D,KAAKujE,iBACrCtjE,EAAI44C,UAGR54C,EAAI4C,SACR,CAQA,cAAAghE,CAAe5jE,EAAKqT,EAAQmwD,GACxBxjE,EAAIwC,OAEJ,MAAMqhE,EAAe9jE,KAAK45D,WAAW,GAIrC,GAHA35D,EAAIyC,UAAU,EAAGohE,GAGbL,GAAeA,EAAY1+D,OAAS,GAEpC9E,EAAI84C,UAAY,sBAChB94C,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAY,KAATtlC,EAAe,EAAa,EAAV1M,KAAKgE,IACrC3K,EAAI+4C,WACD,CAEH,MAAM+qB,EAAiB5D,GAAcgB,kBACjClhE,EAAK,EAAG,EAAY,GAATqT,EAAc,EAAG,EAAY,IAATA,EAC/B,CACI,CAAEmvB,OAAQ,EAAG3+B,MAAO,sBACpB,CAAE2+B,OAAQ,GAAK3+B,MAAO,sBACtB,CAAE2+B,OAAQ,EAAG3+B,MAAO,sBAM5B,GAFA7D,EAAI84C,UAAYgrB,EAChB9jE,EAAI04C,YACA8qB,EAAa,CAEb,MAAMhiE,EAAQ,IACRuiE,EAAOP,EAAY1+D,OAAS,GAAK,EAAI,EAC3C9E,EAAIikD,OAAOuf,EAAY,GAAGphE,EAAIZ,EAAOgiE,EAAY,GAAGnhE,EAAIb,GACxD,IAAK,IAAIk6C,EAAIqoB,EAAMroB,EAAI8nB,EAAY1+D,OAAQ42C,GAAKqoB,EAC5C/jE,EAAIkkD,OAAOsf,EAAY9nB,GAAGt5C,EAAIZ,EAAOgiE,EAAY9nB,GAAGr5C,EAAIb,GAE5DxB,EAAIg7D,WACR,MACIh7D,EAAI24C,IAAI,EAAG,EAAY,IAATtlC,EAAc,EAAa,EAAV1M,KAAKgE,IAExC3K,EAAI+4C,MACR,CAEA/4C,EAAI4C,SACR,CAOA,UAAA+gE,CAAW3jE,EAAKqT,GACZrT,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAGtlC,EAAQ,EAAa,EAAV1M,KAAKgE,IAC9B3K,EAAI+4C,MACR,CAQA,gBAAA2qB,CAAiB1jE,EAAKq4B,EAAQ5Z,IACrB4Z,GAAUA,EAAOvzB,OAAS,EAE3B/E,KAAK4jE,WAAW3jE,EAAKye,IAIzBze,EAAI04C,YAIJrgB,EAAO52B,QAAQ,CAACsqC,EAAO2P,KACT,IAANA,EACA17C,EAAIikD,OAAOlY,EAAM3pC,EAAG2pC,EAAM1pC,GAE1BrC,EAAIkkD,OAAOnY,EAAM3pC,EAAG2pC,EAAM1pC,KAIlCrC,EAAIg7D,YACJh7D,EAAI+4C,OACR,CASA,aAAAqhB,CAAch4D,EAAGC,EAAGgR,EAAQhB,GACxB,MAAMrS,EAAMD,KAAKC,IAIXq6D,EAAYhnD,GAAU,IAAqB,KADJ,GAAzB1M,KAAKiE,IAAW,KAAPyH,GAAsB,KAInDrS,EAAIwC,OAGJxC,EAAI2mD,WAAa5mD,KAAK45D,WAAW,IACjC35D,EAAI4mD,YAAc,2BAClB5mD,EAAIgkE,cAAgB,EACpBhkE,EAAIikE,cAAgB,EAGpBjkE,EAAI84C,UAAY,UAChB94C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAGC,EAAGg4D,EAAW,EAAa,EAAV1zD,KAAKgE,IACjC3K,EAAI+4C,OAGJ/4C,EAAIw4C,YAAc,2BAClBx4C,EAAIy4C,UAAY14C,KAAK45D,WAAW,GAChC35D,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAGC,EAAe,GAAZg4D,EAAiB,EAAa,EAAV1zD,KAAKgE,IACvC3K,EAAI44C,SAEJ54C,EAAI4C,SACR,CAQA,gBAAAshE,CAAiB9hE,EAAGC,EAAGgR,GACnB,MAAMrT,EAAMD,KAAKC,IAGjBA,EAAIwC,OACJxC,EAAIyC,UAAUL,EAAGC,GACjBrC,EAAIwB,MAAM,EAAG,KAEbxB,EAAI84C,UAAY,UAChB94C,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAGtlC,EAAQ,EAAa,EAAV1M,KAAKgE,IAC9B3K,EAAI+4C,OAEJ/4C,EAAI4C,SACR,CASA,kBAAAuhE,CAAmB/hE,EAAGC,EAAGgR,EAAQhE,GAC7B,MAAMrP,EAAMD,KAAKC,IASjBA,EAAIwC,OANY,CACZ,CAAEJ,GAAG,EAAIC,EAAG,EAAGnC,MAAO,IACtB,CAAEkC,EAAG,EAAGC,EAAG,EAAGnC,MAAO,IACrB,CAAEkC,EAAG,EAAGC,GAAG,EAAInC,MAAO,KAKlBuB,QAAQ+gC,IACZxiC,EAAI84C,UAAY/4C,KAAK+3C,UAAU,UAAWtV,EAAOtiC,MAAQmP,GACzDrP,EAAI04C,YACJ14C,EAAI24C,IACAv2C,EAAIogC,EAAOpgC,EAAIiN,EAAkBtP,KAAK45D,WAAW,GACjDt3D,EAAImgC,EAAOngC,EAAIgN,EAAkBtP,KAAK45D,WAAW,GACjDtmD,EACA,EACU,EAAV1M,KAAKgE,IAET3K,EAAI+4C,SAIR/4C,EAAI84C,UAAY,UAChB94C,EAAI04C,YACJ14C,EAAI24C,IAAIv2C,EAAGC,EAAGgR,EAAQ,EAAa,EAAV1M,KAAKgE,IAC9B3K,EAAI+4C,OAEJ/4C,EAAI4C,SACR,CAMA,cAAAwhE,CAAe/rC,GACXt4B,KAAKyjE,YAAcnrC,EACnBt4B,KAAK0jE,WAAaprC,GAAUA,EAAOvzB,OAAS,CAChD,CAKA,gBAAAu/D,GACItkE,KAAKyjE,YAAc,KACnBzjE,KAAK0jE,YAAa,CACtB,CAMA,YAAAa,CAAazgE,GACT9D,KAAKqjE,UAAYv/D,CACrB,CAMA,cAAA0gE,CAAetxD,GACXlT,KAAKsjE,YAAc18D,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAGoL,GAC/C,CAOA,aAAAuxD,CAAchkE,EAAOqD,GACjB9D,KAAKujE,gBAAkB9iE,EACvBT,KAAKwjE,gBAAkB1/D,CAC3B,CAMA,WAAA4gE,GACI,MAAO,CACH5gE,MAAO9D,KAAKqjE,UACZnwD,QAASlT,KAAKsjE,YACdqB,UAAW3kE,KAAKujE,gBAAkB,EAClCG,WAAY1jE,KAAK0jE,WACjBkB,gBAAiB5kE,KAAKyjE,YAAczjE,KAAKyjE,YAAY1+D,OAAS,EAEtE,EC7TG,MAAM8/D,GACT,WAAA/kE,CAAYgc,GACR9b,KAAK8b,SAAWA,EAGhB9b,KAAK8kE,eAAiB,KACtB9kE,KAAK+kE,cAAgB,KACrB/kE,KAAKglE,mBAAqB,EAC1BhlE,KAAKilE,oBAAsB,EAC3BjlE,KAAKklE,mBAAqB,EAG1BllE,KAAKmlE,WAAa,KAClBnlE,KAAKolE,WAAa,KAGlBplE,KAAKqlE,gBAAkB,EAC3B,CAOA,cAAAC,CAAexK,EAAU,IACrB,OAAO96D,KAAKulE,cAAc,EAAGzK,EACjC,CAQA,cAAA0K,CAAeC,EAAW3K,EAAU,IAChC,MAAMplC,EAAe11B,KAAK8b,SAASzJ,MAAMqzD,gBAAkB,EAErD5rC,EADQlzB,KAAKgB,MAAM8tB,EAAe+vC,GACZA,EAC5B,OAAOzlE,KAAKulE,cAAczrC,EAAaghC,EAC3C,CAQA,aAAAyK,CAAczrC,EAAaghC,EAAU,IACjC,OAAO,IAAIp0D,QAASC,IAChB,MAAMy+D,WACFA,EAAa,KAAID,WACjBA,EAAa,MACbrK,EAEJ96D,KAAKolE,WAAaA,EAClBplE,KAAKmlE,WAAaA,EAGlB,MAAMQ,EAAkB3lE,KAAK8b,SAASzJ,MAAMw3C,eAAiB,EACvDrnD,EAAWxC,KAAK8b,SAASzJ,MAAMqzD,gBAAkB,EAGvD,GAAwB,IAApBC,GAAyB3lE,KAAK8kE,eAE9B,YADAn+D,IAUJ,GALA3G,KAAK8kE,eAAiB1qD,YAAY7H,MAClCvS,KAAKglE,mBAAqBxiE,EAC1BxC,KAAKklE,mBAAqBS,EAGN,IAAhB7rC,EAGI95B,KAAKilE,oBADLU,EAAkB,EAC4C,KAAlC/+D,KAAKgJ,MAAMpN,EAAW,KAAO,GAED,IAA7BoE,KAAKgJ,MAAMpN,EAAW,SAElD,CAEH,MAAMojE,EAAmB9rC,EAAc,IACjC+rC,EAAaj/D,KAAKgJ,MAAMpN,EAAW,KAIjCxC,KAAKilE,oBAFTU,EAAkB,EACdC,EAAoBpjE,EAAW,IACS,IAAbqjE,EAAmBD,EAEA,KAAlBC,EAAa,GAAWD,EAGpDA,EAAoBpjE,EAAW,IACS,IAAbqjE,EAAmBD,EAEA,KAAlBC,EAAa,GAAWD,CAGhE,CAGA,MAAME,EAAgBl/D,KAAKib,IAAI7hB,KAAKilE,oBAAsBjlE,KAAKglE,oBAC/DhlE,KAAK+kE,cAAgBn+D,KAAKiB,IAAI,IAAMi+D,EAAgBl/D,KAAKib,IAAI8jD,GAAoB3lE,KAAKqlE,gBAAkB,GAUxGrlE,KAAK8b,SAASiqD,iBAAiB,GAE/B/lE,KAAKgmE,eAAiBr/D,GAE9B,CAOA,WAAAs/D,CAAY9xC,GACR,IAAKn0B,KAAK8kE,eACN,OAAO,KAGX,MAAM/pD,EAAUoZ,EAAcn0B,KAAK8kE,eAC7Bj8D,EAAWjC,KAAKkB,IAAIiT,EAAU/a,KAAK+kE,cAAe,GAGlD/pD,EAAgB,EAAIpU,KAAKC,IAAI,EAAIgC,EAAU,GAG3CrG,EAAWxC,KAAKglE,oBACjBhlE,KAAKilE,oBAAsBjlE,KAAKglE,oBAAsBhqD,EAGrDkrD,EAAelmE,KAAKklE,mBAAqBt+D,KAAKC,IAAI,EAAImU,EAAe,GAO3E,OAJIhb,KAAKolE,YACLplE,KAAKolE,WAAWpqD,EAAekrD,EAAc1jE,GAG7CqG,GAAY,GAEZ7I,KAAK8kE,eAAiB,KAOtB9kE,KAAKmmE,WAGE,CACH3jE,SAAUxC,KAAKilE,oBACfl3D,MAAO,EACPo4D,UAAU,IAKX,CACH3jE,SAAUA,EACVuL,MAAOm4D,EACPC,UAAU,EAElB,CAKA,IAAAz2B,GACI1vC,KAAK8kE,eAAiB,IAC1B,CAMA,QAAAqB,GACQnmE,KAAKmlE,YACLnlE,KAAKmlE,aAGLnlE,KAAKgmE,iBACLhmE,KAAKgmE,iBACLhmE,KAAKgmE,eAAiB,KAE9B,CAMA,SAAAI,GACI,OAA+B,OAAxBpmE,KAAK8kE,cAChB,CAKA,aAAAuB,GACIrmE,KAAK0vC,OACL1vC,KAAK8b,SAASiqD,iBAAiB,GAC/B/lE,KAAKmmE,UACT,CAMA,WAAAG,GACI,IAAKtmE,KAAK8kE,eAAgB,OAAO,EACjC,MAAM/pD,EAAUX,YAAY7H,MAAQvS,KAAK8kE,eACzC,OAAOl+D,KAAKkB,IAAIiT,EAAU/a,KAAK+kE,cAAe,EAClD,EC5NJ,MAAMwB,GACF,WAAAzmE,CAAYgc,GACR9b,KAAK8b,SAAWA,EAGhB9b,KAAKwmE,WAAa,CACdC,WAAY,KACZC,UAAW,KACXC,WAAY,KACZC,YAAa,KACbC,WAAY,MAIhB7mE,KAAK8mE,gBAAkB,KAGvB9mE,KAAK+mE,WAAa,CACd1kE,EAAG,EACHC,EAAG,EACHE,SAAU,EACVf,MAAO,EACPyR,QAAS,EAEjB,CAOA,qBAAA8zD,CAAsBC,EAAenM,EAAU,IAEvC96D,KAAK8mE,iBAAmB9mE,KAAK8mE,kBAAoBG,GACjDjnE,KAAKknE,qBAAqBlnE,KAAK8mE,iBAGnC9mE,KAAK8mE,gBAAkBG,EACvBjnE,KAAKwmE,WAAWS,GAAiB,CAC7B5uD,UAAW7T,KAAK+N,MAChBtE,UAAW6sD,EAAQ7sD,WAAa,EAChCiD,UAAW4pD,EAAQ5pD,WAAa,EAChC4pD,QAASA,EAEjB,CAKA,oBAAAoM,CAAqBD,GACbjnE,KAAKwmE,WAAWS,KAChBjnE,KAAKwmE,WAAWS,GAAiB,MAEjCjnE,KAAK8mE,kBAAoBG,IACzBjnE,KAAK8mE,gBAAkB,KAE/B,CAKA,gBAAAK,CAAiBJ,GACb,IAAKA,EAAY,OAGjB,MAAMj0C,EAAa,GACnB9yB,KAAK+mE,WAAW1kE,EAAIrC,KAAKonE,KAAKpnE,KAAK+mE,WAAW1kE,EAAG0kE,EAAW1kE,GAAK,EAAGywB,GACpE9yB,KAAK+mE,WAAWzkE,EAAItC,KAAKonE,KAAKpnE,KAAK+mE,WAAWzkE,EAAGykE,EAAWzkE,GAAK,EAAGwwB,GACpE9yB,KAAK+mE,WAAWvkE,SAAWxC,KAAKonE,KAAKpnE,KAAK+mE,WAAWvkE,SAAUukE,EAAWvkE,UAAY,EAAGswB,GACzF9yB,KAAK+mE,WAAWtlE,MAAQzB,KAAKonE,KAAKpnE,KAAK+mE,WAAWtlE,MAAOslE,EAAWtlE,OAAS,EAAGqxB,GAChF9yB,KAAK+mE,WAAW7zD,QAAUlT,KAAKonE,KAAKpnE,KAAK+mE,WAAW7zD,QAAS6zD,EAAW7zD,SAAW,EAAG4f,EAC1F,CAKA,YAAAu0C,CAAar0D,GACT,MAAMq9C,EAAY,CACdhuD,EAAGrC,KAAK+mE,WAAW1kE,EACnBC,EAAGtC,KAAK+mE,WAAWzkE,EACnBE,SAAUxC,KAAK+mE,WAAWvkE,SAC1Bf,MAAOzB,KAAK+mE,WAAWtlE,MACvByR,QAASlT,KAAK+mE,WAAW7zD,SAI7B,GAAIlT,KAAK8mE,gBAAiB,CACtB,MAAMzL,EAAYr7D,KAAKwmE,WAAWxmE,KAAK8mE,iBACvC,GAAIzL,EAAW,CACX,MAAMtgD,EAAUvW,KAAK+N,MAAQ8oD,EAAUhjD,UAEvC,OAAQrY,KAAK8mE,iBACT,IAAK,aACDzW,EAAUhuD,GAAqD,GAAhDuE,KAAKiE,IAAIkQ,EAAU,IAAMsgD,EAAUnqD,WAAkBmqD,EAAUptD,UAC9EoiD,EAAU7tD,UAAwE,EAA5DoE,KAAKiE,IAAIkQ,EAAU,IAAMsgD,EAAUnqD,UAAYtK,KAAKgE,GAAG,GAASywD,EAAUptD,UAChG,MAEJ,IAAK,YACDoiD,EAAU/tD,GAAqD,GAAhDsE,KAAKiE,IAAIkQ,EAAU,IAAMsgD,EAAUnqD,WAAkBmqD,EAAUptD,UAC9EoiD,EAAU5uD,OAAS,EAAoD,IAAhDmF,KAAKiE,IAAIkQ,EAAU,IAAMsgD,EAAUnqD,WAAoBmqD,EAAUptD,UACxF,MAEJ,IAAK,aACD,MAAMxF,EAAIsS,EAAU,IAAOsgD,EAAUnqD,UACrCm/C,EAAUhuD,GAAKuE,KAAKiE,IAAIpC,GAAK7B,KAAK0E,IAAQ,EAAJ7C,GAAS,GAAK4yD,EAAUptD,UAC9DoiD,EAAU/tD,GAAKsE,KAAK0E,IAAI7C,GAAK7B,KAAKiE,IAAQ,EAAJpC,GAAS,GAAK4yD,EAAUptD,UAC9DoiD,EAAU7tD,UAA8B,EAAlBoE,KAAKiE,IAAQ,EAAJpC,GAAa4yD,EAAUptD,UACtD,MAEJ,IAAK,cACDoiD,EAAU5uD,OAAS,EAAoD,IAAhDmF,KAAKiE,IAAIkQ,EAAU,IAAMsgD,EAAUnqD,WAAoBmqD,EAAUptD,UACxFoiD,EAAUn9C,SAAW,GAAsD,GAAhDtM,KAAKiE,IAAIkQ,EAAU,IAAMsgD,EAAUnqD,WAAmBmqD,EAAUptD,UAC3F,MAEJ,IAAK,aACD,MAAMq5D,EAAY1gE,KAAKgJ,MAAMmL,EAAU,IAAMsgD,EAAUnqD,WAAa,EAC9Dq2D,EAAgBxsD,EAAU,IAAMsgD,EAAUnqD,UAAa,EACvDs2D,EAAaxnE,KAAKwnE,WAAWD,GAEjB,IAAdD,EAAiBjX,EAAUhuD,GAAkB,GAAbmlE,EAAkBnM,EAAUptD,UACzC,IAAdq5D,IAAiBjX,EAAUhuD,GAAkB,GAAbmlE,EAAkBnM,EAAUptD,WAErEoiD,EAAU/tD,GAA+D,EAA1DsE,KAAKib,IAAIjb,KAAKiE,IAAIkQ,EAAU,IAAMsgD,EAAUnqD,YAAkBmqD,EAAUptD,UAGnG,CACJ,CAEA,OAAOoiD,CACX,CAKA,IAAA+W,CAAK7oB,EAAG/2C,EAAGiB,GACP,OAAO81C,GAAK/2C,EAAI+2C,GAAK91C,CACzB,CAKA,UAAA++D,CAAW/+D,GACP,OAAOA,EAAIA,GAAK,EAAI,EAAIA,EAC5B,ECxIG,MAAMg/D,GAGD,EAHCA,GAIJ,EAJIA,GAKH,EAgWGC,GAAuB,IAzV7B,MACH,WAAA5nE,GAEIE,KAAK2nE,UAAY,IAAItkE,IACrBrD,KAAK4nE,kBAAoB,EAGzB5nE,KAAK6nE,QAAU,KACf7nE,KAAKwvC,WAAY,EACjBxvC,KAAK8nE,cAAgB,EACrB9nE,KAAKgT,UAAY,EACjBhT,KAAK+nE,IAAM,GACX/nE,KAAKgoE,WAAa,EAGlBhoE,KAAKioE,UAAY,GACjBjoE,KAAKkoE,gBAAkB,IAAOloE,KAAKioE,UACnCjoE,KAAKmoE,YAAc,MAGnBnoE,KAAKooE,qBAAuB,CACxBC,CAACZ,IAA2B,EAC5Ba,CAACb,IAAwB,EACzBc,CAACd,IAAyB,GAI9BznE,KAAKwoE,mBAAqB,KAC1BxoE,KAAKyoE,iBAAmB,GACxBzoE,KAAK0oE,eAAiB,GAGtB1oE,KAAK2oE,KAAO3oE,KAAK2oE,KAAK5nE,KAAKf,KAC/B,CASA,QAAA4oE,CAASjnE,EAAU8M,EAnDX,EAmDgDxK,EAAU,MAC9D,GAAwB,mBAAbtC,EACP,MAAM,IAAI8E,MAAM,+BAGpB,MAAM2b,IAAOpiB,KAAK4nE,kBAkBlB,OAfA5nE,KAAK2nE,UAAU7iE,IAAIsd,EAAI,CACnBzgB,WACA8M,WACAxK,UACA4kE,QAAS,EACTC,SAAU,EACVC,UAAW,EACXp0D,SAAS,IAIe,IAAxB3U,KAAK2nE,UAAUx0D,MAAenT,KAAKwvC,WACnCxvC,KAAKwL,QAGF4W,CACX,CAMA,UAAA4mD,CAAW5mD,GACPpiB,KAAK2nE,UAAUp2B,OAAOnvB,GAGM,IAAxBpiB,KAAK2nE,UAAUx0D,MAAcnT,KAAKwvC,WAClCxvC,KAAK0vC,MAEb,CAOA,UAAAu5B,CAAW7mD,EAAIzN,GACX,MAAMhT,EAAW3B,KAAK2nE,UAAU9iE,IAAIud,GAChCzgB,IACAA,EAASgT,QAAUA,EAE3B,CAKA,KAAAnJ,GACQxL,KAAKwvC,YAETxvC,KAAKwvC,WAAY,EACjBxvC,KAAK8nE,cAAgB1tD,YAAY7H,MACjCvS,KAAK6nE,QAAU13B,sBAAsBnwC,KAAK2oE,MAC9C,CAKA,IAAAj5B,GACS1vC,KAAKwvC,YAEVxvC,KAAKwvC,WAAY,EACbxvC,KAAK6nE,UACLqB,qBAAqBlpE,KAAK6nE,SAC1B7nE,KAAK6nE,QAAU,MAEvB,CAMA,IAAAc,CAAKpkE,GACD,IAAKvE,KAAKwvC,UAAW,OAGrBxvC,KAAKgT,UAAYzO,EAAYvE,KAAK8nE,cAClC9nE,KAAK8nE,cAAgBvjE,EAGrBvE,KAAKgoE,aACDhoE,KAAKgoE,WAAa,IAAO,IACzBhoE,KAAK+nE,IAAMnhE,KAAKgB,MAAM,KAAQ5H,KAAKgT,WAAa,SAIpDhT,KAAKyoE,iBAAiB3mE,KAAK9B,KAAKgT,WAC5BhT,KAAKyoE,iBAAiB1jE,OAAS/E,KAAK0oE,gBACpC1oE,KAAKyoE,iBAAiBzjE,QAIHoV,YAAY7H,MAAnC,MAGM42D,EAAsBnpE,KAAKopE,2BAGjC,IAAIC,EAAY,EAEhB,IAAK,MAAM56D,IAAY,CAhKjB,EACJ,EACE,EACH,EACC,GAkKC,CAEC,GAAIA,EAxKF,GAwK2C46D,EAA+B,GAAnBrpE,KAAKmoE,YAC1D,MAIJ,GAAInoE,KAAKspE,mBAAmB76D,GACxB,SAIJ,MAAMk5D,EAAYwB,EAAoBtkE,IAAI4J,IAAa,GAEvD,IAAK,MAAM86D,KAAgB5B,EAAW,CAClC,IAAK4B,EAAa50D,QAAS,SAE3B,MAAM60D,EAAgBpvD,YAAY7H,MAElC,IAEQg3D,EAAatlE,QACbslE,EAAa5nE,SAAS2S,KAAKi1D,EAAatlE,QAASjE,KAAKgT,UAAWzO,GAEjEglE,EAAa5nE,SAAS3B,KAAKgT,UAAWzO,GAI1C,MAAMklE,EAAervD,YAAY7H,MAAQi3D,EACzCD,EAAaR,WAAaU,EAC1BF,EAAaT,WACbS,EAAaV,QAAUtkE,EACvB8kE,GAAaI,CAEjB,CAAE,MAAO7nE,GAGD2nE,EAAaT,SAAW,GAAKS,EAAaR,UAAYQ,EAAaT,SAAW,KAE9ES,EAAa50D,SAAU,EAE/B,CAGA,GAAI00D,EAAYrpE,KAAKmoE,YACjB,KAER,CACJ,CAGkB/tD,YAAY7H,MAGdvS,KAAKmoE,YAKrBnoE,KAAK6nE,QAAU13B,sBAAsBnwC,KAAK2oE,KAC9C,CAMA,wBAAAS,GACI,MAAMM,EAAS,IAAIrmE,IAEnB,IAAK,MAAO+e,EAAImnD,KAAiBvpE,KAAK2nE,UAAW,CAC7C,MAAMl5D,EAAW86D,EAAa96D,SAEzBi7D,EAAO3vD,IAAItL,IACZi7D,EAAO5kE,IAAI2J,EAAU,IAGzBi7D,EAAO7kE,IAAI4J,GAAU3M,KAAKynE,EAC9B,CAEA,OAAOG,CACX,CAOA,kBAAAJ,CAAmB76D,GAEf,GA/PM,IA+PFA,EAAyC,OAAO,EAGpD,GAAIzO,KAAK+nE,IAAM,IAAMt5D,GA/PpB,EA+PuD,OAAO,EAC/D,GAAIzO,KAAK+nE,IAAM,IA/Pb,IA+PmBt5D,EAAqC,OAAO,EAGjE,GApQI,IAoQAA,GAEA,GAAIzO,KAAK+nE,IAAM,KACX/nE,KAAKooE,qBAAqB35D,KACtBzO,KAAKooE,qBAAqB35D,GAAY,GAAM,GAAG,OAAO,OAE3D,GAzQN,IAyQUA,GAEP,GAAIzO,KAAK+nE,IAAM,KACX/nE,KAAKooE,qBAAqB35D,KACtBzO,KAAKooE,qBAAqB35D,GAAY,GAAM,GAAG,OAAO,OAE3D,GA9QL,IA8QSA,IAEPzO,KAAKooE,qBAAqB35D,KACtBzO,KAAKooE,qBAAqB35D,GAAY,GAAM,GAAG,OAAO,EAG9D,OAAO,CACX,CAMA,QAAAwxC,GACI,MAAMmgB,EAAQ,CACV2H,IAAK/nE,KAAK+nE,IACVC,WAAYhoE,KAAKgoE,WACjB2B,cAAe3pE,KAAK2nE,UAAUx0D,KAC9By2D,iBAAkB,EAClBC,aAAc,EACdC,aAAcC,KAIlB,GAAI/pE,KAAKyoE,iBAAiB1jE,OAAS,EAAG,CAClC,IAAIilE,EAAQ,EACZ,IAAK,MAAM13D,KAAQtS,KAAKyoE,iBACpBuB,GAAS13D,EACT8tD,EAAMyJ,aAAejjE,KAAKiB,IAAIu4D,EAAMyJ,aAAcv3D,GAClD8tD,EAAM0J,aAAeljE,KAAKkB,IAAIs4D,EAAM0J,aAAcx3D,GAEtD8tD,EAAMwJ,iBAAmBI,EAAQhqE,KAAKyoE,iBAAiB1jE,MAC3D,CAGAq7D,EAAM+I,oBAAsB,GAC5B,IAAK,MAAO/mD,EAAIzgB,KAAa3B,KAAK2nE,UAAW,CACzC,MAAMl5D,EAAW9M,EAAS8M,SACrB2xD,EAAM+I,oBAAoB16D,KAC3B2xD,EAAM+I,oBAAoB16D,GAAY,CAClC7J,MAAO,EACPmkE,UAAW,EACXp0D,QAAS,IAGjByrD,EAAM+I,oBAAoB16D,GAAU7J,QACpCw7D,EAAM+I,oBAAoB16D,GAAUs6D,WAAapnE,EAASonE,UACtDpnE,EAASgT,SAASyrD,EAAM+I,oBAAoB16D,GAAUkG,SAC9D,CAEA,OAAOyrD,CACX,CAMA,YAAA6J,CAAalC,GACT/nE,KAAKioE,UAAYrhE,KAAKiB,IAAI,GAAIjB,KAAKkB,IAAI,IAAKigE,IAC5C/nE,KAAKkoE,gBAAkB,IAAOloE,KAAKioE,UACnCjoE,KAAKmoE,YAAcnoE,KAAKkoE,eAC5B,CAMA,qBAAAgC,CAAsBC,GAClBnqE,KAAKwoE,mBAAqB2B,CAC9B,CAKA,OAAApnE,GACI/C,KAAK0vC,OACL1vC,KAAK2nE,UAAUzlE,QACflC,KAAKyoE,iBAAmB,EAC5B,GCnQJ,MAAM2B,GACF,WAAAtqE,CAAYuqE,EAAevP,EAAU,IACjC96D,KAAKqqE,cAAgBA,EACrBrqE,KAAKC,IAAMoqE,EAAcnqE,aAMzBF,KAAK6vD,kBAAoB,IAAIrO,GAG7BxhD,KAAKq7C,iBAAmB,KAGxBr7C,KAAKsqE,gBAAkB,IAAI1b,GAAgB5uD,MAC3CA,KAAKuqE,eAAiB,IAAI7S,GAC1B13D,KAAK0vD,eAAiB,IAAIsJ,GAAeh5D,MACzCA,KAAKwqE,YAAc,IAAIzO,GAAY/7D,MACnCA,KAAKyqE,kBAAoB,IAAI/M,GAAkB19D,MAC/CA,KAAK0qE,aAAe,IAAI1I,GAAahiE,MACrCA,KAAK2qE,aAAe,IAAIvH,GAAapjE,MACrCA,KAAK4qE,cAAgB,IAAI/F,GAAc7kE,MACvCA,KAAK6qE,qBAAuB,IAAItE,GAAqBvmE,MAGrDA,KAAKgmB,OAAS,CACVq9C,UAAWvI,EAAQuI,WAAa,UAChCyH,gBAAiBhQ,EAAQgQ,iBAAmB,GAC5CvgC,eAAgBuwB,EAAQvwB,gBAAkB,IAC1CwgC,iBAAkBjQ,EAAQiQ,kBAAoB,UAC9CpN,eAAgB7C,EAAQ6C,gBAAkB,IAC1C5X,eAAgB+U,EAAQ/U,gBAAkB,IAC1CilB,eAAgBlQ,EAAQkQ,gBAAkB,UAC1CC,UAAWnQ,EAAQmQ,WAAa,EAChCC,cAAe,IACfC,UAAWrQ,EAAQqQ,WAAa,GAIpC,MAAMC,EAAaxkE,KAAKkB,IACpB9H,KAAKqqE,cAAc5pE,OAAS,IAC5BT,KAAKqqE,cAAc3pE,QAAU,KAEjCV,KAAK2e,YAAeysD,EAAaprE,KAAKgmB,OAAOklD,cAAiBlrE,KAAKgmB,OAAOilD,UAG1EjrE,KAAKqS,MAAQ,CACT9O,QAAS,UACTuJ,UAAW9M,KAAKgmB,OAAO+kD,iBACvBpnE,cAAe,EACfE,WAAY,EACZuJ,YAAapN,KAAKgmB,OAAO+/B,eACzB14C,YAAY,EACZ4K,UAAU,EACV0sC,WAAW,EACX6B,UAAU,EACVwV,UAAU,EACVC,iBAAiB,EACjBoP,WAAY,CAAEhpE,EAAG,EAAGC,EAAG,GACvBymD,cAAe,EACfC,YAAY,EACZsiB,qBAAqB,EACrBC,WAAY,CAAElpE,EAAG,EAAGC,EAAG,GACvBkpE,mBAAoB,EAEpBpkB,aAAc,EACdqkB,mBAAoB,EACpB/jB,UAAW,EACXD,aAAc,EACdikB,cAAc,EAEd1N,YAAa,KAEb9yC,eAAgB,EAChB3R,aAAc,EACdoyD,iBAAiB,EACjB3vD,eAAgB,EAChB6hD,eAAgB,EAChBC,gBAAiB,EACjBC,iBAAiB,EACjB6N,iBAAkB,EAElBlG,eAAgB,EAChB7b,cAAe,EACfgiB,mBAAoBzxD,YAAY7H,OAQpCvS,KAAK8rE,kBAAoB,CACrBnU,gBAAiB,KACjB0E,SAAU,KACVC,QAAS,KACTyP,SAAU,KACVC,QAAS,MAIbhsE,KAAKisE,gBAAkB,CACnB5P,SAAU,KACVC,QAAS,KACTyP,SAAU,KACVC,QAAS,MAIbhsE,KAAKoiE,gBAAkB,KACvBpiE,KAAKqiE,aAAe,KACpBriE,KAAKwiE,sBAGLxiE,KAAKD,OAASsqE,EAActqE,OAG5BC,KAAKksE,UAAY,IAAI7oE,IACrBrD,KAAKmsE,aAAe,GAGpBnsE,KAAK8uD,kBAAoB,CACrBzhC,OAAQ,CACJgmB,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZob,MAAO,CACH6jB,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZgc,MAAO,CACHijB,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ0gB,KAAM,CACFue,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ2c,IAAK,CACDsiB,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ8nB,KAAM,CACFmX,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ00B,OAAQ,CACJuK,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZq1B,SAAU,CACN4J,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ01B,MAAO,CACHuJ,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ0qB,MAAO,CACHuU,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,KACRua,OAAQ,EACRD,OAAQ,GAEZ0H,QAAS,CACLid,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ+1B,KAAM,CACFkJ,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZkwB,QAAS,CACL+O,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ6c,QAAS,CACLoiB,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZutB,KAAM,CACF0R,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZqzB,QAAS,CACL4L,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ6jB,MAAO,CACHob,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ26C,UAAW,CACP1b,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ46C,KAAM,CACF3b,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,KACR0L,QAAS,EACTC,QAAS,GAEbmnB,OAAQ,CACJmM,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ66C,SAAU,CACN5b,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ86C,UAAW,CACP7b,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ+6C,WAAY,CACR9b,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZg7C,gBAAiB,CACb/b,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZuhB,KAAM,CACF0d,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZwpB,QAAS,CACLyV,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,MAEZ6qB,KAAM,CACFoU,QAAQ,EACRh7B,UAAW,EACXxP,SAAU,EACVuL,OAAQ,OAKhBpU,KAAKosE,gBAAkB,CACnB3iE,QAAS,CACL4pC,QAAQ,EACRh7B,UAAW,EACX7J,SAAU,EACVP,UAAW,EACXo+D,YAAa,IAAuB,IAAhBzlE,KAAK8I,UAE7BlG,UAAW,CACP6pC,QAAQ,EACRh7B,UAAW,EACX7J,SAAU,EACVP,UAAW,EACXo+D,YAAa,IAAuB,IAAhBzlE,KAAK8I,UAE7BhG,MAAO,CACH2pC,QAAQ,EACRh7B,UAAW,EACX7J,SAAU,EACVP,UAAW,EACXo+D,YAAa,IAAuB,IAAhBzlE,KAAK8I,UAE7BnG,QAAS,CACL8pC,QAAQ,EACRh7B,UAAW,EACX7J,SAAU,EACVP,UAAW,EACXo+D,YAAa,IAAuB,IAAhBzlE,KAAK8I,UAE7B/F,QAAS,CACL0pC,QAAQ,EACRh7B,UAAW,EACX7J,SAAU,EACVP,UAAW,EACXo+D,YAAa,IAAuB,IAAhBzlE,KAAK8I,WAKjC1P,KAAKq5D,cAAgB,GACrBr5D,KAAKw5D,SAAW,EAChBx5D,KAAKs5D,eAAiB,EACtBt5D,KAAKu5D,kBAAoB,IAGzBv5D,KAAKssE,eAAiB,GACtBtsE,KAAKusE,eAAiB,EAGtBvsE,KAAKy5D,OAAS,GAGdz5D,KAAK2jD,cAAgB,CACjBtQ,QAAQ,EACRrkB,MAAO,KACP3W,UAAW,EACXm0D,gBAAiB,KACjBC,cAAe,KACfh6D,OAAQ,EACRC,OAAQ,EACRg6D,UAAW,EACXC,WAAY,EACZC,YAAa,EACbC,WAAY,GAIhB7sE,KAAK23D,gBAAkB,CACnBtkB,QAAQ,EACRqlB,UAAW14D,KAAKqS,MAAMvF,UACtB6rD,QAAS34D,KAAKqS,MAAMvF,UACpB8rD,cAAe54D,KAAKqS,MAAM1O,cAC1Bk1D,YAAa74D,KAAKqS,MAAM1O,cACxBkF,SAAU,EACVwP,UAAW,EACX7J,SAAU,MAIdxO,KAAKsZ,mBAAqB,CACtB7P,QAAS,CAELw8B,SAAU,EACV6mC,eAAgB,KAChBC,eAAgB,EAChBC,kBAAmB,IAEnB9hD,eAAgB,EAChB3R,aAAc,EACdoyD,iBAAiB,EACjB3vD,eAAgB,EAChBnJ,UAAW,IAEXgrD,eAAgB,IAChBC,gBAAiB,GACjBC,iBAAiB,GAErBv0D,UAAW,CAEPy8B,SAAU,GACV6mC,eAAgB,IAChBC,eAAgB,IAEhB7hD,eAAgB,EAChB3R,aAAc,EACd0zD,mBAAmB,EACnBjxD,eAAgB,KAEhB6hD,eAAgB,IAChBC,gBAAiB,IACjBC,iBAAiB,GAErBr0D,MAAO,CAEHu8B,UAAU,EACV6mC,eAAgB,GAChBC,eAAgB,IAEhB7hD,eAAgB,IAChB3R,aAAc,EACd2zD,oBAAoB,EACpBlxD,eAAgB,GAEhB6hD,eAAgB,GAChBC,gBAAiB,IACjBC,iBAAiB,GAErBx0D,QAAS,CAEL08B,SAAU,EACV6mC,eAAgB,IAChBC,eAAgB,KAEhB7hD,eAAgB,EAChB3R,aAAc,EACd4zD,oBAAoB,EACpBnxD,eAAgB,IAEhB6hD,eAAgB,IAChBC,gBAAiB,GACjBC,iBAAiB,GAErBp0D,QAAS,CAELs8B,UAAU,GACV6mC,eAAgB,IAChBC,eAAgB,GAEhB7hD,eAAgB,IAChB3R,aAAc,EACd6zD,oBAAoB,EACpBpxD,eAAgB,IAEhB6hD,eAAgB,GAChBC,gBAAiB,GACjBC,iBAAiB,IAKzB/9D,KAAK8nE,cAAgB,CAEzB,CAQA,UAAAlO,CAAWv0D,GACP,OAAOA,EAAQrF,KAAK2e,WACxB,CAKA,mBAAA6jD,GAEIxiE,KAAKoiE,gBAAkB3sB,SAAS6lB,cAAc,UAC9Ct7D,KAAKqiE,aAAeriE,KAAKoiE,gBAAgBliE,WAAW,KAAM,CACtDC,OAAO,EACPC,gBAAgB,EAChBC,oBAAoB,IAOxBL,KAAKyiE,qBACT,CAKA,mBAAAA,GACI,GAAIziE,KAAKoiE,iBAAmBpiE,KAAKqqE,cAAe,CAC5C,MAAM5pE,EAAQT,KAAKqqE,cAActqE,OAAOU,MAClCC,EAASV,KAAKqqE,cAActqE,OAAOW,OAErCV,KAAKoiE,gBAAgB3hE,QAAUA,GAAST,KAAKoiE,gBAAgB1hE,SAAWA,IACxEV,KAAKoiE,gBAAgB3hE,MAAQA,EAC7BT,KAAKoiE,gBAAgB1hE,OAASA,EAEtC,CACJ,CAKA,MAAAw3C,CAAO7lC,EAAOW,EAAW+qC,EAAmB,MAEpC/9C,KAAKwoE,oBACLxoE,KAAKwoE,mBAAmB6E,iBAE5B,MAAMC,EAAiBlzD,YAAY7H,MAG7Bg7D,EAAmBvtE,KAAK6qE,qBAAqBxD,aAAar0D,GAC5D+qC,GAEAA,EAAiB17C,GAAK07C,EAAiB17C,GAAK,IAAMkrE,EAAiBlrE,GAAK,GACxE07C,EAAiBz7C,GAAKy7C,EAAiBz7C,GAAK,IAAMirE,EAAiBjrE,GAAK,GACxEy7C,EAAiBv7C,UAAYu7C,EAAiBv7C,UAAY,IAAM+qE,EAAiB/qE,UAAY,GAC7Fu7C,EAAiBt8C,OAASs8C,EAAiBt8C,OAAS,IAAM8rE,EAAiB9rE,OAAS,IAEpFs8C,EAAmBwvB,EAIvBvtE,KAAK+9C,iBAAmBA,EAGxB/9C,KAAKyiE,sBAGL,MAAM+K,EAAextE,KAAKqqE,cAAc5pE,OAAST,KAAKD,OAAOU,OAAS,IAChEgtE,EAAgBztE,KAAKqqE,cAAc3pE,QAAUV,KAAKD,OAAOW,QAAU,IAGnEgtE,EAAc1tE,KAAKC,IAOzB,GANAD,KAAKC,IAAMD,KAAKqiE,aAGhBriE,KAAKC,IAAIkC,UAAU,EAAG,EAAGqrE,EAAcC,GAGnCztE,KAAK2tE,cAAgB3tE,KAAK2tE,aAAa1xD,8BAA+B,CACtE,MAAM2xD,EAAmB5tE,KAAK2tE,aAAa1xD,gCACvC2xD,EACA5tE,KAAK43D,wBAAwBgW,GAG7B5tE,KAAK43D,wBAAwB,KAErC,CAWA,GARI53D,KAAK23D,iBAAmB33D,KAAK23D,gBAAgBtkB,QAC7CrzC,KAAK84D,sBAAsB9lD,GAI/BhT,KAAK6tE,aAAa76D,GAGdhT,KAAKqS,MAAMi5D,oBAAqB,CAEhC,MAAMhhD,EAAY,IACZkJ,EAAY,GAClBxzB,KAAKqS,MAAMg5D,WAAWhpE,IAAMrC,KAAKqS,MAAMk5D,WAAWlpE,EAAImxB,EAAYxzB,KAAKqS,MAAMg5D,WAAWhpE,GAAKioB,EAC7FtqB,KAAKqS,MAAMg5D,WAAW/oE,IAAMtC,KAAKqS,MAAMk5D,WAAWjpE,EAAIkxB,EAAYxzB,KAAKqS,MAAMg5D,WAAW/oE,GAAKgoB,CACjG,KAAO,CAEH,MAAMA,EAAY,GAClBtqB,KAAKqS,MAAMg5D,WAAWhpE,IAAM,EAAIrC,KAAKqS,MAAMg5D,WAAWhpE,GAAKioB,EAC3DtqB,KAAKqS,MAAMg5D,WAAW/oE,IAAM,EAAItC,KAAKqS,MAAMg5D,WAAW/oE,GAAKgoB,CAC/D,CAGA,MAAM8gD,EAAaxkE,KAAKkB,IAAI0lE,EAAcC,GAC1C,IAAI9sE,EAAU6sE,EAAe,EACzB5sE,EAAU6sE,EAAgB,EAAIztE,KAAKgmB,OAAOmlD,UAG1C94D,EAAM6I,YAAc7I,EAAM6I,WAAW2X,iBACrCjyB,EAAW6sE,EAAgB,EAAIztE,KAAKgmB,OAAOmlD,UAAcsC,EAAgBp7D,EAAM6I,WAAW2X,gBAI9F7yB,KAAK2e,YAAeysD,EAAaprE,KAAKgmB,OAAOklD,cAAiBlrE,KAAKgmB,OAAOilD,UAG1E,IAAI5lB,EAAkB,EAClBxkB,EAAgB,EAChB0J,EAAiB,EAEjBwT,IACAp9C,GAAWo9C,EAAiB17C,GAAK,EACjCzB,GAAWm9C,EAAiBz7C,GAAK,EACjC+iD,EAAkBtH,EAAiBt8C,OAAS,EAC5Co/B,GAAiBkd,EAAiBv7C,UAAY,GAAKoE,KAAKgE,GAAK,IAC7D2/B,EAAiBwT,EAAiBp6C,eAAiB,GAIvD,MAAMmqE,EAAoB9tE,KAAKsqE,gBAAgBla,yBAW/C,GAVI0d,IACAntE,GAAWmtE,EAAkBn9C,SAAW,EACxC/vB,GAAWktE,EAAkBl9C,SAAW,EACxCy0B,GAAmByoB,EAAkBrsE,OAAS,EAC9Co/B,IAAkBitC,EAAkBtrE,UAAY,GAAKoE,KAAKgE,GAAK,IAE/D2/B,EAAiBujC,EAAkB3jC,MAAQ,GAIpB,QAAvBnqC,KAAKqS,MAAM9O,SAAkD,OAA7BvD,KAAK2jD,cAAc30B,MAAgB,CACnE,MAAM1c,EAAO9N,KAAK+N,MAAQ,IAQ1B3R,GANsC,GAAvBgG,KAAKiE,IAAW,GAAPyH,GAAmBtS,KAAK2e,YAOhDhe,GALqC,EAAvBiG,KAAKiE,IAAW,GAAPyH,GAAkBtS,KAAK2e,YAM9CkiB,GAJ8C,IAAxBj6B,KAAKiE,IAAW,IAAPyH,EAKnC,CAGA,IAuBIy7D,EAAkBC,EAvBlBC,EAAkB,EAClBC,EAAgB,EAChBC,EAAiB,EACrB,GAAInuE,KAAKqS,MAAMm0C,UAAmC,YAAvBxmD,KAAKqS,MAAM9O,SAAyBgpD,GAAe,WAAYvsD,KAAKqS,OAAQ,CACnG,MAAM+7D,EAAcjiB,GAAU,YAC9B,GAAIiiB,EAAa,CACb,MAAMC,EAAUD,EAAYlnB,mBAE5B+mB,OAA8C5zD,IAA5Bra,KAAKqS,MAAMi8D,aAA6BtuE,KAAKqS,MAAMi8D,aAAeD,EAAQjoB,WAC5F+nB,EAAiBE,EAAQhoB,YACzB6nB,OAA0C7zD,IAA1Bra,KAAKqS,MAAMk8D,WAA2BvuE,KAAKqS,MAAMk8D,WAAa,EAClF,MAEIN,OAA8C5zD,IAA5Bra,KAAKqS,MAAMi8D,aAA6BtuE,KAAKqS,MAAMi8D,aAAe,GACpFH,EAAiB,GACjBD,OAA0C7zD,IAA1Bra,KAAKqS,MAAMk8D,WAA2BvuE,KAAKqS,MAAMk8D,WAAa,GAElFvuE,KAAKqS,MAAMxO,WAAa,GACxB7D,KAAKqS,MAAMjF,YAAc,GAC7B,CAMA,GAA+B,OAA3BpN,KAAKqS,MAAM2rD,YAEX+P,EAAmB/tE,KAAKqS,MAAM2rD,YAC9BgQ,EAAmB,EAAmC,IAA9BhuE,KAAKqS,MAAM2rD,YAAc,OAC9C,CAMH,MAAMwQ,EAAiBxuE,KAAKyqE,kBAAkBpL,oBAC9C0O,EAAmBS,EACnBR,EAAmB,EAA2B,IAAtBQ,EAAiB,EAC7C,CAG6B,YAAzBxuE,KAAKqS,MAAMxI,WAA2B7J,KAAKsZ,mBAAmB7P,QAAQoJ,YAEtEm7D,GAAqB,EADApnE,KAAKiE,IAAIrG,KAAK+N,MAAQ,KAAOvS,KAAKsZ,mBAAmB7P,QAAQoJ,WAKtF,MAAM6L,EAAc1e,KAAKgmB,OAAOklD,cAAgBlrE,KAAKgmB,OAAO8kD,gBAAmB9qE,KAAK2e,YAG9E8vD,EAAmBp8D,EAAM6I,YAAc7I,EAAM6I,WAAWtX,SAAYyO,EAAM6I,WAAWtX,SAAW,EAGhG8qE,EAAoB1uE,KAAKqS,MAAM6Y,gBAAkB,EAEvD,IAAIkvC,EAAa17C,EAAa+vD,EAAkBV,EAAmB1oB,EAAkB6oB,EAAgBQ,EACjGnyB,EAAa79B,EAAa1e,KAAKgmB,OAAOukB,eAAiByjC,EAAmBhuE,KAAKqS,MAAM1O,cAAgB0hD,EAAkB6oB,EAAgBQ,EAAoBnkC,EAG/J,MAAMokC,EAAyB3uE,KAAKqS,MAAM1O,cAAgB4mC,EAIrDvqC,KAAKqS,MAAMm0C,UAAmC,QAAvBxmD,KAAKqS,MAAM9O,UAEnC62D,GADmBp6D,KAAKwqE,YAAYhO,iBAKxC,IAAI7nC,EAAU,EAAGC,EAAU,EAC3B,MAAMrb,EAAevZ,KAAKqS,MAAMkH,cAAgB,EAGhD,GAAIvZ,KAAKq7C,kBAAoBr7C,KAAKosE,gBAAgBpsE,KAAKq7C,kBAAmB,CACtE,MAAMuzB,EAAU5uE,KAAKosE,gBAAgBpsE,KAAKq7C,kBAEpC9oC,EAAM6H,YAAY7H,MAGxB,IAAKq8D,EAAQv7B,QAAU9gC,GAAOq8D,EAAQvC,YAKlC,OAJAuC,EAAQv7B,QAAS,EACjBu7B,EAAQv2D,UAAY9F,EAGbvS,KAAKq7C,kBACR,IAAK,UACDuzB,EAAQpgE,SAAW,IAAsB,IAAhB5H,KAAK8I,SAC9Bk/D,EAAQ3gE,UAAY,EAAIrH,KAAK8I,SAC7Bk/D,EAAQvC,YAAc95D,EAAM,IAAuB,IAAhB3L,KAAK8I,SACxC,MACJ,IAAK,YACDk/D,EAAQpgE,SAAW,IAAuB,IAAhB5H,KAAK8I,SAC/Bk/D,EAAQ3gE,UAAY,IACpB2gE,EAAQvC,YAAc95D,EAAM,IAAuB,IAAhB3L,KAAK8I,SACxC,MACJ,IAAK,QACDk/D,EAAQpgE,SAAW,IAAuB,IAAhB5H,KAAK8I,SAC/Bk/D,EAAQ3gE,UAAY,GACpB2gE,EAAQvC,YAAc95D,EAAM,IAAuB,IAAhB3L,KAAK8I,SACxC,MACJ,IAAK,UACDk/D,EAAQpgE,SAAW,IAAsB,IAAhB5H,KAAK8I,SAC9Bk/D,EAAQ3gE,UAAY,GACpB2gE,EAAQvC,YAAc95D,EAAM,IAAuB,IAAhB3L,KAAK8I,SACxC,MACJ,IAAK,UACDk/D,EAAQpgE,SAAW,IAAuB,IAAhB5H,KAAK8I,SAC/Bk/D,EAAQ3gE,UAAY,GACpB2gE,EAAQvC,YAAc95D,EAAM,IAAuB,IAAhB3L,KAAK8I,SAMpD,GAAIk/D,EAAQv7B,OAAQ,CAChB,MAAMt4B,EAAUxI,EAAMq8D,EAAQv2D,UAE9B,GAAI0C,EAAU6zD,EAAQpgE,SAAU,CAC5B,MAAM3F,EAAWkS,EAAU6zD,EAAQpgE,SAGnC,OAAOxO,KAAKq7C,kBACR,IAAK,UAED,MAAM3tB,EAAU,EAAI7kB,EACdqI,EAAY,GACZ29D,EAAUjoE,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAKsG,GAAawc,EAC3DiH,EAAUk6C,EAAUD,EAAQ3gE,UAC5B2mB,EAAUi6C,EAAUD,EAAQ3gE,UAAY,GACxC,MAEJ,IAAK,YAED,MAAM6gE,EAAYloE,KAAKiE,IAAIhC,EAAWjC,KAAKgE,IAC3CwvD,GAAe,EAAIwU,EAAQ3gE,UAAY6gE,EACvCvyB,GAAe,EAAwB,GAApBqyB,EAAQ3gE,UAAkB6gE,EAC7C,MAEJ,IAAK,QAED,MAAMC,EAAWnoE,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,IAC/CwvD,GAAe,EAAIwU,EAAQ3gE,UAAY8gE,EAEvCn6C,GAAsB,EAAXm6C,EACX,MAEJ,IAAK,UAED,MAAMC,EAAa,EAAIpoE,KAAK0E,IAAIzC,EAAWjC,KAAKgE,IAChDwvD,GAAe,EAAI,IAAO4U,EAC1BzyB,GAAe,EAAIqyB,EAAQ3gE,UAAY+gE,EACvC,MAEJ,IAAK,UAED,MAAMC,EAAgBroE,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,IACpDwvD,GAAe,EAAI,GAAM6U,EACzB1yB,GAAe,EAAIqyB,EAAQ3gE,UAAYghE,EAGnD,MAEIL,EAAQv7B,QAAS,CAEzB,CACJ,MAAO,GAAIrzC,KAAKqS,MAAMhF,YAAckM,EAAe,EAAG,CAElD,MAAMwL,EAAiBne,KAAKiB,IAAI0R,EAAcvZ,KAAKqS,MAAMhF,WAAarN,KAAK45D,WAAW,GAAK,GAC3FjlC,GAAW/tB,KAAK8I,SAAW,IAAOqV,EAClC6P,GAAWhuB,KAAK8I,SAAW,IAAOqV,CACtC,CAGA,MAAMmqD,EAAQvuE,EAAUX,KAAKqS,MAAMg5D,WAAWhpE,EAAIsyB,EAC5Cw6C,EAAQvuE,EAAUZ,KAAKqS,MAAMg5D,WAAW/oE,EAAIsyB,EAG5CriB,EAAM6H,YAAY7H,MAExB,GAAIvS,KAAK4qE,eAAiB5qE,KAAK4qE,cAAcxE,YAAa,CAEtD,MAAMgJ,EAAcpvE,KAAK4qE,cAAc3E,YAAY1zD,GAC/C68D,IACApvE,KAAKqS,MAAMqzD,eAAiB0J,EAAY5sE,SACxCxC,KAAKqS,MAAMw3C,cAAgBulB,EAAYjJ,SAAW,EAAIiJ,EAAYrhE,MAE1E,MAAwC,IAA7B/N,KAAKqS,MAAMw3C,gBAElB7pD,KAAKqS,MAAMqzD,gBAAkB1lE,KAAKqS,MAAMw3C,eAK5C,MAAMwlB,EAAgBxuC,EAAiB7gC,KAAKqS,MAAMqzD,eAAiB9+D,KAAKgE,GAAK,IAmC7E,GAhCsB,IAAlBykE,IACArvE,KAAKC,IAAIwC,OACTzC,KAAKC,IAAIyC,UAAUwsE,EAAOC,GAC1BnvE,KAAKC,IAAI0C,OAAO0sE,GAChBrvE,KAAKC,IAAIyC,WAAWwsE,GAAQC,IAI5B5iB,GAAe,iBAAkBvsD,KAAKqS,OAEtCg6C,GAAY,iBAAkBrsD,KAAKC,IAAK,CACpCoC,EAAG6sE,EACH5sE,EAAG6sE,EACH77D,OAAQipC,EACRvpC,cAEGu5C,GAAe,aAAcvsD,KAAKqS,SAKrCrS,KAAKqS,MAAMm0C,UAAmC,YAAvBxmD,KAAKqS,MAAM9O,SAAyBgpD,GAAe,WAAYvsD,KAAKqS,QAC3FrS,KAAKC,IAAIwC,OACTzC,KAAKC,IAAI4/C,YAAcsuB,EACvBnuE,KAAK0qE,aAAahI,WAAWwM,EAAOC,EAAO5yB,EAAY,CAAEtuC,UAAW0gE,IACpE3uE,KAAKC,IAAI4C,WAET7C,KAAK0qE,aAAahI,WAAWwM,EAAOC,EAAO5yB,EAAY,CAAEtuC,UAAW0gE,KAKxEb,GAAqBA,EAAkB/a,UAAW,CAClD,MAAMpxB,EAAOmsC,EAAkB/a,UACzB9yD,EAAMD,KAAKC,IAEjBA,EAAIwC,OACJxC,EAAIu5C,yBAA2B,UAG/B,MAAM81B,EAASlV,EAAaz4B,EAAKpJ,YAC3Bg3C,EAASnV,EAAaz4B,EAAK6xB,YAEjC,GAAI+b,EAASD,EAAQ,CAEjB,MAAMr2B,EAAWknB,GAAcgB,kBAC3BlhE,EAAKivE,EAAOC,EAAOG,EAAQJ,EAAOC,EAAOI,EACzC,CACI,CAAE9sC,OAAQ,EAAG3+B,MAAO,0BACpB,CAAE2+B,OAAQ,GAAK3+B,MAAO,uBAAwC,IAAjB69B,EAAK1zB,cAClD,CAAEw0B,OAAQ,GAAK3+B,MAAO,uBAAwC,IAAjB69B,EAAK1zB,cAClD,CAAEw0B,OAAQ,GAAK3+B,MAAO,uBAAwC,IAAjB69B,EAAK1zB,cAClD,CAAEw0B,OAAQ,EAAG3+B,MAAO,4BAI5B7D,EAAI84C,UAAYE,EAChBh5C,EAAI04C,YACJ14C,EAAI24C,IAAIs2B,EAAOC,EAAOI,EAAQ,EAAa,EAAV3oE,KAAKgE,IACtC3K,EAAI24C,IAAIs2B,EAAOC,EAAOvoE,KAAKiB,IAAI,EAAGynE,GAAS,EAAa,EAAV1oE,KAAKgE,IAAQ,GAC3D3K,EAAI+4C,MACR,CAEA/4C,EAAI4C,SACR,CAGI0pD,GAAe,iBAAkBvsD,KAAKqS,QACtCg6C,GAAY,iBAAkBrsD,KAAKC,IAAK,CACpCoC,EAAG6sE,EACH5sE,EAAG6sE,EACH77D,OAAQ8mD,EACR32D,WAAYzD,KAAKqS,MAAM5O,YAAc,EACrCuP,eAOJhT,KAAKqS,MAAMm0C,UAAmC,YAAvBxmD,KAAKqS,MAAM9O,WAClCvD,KAAKC,IAAI4/C,YAAcouB,GAM3B,IAAIxK,EAAc,KACd+L,EAAgB,KAChBxvE,KAAKyvE,eACLzvE,KAAKyvE,aAAa90D,SAElB8oD,EAAczjE,KAAKyvE,aAAaC,gBAAgB,EAAG,EAAGtV,GACtDoV,EAAgBxvE,KAAKyvE,aAAaE,oBAItC,IAAIC,GAAsB,GACtBJ,GAAyC,QAAvBA,EAAclqE,MAAyC,iBAAvBkqE,EAAclqE,OAChEtF,KAAK6vE,iBAAiBX,EAAOC,EAAO/U,EAAYoV,GAChDI,GAAsB,GAY1B5vE,KAAK2qE,aAAat3D,WAAW67D,EAAOC,EAAO/U,EAAY,CACnD3nD,OAAQ,EACRC,OAAQ,EACRlQ,SAAU6sE,EACV5L,YAAaA,IAIbzjE,KAAK0vD,iBACL1vD,KAAK0vD,eAAe/0C,OAAO3H,GAC3BhT,KAAK0vD,eAAesL,kBAIxB,MAAM8U,EAAe9vE,KAAKyvE,aAAezvE,KAAKyvE,aAAaK,aAAe,KACpEC,EAAc/vE,KAAKyvE,aAAezvE,KAAKyvE,aAAaM,YAAc,KAClEC,EAAyBhwE,KAAKyvE,cAAgC,UAAhBM,GAA2B/vE,KAAKyvE,aAAah0D,gBAC3Fw0D,EAA2BjwE,KAAKyvE,cAAiC,UAAjBK,GAA4B9vE,KAAKyvE,aAAah0D,gBAC9Fy0D,EAAYV,GAAwC,iBAAvBA,EAAclqE,KAG3C6qE,EAAgBnwE,KAAKyvE,cAAgBzvE,KAAKyvE,aAAah0D,iBACxC,UAAjBq0D,GAA4C,SAAhBC,EAC1BK,EAAgBpwE,KAAKyvE,cAAgBzvE,KAAKyvE,aAAah0D,iBACxC,SAAjBq0D,GAA2C,UAAhBC,EAY/B,IARIP,GAAyC,aAAvBA,EAAclqE,MAA8C,UAAvBkqE,EAAclqE,MACpE8qE,GAEDpwE,KAAKqwE,iBAAiBnB,EAAOC,EAAO/U,EAAYoV,EAAe/L,GAAa,EAAO,IAKjFyM,GAAaV,EAAcc,cAAiBN,GAA0BC,KACvEE,EAAe,CAEhB,MAAMI,EAAeL,GAAaV,EAAcc,aAAgBd,EAAcc,aAAe,CACzFhrE,KAAM,QACNkrE,SAAU,EACV1sE,MAAO,qBACP2sE,YAAa,UAIjB,IAAIxM,EAAgB,EAChBC,EAAgB,EAChBxpC,EAAgB,EAEpB,GAAI16B,KAAKyvE,aAAc,CACnB/0C,EAAgB16B,KAAKyvE,aAAanJ,cAMlC,MAAM94B,EAA6B,IAAb4sB,EAElB4V,GAA0Bt1C,EAAgB,GAE1CupC,GAAiBz2B,GAAiB,EAAI9S,GACtCwpC,EAAgB12B,GAAiB,EAAI9S,IAC9Bu1C,GAA4Bv1C,EAAgB,IAEnDupC,EAAgBz2B,EAAgB9S,EAChCwpC,GAAiB12B,EAAgB9S,EAEzC,CAUA,GAPA16B,KAAKqwE,iBAAiBnB,EAAOC,EAAO/U,EAAYmW,EAAa9M,GAAa,IAOrEuM,GAA0BC,KAFJD,GAA0BJ,KAGjD5vE,KAAK0wE,mBAAmBxB,EAAOC,EAAO/U,EAAY6J,EAAeC,EAAexpC,EAAes1C,GAAwB,GAG9FppE,KAAKib,IAAIoiD,GAAiB,IAAMr9D,KAAKib,IAAIqiD,GAAiB,IAC3DlkE,KAAK0vD,gBAAgB,CAEzC,MAAM3sC,EAAWnc,KAAKkb,KAAKmiD,EAAgBA,EAAgBC,EAAgBA,GACrEj2D,EAAYrH,KAAKiB,IAAI,GAAK,IAAO,EAAIkb,EAAW,KACtD/iB,KAAK0vD,eAAeE,2BAA2B3hD,EACnD,CAER,CA2BA,IAxBIjO,KAAKqS,MAAMm0C,UAAmC,YAAvBxmD,KAAKqS,MAAM9O,WAClCvD,KAAKC,IAAI4/C,YAAc,GAIL,IAAlBwvB,GACArvE,KAAKC,IAAI4C,UAOT7C,KAAKqS,MAAMm0C,UACXxmD,KAAKi6D,qBAAqBt5D,EAASC,EAAU27C,EAAav8C,KAAK45D,WAAW,IAAK5mD,GAInFhT,KAAKC,IAAMytE,EAGXA,EAAY9R,UAAU57D,KAAKoiE,gBAAiB,EAAG,GAG3C7V,GAAe,iBAAkBvsD,KAAKqS,OAAQ,CAC9C,MAAMs+D,EAAkBxkB,GAAU,kBAC9BwkB,GAAmBA,EAAgB/rB,wBAEnC+rB,EAAgB/rB,uBAAuB8oB,EAAa1tE,KAAKD,OAAOU,MAAOT,KAAKD,OAAOW,OAE3F,CAGA,MACMkwE,EADex2D,YAAY7H,MACA+6D,EAC7BttE,KAAKwoE,qBACLxoE,KAAKwoE,mBAAmBqI,eACxB7wE,KAAKwoE,mBAAmBsI,gBAAgBF,GAEhD,CASA,mBAAA/W,CAAoBx3D,EAAGC,EAAGgR,EAAQrF,GAE9B,MAAM0c,EAAc3qB,KAAKD,QAAQU,OAAS,IACpCmqB,EAAe5qB,KAAKD,QAAQW,QAAU,IAGtC4iD,EAAY18C,KAAKkB,IAAIwL,EACvBjR,EAAI,GACJC,EAAI,GACJqoB,EAActoB,EAAI,GAClBuoB,EAAetoB,EAAI,IAEjByuE,EAAanqE,KAAKiB,IAAI,GAAIy7C,GAG1BrK,EAAWknB,GAAcgB,kBAC3BnhE,KAAKC,IAAKoC,EAAGC,EAAG,EAAGD,EAAGC,EAAGyuE,EACzB,CACI,CAAEtuC,OAAQ,EAAG3+B,MAAO9D,KAAK+3C,UAAU,UAAW,GAAM9pC,IACpD,CAAEw0B,OAAQ,GAAK3+B,MAAO9D,KAAK+3C,UAAU,UAAW,GAAM9pC,IACtD,CAAEw0B,OAAQ,GAAK3+B,MAAO9D,KAAK+3C,UAAU,UAAW,GAAM9pC,IACtD,CAAEw0B,OAAQ,IAAM3+B,MAAO9D,KAAK+3C,UAAU,UAAW,GAAM9pC,IACvD,CAAEw0B,OAAQ,EAAG3+B,MAAO9D,KAAK+3C,UAAU,UAAW,MAKtD/3C,KAAKC,IAAI84C,UAAYE,EACrBj5C,KAAKC,IAAI04C,YACT34C,KAAKC,IAAI24C,IAAIv2C,EAAGC,EAAGyuE,EAAY,EAAa,EAAVnqE,KAAKgE,IACvC5K,KAAKC,IAAI+4C,MACb,CAMA,gBAAAg4B,CAAiB3uE,EAAGC,EAAGgR,EAAQmwD,GAC3B,MAAMxjE,EAAMD,KAAKC,IAGXgxE,EAAcjxE,KAAKyvE,cAAgBzvE,KAAKyvE,aAAah0D,gBAK3D,KAJ4Bzb,KAAKyvE,eACLzvE,KAAKyvE,aAAayB,iBAAmB,IACrClxE,KAAKyvE,aAAa0B,YAAc,KAE9BF,KAAejxE,KAAKyvE,aAAa/0C,cAAgB,KAAM,CACjFz6B,EAAIwC,OACJxC,EAAIyC,UAAUL,EAAGC,GAEjB,MAAMwhE,EAAe9jE,KAAK45D,WAAW,GAIrC,GAHA35D,EAAIyC,UAAU,EAAGohE,GAGbL,GAAeA,EAAY1+D,OAAS,GAEpC9E,EAAI84C,UAAY,sBAChB94C,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAY,KAATtlC,EAAe,EAAa,EAAV1M,KAAKgE,IACrC3K,EAAI+4C,WACD,CAEH,MAAM+qB,EAAiB9jE,EAAIi5C,qBAAqB,EAAG,EAAY,GAAT5lC,EAAc,EAAG,EAAY,IAATA,GAO1E,GANAywD,EAAe5qB,aAAa,EAAG,sBAC/B4qB,EAAe5qB,aAAa,GAAK,sBACjC4qB,EAAe5qB,aAAa,EAAG,oBAE/Bl5C,EAAI84C,UAAYgrB,EAChB9jE,EAAI04C,YACA8qB,EAAa,CAEb,MAAMhiE,EAAQ,IACRuiE,EAAOP,EAAY1+D,OAAS,GAAK,EAAI,EAC3C9E,EAAIikD,OAAOuf,EAAY,GAAGphE,EAAIZ,EAAOgiE,EAAY,GAAGnhE,EAAIb,GACxD,IAAK,IAAIk6C,EAAIqoB,EAAMroB,EAAI8nB,EAAY1+D,OAAQ42C,GAAKqoB,EAC5C/jE,EAAIkkD,OAAOsf,EAAY9nB,GAAGt5C,EAAIZ,EAAOgiE,EAAY9nB,GAAGr5C,EAAIb,GAE5DxB,EAAIg7D,WACR,MACIh7D,EAAI24C,IAAI,EAAG,EAAY,IAATtlC,EAAc,EAAa,EAAV1M,KAAKgE,IAExC3K,EAAI+4C,MACR,CACA/4C,EAAI4C,SACR,CACJ,CAKA,gBAAAgtE,CAAiBxtE,EAAGC,EAAGgR,EAAQ89D,GAC3B,MAAMnxE,EAAMD,KAAKC,IACXqS,EAAO9N,KAAK+N,MAAQ,IAM1B,GAJAtS,EAAIwC,OACJxC,EAAIyC,UAAUL,EAAGC,GAGb8uE,EAAOC,eAAsCh3D,IAA1B+2D,EAAOE,gBAAgCF,EAAOE,eAAiB,GAAI,CACtFrxE,EAAIwC,OACJxC,EAAIu5C,yBAA2B,SAC/Bv5C,EAAI4/C,iBAAwCxlC,IAA1B+2D,EAAOE,eAA+BF,EAAOE,eAAiB,EAEhF,MAAM7uC,EAAgB,IAAPnwB,GAAe8+D,EAAOvuC,YAAc,IAAO,GACpD0uC,EAAkBtxE,EAAIi5C,qBACxBtyC,KAAKiE,IAAI43B,GAAUnvB,EAAS,IAC5B1M,KAAK0E,IAAa,GAATm3B,GAAgBnvB,EAAS,IACzB,GAATA,EACA,EAAG,EAAGA,GAEVi+D,EAAgBp4B,aAAa,EAAG,0BAChCo4B,EAAgBp4B,aAAa,GAAK,4BAClCo4B,EAAgBp4B,aAAa,GAAK,4BAClCo4B,EAAgBp4B,aAAa,EAAG,4BAEhCl5C,EAAI84C,UAAYw4B,EAChBtxE,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAGtlC,EAAQ,EAAa,EAAV1M,KAAKgE,IAC9B3K,EAAI+4C,OAEJ/4C,EAAI4C,SACR,CAGA,MAAM2uE,OAAyCn3D,IAAzB+2D,EAAOI,cAA8BJ,EAAOI,cAAgB,EAClF,GAAIA,EAAgB,EAAG,CACnBvxE,EAAIwC,OACJxC,EAAIu5C,yBAA2B,SAG/B,MAAMi4B,EAAYxxE,EAAIi5C,qBAAqB,EAAG,EAAY,GAAT5lC,EAAc,EAAG,EAAY,IAATA,GACrEm+D,EAAUt4B,aAAa,EAAG,uBAAuB,GAAMq4B,MACvDC,EAAUt4B,aAAa,GAAK,uBAAuB,GAAMq4B,MACzDC,EAAUt4B,aAAa,GAAK,uBAAuB,GAAMq4B,MACzDC,EAAUt4B,aAAa,GAAK,sBAAsB,GAAMq4B,MACxDC,EAAUt4B,aAAa,EAAG,yBAE1Bl5C,EAAI84C,UAAY04B,EAChBxxE,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAY,IAATtlC,EAAc,EAAa,EAAV1M,KAAKgE,IACpC3K,EAAI+4C,OAGJ,IAAK,IAAI2C,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMl6C,EAAQ,IAAU,GAAJk6C,EACdzoC,GAAW,IAAW,IAAJyoC,GAAY61B,EAC9BxlD,EAAoC,IAA3BplB,KAAKiE,IAAW,GAAPyH,EAAaqpC,GAE/B+1B,EAAiBzxE,EAAIi5C,qBACvB,EAAG,EAAG5lC,GAAU,GAAM0Y,GACtB,EAAG,EAAG1Y,GAAU7R,EAAQuqB,IAE5B0lD,EAAev4B,aAAa,EAAG,0BAC/Bu4B,EAAev4B,aAAa,GAAK,uBAAiC,GAAVjmC,MACxDw+D,EAAev4B,aAAa,GAAK,sBAAsBjmC,MACvDw+D,EAAev4B,aAAa,GAAK,sBAAgC,GAAVjmC,MACvDw+D,EAAev4B,aAAa,EAAG,wBAE/Bl5C,EAAI84C,UAAY24B,EAChBzxE,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAGtlC,GAAU7R,EAAQuqB,GAAS,EAAa,EAAVplB,KAAKgE,IACjD3K,EAAI+4C,MACR,CAEA/4C,EAAI4C,SACR,CAGA,GAAIuuE,EAAOO,OAAQ,CACf1xE,EAAIwC,OAGJ,MAAMmvE,EAAQhrE,KAAKiE,IAAW,IAAPyH,GACjBu/D,EAAQjrE,KAAKiE,IAAW,IAAPyH,GACjBw/D,EAAQlrE,KAAKiE,IAAW,IAAPyH,GAGjBy/D,EAAO9xE,EAAImkD,qBAAqB,GAAI9wC,EAAQ,EAAa,GAATA,GACtDy+D,EAAK54B,aAAa,EAAG,4BACrB44B,EAAK54B,aAAa,GAAK,6BACvB44B,EAAK54B,aAAa,GAAK,4BACvB44B,EAAK54B,aAAa,GAAK,4BACvB44B,EAAK54B,aAAa,EAAG,wBAErBl5C,EAAI84C,UAAYg5B,EAChB9xE,EAAIu5C,yBAA2B,SAG/Bv5C,EAAI04C,YAGJ,MAAMq5B,EAAW,CAAC7yD,EAAOpa,EAAQtE,EAAOkhC,KACpC,MAAMr2B,EAAM1E,KAAK0E,IAAI6T,GACftU,EAAMjE,KAAKiE,IAAIsU,GACfimB,EAAQ95B,EAAMgI,EACd+xB,EAAQx6B,EAAMyI,EACd2+D,EAAO3mE,GAAOgI,EAASvO,GACvBmtE,EAAOrnE,GAAOyI,EAASvO,GACvBotE,GAAStnE,EAAMpK,EAAQ,GACvB2xE,EAAQ9mE,EAAM7K,EAAQ,GACtBgkB,EAAakd,EAAOlhC,EAAQ,GAGlCR,EAAIikD,OAAO9e,EAAQ+sC,EAAO9sC,EAAQ+sC,GAClCnyE,EAAIoyE,iBACiB,IAAhBjtC,EAAQ6sC,GAAcE,EAAQ1tD,EACd,IAAhB4gB,EAAQ6sC,GAAcE,EAAQ3tD,EAC/BwtD,EAAMC,GAEVjyE,EAAIoyE,iBACiB,IAAhBjtC,EAAQ6sC,GAAcE,EAAQ1tD,EACd,IAAhB4gB,EAAQ6sC,GAAcE,EAAQ3tD,EAC/B2gB,EAAQ+sC,EAAO9sC,EAAQ+sC,IAK/B,IAAK,IAAIz2B,EAAI,EAAGA,EAAI,EAAGA,IAKnBq2B,EAJer2B,EAAI,EAAK/0C,KAAKgE,GAAK,EAAY,GAARgnE,EACvBt+D,GAAU,IAAuC,GAAjC1M,KAAKiE,IAAW,GAAPyH,EAAiB,GAAJqpC,IAC9B,IAATroC,EACD1M,KAAKiE,IAAW,IAAPyH,EAAcqpC,IAKxC,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IAKpBq2B,GAJgBr2B,EAAI,IAAO,GAAM/0C,KAAKgE,GAAK,EAAY,IAARinE,EAChCv+D,GAAU,IAAwC,GAAlC1M,KAAKiE,IAAW,IAAPyH,EAAkB,GAAJqpC,IAC/B,IAATroC,EACD1M,KAAKiE,IAAW,IAAPyH,EAAkB,IAAJqpC,IAKxC,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IAKpBq2B,EAJer2B,EAAI,GAAM/0C,KAAKgE,GAAK,EAAY,IAARknE,EACxBx+D,GAAU,GAAwC,IAAlC1M,KAAKiE,IAAW,IAAPyH,EAAkB,GAAJqpC,IAC/B,IAATroC,EACD1M,KAAKiE,IAAW,GAAPyH,EAAiB,IAAJqpC,IAKvC,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,MAAMx8B,GAAUw8B,EAAI,KAAQ,GAAM/0C,KAAKgE,GAAK,EACtC7F,EAASuO,GAAU,GAAkC,GAA5B1M,KAAKiE,IAAW,IAAPyH,EAAcqpC,IAChDl7C,EAAiB,IAAT6S,EAERhI,EAAM1E,KAAK0E,IAAI6T,GACftU,EAAMjE,KAAKiE,IAAIsU,GACfimB,EAAQ95B,EAAMgI,EACd+xB,EAAQx6B,EAAMyI,EACd2+D,EAAO3mE,GAAOgI,EAASvO,GACvBmtE,EAAOrnE,GAAOyI,EAASvO,GACvBotE,GAAStnE,EAAMpK,EAAQ,GACvB2xE,EAAQ9mE,EAAM7K,EAAQ,GAE5BR,EAAIikD,OAAO9e,EAAQ+sC,EAAO9sC,EAAQ+sC,GAClCnyE,EAAIkkD,OAAO8tB,EAAMC,GACjBjyE,EAAIkkD,OAAO/e,EAAQ+sC,EAAO9sC,EAAQ+sC,EACtC,CAGAnyE,EAAI+4C,OACJ/4C,EAAI4C,SACR,CAGA,MAAMyvE,EAAcryE,EAAIi5C,qBAAqB,EAAG,EAAY,IAAT5lC,EAAe,EAAG,EAAY,KAATA,GACxEg/D,EAAYn5B,aAAa,EAAG,0BAC5Bm5B,EAAYn5B,aAAa,GAAK,4BAC9Bm5B,EAAYn5B,aAAa,GAAK,4BAC9Bm5B,EAAYn5B,aAAa,EAAG,2BAE5Bl5C,EAAI84C,UAAYu5B,EAChBryE,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAY,KAATtlC,EAAe,EAAa,EAAV1M,KAAKgE,IACrC3K,EAAI+4C,OAEJ/4C,EAAI4C,SACR,CAKA,kBAAA6tE,CAAmBruE,EAAGC,EAAGgR,EAAQ2wD,EAAeC,EAAexpC,EAAes1C,EAAwBuC,GAClG,MAAMtyE,EAAMD,KAAKC,IAGjB,IAAKsyE,EAED,YADAvyE,KAAKwyE,EAAiB,MAK1B,MAAMC,EAAyB7rE,KAAKib,IAAIoiD,GAAiB,GAAKr9D,KAAKib,IAAIqiD,GAAiB,EAIlFv+D,EAAYqqE,EAAyB,GAAK,GAGhD,KAFyBppE,KAAKib,IAAIoiD,GAAiBt+D,GAAaiB,KAAKib,IAAIqiD,GAAiBv+D,GAEhE8sE,GAGtB,YADAzyE,KAAKwyE,EAAiB,MAQ1B,IAAKxyE,KAAKwyE,EAAgB,CACtB,MAAME,EAAY9rE,KAAKgJ,MAAsB,EAAhBhJ,KAAK8I,UAAgB,EAElD1P,KAAK2yE,EAAgB,GAGrB,MAAMppB,EAAS,GACf,IAAK,IAAI5N,EAAI,EAAGA,EAAI+2B,EAAW/2B,IAC3B4N,EAAOznD,KAAK8E,KAAK8I,SAAW9I,KAAKgE,GAAK,GAI1C,MAAMgoE,EAAQrmE,MAAMC,KAAK,CAACzH,OAAQ2tE,GAAY,CAACG,EAAGl3B,IAAMA,GACxD,IAAK,IAAIA,EAAIi3B,EAAM7tE,OAAS,EAAG42C,EAAI,EAAGA,IAAK,CACvC,MAAMgP,EAAI/jD,KAAKgJ,MAAMhJ,KAAK8I,UAAYisC,EAAI,KACzCi3B,EAAMj3B,GAAIi3B,EAAMjoB,IAAM,CAACioB,EAAMjoB,GAAIioB,EAAMj3B,GAC5C,CAEA,IAAK,IAAIA,EAAI,EAAGA,EAAI+2B,EAAW/2B,IAC3B37C,KAAK2yE,EAAc7wE,KAAK,CACpBqd,MAAOoqC,EAAO5N,GACdxoC,KAAM,EAAoB,EAAhBvM,KAAK8I,SACfkjE,MAAOA,EAAMj3B,GACbm3B,MAAkB,IAAXF,EAAMj3B,KAIrB37C,KAAKwyE,EAAiBhuE,KAAK+N,KAC/B,CAEA,MAAMwgE,EAAcvuE,KAAK+N,MAAQvS,KAAKwyE,GAGxBxyE,KAAK2yE,GAAiB,IAE9BjxE,QAAQsxE,IAEV,GAAID,EAAcC,EAAKF,MAAO,OAG9B,MAAMG,EAAUF,EAAcC,EAAKF,MAE7B5/D,EAAUtM,KAAKkB,IAAI,EAAGmrE,EADL,KAIjBC,EAAQ7wE,EAAIuE,KAAK0E,IAAI0nE,EAAK7zD,OAAS7L,EACnC6/D,EAAQ7wE,EAAIsE,KAAKiE,IAAImoE,EAAK7zD,OAAS7L,EAEzCrT,EAAIwC,OACJxC,EAAIyC,UAAUwwE,EAAOC,GACrBlzE,EAAI4/C,YAAc3sC,EAGlB,MAAMC,EAAOnT,KAAK45D,WAAWoZ,EAAK7/D,MAG5B8J,EAAS,CACX,CAAEnZ,MAAO,uBAAuB,GAAMoP,KAAYuvB,WAClD,CAAE3+B,MAAO,uBAAuB,GAAMoP,KAAYuvB,OAAQ,GAC1D,CAAE3+B,MAAO,uBAAuB,GAAMoP,KAAYuvB,OAAQ,IAG9DxiC,EAAIu5C,yBAA2B,SAE/Bv8B,EAAOvb,QAAQ,EAAGoC,QAAO2+B,aAErB,MAAMwW,EAAWh5C,EAAIi5C,qBACjBzW,EAAQA,EAAQ,EAChBA,EAAQA,EAAe,EAAPtvB,GAGpB8lC,EAASE,aAAa,EAAGr1C,GACzBm1C,EAASE,aAAa,GAAKr1C,EAAMkD,QAAQ,GAAG,GAAMkM,EAAW,GAAG,GAAMA,IACtE+lC,EAASE,aAAa,GAAKr1C,EAAMkD,QAAQ,GAAG,GAAMkM,EAAW,GAAG,GAAMA,IACtE+lC,EAASE,aAAa,EAAG,0BAEzBl5C,EAAI84C,UAAYE,EAChBh5C,EAAI04C,YACJ14C,EAAI24C,IAAInW,EAAQA,EAAe,EAAPtvB,EAAU,EAAa,EAAVvM,KAAKgE,IAC1C3K,EAAI+4C,SAIR/4C,EAAIu5C,yBAA2B,UAC/B,MAAM45B,EAAenzE,EAAIi5C,qBAAqB,EAAG,EAAG,EAAG,EAAG,EAAG/lC,GAC7DigE,EAAaj6B,aAAa,EAAG,uBAAuBjmC,MACpDkgE,EAAaj6B,aAAa,GAAK,uBAAuB,GAAMjmC,MAC5DkgE,EAAaj6B,aAAa,EAAG,0BAE7Bl5C,EAAI84C,UAAYq6B,EAChBnzE,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAGzlC,EAAM,EAAa,EAAVvM,KAAKgE,IAC5B3K,EAAI+4C,OAEJ/4C,EAAI4C,WAEZ,CAOA,gBAAAwtE,CAAiBhuE,EAAGC,EAAGgR,EAAQ89D,EAAQ3N,EAAa4P,GAAiB,EAAO7wE,EAAW,GACnF,MAAMvC,EAAMD,KAAKC,IAOjB,GALAA,EAAIwC,OACJxC,EAAIyC,UAAUL,EAAGC,GAIG,aAAhB8uE,EAAO9rE,KAAqB,CAI5B,IAAIguE,EAAiB,EACjBC,EAAiBnC,EAAO3uC,QAAU,GAEtC,GAAIziC,KAAKyvE,aAAc,CACnB,MAAM/0C,EAAgB16B,KAAKyvE,aAAanJ,cAKpB,SAHAtmE,KAAKyvE,aAAaM,kBAGU11D,IAAlBqgB,GAA+BA,EAAgB,IAAM02C,EAAOoC,UAEtFF,EAAiB54C,EAGjB64C,EAAsB,IAAmBD,EAAxB,EAIzB,CAEA,MAAMG,GAAYrC,EAAOjyD,QAAS,IAAOvY,KAAKgE,GAAK,IAC7C+lB,EAAU/pB,KAAK0E,IAAImoE,GAAYngE,EAASigE,EACxC3iD,EAAUhqB,KAAKiE,IAAI4oE,GAAYngE,EAASigE,EAQ9C,GALAtzE,EAAIyzE,uBAAwB,EAC5BzzE,EAAI0zE,sBAAwB,OAG5B1zE,EAAI04C,YACA8qB,EAAa,CACbxjE,EAAIikD,OAAOuf,EAAY,GAAGphE,EAAGohE,EAAY,GAAGnhE,GAC5C,IAAK,IAAIq5C,EAAI,EAAGA,EAAI8nB,EAAY1+D,OAAQ42C,IACpC17C,EAAIkkD,OAAOsf,EAAY9nB,GAAGt5C,EAAGohE,EAAY9nB,GAAGr5C,GAEhDrC,EAAIg7D,WACR,MACIh7D,EAAI24C,IAAI,EAAG,EAAGtlC,EAAQ,EAAa,EAAV1M,KAAKgE,IAElC3K,EAAI2zE,OAGJ,MAAM7P,EAAiB9jE,EAAIi5C,qBACvBvoB,EAASC,EAAkB,GAATtd,EAClBqd,EAASC,EAAkB,IAATtd,GAKhBugE,OAAmCx5D,IAApB+2D,EAAOZ,SAAyBY,EAAOZ,SAAW,IACjEsD,EAAgBltE,KAAKkB,IAAI,EAAoB,IAAjBwrE,IAAyBO,EAAe,KAC1E9P,EAAe5qB,aAAa,EAAG,iBAAiB,EAAI26B,MACpD/P,EAAe5qB,aAAa,GAAM,iBAAiB,EAAI26B,MACvD/P,EAAe5qB,aAAa,IAAM,iBAAiB,IAAO26B,MAC1D/P,EAAe5qB,aAAa,IAAM,iBAAiB,IAAO26B,MAC1D/P,EAAe5qB,aAAa,IAAM,iBAAiB,GAAM26B,MACzD/P,EAAe5qB,aAAa,IAAM,iBAAiB,GAAM26B,MACzD/P,EAAe5qB,aAAa,IAAM,iBAAiB,IAAO26B,MAC1D/P,EAAe5qB,aAAa,IAAM,iBAAiB,IAAO26B,MAC1D/P,EAAe5qB,aAAa,IAAM,iBAAiB,IAAO26B,MAC1D/P,EAAe5qB,aAAa,IAAM,iBAAiB,GAAM26B,MACzD/P,EAAe5qB,aAAa,EAAG,oBAE/Bl5C,EAAI84C,UAAYgrB,EAChB9jE,EAAI04C,YAEJ14C,EAAI24C,IAAIjoB,EAASC,EAAkB,IAATtd,EAAc,EAAa,EAAV1M,KAAKgE,IAChD3K,EAAI+4C,MAER,MAAO,GAAoB,UAAhBo4B,EAAO9rE,KAAkB,CAEhC,MACMmuB,EAAY,QADqBpZ,IAArB+2D,EAAO2C,UAA0B3C,EAAO2C,UAAY,GAItE,IAAI9P,EAAgB,EAChBC,EAAgB,EAEpB,GAAIlkE,KAAKyvE,aAAc,CACnB,MAAM/0C,EAAgB16B,KAAKyvE,aAAanJ,cAClCwJ,EAAe9vE,KAAKyvE,aAAaK,aACjCC,EAAc/vE,KAAKyvE,aAAaM,YAKtC,GAAIsD,GAAkC,UAAhBtD,QAA6C11D,IAAlBqgB,GAA+BA,EAAgB,EAAG,CAE/F,MAAM8S,EAAyB,IAATl6B,EAEtB2wD,GAAiBz2B,GAAiB,EAAI9S,GACtCwpC,EAAgB12B,GAAiB,EAAI9S,EACzC,MAEK,GAAI24C,GAAmC,UAAjBvD,GAA4C,UAAhBC,GAA2C,OAAhBA,QAA0C11D,IAAlBqgB,GAA+BA,EAAgB,EAAG,CAExJ,MAAM8S,EAAyB,IAATl6B,EAEtB2wD,EAAgBz2B,EAAgB9S,EAChCwpC,GAAiB12B,EAAgB9S,CACrC,CACJ,CAGAz6B,EAAIyC,UAAUuhE,EAAeC,GAGzBmP,GAEApzE,EAAIwC,OACJxC,EAAI04C,YAEJ14C,EAAI24C,KAAKqrB,GAAgBC,EAAe5wD,EAAQ,EAAa,EAAV1M,KAAKgE,IACxD3K,EAAI2zE,SAGJ3zE,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAGtlC,EAAQ,EAAa,EAAV1M,KAAKgE,IAC9B3K,EAAI2zE,QAIR,MAAMI,EAAiB1gE,GAAU,IAAkB,GAAZmgB,GACjCwgD,EAAmBh0E,EAAIi5C,qBACzB,EAAG,EAAY,GAAT5lC,EACN,EAAG,EAAG0gE,GAGJ1zD,EAAc8wD,EAAOZ,UAAY,GAyBvC,GAtBIY,EAAOttE,OAASstE,EAAOttE,MAAM0B,SAAS,YAEtCyuE,EAAiB96B,aAAa,EAAG,iBAAiB74B,MAClD2zD,EAAiB96B,aAAa,GAAkB,GAAZ1lB,EAAiB,iBAA+B,IAAdnT,MACtE2zD,EAAiB96B,aAAa,GAAkB,GAAZ1lB,EAAiB,iBAA+B,GAAdnT,MACtE2zD,EAAiB96B,aAAa,IAAM,iBAA+B,GAAd74B,MACrD2zD,EAAiB96B,aAAa,EAAG,sBAGjC86B,EAAiB96B,aAAa,EAAG,kBAAkB74B,MACnD2zD,EAAiB96B,aAAa,GAAkB,GAAZ1lB,EAAiB,kBAAgC,IAAdnT,MACvE2zD,EAAiB96B,aAAa,GAAkB,GAAZ1lB,EAAiB,mBAAiC,GAAdnT,MACxE2zD,EAAiB96B,aAAa,IAAM,oBAAkC,GAAd74B,MACxD2zD,EAAiB96B,aAAa,EAAG,wBAGrCl5C,EAAI84C,UAAYk7B,EAChBh0E,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAGo7B,EAAgB,EAAa,EAAVptE,KAAKgE,IACtC3K,EAAI+4C,OAGAvlB,EAAY,GAAK,CACjB,MAAMygD,EAAc5gE,GAAU,GAAkB,GAAZmgB,GAC9B0gD,EAAgBl0E,EAAIi5C,qBACtB,EAAG,EAAG,EACN,EAAG,EAAGg7B,GAIN9C,EAAOttE,OAASstE,EAAOttE,MAAM0B,SAAS,YACtC2uE,EAAch7B,aAAa,EAAG,iBAAiB74B,MAC/C6zD,EAAch7B,aAAa,GAAK,iBAA+B,GAAd74B,MACjD6zD,EAAch7B,aAAa,GAAK,iBAA+B,GAAd74B,MACjD6zD,EAAch7B,aAAa,EAAG,sBAE9Bg7B,EAAch7B,aAAa,EAAG,iBAAiB74B,MAC/C6zD,EAAch7B,aAAa,GAAK,kBAAgC,GAAd74B,MAClD6zD,EAAch7B,aAAa,GAAK,kBAAgC,GAAd74B,MAClD6zD,EAAch7B,aAAa,EAAG,sBAGlCl5C,EAAI84C,UAAYo7B,EAChBl0E,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAGs7B,EAAa,EAAa,EAAVttE,KAAKgE,IACnC3K,EAAI+4C,MACR,CACJ,CAGIq6B,GACApzE,EAAI4C,UAGR5C,EAAI4C,SACR,CAKA,aAAAw3D,CAAch4D,EAAGC,EAAGgR,GAChBtT,KAAKC,IAAIwC,OAGLzC,KAAKqS,MAAM+hE,cACX/xE,GAAKrC,KAAKqS,MAAM+hE,aAIhBp0E,KAAKqS,MAAMgiD,SACX/xD,GAAKtC,KAAKqS,MAAMgiD,QAGpBr0D,KAAKC,IAAIyC,UAAUL,EAAGC,GAGlBtC,KAAK+9C,uBAAuD1jC,IAAnCra,KAAK+9C,iBAAiBv7C,UAC/CxC,KAAKC,IAAI0C,OAAO3C,KAAK+9C,iBAAiBv7C,SAAWoE,KAAKgE,GAAK,KAI/D,MAAM0H,EAAO9N,KAAK+N,MAAQ,IACpB8hE,EAAmC,GAAvBztE,KAAKiE,IAAW,GAAPyH,GAAoB,IAI/C,IAAI3O,EAAgB,GACa,OAA7B3D,KAAK2jD,cAAc30B,MAEnBrrB,EAAgB,EACoB,aAA7B3D,KAAK2jD,cAAc30B,MAE1BrrB,EAAgBiD,KAAKiB,IAAI,GAA6C,KAAvC7H,KAAK2jD,cAAcgpB,WAAa,KAC3B,YAA7B3sE,KAAK2jD,cAAc30B,QAE1BrrB,EAAgBiD,KAAKiB,IAAI,GAAqC,GAAhC7H,KAAK2jD,cAAcgpB,aAErD,MAAM2H,EAAWD,EAAY1wE,EAG7B,GAAI3D,KAAK2jD,cAAcgpB,WAAa,EAAG,CAEnC3sE,KAAKC,IAAI2mD,WAAa5mD,KAAK45D,WAAW,KAAO0a,EAC7Ct0E,KAAKC,IAAI4mD,YAAc,qBAAqB,GAAMytB,KAGlD,MAAMr7B,EAAWj5C,KAAKC,IAAIi5C,qBAAqB,EAAG,EAAG,EAAG,EAAG,EAAY,EAAT5lC,GAG7B,OAA7BtT,KAAK2jD,cAAc30B,OAEnBiqB,EAASE,aAAa,EAAG,2BACzBF,EAASE,aAAa,GAAK,2BAC3BF,EAASE,aAAa,GAAK,0BAC3BF,EAASE,aAAa,EAAG,0BAGzBF,EAASE,aAAa,EAAG,uBAAuB,EAAMm7B,MACtDr7B,EAASE,aAAa,GAAK,uBAAuB,EAAMm7B,MACxDr7B,EAASE,aAAa,GAAK,uBAAuB,IAAOm7B,MACzDr7B,EAASE,aAAa,IAAM,uBAAuB,IAAOm7B,MAC1Dr7B,EAASE,aAAa,GAAK,qBAAqB,GAAMm7B,MACtDr7B,EAASE,aAAa,IAAM,qBAAqB,GAAMm7B,MACvDr7B,EAASE,aAAa,GAAK,qBAAqB,GAAMm7B,MACtDr7B,EAASE,aAAa,GAAK,qBAAqB,IAAOm7B,MACvDr7B,EAASE,aAAa,IAAM,qBAAqB,IAAOm7B,MACxDr7B,EAASE,aAAa,EAAG,yBAG7Bn5C,KAAKC,IAAI84C,UAAYE,EACrBj5C,KAAKC,IAAIw4C,YAAc,2BACvBz4C,KAAKC,IAAIy4C,UAAY14C,KAAK45D,WAAW,GAGrC55D,KAAKC,IAAI04C,YAGT34C,KAAKC,IAAI24C,IAAI,EAAG,EAAGtlC,EAAQ,EAAa,EAAV1M,KAAKgE,IAAQ,GAM3C,MAAMqtB,EAAQj4B,KAAK2jD,cAAcgpB,WAC3B4H,EAASv0E,KAAK2jD,cAAcipB,YAC5B4H,EAAQx0E,KAAK2jD,cAAckpB,WAIjC,GAAI50C,EAAQ,GAAK,CACb,MAAMw8C,EAAkBnhE,GAAU,IAAO,IAAO2kB,GAahD,GAZAj4B,KAAKC,IAAIikD,OAAO,EAAGuwB,GACnBz0E,KAAKC,IAAIy0E,eACJphE,GAAU,IAAO,IAAO2kB,EAAQs8C,GAAkB,GAATjhE,GACzCA,GAAU,IAAO,GAAM2kB,EAAQs8C,IAAUjhE,GAAU,GAAM,GAAM2kB,GAChE,GAAI3kB,GAAU,GAAM,IAAO2kB,IAE/Bj4B,KAAKC,IAAIy0E,cACLphE,GAAU,IAAO,GAAM2kB,EAAQs8C,IAAUjhE,GAAU,GAAM,GAAM2kB,GAC/D3kB,GAAU,IAAO,IAAO2kB,EAAQs8C,GAAkB,GAATjhE,EACzC,EAAGmhE,GAGHx8C,EAAQ,GAAK,CACjB,MAAM08C,GAAkB18C,EAAQ,IAAO,GAGvCj4B,KAAKC,IAAIikD,OAAiB,IAAT5wC,EAAeqhE,EAAyB,GAATrhE,GAChDtT,KAAKC,IAAIy0E,eACJphE,GAAU,GAAM,GAAMqhE,EAAiBJ,GAAkB,GAATjhE,GAChDA,GAAU,GAAM,GAAMqhE,EAAiBJ,IAAUjhE,GAAU,GAAM,GAAMqhE,IACvErhE,GAAU,GAAM,GAAMqhE,EAAiBJ,IAAUjhE,GAAU,GAAM,IAAOqhE,IAE7E30E,KAAKC,IAAIy0E,eACJphE,GAAU,IAAO,IAAOqhE,IAAkBrhE,GAAU,GAAM,GAAMqhE,GACvD,KAATrhE,EAAgBqhE,EAAyB,GAATrhE,EACvB,IAATA,EAAeqhE,EAAyB,GAATrhE,GAIpCtT,KAAKC,IAAIikD,OAAgB,GAAT5wC,EAAeqhE,EAAyB,GAATrhE,GAC/CtT,KAAKC,IAAIy0E,cACLphE,GAAU,GAAM,GAAMqhE,EAAiBJ,GAAkB,GAATjhE,EAChDA,GAAU,GAAM,GAAMqhE,EAAiBJ,IAAUjhE,GAAU,GAAM,GAAMqhE,GACvErhE,GAAU,GAAM,GAAMqhE,EAAiBJ,IAAUjhE,GAAU,GAAM,IAAOqhE,IAE5E30E,KAAKC,IAAIy0E,cACLphE,GAAU,IAAO,IAAOqhE,IAAkBrhE,GAAU,GAAM,GAAMqhE,GACvD,IAATrhE,EAAgBqhE,EAAyB,GAATrhE,EACvB,GAATA,EAAeqhE,EAAyB,GAATrhE,EAEvC,CAGIkhE,EAAQ,IAERx0E,KAAKC,IAAIikD,OAAiB,IAAT5wC,EAAcA,GAAU,GAAM,GAAMkhE,IACrDx0E,KAAKC,IAAIoyE,iBACL,EAAG/+D,GAAU,GAAM,GAAMkhE,GAChB,GAATlhE,EAAcA,GAAU,GAAM,GAAMkhE,IAG5C,CAYA,GAVAx0E,KAAKC,IAAIg7D,YAGTj7D,KAAKC,IAAI+4C,KAAK,WAEdh5C,KAAKC,IAAI04C,YACT34C,KAAKC,IAAI24C,IAAI,EAAG,EAAGtlC,EAAQ,EAAa,EAAV1M,KAAKgE,IACnC5K,KAAKC,IAAI44C,SAGwB,OAA7B74C,KAAK2jD,cAAc30B,MAAgB,CAGnC,MAAM4lD,EAAuB,EAATthE,EACdo5D,EAAY1sE,KAAK2jD,cAAc+oB,UAAYp5D,EAC3CuhE,EAAuB,GAATvhE,EACdwhE,EAAY90E,KAAKC,IAAIi5C,qBAAqB,EAAG27B,EAAa,EAAG,EAAGA,EAA2B,IAAdD,GACnFE,EAAU37B,aAAa,EAAG,uBAAuB,EAAMm7B,MACvDQ,EAAU37B,aAAa,IAAM,uBAAuB,GAAMm7B,MAC1DQ,EAAU37B,aAAa,GAAK,uBAAuB,GAAMm7B,MACzDQ,EAAU37B,aAAa,IAAM,uBAAuB,GAAMm7B,MAC1DQ,EAAU37B,aAAa,EAAG,wBAC1Bn5C,KAAKC,IAAI84C,UAAY+7B,EACrB90E,KAAKC,IAAI+4C,OAGT,MAAM+7B,EAAY/0E,KAAKC,IAAIi5C,qBAAqB,GAAIwzB,EAAU,EAAY,GAATp5D,EAAc,GAAIo5D,EAAU,EAAY,EAATp5D,GAChGyhE,EAAU57B,aAAa,EAAG,wBAC1B47B,EAAU57B,aAAa,GAAK,qBAAqB,IAAOm7B,MACxDS,EAAU57B,aAAa,GAAK,qBAAqB,GAAMm7B,MACvDS,EAAU57B,aAAa,IAAM,qBAAqB,IAAOm7B,MACzDS,EAAU57B,aAAa,GAAK,qBAAqB,GAAMm7B,MACvDS,EAAU57B,aAAa,IAAM,qBAAqB,IAAOm7B,MACzDS,EAAU57B,aAAa,GAAK,qBAAqB,IAAOm7B,MACxDS,EAAU57B,aAAa,GAAK,qBAAqB,IAAOm7B,MACxDS,EAAU57B,aAAa,EAAG,wBAC1Bn5C,KAAKC,IAAI84C,UAAYg8B,EACrB/0E,KAAKC,IAAI+4C,MACb,CACJ,KAAO,CAKHh5C,KAAKC,IAAI2mD,WAAa,EACtB5mD,KAAKC,IAAI4mD,YAAc,cAGvB,MAAMmuB,EAAe,GACrBh1E,KAAKC,IAAI84C,UAAY,qBAAqBi8B,KAC1Ch1E,KAAKC,IAAI04C,YACT34C,KAAKC,IAAI24C,IAAI,EAAG,EAAGtlC,EAAQ,EAAa,EAAV1M,KAAKgE,IACnC5K,KAAKC,IAAI+4C,OAGT,MAAMo6B,EAAepzE,KAAKC,IAAIi5C,qBAAqB,EAAG,EAAG,EAAG,EAAG,EAAG5lC,GAClE8/D,EAAaj6B,aAAa,EAAG,4BAC7Bi6B,EAAaj6B,aAAa,GAAK,4BAC/Bi6B,EAAaj6B,aAAa,EAAG,wBAC7Bn5C,KAAKC,IAAI84C,UAAYq6B,EACrBpzE,KAAKC,IAAI+4C,MACb,CAEAh5C,KAAKC,IAAI4C,SACb,CAKA,mBAAAs3D,CAAoBx5D,EAASC,EAASw5D,EAAYpnD,GAC9C,OAAOhT,KAAK0vD,eAAeyK,oBAAoBx5D,EAASC,EAASw5D,EAAYpnD,EACjF,CAQA,wBAAA+mD,CAAyB13D,EAAGC,GACxB,OAAOtC,KAAK0vD,eAAeqK,yBAAyB13D,EAAGC,EAC3D,CAMA,oBAAA23D,CAAqB53D,EAAGC,EAAG0Q,GACvB,OAAOhT,KAAK0vD,eAAeuK,qBAAqB53D,EAAGC,EAAG0Q,EAC1D,CAMA,YAAA66D,CAAa76D,GAEThT,KAAKyqE,kBAAkB9vD,OAAO3H,EAAWhT,KAAKqS,MAAM9O,QAASvD,KAAKq7C,kBAGvC,QAAvBr7C,KAAKqS,MAAM9O,SACXvD,KAAKyqE,kBAAkBhL,wBAAwB,KAC/Cz/D,KAAKyqE,kBAAkB9K,yBAAyB,MACzC3/D,KAAKqS,MAAMm0C,UAClBxmD,KAAKyqE,kBAAkBhL,wBAAwB,IAC/Cz/D,KAAKyqE,kBAAkB9K,yBAAyB,OAEhD3/D,KAAKyqE,kBAAkBhL,wBAAwB,GAC/Cz/D,KAAKyqE,kBAAkB9K,yBAAyB,IAIpD3/D,KAAKyqE,kBAAkB7K,sBAAsB5/D,KAAKqS,MAAM0rD,iBAGxD/9D,KAAKwqE,YAAYjN,mBAAmBv9D,KAAKqS,MAAM4pD,kBAAoBj8D,KAAKqS,MAAMm0C,UAAmC,QAAvBxmD,KAAKqS,MAAM9O,SACrGvD,KAAKwqE,YAAY7vD,OAAO3H,GAGxBhT,KAAKqS,MAAM2pD,SAAWh8D,KAAKwqE,YAAYxO,QAG3C,CAMA,uBAAApE,CAAwB/tD,GAEpB,GAAIA,GAAkC,iBAAdA,QAA+CwQ,IAArBxQ,EAAU0D,OAAsB,CAC9E,MAAMA,EAAS1D,EAAU0D,OAYzB,OARAvN,KAAKqS,MAAM6Y,eAAiB,IAAQrhB,EAAUqhB,gBAAkB,GAAO,GAAO3d,EAC9EvN,KAAKqS,MAAMkH,cAAgB1P,EAAU0P,cAAgB,GAAKhM,EAC1DvN,KAAKqS,MAAMs5D,gBAAkBp+D,EAAS,IAAO1D,EAAU8hE,kBAA4B,EACnF3rE,KAAKqS,MAAM2J,eAAiB,IAAQnS,EAAUmS,gBAAkB,GAAO,GAAOzO,EAC9EvN,KAAKqS,MAAMwrD,eAAiB,IAAQh0D,EAAUg0D,gBAAkB,GAAO,GAAOtwD,EAC9EvN,KAAKqS,MAAMyrD,gBAAkB,IAAQj0D,EAAUi0D,iBAAmB,GAAO,GAAOvwD,EAChFvN,KAAKqS,MAAM0rD,gBAAkBxwD,EAAS,IAAO1D,EAAUk0D,kBAA4B,OACnF/9D,KAAKqS,MAAMu5D,iBAAmB,EAElC,CAGA,IAAK/hE,IAAc7J,KAAKsZ,mBAAmBzP,GAUvC,OARA7J,KAAKqS,MAAM6Y,eAAiB,EAC5BlrB,KAAKqS,MAAMkH,aAAe,EAC1BvZ,KAAKqS,MAAMs5D,iBAAkB,EAC7B3rE,KAAKqS,MAAM2J,eAAiB,EAC5Bhc,KAAKqS,MAAMwrD,eAAiB,EAC5B79D,KAAKqS,MAAMyrD,gBAAkB,EAC7B99D,KAAKqS,MAAM0rD,iBAAkB,OAC7B/9D,KAAKqS,MAAMu5D,iBAAmB,GAIlC,MAAMnxD,EAAWza,KAAKsZ,mBAAmBzP,GAGzC7J,KAAKqS,MAAM6Y,eAAiBzQ,EAASyQ,eACrClrB,KAAKqS,MAAMkH,aAAekB,EAASlB,cAAgB,EACnDvZ,KAAKqS,MAAMs5D,gBAAkBlxD,EAASkxD,kBAAmB,EACzD3rE,KAAKqS,MAAM2J,eAAiBvB,EAASuB,eACrChc,KAAKqS,MAAMwrD,eAAiBpjD,EAASojD,eACrC79D,KAAKqS,MAAMyrD,gBAAkBrjD,EAASqjD,gBACtC99D,KAAKqS,MAAM0rD,gBAAkBtjD,EAASsjD,kBAAmB,EACzD/9D,KAAKqS,MAAMu5D,iBAAmB,CAClC,CAgBA,qBAAA9T,CAAsB3yB,EAAWt7B,GAC7B,OAAO7J,KAAKuqE,eAAezS,sBAAsB3yB,EAAWt7B,EAChE,CAEA,QAAA/C,CAASC,GACL,OAAO/G,KAAKuqE,eAAezjE,SAASC,EACxC,CAEA,QAAAiB,CAASX,EAAGE,EAAGC,GACX,OAAOxH,KAAKuqE,eAAeviE,SAASX,EAAGE,EAAGC,EAC9C,CAEA,QAAAywD,CAAShwD,EAAGC,EAAGC,GACX,OAAOnI,KAAKuqE,eAAetS,SAAShwD,EAAGC,EAAGC,EAC9C,CAEA,SAAA4vC,CAAUhxC,EAAK5G,EAAQ,GACnB,MAAMkJ,EAAMrJ,KAAK8G,SAASC,GAC1B,OAAKsC,EACE,QAAQA,EAAIhC,MAAMgC,EAAI9B,MAAM8B,EAAI7B,MAAMrH,KAD5B,uBAAuBA,IAE5C,CAEA,oBAAAk4D,CAAqBC,EAAaC,EAAiB/pD,EAAW,MAC1DxO,KAAKuqE,eAAe/R,aAAex4D,KAAKqS,MAAMvF,UAC9C9M,KAAKuqE,eAAe9R,iBAAmBz4D,KAAKqS,MAAM1O,cAClD3D,KAAKuqE,eAAelS,qBAAqBC,EAAaC,EAAiB/pD,GACvExO,KAAK23D,gBAAkB33D,KAAKuqE,eAAe5S,eAC/C,CAEA,qBAAAmB,CAAsB9lD,GAClB,MAAMglC,EAASh4C,KAAKuqE,eAAezR,sBAAsB9lD,GACrDglC,IACAh4C,KAAKqS,MAAMvF,UAAYkrC,EAAOl0C,MAC9B9D,KAAKqS,MAAM1O,cAAgBq0C,EAAO/pC,UAClCjO,KAAK23D,gBAAkB33D,KAAKuqE,eAAe5S,gBAEnD,CAKA,eAAAsd,CAAgBprE,GAER7J,KAAKqS,MAAMxI,YAAcA,GACzB7J,KAAKksE,UAAUhqE,QAInBlC,KAAKqS,MAAMxI,UAAYA,EACvB7J,KAAKq7C,iBAAmBxxC,EAGxB,MAAM+jE,EAAmB5tE,KAAK2tE,cAAgB3tE,KAAK2tE,aAAa1xD,8BACxCjc,KAAK2tE,aAAa1xD,gCAAkC,KAM5E,GAHAjc,KAAK43D,wBAAwBgW,GAAoB/jE,GAG7C7J,KAAKqS,MAAM9O,QAAS,CACpB,MAAMm4C,EAAgB5nC,EAAW9T,KAAKqS,MAAM9O,SAC5C,GAAIm4C,EAAe,CACf,MAAMvW,EAAYuW,EAAc5uC,WAAa9M,KAAKgmB,OAAO+kD,iBACnDzS,EAAct4D,KAAK83D,sBAAsB3yB,EAAWyoC,GAAoB/jE,GAG9E7J,KAAKq4D,qBAAqBC,EAAa,IAC3C,CACJ,CACJ,CAKA,iBAAA4c,CAAkB3xE,EAAS2X,EAAYrR,EAAY,MAG3C7J,KAAKqS,MAAM9O,UAAYA,GAAWvD,KAAKqS,MAAMxI,YAAcA,GAC3D7J,KAAKksE,UAAUhqE,QAInBlC,KAAKqS,MAAMxI,UAAYA,EACvB7J,KAAKq7C,iBAAmBxxC,EAGxB,MAAM+jE,EAAmB5tE,KAAK2tE,cAAgB3tE,KAAK2tE,aAAa1xD,8BACxCjc,KAAK2tE,aAAa1xD,gCAAkC,KAG5Ejc,KAAK43D,wBAAwBgW,GAAoB/jE,GAGjD,MAAMs7B,EAAYjqB,EAAWpO,WAAa9M,KAAKgmB,OAAO+kD,iBAGtD,IAAIzS,EAGAA,EAFY,cAAZ/0D,EAEc2X,EAAWpO,WAAaq4B,EAExBnlC,KAAK83D,sBAAsB3yB,EAAWyoC,GAAoB/jE,GAI5E,MAAM4Q,EAAWmzD,IAAqB/jE,EAAY7J,KAAKsZ,mBAAmBzP,GAAa,MACjFsrE,EAAgBj6D,EAAWvX,eAAiB,EAGlD,IAAIyxE,EAAW,EACf,GAAI36D,EACA,GAAImzD,EAAkB,CAGlB,MAAMrgE,EAASkN,EAASlN,QAAU,EAE9B6nE,OAD4B/6D,IAA5BI,EAASuB,gBAAgCo8B,SAAS39B,EAASuB,iBAAmBo8B,SAAS7qC,GAC5E,GAAOkN,EAASuB,eAAiB,GAAOzO,EAExC,CAEnB,MAEI6nE,OAAuC/6D,IAA5BI,EAASuB,eAA+BvB,EAASuB,eAAiB,EAIrF,MAAMu8C,EAAkB4c,EAAgBC,EAGxC,IAAI5mE,EAAW,KACC,UAAZjL,GAAmC,SAAZA,EACvBiL,EAAW,KACQ,YAAZjL,GAAqC,YAAZA,GAEb,QAAZA,KADPiL,EAAW,KAMf,MAAMg+D,EAAkBxsE,KAAKqS,MAAM9O,QACnCvD,KAAKqS,MAAM9O,QAAUA,EAGL,cAAZA,GACAvD,KAAKqS,MAAMq5D,cAAe,EAE1B1rE,KAAKqS,MAAMo5D,mBAAqBvwD,GAAcA,EAAWvM,WAAauM,EAAWvM,WAAa,QAC9D0L,IAA5Bra,KAAKqS,MAAM+0C,eACXpnD,KAAKqS,MAAM+0C,aAAe,GAE9BpnD,KAAKqS,MAAMo1C,aAAejjD,KAAK+N,MAC/BvS,KAAKqS,MAAMq1C,UAAY,IAEvB1nD,KAAKqS,MAAMq5D,cAAe,EAC1B1rE,KAAKqS,MAAMo5D,mBAAqB,OACApxD,IAA5Bra,KAAKqS,MAAM+0C,eACXpnD,KAAKqS,MAAM+0C,aAAe,IAKlB,QAAZ7jD,GAAyC,QAApBipE,EAErBxsE,KAAKq1E,aAAa/c,EAAaC,GACJ,QAApBiU,GAAyC,QAAZjpE,EAEpCvD,KAAKs1E,YAAY/xE,EAAS+0D,EAAaC,GAGvCv4D,KAAKq4D,qBAAqBC,EAAaC,EAAiB/pD,GAI5D,MAAM+mE,EAAiBr6D,EAAWrX,YAAc,EAC1C2xE,EAAkBt6D,EAAW9N,aAAepN,KAAKgmB,OAAO+/B,eAC9D/lD,KAAKqS,MAAMxO,WAAa4W,EAAW86D,EAAiB96D,EAASojD,eAAiB0X,EAC9Ev1E,KAAKqS,MAAMjF,YAAcqN,EAAW+6D,EAAkB/6D,EAASqjD,gBAAkB0X,EAGjFx1E,KAAKqS,MAAMhF,WAAa6N,EAAW7N,YAAeoN,GAAYA,EAASlB,aAAe,EACtFvZ,KAAKqS,MAAMojE,mBAAqBv6D,EAAW7L,YAC3CrP,KAAKqS,MAAMqjE,cAAgBx6D,EAAW7B,MAC1C,CAMA,MAAA03B,CAAOjJ,GAGP,CAMA,gBAAAi+B,CAAiBh4D,GAEb/N,KAAKqS,MAAMw3C,cAAgB97C,CAC/B,CAMA,gBAAA4nE,CAAiBx2D,GACbnf,KAAKqS,MAAMqzD,eAAiBvmD,CAChC,CAMA,aAAAy2D,CAAcC,GAEc,iBAAbA,GAAsC,OAAbA,IAC5BA,EAAS1wE,eAAe,MAAQ0wE,EAAS1wE,eAAe,KAExDnF,KAAKqS,MAAMg5D,WAAawK,GAGxB71E,KAAKqS,MAAMg5D,WAAawK,EAASpzC,QAAU,CAAEpgC,EAAG,EAAGC,EAAG,GACtDtC,KAAKqS,MAAM02C,cAAgB8sB,EAASC,WAAa,EACjD91E,KAAKqS,MAAM22C,WAAa6sB,EAASE,WAAY,IAKrD/1E,KAAKg2E,UAAY,EACbh2E,KAAKi2E,UACLj2E,KAAK06D,QAEb,CAKA,qBAAAwb,GACI,MAEMv1E,EAFeX,KAAKqqE,cAAc5pE,MAET,EACzBG,EAFgBZ,KAAKqqE,cAAc3pE,OAET,EAAIV,KAAKgmB,OAAOmlD,UAEhD,MAAO,CACH9oE,EAAG1B,EAAUX,KAAKqS,MAAMg5D,WAAWhpE,EACnCC,EAAG1B,EAAUZ,KAAKqS,MAAMg5D,WAAW/oE,EAE3C,CAMA,cAAAg9D,CAAe79D,GACXzB,KAAKqS,MAAM2rD,YAAcv8D,CAC7B,CAKA,aAAAk5D,GACI36D,KAAKqS,MAAM4F,UAAW,EACtBjY,KAAKq5D,cAAgB,GACrBr5D,KAAKs5D,eAAiB,CAC1B,CAKA,YAAAsB,GACI56D,KAAKqS,MAAM4F,UAAW,EACtBjY,KAAKq5D,cAAgB,EACzB,CAKA,cAAAoB,GACIz6D,KAAKqS,MAAMm0C,UAAW,EACtBxmD,KAAKy5D,OAAS,GACdz5D,KAAKqS,MAAMhD,YAAc,EAGzBrP,KAAKqS,MAAMi8D,aAAe,EAC1BtuE,KAAKqS,MAAMk8D,WAAa,EAGxBvuE,KAAKqS,MAAM2pD,UAAW,EAGtBh8D,KAAKm2E,iBAET,CAKA,eAAAA,GAEQn2E,KAAKisE,gBAAgB5P,WACrBqL,GAAqBsB,WAAWhpE,KAAKisE,gBAAgB5P,UACrDr8D,KAAKisE,gBAAgB5P,SAAW,MAEhCr8D,KAAKisE,gBAAgB3P,UACrBoL,GAAqBsB,WAAWhpE,KAAKisE,gBAAgB3P,SACrDt8D,KAAKisE,gBAAgB3P,QAAU,MAGnC,MAAMjkD,EAAY+B,YAAY7H,MACxB6jE,EAAmB,IA+CzBp2E,KAAKisE,gBAAgB5P,SAAWqL,GAAqBkB,SA5CrC,KACZ,IAAK5oE,KAAKqS,MAAMm0C,SAGZ,YADAxmD,KAAKisE,gBAAgB5P,SAAW,MAIpC,MAAMthD,EAAUX,YAAY7H,MAAQ8F,EAEpC,GAAI0C,EAAUq7D,EAAkB,CAE5B,MAAMvtE,EAAWkS,EAAUq7D,EACrBrd,EAAQ,EAAInyD,KAAKC,IAAIgC,EAAU,GACrC7I,KAAKqS,MAAMhD,YAAc,GAAc,GAAR0pD,EAG/B/4D,KAAKqS,MAAMi8D,aAAe,EAC1BtuE,KAAKqS,MAAMk8D,WAAa,CAG5B,MAAO,GAAIxzD,EAAUq7D,IAAgC,CAEjD,MAAMC,GAAet7D,EAAUq7D,GAxBnB,IAyBNE,EAAW,EAAI1vE,KAAKC,IAAI,EAAIwvE,EAAa,GAG/Cr2E,KAAKqS,MAAMhD,YAAc,GAGzBrP,KAAKqS,MAAMi8D,aAAe,EAAkB,GAAXgI,EACjCt2E,KAAKqS,MAAMk8D,WAAa,EAAkB,GAAX+H,CAGnC,MAEIt2E,KAAKqS,MAAMhD,YAAc,GACzBrP,KAAKqS,MAAMi8D,aAAe,GAC1BtuE,KAAKqS,MAAMk8D,WAAa,GAExBvuE,KAAKisE,gBAAgB5P,SAAW,MDr6EtC,EC66EEr8D,KAER,CAKA,MAAA06D,GACS16D,KAAKqS,MAAMm0C,WAEhBxmD,KAAKqS,MAAMm0C,UAAW,EACtBxmD,KAAKqS,MAAMxO,WAAa,EACxB7D,KAAKqS,MAAMjF,YAAcpN,KAAKgmB,OAAO+/B,eACrC/lD,KAAKy5D,OAAS,GAGdz5D,KAAKqS,MAAM2pD,UAAW,EAEtBh8D,KAAKwqE,YAAYxO,UAAW,EAC5Bh8D,KAAKwqE,YAAYtO,WAAa,EAG9Bl8D,KAAKu2E,iBAGLv2E,KAAKqS,MAAMhF,YAAa,EACxBpL,WAAW,KACPjC,KAAKqS,MAAMhF,YAAa,GACzB,KAEP,CAKA,cAAAkpE,GAEQv2E,KAAKisE,gBAAgB3P,UACrBoL,GAAqBsB,WAAWhpE,KAAKisE,gBAAgB3P,SACrDt8D,KAAKisE,gBAAgB3P,QAAU,MAE/Bt8D,KAAKisE,gBAAgB5P,WACrBqL,GAAqBsB,WAAWhpE,KAAKisE,gBAAgB5P,UACrDr8D,KAAKisE,gBAAgB5P,SAAW,MAGpC,MAAMhkD,EAAY+B,YAAY7H,MA4C9BvS,KAAKisE,gBAAgB3P,QAAUoL,GAAqBkB,SAxCpC,KACZ,MAAM7tD,EAAUX,YAAY7H,MAAQ8F,EAEpC,GAAI0C,EANiB,IAMW,CAE5B,MAAMlS,EAAWkS,EARA,IASXg+C,EAAQnyD,KAAKiE,IAAIhC,EAAWjC,KAAKgE,GAAK,GAG5C5K,KAAKqS,MAAMi8D,aAAe,GAAe,GAARvV,EACjC/4D,KAAKqS,MAAMk8D,WAAa,GAAe,GAARxV,EAG/B/4D,KAAKqS,MAAMhD,YAAc,EAG7B,MAAO,GAAI0L,EAAUy7D,KAAoC,CAErD,MAAMC,GAAe17D,EArBJ,KACD,IAqBV27D,EAAW9vE,KAAKiE,IAAI4rE,EAAc7vE,KAAKgE,GAAK,GAGlD5K,KAAKqS,MAAMi8D,aAAe,EAC1BtuE,KAAKqS,MAAMk8D,WAAa,EAGxBvuE,KAAKqS,MAAMhD,YAAc,GAAiB,GAAXqnE,CAGnC,MAEI12E,KAAKqS,MAAMhD,YAAc,EACzBrP,KAAKqS,MAAMi8D,aAAe,EAC1BtuE,KAAKqS,MAAMk8D,WAAa,EAExBvuE,KAAKisE,gBAAgB3P,QAAU,MDlgFrC,EC0gFEt8D,KAER,CAKA,YAAAq1E,CAAa/c,EAAaC,GAElBv4D,KAAK8rE,kBAAkBC,WACvB7C,qBAAqBlpE,KAAK8rE,kBAAkBC,UAC5C/rE,KAAK8rE,kBAAkBC,SAAW,MAElC/rE,KAAK8rE,kBAAkBE,UACvB9C,qBAAqBlpE,KAAK8rE,kBAAkBE,SAC5ChsE,KAAK8rE,kBAAkBE,QAAU,MAIrChsE,KAAKqS,MAAMvF,UAAYwrD,EACvBt4D,KAAKqS,MAAM1O,cAAgB40D,EAG3Bv4D,KAAK23D,gBAAgBtkB,QAAS,EAE9BrzC,KAAK2jD,cAAgB,CACjBtQ,QAAQ,EACRrkB,MAAO,WACP3W,UAAW+B,YAAY7H,MACvBi6D,gBAAiBxsE,KAAKqS,MAAM9O,QAC5BkpE,cAAe,KACfh6D,OAAQ,EACRC,OAAQ,EACRg6D,UAAW,EACXC,WAAY,EACZC,YAAa,EACbC,WAAY,GAGhB,MAAM8J,EAAU,KACZ,IAAK32E,KAAK2jD,cAActQ,QAAuC,aAA7BrzC,KAAK2jD,cAAc30B,MAGjD,YADAhvB,KAAKisE,gBAAgBF,SAAW,MAIpC,MAAMhxD,EAAUX,YAAY7H,MAAQvS,KAAK2jD,cAActrC,UAGvD,GAAI0C,EAFuB,IAEO,CAE9B,MAAM67D,EAAgB77D,EAJC,IAKjB87D,EAAa,EAAIjwE,KAAKC,IAAI,EAAI+vE,EAAe,GAGnD52E,KAAK2jD,cAAclxC,OAAS,EAC5BzS,KAAK2jD,cAAcjxC,OAAS,EAC5B1S,KAAK2jD,cAAc+oB,UAAY,EAG/B1sE,KAAK2jD,cAAcgpB,WAAakK,EAChC72E,KAAK2jD,cAAcipB,YAAciK,EAGjC72E,KAAK2jD,cAAckpB,WAAajmE,KAAKiE,IAAI+rE,EAAgBhwE,KAAKgE,GAAK,GAG3E5K,KAAKisE,gBAAgBF,SAAWrE,GAAqBkB,SACjD+N,ED7kFA,EC+kFA32E,KAEA,MAEIA,KAAK2jD,cAAc30B,MAAQ,KAC3BhvB,KAAK2jD,cAAclxC,OAAS,EAC5BzS,KAAK2jD,cAAcjxC,OAAS,EAC5B1S,KAAK2jD,cAAc+oB,UAAY,EAC/B1sE,KAAK2jD,cAAcgpB,WAAa,EAChC3sE,KAAK2jD,cAAcipB,YAAc,EACjC5sE,KAAK2jD,cAAckpB,WAAa,EAGhC7sE,KAAKqS,MAAMm5D,mBAAqB,EAEhCxrE,KAAKisE,gBAAgBF,SAAW,MAKxC/rE,KAAKisE,gBAAgBF,SAAWrE,GAAqBkB,SACjD+N,EDpmFA,ECsmFA32E,KAER,CAKA,WAAAs1E,CAAY7I,EAAenU,EAAaC,GACpC,IAAKv4D,KAAK2jD,cAActQ,QAAuC,OAA7BrzC,KAAK2jD,cAAc30B,MAAgB,OAGjEhvB,KAAK8rE,kBAAkBC,WACvB7C,qBAAqBlpE,KAAK8rE,kBAAkBC,UAC5C/rE,KAAK8rE,kBAAkBC,SAAW,MAElC/rE,KAAK8rE,kBAAkBE,UACvB9C,qBAAqBlpE,KAAK8rE,kBAAkBE,SAC5ChsE,KAAK8rE,kBAAkBE,QAAU,MAGrChsE,KAAK2jD,cAAc30B,MAAQ,UAC3BhvB,KAAK2jD,cAActrC,UAAY+B,YAAY7H,MAC3CvS,KAAK2jD,cAAc8oB,cAAgBA,EAEnC,MAAMkK,EAAU,KACZ,IAAK32E,KAAK2jD,cAActQ,QAAuC,YAA7BrzC,KAAK2jD,cAAc30B,MAGjD,YADAhvB,KAAKisE,gBAAgBD,QAAU,MAInC,MAAMjxD,EAAUX,YAAY7H,MAAQvS,KAAK2jD,cAActrC,UACjDy+D,EAAqB,IAK3B,GAAI/7D,EAAU+7D,EAAoB,CAE9B,MAAMjuE,EAAWkS,EAAU+7D,EACrB/d,EAAQ,EAAInyD,KAAKC,IAAI,EAAIgC,EAAU,GAWzC,GARiB,IAAbA,GAAmB7I,KAAK23D,gBAAgBtkB,QACxCrzC,KAAKq4D,qBAAqBC,EAAaC,EAAiBue,GAG5D92E,KAAK2jD,cAAc+oB,UAAY,KAAO,EAAI3T,GAG1C/4D,KAAK2jD,cAAckpB,WAAa,GAAO,EAAI9T,GACvClwD,EAAW,GAAK,CAChB,MAAMkuE,GAAiBluE,EAAW,IAAO,GACzC7I,KAAK2jD,cAAcipB,YAAc,GAAO,EAAImK,EAChD,CACA,GAAIluE,EAAW,GAAK,CAChB,MAAM6xB,GAAiB7xB,EAAW,IAAO,GACzC7I,KAAK2jD,cAAcgpB,WAAa,GAAO,EAAIjyC,EAC/C,CAGR16B,KAAKisE,gBAAgBD,QAAUtE,GAAqBkB,SAChD+N,EDpqFA,ECsqFA32E,KAEA,MAAO,GAAI+a,EAAU+7D,IAAoC,CAErD,MAAME,GAAiBj8D,EAAU+7D,GAnCf,IA2ClB,GALA92E,KAAK2jD,cAAcgpB,WAAa,EAChC3sE,KAAK2jD,cAAcipB,YAAc,EACjC5sE,KAAK2jD,cAAckpB,WAAa,EAG5BmK,EAAgB,GAAK,CACrB,MAAMC,EAAYD,EAAgB,GAClCh3E,KAAK2jD,cAAcjxC,OAAS,EAAuC,GAAhC9L,KAAKiE,IAAIosE,EAAYrwE,KAAKgE,GACjE,MAEK,GAAIosE,EAAgB,GAAK,CAC1B,MAAME,GAAaF,EAAgB,IAAO,GAC1Ch3E,KAAK2jD,cAAcjxC,OAAS,EAE5B1S,KAAKqS,MAAM+hE,YAAkD,EAApCxtE,KAAKiE,IAAIqsE,EAAYtwE,KAAKgE,GAAK,EAC5D,KAEK,CACD,MAAMusE,GAAaH,EAAgB,IAAO,GAC1Ch3E,KAAKqS,MAAMgiD,QAAS,GAAM8iB,EAC1Bn3E,KAAKqS,MAAM1O,cAAgB,EAAO,GAAMwzE,CAC5C,CAGRn3E,KAAKisE,gBAAgBD,QAAUtE,GAAqBkB,SAChD+N,EDtsFA,ECwsFA32E,KAEA,MAAO,GAAI+a,EAAU+7D,IAAqD,CAEtE,MAAMM,GAAkBr8D,EAAU+7D,EArEhB,KACC,IAqEbO,EAAczwE,KAAKiE,IAAIusE,EAAiBxwE,KAAKgE,GAAK,GAExD5K,KAAK2jD,cAAclxC,OAAS,EAC5BzS,KAAK2jD,cAAcjxC,OAAS,GAAqB,GAAd2kE,EACnCr3E,KAAKqS,MAAMgiD,QAAS,IAAO,EAAI+iB,GAC/Bp3E,KAAKqS,MAAM1O,cAAgB,IAAO,GAAMyzE,EAGhDp3E,KAAKisE,gBAAgBD,QAAUtE,GAAqBkB,SAChD+N,EDttFA,ECwtFA32E,KAEA,MAAO,GAAI+a,EAAU+7D,IAAsE,CAEvF,MAAMQ,GAAkBv8D,EAAU+7D,EArFhB,IACC,KACA,IAoFbtnD,EAAQ5oB,KAAKiE,IAAIysE,EAAiB1wE,KAAKgE,IAE7C5K,KAAK2jD,cAAclxC,OAAS,EAAe,IAAR+c,EACnCxvB,KAAK2jD,cAAcjxC,OAAS,EAAe,IAAR8c,EAG3CxvB,KAAKisE,gBAAgBD,QAAUtE,GAAqBkB,SAChD+N,EDpuFA,ECsuFA32E,KAEA,MAEIA,KAAK2jD,cAActQ,QAAS,EAC5BrzC,KAAK2jD,cAAc30B,MAAQ,KAC3BhvB,KAAK2jD,cAAclxC,OAAS,EAC5BzS,KAAK2jD,cAAcjxC,OAAS,EAC5B1S,KAAK2jD,cAAc+oB,UAAY,EAC/B1sE,KAAK2jD,cAAcgpB,WAAa,EAChC3sE,KAAK2jD,cAAcipB,YAAc,EACjC5sE,KAAK2jD,cAAckpB,WAAa,EAChC7sE,KAAKqS,MAAM+hE,YAAc,EACzBp0E,KAAKqS,MAAMgiD,OAAS,EAEpBr0D,KAAKisE,gBAAgBD,QAAU,MAKvChsE,KAAKisE,gBAAgBD,QAAUtE,GAAqBkB,SAChD+N,ED3vFA,EC6vFA32E,KAER,CAKA,cAAAu6D,GACIv6D,KAAKqS,MAAMsyC,WAAY,CAC3B,CAKA,aAAA6V,GACIx6D,KAAKqS,MAAMsyC,WAAY,CAC3B,CAUA,kBAAA4Y,CAAmB5oD,GACf3U,KAAKqS,MAAM4pD,gBAAkBtnD,EACxBA,IAED3U,KAAKqS,MAAM2pD,UAAW,EAEtBh8D,KAAKwqE,YAAYxO,UAAW,EAC5Bh8D,KAAKwqE,YAAYtO,WAAa,EAEtC,CAMA,eAAAqb,CAAgB5iE,GACZ3U,KAAKqS,MAAMi5D,oBAAsB32D,EAC7BA,EAEK3U,KAAKw3E,yBACNx3E,KAAKy3E,mBAITz3E,KAAKqS,MAAMk5D,WAAa,CAAElpE,EAAG,EAAGC,EAAG,EAE3C,CAKA,gBAAAm1E,GAEQz3E,KAAKw3E,0BAETx3E,KAAK03E,gBAAmBC,IACpB,IAAK33E,KAAKqS,MAAMi5D,oBAAqB,OAErC,MAAM/pE,EAAOvB,KAAKD,OAAOyB,wBACnBb,EAAUY,EAAKd,MAAQ,EACvBG,EAAUW,EAAKb,OAAS,EACxB2B,EAAIs1E,EAAEC,QAAUr2E,EAAKs2E,KAAOl3E,EAC5B2B,EAAIq1E,EAAEG,QAAUv2E,EAAKw2E,IAAMn3E,EAGjCZ,KAAKqS,MAAMk5D,WAAa,CACpBlpE,EAAGA,EAAI1B,EACP2B,EAAGA,EAAI1B,IAIfZ,KAAKg4E,gBAAmBL,IACpB,GAAK33E,KAAKqS,MAAMi5D,qBAEZqM,EAAEM,QAAQlzE,OAAS,EAAG,CACtB,MAAMmzE,EAAQP,EAAEM,QAAQ,GAClB12E,EAAOvB,KAAKD,OAAOyB,wBACnBb,EAAUY,EAAKd,MAAQ,EACvBG,EAAUW,EAAKb,OAAS,EACxB2B,EAAI61E,EAAMN,QAAUr2E,EAAKs2E,KAAOl3E,EAChC2B,EAAI41E,EAAMJ,QAAUv2E,EAAKw2E,IAAMn3E,EAGrCZ,KAAKqS,MAAMk5D,WAAa,CACpBlpE,EAAGA,EAAI1B,EACP2B,EAAGA,EAAI1B,EAEf,GAGJ60C,SAASz0C,iBAAiB,YAAahB,KAAK03E,iBAC5CjiC,SAASz0C,iBAAiB,YAAahB,KAAKg4E,iBAC5Ch4E,KAAKw3E,yBAA0B,EACnC,CAKA,mBAAAW,GACSn4E,KAAKw3E,0BAENx3E,KAAK03E,iBACLjiC,SAASzyC,oBAAoB,YAAahD,KAAK03E,iBAE/C13E,KAAKg4E,iBACLviC,SAASzyC,oBAAoB,YAAahD,KAAKg4E,iBAEnDh4E,KAAKw3E,yBAA0B,EACnC,CAKA,SAAAz/B,CAAUhxC,EAAK5G,EAAQ,GACnB,MAAM63C,EAAS,4CAA4CC,KAAKlxC,GAChE,OAAIixC,EACO,QAAQ52C,SAAS42C,EAAO,GAAI,QAAQ52C,SAAS42C,EAAO,GAAI,QAAQ52C,SAAS42C,EAAO,GAAI,QAAQ73C,KAEhG,iBAAiBA,IAC5B,CAMA,eAAAi4E,CAAgBC,GACZr4E,KAAKs4E,aAAe1xE,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAGuwE,IAGxCr4E,KAAKs4E,aAAe,IAEpBt4E,KAAKC,IAAIyzE,uBAAwB,EACjC1zE,KAAKqS,MAAMjF,aAAe,IACnBpN,KAAKs4E,aAAe,IAE3Bt4E,KAAKC,IAAIyzE,uBAAwB,EACjC1zE,KAAKC,IAAI0zE,sBAAwB,WAGjC3zE,KAAKC,IAAIyzE,uBAAwB,EACjC1zE,KAAKC,IAAI0zE,sBAAwB,OAEzC,CAMA,mBAAA4E,CAAoB5jE,GACZA,EACA3U,KAAKo4E,gBAAgB,IAErBp4E,KAAKo4E,gBAAgB,EAE7B,CAMA,qBAAAI,CAAsBC,GAClBz4E,KAAKC,IAAMw4E,CACf,CAMA,oBAAA58D,GAEI,OAAI7b,KAAK2tE,cAAgB3tE,KAAK2tE,aAAa1xD,8BAChCjc,KAAK2tE,aAAa1xD,gCAIxBjc,KAAKq7C,kBAAqBr7C,KAAKsZ,mBAAmBtZ,KAAKq7C,kBAGrDr7C,KAAKsZ,mBAAmBtZ,KAAKq7C,kBAFzB,IAGf,CAOA,sBAAA+U,GACI,OAAOpwD,KAAKsqE,gBAAgBla,wBAChC,CAKA,YAAAZ,CAAaC,GAET,OAAOzvD,KAAKsqE,gBAAgB9a,aAAaC,EAC7C,CAMA,iBAAA2D,GAEI,OAAOpzD,KAAKsqE,gBAAgBlX,mBAChC,CAGA,WAAA4B,GAAgBh1D,KAAKsqE,gBAAgBtV,aAAe,CACpD,UAAAC,GAAej1D,KAAKsqE,gBAAgBrV,YAAc,CAClD,UAAAC,GAAel1D,KAAKsqE,gBAAgBpV,YAAc,CAClD,SAAAC,GAAcn1D,KAAKsqE,gBAAgBnV,WAAa,CAChD,QAAAC,GAAap1D,KAAKsqE,gBAAgBlV,UAAY,CAC9C,SAAAC,GAAcr1D,KAAKsqE,gBAAgBjV,WAAa,CAChD,WAAAC,GAAgBt1D,KAAKsqE,gBAAgBhV,aAAe,CACpD,aAAAC,GAAkBv1D,KAAKsqE,gBAAgB/U,eAAiB,CACxD,UAAAC,GAAex1D,KAAKsqE,gBAAgB9U,YAAc,CAClD,UAAAC,GAAez1D,KAAKsqE,gBAAgB7U,YAAc,CAClD,YAAAC,GAAiB11D,KAAKsqE,gBAAgB5U,cAAgB,CACtD,SAAArrB,GAAcrqC,KAAKsqE,gBAAgBjgC,WAAa,CAChD,YAAAsrB,GAAiB31D,KAAKsqE,gBAAgB3U,cAAgB,CACtD,YAAAC,GAAiB51D,KAAKsqE,gBAAgB1U,cAAgB,CACtD,YAAAC,GAAiB71D,KAAKsqE,gBAAgBzU,cAAgB,CACtD,SAAAC,GAAc91D,KAAKsqE,gBAAgBxU,WAAa,CAChD,SAAAC,GAAc/1D,KAAKsqE,gBAAgBvU,WAAa,CAChD,YAAAC,GAAiBh2D,KAAKsqE,gBAAgBtU,cAAgB,CACtD,UAAAC,GAAej2D,KAAKsqE,gBAAgBrU,YAAc,CAClD,cAAAC,GAAmBl2D,KAAKsqE,gBAAgBpU,gBAAkB,CAC1D,SAAAC,GAAcn2D,KAAKsqE,gBAAgBnU,WAAa,CAChD,WAAAC,GAAgBp2D,KAAKsqE,gBAAgBlU,aAAe,CACpD,aAAAC,GAAkBr2D,KAAKsqE,gBAAgBjU,eAAiB,CACxD,cAAAC,GAAmBt2D,KAAKsqE,gBAAgBhU,gBAAkB,CAC1D,eAAAC,GAAoBv2D,KAAKsqE,gBAAgB/T,iBAAmB,CAC5D,oBAAAC,GAAyBx2D,KAAKsqE,gBAAgB9T,sBAAwB,CACtE,SAAAC,GAAcz2D,KAAKsqE,gBAAgB7T,WAAa,CAChD,SAAAC,GAAc12D,KAAKsqE,gBAAgB5T,WAAa,CAChD,UAAAC,GAAe32D,KAAKsqE,gBAAgB3T,YAAc,CAClD,SAAAC,GAAc52D,KAAKsqE,gBAAgB1T,WAAa,CAChD,eAAAC,GAAoB72D,KAAKsqE,gBAAgBzT,iBAAmB,CAC5D,eAAAC,GAAoB92D,KAAKsqE,gBAAgBxT,iBAAmB,CAG5D,eAAA4hB,CAAgB5d,GAAW96D,KAAK6qE,qBAAqB7D,sBAAsB,aAAclM,EAAU,CACnG,cAAA6d,CAAe7d,GAAW96D,KAAK6qE,qBAAqB7D,sBAAsB,YAAalM,EAAU,CACjG,eAAA8d,CAAgB9d,GAAW96D,KAAK6qE,qBAAqB7D,sBAAsB,aAAclM,EAAU,CACnG,gBAAA+d,CAAiB/d,GAAW96D,KAAK6qE,qBAAqB7D,sBAAsB,cAAelM,EAAU,CACrG,eAAAge,CAAgBhe,GAAW96D,KAAK6qE,qBAAqB7D,sBAAsB,aAAclM,EAAU,CACnG,YAAA/D,GAAiB/2D,KAAKsqE,gBAAgBvT,cAAgB,CACtD,YAAAC,GAAiBh3D,KAAKsqE,gBAAgBtT,cAAgB,CACtD,WAAAC,GAAgBj3D,KAAKsqE,gBAAgBrT,aAAe,CACpD,WAAAC,GAAgBl3D,KAAKsqE,gBAAgBpT,aAAe,CACpD,UAAAC,GAAen3D,KAAKsqE,gBAAgBnT,YAAc,CAClD,SAAAC,GAAcp3D,KAAKsqE,gBAAgBlT,WAAa,CAChD,UAAAC,GAAer3D,KAAKsqE,gBAAgBjT,YAAc,CAClD,YAAAC,GAAiBt3D,KAAKsqE,gBAAgBhT,cAAgB,CACtD,UAAAC,GAAev3D,KAAKsqE,gBAAgB/S,YAAc,CAKlD,eAAApE,GACInzD,KAAKsqE,gBAAgBnX,kBACrBnzD,KAAK+4E,eAAiB,IAC1B,CAKA,eAAAC,GACI,OAAOjzE,OAAOonB,OAAOntB,KAAKsqE,gBAAgBxb,mBAAmBmqB,KAAKjpB,GAAQA,EAAK3c,OACnF,CAKA,OAAAtwC,GAEI,IAAK,MAAMsR,KAAOrU,KAAK8rE,kBACf9rE,KAAK8rE,kBAAkBz3D,KACvB60D,qBAAqBlpE,KAAK8rE,kBAAkBz3D,IAC5CrU,KAAK8rE,kBAAkBz3D,GAAO,MAKtCrU,KAAK23D,gBAAgBtkB,QAAS,EAC1BrzC,KAAK2jD,gBACL3jD,KAAK2jD,cAActQ,QAAS,GAIhCrzC,KAAKq5D,cAAgB,GAGjBr5D,KAAK6vD,mBACL7vD,KAAK6vD,kBAAkB3M,YAE/B,EC9gGJ,MAAMg2B,GACF,WAAAp5E,CAAYC,EAAQ+6D,EAAU,IAC1B96D,KAAKD,OAASA,EAGdC,KAAKgmB,OAAS,CACVsE,UAAWwwC,EAAQxwC,WAAa,GAChCkJ,UAAWsnC,EAAQtnC,WAAa,GAChC2lD,aAAcre,EAAQqe,cAAgB,GACtCxkE,SAA6B,IAApBmmD,EAAQnmD,QACjBykE,gBAAiBte,EAAQse,iBAAmB,IAIhDp5E,KAAKq5E,aAAe,CAAEh3E,EAAG,EAAGC,EAAG,GAC/BtC,KAAKs5E,SAAW,CAAEj3E,EAAG,EAAGC,EAAG,GAC3BtC,KAAKu5E,WAAa,CAAEl3E,EAAG,EAAGC,EAAG,GAC7BtC,KAAKw5E,YAAc,CAAEn3E,EAAG,EAAGC,EAAG,GAC9BtC,KAAK+1E,UAAW,EAChB/1E,KAAK81E,UAAY,EAGjB91E,KAAKy5E,WAAa,KAGlBz5E,KAAKi4E,QAAU,IAAI50E,IACnBrD,KAAK05E,aAAe,KAGpB15E,KAAK03E,gBAAkB13E,KAAK03E,gBAAgB32E,KAAKf,MACjDA,KAAK25E,iBAAmB35E,KAAK25E,iBAAiB54E,KAAKf,MACnDA,KAAK45E,iBAAmB55E,KAAK45E,iBAAiB74E,KAAKf,MACnDA,KAAKg4E,gBAAkBh4E,KAAKg4E,gBAAgBj3E,KAAKf,MACjDA,KAAK65E,eAAiB75E,KAAK65E,eAAe94E,KAAKf,MAG/CA,KAAK85E,cAAgB,KAGrB95E,KAAK+5E,qBACL/5E,KAAKg6E,uBAGLh6E,KAAKi6E,eAAiB,IAAIC,eAAe,KACrCl6E,KAAK+5E,uBAET/5E,KAAKi6E,eAAeE,QAAQn6E,KAAKD,OACrC,CAKA,kBAAAg6E,GAEI/5E,KAAKy5E,WAAaz5E,KAAKD,OAAOyB,wBAC9BxB,KAAKq5E,aAAe,CAChBh3E,EAAGrC,KAAKy5E,WAAWh5E,MAAQ,EAC3B6B,EAAGtC,KAAKy5E,WAAW/4E,OAAS,GAGR,IAApBV,KAAKs5E,SAASj3E,GAA+B,IAApBrC,KAAKs5E,SAASh3E,IACvCtC,KAAKs5E,SAAW,CAAEj3E,EAAGrC,KAAKq5E,aAAah3E,EAAGC,EAAGtC,KAAKq5E,aAAa/2E,GAEvE,CAKA,oBAAA03E,GACSh6E,KAAKgmB,OAAOrR,UAGjB3U,KAAKD,OAAOiB,iBAAiB,YAAahB,KAAK03E,iBAC/C13E,KAAKD,OAAOiB,iBAAiB,aAAchB,KAAK25E,kBAGhD35E,KAAKD,OAAOiB,iBAAiB,aAAchB,KAAK45E,iBAAkB,CAAEQ,SAAS,IAC7Ep6E,KAAKD,OAAOiB,iBAAiB,YAAahB,KAAKg4E,gBAAiB,CAAEoC,SAAS,IAC3Ep6E,KAAKD,OAAOiB,iBAAiB,WAAYhB,KAAK65E,eAAgB,CAAEO,SAAS,IACzEp6E,KAAKD,OAAOiB,iBAAiB,cAAehB,KAAK65E,eAAgB,CAAEO,SAAS,IAChF,CAKA,eAAA1C,CAAgBjmC,GAEZ,MAAMlwC,EAAOvB,KAAKy5E,YAAcz5E,KAAKD,OAAOyB,wBAC5CxB,KAAKs5E,SAAW,CACZj3E,EAAGovC,EAAMmmC,QAAUr2E,EAAKs2E,KACxBv1E,EAAGmvC,EAAMqmC,QAAUv2E,EAAKw2E,KAE5B/3E,KAAKq6E,mBAGDr6E,KAAK85E,eACL95E,KAAK85E,cAAc,QAE3B,CAKA,gBAAAH,GAEI35E,KAAKu5E,WAAa,CAAEl3E,EAAG,EAAGC,EAAG,GAC7BtC,KAAK+1E,UAAW,EAChB/1E,KAAK81E,UAAY,EAEjB91E,KAAKs5E,SAAW,CAAEj3E,EAAGrC,KAAKq5E,aAAah3E,EAAGC,EAAGtC,KAAKq5E,aAAa/2E,EACnE,CAKA,gBAAAs3E,CAAiBnoC,GACb,IAAK,MAAMymC,KAASzmC,EAAM6oC,eACtBt6E,KAAKi4E,QAAQnzE,IAAIozE,EAAMqC,WAAY,CAC/Bl4E,EAAG61E,EAAMN,QACTt1E,EAAG41E,EAAMJ,UAIR93E,KAAK05E,cAAsC,IAAtB15E,KAAKi4E,QAAQ9kE,OACnCnT,KAAK05E,aAAexB,EAAMqC,YAIR,OAAtBv6E,KAAK05E,cACL15E,KAAKw6E,oBAAoB/oC,EAAMwmC,QAEvC,CAKA,eAAAD,CAAgBvmC,GACZ,IAAK,MAAMymC,KAASzmC,EAAM6oC,eAClBt6E,KAAKi4E,QAAQl+D,IAAIm+D,EAAMqC,aACvBv6E,KAAKi4E,QAAQnzE,IAAIozE,EAAMqC,WAAY,CAC/Bl4E,EAAG61E,EAAMN,QACTt1E,EAAG41E,EAAMJ,UAKK,OAAtB93E,KAAK05E,eACL15E,KAAKw6E,oBAAoB/oC,EAAMwmC,SAG3Bj4E,KAAK85E,eACL95E,KAAK85E,cAAc,SAG/B,CAKA,cAAAD,CAAepoC,GACX,IAAK,MAAMymC,KAASzmC,EAAM6oC,eACtBt6E,KAAKi4E,QAAQ1mC,OAAO2mC,EAAMqC,YAGtBrC,EAAMqC,aAAev6E,KAAK05E,eAC1B15E,KAAK05E,aAAe,KAGhB15E,KAAKi4E,QAAQ9kE,KAAO,EACpBnT,KAAK05E,aAAe15E,KAAKi4E,QAAQxrE,OAAOguE,OAAOp1E,MAG/CrF,KAAK25E,mBAIrB,CAKA,mBAAAa,CAAoBvC,GAChB,IAAK,MAAMC,KAASD,EAChB,GAAIC,EAAMqC,aAAev6E,KAAK05E,aAAc,CAExC,MAAMn4E,EAAOvB,KAAKy5E,YAAcz5E,KAAKD,OAAOyB,wBAC5CxB,KAAKs5E,SAAW,CACZj3E,EAAG61E,EAAMN,QAAUr2E,EAAKs2E,KACxBv1E,EAAG41E,EAAMJ,QAAUv2E,EAAKw2E,KAE5B/3E,KAAKq6E,mBACL,KACJ,CAER,CAKA,gBAAAA,GAEI,MAAMx3D,EAAK7iB,KAAKs5E,SAASj3E,EAAIrC,KAAKq5E,aAAah3E,EACzCygB,EAAK9iB,KAAKs5E,SAASh3E,EAAItC,KAAKq5E,aAAa/2E,EACzCygB,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GAGpC43D,EAAc9zE,KAAKkB,IAAI9H,KAAKq5E,aAAah3E,EAAGrC,KAAKq5E,aAAa/2E,GAMpE,GALAtC,KAAK81E,UAAYlvE,KAAKiB,IAAI,EAAG,EAAKkb,EAAW23D,GAG7C16E,KAAK+1E,SAAWhzD,EAAW/iB,KAAKgmB,OAAOmzD,aAEnCn5E,KAAK+1E,SAEL/1E,KAAKu5E,WAAa,CACdl3E,EAAGwgB,EAAK7iB,KAAKgmB,OAAOwN,UAAY,EAChClxB,EAAGwgB,EAAK9iB,KAAKgmB,OAAOwN,UAAY,OAEjC,CAEH,MAAMA,EAAY5sB,KAAKkB,IAAI9H,KAAKq5E,aAAah3E,EAAGrC,KAAKq5E,aAAa/2E,GAAKtC,KAAKgmB,OAAOwN,UAEnF,GAAIzQ,EAAW,EAAG,CAEd,MAAMjZ,EAASlD,KAAKkB,IAAI,EAAGib,EAAW23D,GACtC16E,KAAKu5E,WAAa,CACdl3E,EAAIwgB,EAAKE,EAAYyQ,EAAY1pB,EAAS9J,KAAKgmB,OAAOozD,gBACtD92E,EAAIwgB,EAAKC,EAAYyQ,EAAY1pB,EAAS9J,KAAKgmB,OAAOozD,gBAE9D,MACIp5E,KAAKu5E,WAAa,CAAEl3E,EAAG,EAAGC,EAAG,EAErC,CACJ,CAMA,MAAAqY,CAAO3H,GACH,IAAKhT,KAAKgmB,OAAOrR,QAAS,OAG1B,MAAM2V,EAAY,EAAI1jB,KAAKC,IAAI,EAAI7G,KAAKgmB,OAAOsE,UAAWtX,EAAY,OAMtE,GAJAhT,KAAKw5E,YAAYn3E,IAAMrC,KAAKu5E,WAAWl3E,EAAIrC,KAAKw5E,YAAYn3E,GAAKioB,EACjEtqB,KAAKw5E,YAAYl3E,IAAMtC,KAAKu5E,WAAWj3E,EAAItC,KAAKw5E,YAAYl3E,GAAKgoB,EAG7DtqB,KAAK+1E,SAAU,CACf,MAAMxzD,EAAS,GACfviB,KAAKw5E,YAAYn3E,IAAMuE,KAAK8I,SAAW,IAAO6S,EAC9CviB,KAAKw5E,YAAYl3E,IAAMsE,KAAK8I,SAAW,IAAO6S,CAClD,CACJ,CAOA,aAAAo4D,CAAcvgB,GACV,MAAO,CACH/3D,EAAGrC,KAAKw5E,YAAYn3E,EACpBC,EAAGtC,KAAKw5E,YAAYl3E,EAE5B,CAMA,QAAAk1C,GACI,MAAO,CACHojC,KAAM,IAAK56E,KAAKw5E,aAChBphE,OAAQ,IAAKpY,KAAKu5E,YAClBzD,UAAW91E,KAAK81E,UAChBC,SAAU/1E,KAAK+1E,SACfz9D,SAAUtY,KAAKgmB,OAAOrR,QAE9B,CAKA,MAAAkmE,GACS76E,KAAKgmB,OAAOrR,UACb3U,KAAKgmB,OAAOrR,SAAU,EACtB3U,KAAKg6E,uBAEb,CAKA,OAAAc,GACQ96E,KAAKgmB,OAAOrR,UACZ3U,KAAKgmB,OAAOrR,SAAU,EACtB3U,KAAK+6E,uBACL/6E,KAAKu5E,WAAa,CAAEl3E,EAAG,EAAGC,EAAG,GAErC,CAKA,oBAAAy4E,GACI/6E,KAAKD,OAAOiD,oBAAoB,YAAahD,KAAK03E,iBAClD13E,KAAKD,OAAOiD,oBAAoB,aAAchD,KAAK25E,kBACnD35E,KAAKD,OAAOiD,oBAAoB,aAAchD,KAAK45E,kBACnD55E,KAAKD,OAAOiD,oBAAoB,YAAahD,KAAKg4E,iBAClDh4E,KAAKD,OAAOiD,oBAAoB,WAAYhD,KAAK65E,gBACjD75E,KAAKD,OAAOiD,oBAAoB,cAAehD,KAAK65E,eACxD,CAMA,sBAAAmB,CAAuBr5E,GACnB3B,KAAK85E,cAAgBn4E,CACzB,CAKA,OAAAoB,GACI/C,KAAK+6E,uBACD/6E,KAAKi6E,gBACLj6E,KAAKi6E,eAAegB,aAExBj7E,KAAKi4E,QAAQ/1E,OACjB,EC5UJ,MAAMg5E,GACF,WAAAp7E,CAAYg7D,EAAU,IAElB96D,KAAKgmB,OAAS,CACVm1D,cAAergB,EAAQqgB,eAAiB,CAAErzE,IAAK,IAAMD,IAAK,KAC1DuzE,cAAetgB,EAAQsgB,eAAiB,IACxCC,aAAcvgB,EAAQugB,cAAgB,CAAEvzE,IAAK,IAAOD,IAAK,KACzDyzE,aAAcxgB,EAAQwgB,cAAgB,IACtCC,cAAezgB,EAAQygB,eAAiB,IACxCC,kBAAuCnhE,IAAzBygD,EAAQ0gB,aAA6B1gB,EAAQ0gB,aAAezR,IAC1EpM,eAAgB7C,EAAQ6C,gBAAkB,IAC1C5X,eAAgB+U,EAAQ/U,gBAAkB,GAC1CpxC,SAA6B,IAApBmmD,EAAQnmD,SAIrB3U,KAAKqS,MAAQ,CACTopE,YAAY,EACZC,WAAW,EACXzF,UAAU,EACVrY,eAAgB,EAChB/5D,WAAY,EACZuJ,YAAapN,KAAKgmB,OAAO+/B,gBAI7B/lD,KAAK27E,OAAS,CACVC,KAAM,EACNv7D,MAAO,EACP+T,KAAM,EACNynD,aAAc,EACdC,UAAW97E,KAAK+7E,kBAAkB,SAClCC,SAAUh8E,KAAK+7E,kBAAkB,SAIrC/7E,KAAK2f,WAAa,CAAEtd,EAAG,EAAGC,EAAG,GAC7BtC,KAAKi8E,WAAa,CAAE55E,EAAG,EAAGC,EAAG,GAC7BtC,KAAKk8E,UAAY,CAAE75E,EAAG,EAAGC,EAAG,GAG5BtC,KAAK2nE,UAAY,CACbwU,QAAS,KACTC,OAAQ,KACRC,QAAS,KACTC,OAAQ,KAGhB,CAMA,MAAA3hE,CAAO3H,GACEhT,KAAKgmB,OAAOrR,UAGjB3U,KAAKu8E,gBAAgBvpE,GAGrBhT,KAAK27E,OAAOC,MAAQ5oE,GAGfhT,KAAKqS,MAAM4jE,UAAYj2E,KAAK27E,OAAOC,MAAQ57E,KAAKgmB,OAAOw1D,cACxDx7E,KAAKw8E,aAIJx8E,KAAKqS,MAAM4jE,UACZj2E,KAAKy8E,eAAezpE,GAInBhT,KAAKqS,MAAM4jE,UACZj2E,KAAK08E,cAAc1pE,GAE3B,CAKA,eAAAupE,CAAgBvpE,GACZ,MAAMjF,EAAQ/N,KAAKgmB,OAAO23C,eAAiB39D,KAAKqS,MAAMxO,WACtD7D,KAAKqS,MAAMurD,gBAAmB7vD,EAAQiF,EAAa,IAG/ChT,KAAKqS,MAAMurD,eAA2B,EAAVh3D,KAAKgE,KACjC5K,KAAKqS,MAAMurD,gBAA4B,EAAVh3D,KAAKgE,GAE1C,CAKA,cAAA6xE,CAAezpE,GAENhT,KAAK28E,sBAIL38E,KAAKqS,MAAMopE,YAQZz7E,KAAK27E,OAAOt7D,OAASrN,EACjBhT,KAAK27E,OAAOt7D,OAASrgB,KAAKgmB,OAAOo1D,eACjCp7E,KAAK48E,aART58E,KAAK27E,OAAOt7D,OAASrN,EACjBhT,KAAK27E,OAAOt7D,OAASrgB,KAAK27E,OAAOG,WACjC97E,KAAKu8D,cASjB,CAKA,aAAAmgB,CAAc1pE,GACV,GAAKhT,KAAKqS,MAAMqpE,UAMT,CAEH17E,KAAK27E,OAAOvnD,MAAQphB,EACpB,MAAMnK,EAAWjC,KAAKkB,IAAI9H,KAAK27E,OAAOvnD,KAAOp0B,KAAKgmB,OAAOs1D,aAAc,GAGjEtgE,GAAiBpU,KAAKiE,KAAKhC,EAAW,IAAOjC,KAAKgE,IAAM,GAAK,EAGnE5K,KAAK2f,WAAWtd,EAAIrC,KAAKk8E,UAAU75E,GAAKrC,KAAKi8E,WAAW55E,EAAIrC,KAAKk8E,UAAU75E,GAAK2Y,EAChFhb,KAAK2f,WAAWrd,EAAItC,KAAKk8E,UAAU55E,GAAKtC,KAAKi8E,WAAW35E,EAAItC,KAAKk8E,UAAU55E,GAAK0Y,EAE5EnS,GAAY,GACZ7I,KAAK68E,SAEb,MAnBI78E,KAAK27E,OAAOvnD,MAAQphB,EAChBhT,KAAK27E,OAAOvnD,MAAQp0B,KAAK27E,OAAOK,UAChCh8E,KAAK02D,WAkBjB,CAKA,UAAA6F,GACIv8D,KAAKqS,MAAMopE,YAAa,EACxBz7E,KAAK27E,OAAOt7D,MAAQ,EAEhBrgB,KAAK2nE,UAAUwU,SACfn8E,KAAK2nE,UAAUwU,QAAQ,CAAEntD,MAAO,SAExC,CAKA,QAAA4tD,GACI58E,KAAKqS,MAAMopE,YAAa,EACxBz7E,KAAK27E,OAAOt7D,MAAQ,EACpBrgB,KAAK27E,OAAOG,UAAY97E,KAAK+7E,kBAAkB,SAE3C/7E,KAAK2nE,UAAUwU,SACfn8E,KAAK2nE,UAAUwU,QAAQ,CAAEntD,MAAO,OAExC,CAKA,SAAA0nC,GACI12D,KAAKqS,MAAMqpE,WAAY,EACvB17E,KAAK27E,OAAOvnD,KAAO,EAGnBp0B,KAAKk8E,UAAY,IAAKl8E,KAAK2f,YAI3B,MAAMR,EAAQvY,KAAK8I,SAAW9I,KAAKgE,GAAK,EAClCmY,EAAW/iB,KAAKgmB,OAAOu1D,eAAiB,GAAsB,GAAhB30E,KAAK8I,UACzD1P,KAAKi8E,WAAa,CACd55E,EAAGuE,KAAK0E,IAAI6T,GAAS4D,EAAW,IAChCzgB,EAAGsE,KAAKiE,IAAIsU,GAAS4D,EAAW,IAGhC/iB,KAAK2nE,UAAUyU,QACfp8E,KAAK2nE,UAAUyU,OAAO,CAClBptD,MAAO,QACPyT,OAAQziC,KAAK2f,YAGzB,CAKA,OAAAk9D,GACI78E,KAAKqS,MAAMqpE,WAAY,EACvB17E,KAAK27E,OAAOvnD,KAAO,EACnBp0B,KAAK27E,OAAOK,SAAWh8E,KAAK+7E,kBAAkB,QAG9C/7E,KAAKk8E,UAAY,IAAKl8E,KAAK2f,YAEvB3f,KAAK2nE,UAAUyU,QACfp8E,KAAK2nE,UAAUyU,OAAO,CAClBptD,MAAO,MACPyT,OAAQziC,KAAK2f,YAGzB,CAKA,UAAA68D,GACIx8E,KAAKqS,MAAM4jE,UAAW,EACtBj2E,KAAKqS,MAAMxO,WAAa,GACxB7D,KAAKqS,MAAMjF,YAAc,IAGrBpN,KAAKqS,MAAMopE,aACXz7E,KAAKqS,MAAMopE,YAAa,EACxBz7E,KAAK27E,OAAOt7D,MAAQ,EAChBrgB,KAAK2nE,UAAUwU,SACfn8E,KAAK2nE,UAAUwU,QAAQ,CAAEntD,MAAO,SAKpChvB,KAAK2nE,UAAU0U,SACfr8E,KAAK2nE,UAAU0U,SAEvB,CAKA,MAAA3hB,GACS16D,KAAKqS,MAAM4jE,WAEhBj2E,KAAKqS,MAAM4jE,UAAW,EACtBj2E,KAAKqS,MAAMxO,WAAa,EACxB7D,KAAKqS,MAAMjF,YAAcpN,KAAKgmB,OAAO+/B,eACrC/lD,KAAK27E,OAAOC,KAAO,EAIf57E,KAAK2nE,UAAU2U,QACft8E,KAAK2nE,UAAU2U,SAInBt8E,KAAK88E,uBACT,CAKA,oBAAAA,GAEI,MAAMC,EAAgB,CAClB16E,EAA+B,GAA5BrC,KAAKgmB,OAAOu1D,cACfj5E,GAAItC,KAAKgmB,OAAOu1D,eAIpBv7E,KAAKk8E,UAAY,IAAKl8E,KAAK2f,YAC3B3f,KAAKi8E,WAAac,EAClB/8E,KAAKqS,MAAMqpE,WAAY,EACvB17E,KAAK27E,OAAOvnD,KAAO,EAEfp0B,KAAK2nE,UAAUyU,QACfp8E,KAAK2nE,UAAUyU,OAAO,CAClBptD,MAAO,OACPyT,OAAQziC,KAAK2f,aAKrB1d,WAAW,KACPjC,KAAKk8E,UAAY,IAAKl8E,KAAK2f,YAC3B3f,KAAKi8E,WAAa,CAAE55E,EAAG,EAAGC,EAAG,GAC7BtC,KAAK27E,OAAOvnD,KAAO,GACpB,IACP,CAKA,cAAA4oD,GACIh9E,KAAK27E,OAAOC,KAAO,EACf57E,KAAKqS,MAAM4jE,UACXj2E,KAAK06D,QAEb,CAMA,kBAAA6C,CAAmB5oD,GACf3U,KAAKgmB,OAAOi2C,gBAAkBtnD,GACzBA,GAAW3U,KAAKqS,MAAMopE,YAEvBz7E,KAAK48E,UAEb,CAMA,iBAAAD,GACI,OAAuC,IAAhC38E,KAAKgmB,OAAOi2C,eACvB,CAMA,kBAAAghB,GACI,OAAO,EAAIr2E,KAAKiE,IAAI7K,KAAKqS,MAAMurD,gBAAkB59D,KAAKqS,MAAMjF,YAAcpN,KAAKqS,MAAMxO,UACzF,CAMA,gBAAAq5E,GACI,OAAKl9E,KAAKqS,MAAMopE,WACT70E,KAAKkB,IAAI9H,KAAK27E,OAAOt7D,MAAQrgB,KAAKgmB,OAAOo1D,cAAe,GAD5B,CAEvC,CAMA,aAAA+B,GACI,OAAOn9E,KAAK2f,YAAc,CAAEtd,EAAG,EAAGC,EAAG,EACzC,CAKA,iBAAAy5E,CAAkBz2E,GACd,MAAM83E,EAAWp9E,KAAKgmB,OAAO,GAAG1gB,aAChC,OAAO83E,EAASt1E,IAAMlB,KAAK8I,UAAY0tE,EAASv1E,IAAMu1E,EAASt1E,IACnE,CAKA,WAAAu1E,CAAY5rC,EAAO9vC,GACX3B,KAAK2nE,UAAUxiE,eAAessC,KAC9BzxC,KAAK2nE,UAAUl2B,GAAS9vC,EAEhC,CAKA,QAAA61C,GACI,MAAO,IACAx3C,KAAKqS,MACRirE,gBAAiBt9E,KAAKi9E,qBACtBxgB,cAAez8D,KAAKk9E,mBACpBv9D,WAAY3f,KAAKm9E,gBAEzB,CAKA,MAAAtC,GACI76E,KAAKgmB,OAAOrR,SAAU,CAC1B,CAKA,OAAAmmE,GACI96E,KAAKgmB,OAAOrR,SAAU,EACtB3U,KAAKqS,MAAMopE,YAAa,EACxBz7E,KAAKqS,MAAMqpE,WAAY,EACvB17E,KAAK2f,WAAa,CAAEtd,EAAG,EAAGC,EAAG,EACjC,CAKA,OAAAS,GACI/C,KAAK2nE,UAAY,CACbwU,QAAS,KACTC,OAAQ,KACRC,QAAS,KACTC,OAAQ,KAEhB,ECxZJ,MAAMiB,GACF,WAAAz9E,GAEIE,KAAKw9E,aAAe,IAGpBx9E,KAAKy9E,MAAQ,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAG1Ez9E,KAAK09E,UAAY,CACbC,OAAQ,EACRC,YAAa,EACbC,YAAa,EACbC,WAAY,EACZC,WAAY,EACZC,cAAe,EACfC,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,WAAY,EACZC,aAAc,GACdC,aAAc,GACdngD,OAAQ,IAIZn+B,KAAKu+E,OAAS,CAEV9/C,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC1B+/C,aAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACjCC,cAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAClCC,aAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGjCC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC3BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC3BC,SAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC7BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC3BC,WAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC/BC,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC5BC,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAG5BC,gBAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,GAC9BC,gBAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,IAG9BC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IACvBC,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAC9CC,oBAAqB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC3CC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC3BC,SAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GACvBC,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC9BC,WAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAItC1/E,KAAK2/E,OAAS,CAEVlhD,MAAO,CAAC,EAAG,EAAG,GACdC,MAAO,CAAC,EAAG,EAAG,GACdC,WAAY,CAAC,EAAG,EAAG,GACnBC,UAAW,CAAC,EAAG,EAAG,GAClBghD,KAAM,CAAC,EAAG,EAAG,GACbC,KAAM,CAAC,EAAG,EAAG,GAGbC,KAAM,CAAC,EAAG,EAAG,EAAG,IAChBC,KAAM,CAAC,EAAG,EAAG,EAAG,IAChBC,KAAM,CAAC,EAAG,EAAG,EAAG,IAChBC,OAAQ,CAAC,EAAG,EAAG,EAAG,IAClBC,KAAM,CAAC,EAAG,EAAG,EAAG,GAGhBC,KAAM,CAAC,EAAG,EAAG,EAAG,GAAI,IACpBC,KAAM,CAAC,EAAG,EAAG,EAAG,GAAI,IACpBC,KAAM,CAAC,EAAG,EAAG,EAAG,GAAI,IACpBC,KAAM,CAAC,EAAG,EAAG,EAAG,IAChBC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,IACzBC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,IACzBC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAC7BC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,KAIjC1gF,KAAK2gF,cAAgB,CACjB1nE,QAAS,CACLxX,MAAO,SACPm/E,MAAO,IACP7pD,SAAU,QACV8pD,aAAc,YAElBtwE,KAAM,CACF9O,MAAO,QACPm/E,MAAO,GACP7pD,SAAU,QACV8pD,aAAc,UAElBltE,QAAS,CACLlS,MAAO,aACPm/E,MAAO,IACP7pD,SAAU,aACV8pD,aAAc,UAElB5hB,OAAQ,CACJx9D,MAAO,UACPm/E,MAAO,GACP7pD,SAAU,aACV8pD,aAAc,UAElBC,MAAO,CACHr/E,MAAO,SACPm/E,MAAO,IACP7pD,SAAU,QACV8pD,aAAc,WAElBE,QAAS,CACLt/E,MAAO,kBACPm/E,MAAO,GACP7pD,SAAU,aACV8pD,aAAc,UAElBziB,SAAU,CACN38D,MAAO,sBACPm/E,MAAO,GACP7pD,SAAU,aACV8pD,aAAc,UAElB3oB,UAAW,CACPz2D,MAAO,aACPm/E,MAAO,IACP7pD,SAAU,aACV8pD,aAAc,YAElBG,WAAY,CACRv/E,MAAO,gBACPm/E,MAAO,GACP7pD,SAAU,aACV8pD,aAAc,UAElBI,QAAS,CACLx/E,MAAO,QACPm/E,MAAO,IACP7pD,SAAU,aACV8pD,aAAc,UAKtB7gF,KAAKkhF,aAAe,CAEhBC,UAAW,CAAC,EAAG,EAAG,EAAG,GACrBC,OAAQ,CAAC,EAAG,EAAG,GACfC,OAAQ,CAAC,EAAG,EAAG,GACfC,UAAW,CAAC,EAAG,EAAG,EAAG,GACrBC,UAAW,CAAC,EAAG,EAAG,EAAG,GAGrBC,UAAW,CAAC,EAAG,EAAG,EAAG,GACrBC,YAAa,CAAC,EAAG,EAAG,EAAG,GACvBC,YAAa,CAAC,EAAG,EAAG,EAAG,GAGvBC,2BAA4B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG9DC,aAAc,CAAC,EAAG,EAAG,EAAG,GACxBC,UAAW,CAAC,EAAG,EAAG,EAAG,GAE7B,CAOA,UAAAC,CAAWx0B,GACP,MAAMy0B,EAAWz0B,EAAKpnD,MAAM,GAAG,GACzBi4B,EAAS/8B,SAASksD,EAAKpnD,OAAM,IAC7B87E,EAAYhiF,KAAKy9E,MAAMjc,QAAQugB,GAErC,IAAkB,IAAdC,EACA,MAAM,IAAIv7E,MAAM,iBAAiB6mD,KAIrC,OAAsB,IAAdnvB,EAAS,GAAU6jD,CAC/B,CAOA,eAAAC,CAAgBC,GAEZ,OAAOliF,KAAKw9E,aAAe52E,KAAKC,IAAI,GAAIq7E,EAAW,IAAM,GAC7D,CAOA,eAAAC,CAAgB70B,GACZ,OAAOttD,KAAKiiF,gBAAgBjiF,KAAK8hF,WAAWx0B,GAChD,CAQA,aAAA80B,CAAcC,EAAMC,EAAY,SAC5B,MAAM7gF,EAAQzB,KAAKu+E,OAAO+D,GAC1B,IAAK7gF,EACD,MAAM,IAAIgF,MAAM,uBAAuB67E,KAG3C,MAAMC,EAAWviF,KAAK8hF,WAAWO,GACjC,OAAO5gF,EAAMyF,IAAIk2E,GAAYp9E,KAAKiiF,gBAAgBM,EAAWnF,GACjE,CAQA,aAAAoF,CAAcH,EAAMI,EAAY,SAC5B,MAAMC,EAAQ1iF,KAAK2/E,OAAO8C,GAC1B,IAAKC,EACD,MAAM,IAAIj8E,MAAM,uBAAuBg8E,KAG3C,MAAMF,EAAWviF,KAAK8hF,WAAWO,GACjC,OAAOK,EAAMx7E,IAAIk2E,GAAYp9E,KAAKiiF,gBAAgBM,EAAWnF,GACjE,CASA,mBAAAuF,CAAoBtuE,EAAKiuE,EAAY,QAAS7R,EAAczwE,KAAKkhF,aAAaC,WAC1E,MAAM1/E,EAAQzB,KAAKoiF,cAAc/tE,EAAKiuE,GAChCM,EAAS,GAEf,IAAK,MAAMC,KAAUpS,EAAa,CAC9B,MAAMqS,EAAYrhF,GAAOohF,EAAS,GAAKphF,EAAMsD,QAG7C,IAAI09E,EAAY,QACE,UAAdH,EACe,IAAXO,GAA2B,IAAXA,GAA2B,IAAXA,EAChCJ,EAAY,QACM,IAAXI,IACPJ,EAAY,cAEK,iBAAdH,IAEHG,EADW,IAAXI,GAA2B,IAAXA,GAA2B,IAAXA,EACpB,QACM,IAAXA,EACK,aAEA,SAKpB,MAAMX,EAAWt7E,KAAKgB,MAAM,GAAKhB,KAAKm8E,KAAKD,EAAY9iF,KAAKw9E,cAAgB,IACtEr/C,EAASv3B,KAAKgJ,MAAMsyE,EAAW,IAAM,EACrCF,EAAYE,EAAW,GACvBH,EAAW/hF,KAAKy9E,MAAMuE,GAAa7jD,EAEzCykD,EAAO9gF,KAAK,CACR+gF,SACAR,KAAMS,EACNE,YAAahjF,KAAKwiF,cAAcT,EAAUU,GAC1Cn9E,KAAMm9E,GAEd,CAEA,OAAOG,CACX,CAOA,eAAAK,CAAgB1/E,GACZ,OAAOvD,KAAK2gF,cAAcp9E,IAAYvD,KAAK2gF,cAAcpwE,IAC7D,CASA,cAAA2yE,CAAeC,EAAY,IAAKrhC,EAAQ,GAAIshC,GAAY,GACpD,MAAMC,EAAWF,EAAUn8E,QAAQ,KAAM,IACzC,IAAIs8E,EAAetjF,KAAKy9E,MAAMjc,QAAQ6hB,GACtC,MAAME,EAAQ,CAACJ,GAEf,IAAK,IAAIxnC,EAAI,EAAGA,EAAImG,EAAOnG,IAEvB2nC,EAAeF,GACVE,EAAe,GAAK,IACpBA,EAAe,GAAK,GAEzBC,EAAMzhF,KAAK9B,KAAKy9E,MAAM6F,IAG1B,OAAOC,CACX,CAQA,eAAAC,CAAgBC,EAAOC,GACnB,MAAMC,EAAQ3jF,KAAK8hF,WAAW2B,GACxBG,EAAQ5jF,KAAK8hF,WAAW4B,GACxBG,EAAYj9E,KAAKib,IAAI+hE,EAAQD,GAGnC,IAAIG,EAAe,UACnB,IAAK,MAAOx3E,EAAMjH,KAAUU,OAAO4F,QAAQ3L,KAAK09E,WAC5C,GAAIr4E,IAAUw+E,EAAY,GAAI,CAC1BC,EAAex3E,EACf,KACJ,CAGJ,MAAO,CACHu3E,YACAC,eACAC,QAASn9E,KAAKgJ,MAAMi0E,EAAY,IAChCG,UAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAIx+E,SAASq+E,EAAY,IAC1D7xD,MAAOhyB,KAAKikF,iBAAiBJ,EAAY,IAEjD,CAOA,gBAAAI,CAAiBJ,GAiBb,MAhBe,CACX,EAAG,MACH,EAAG,QACH,EAAG,MACH,EAAG,MACH,EAAG,MACH,EAAG,MACH,EAAG,QACH,EAAG,MACH,EAAG,MACH,EAAG,MACH,GAAI,OACJ,GAAI,OACJ,GAAI,OAGMA,IAAc,SAChC,CAOA,cAAAK,CAAe9vE,EAAS,IACpB,MAAMC,IACFA,EAAM,KAAI5S,MACVA,EAAQ,QAAOsD,OACfA,EAAS,EAACo/E,gBACVA,EAAkB,GAAGC,gBACrBA,EAAkB,IAClBhwE,EAEEiwE,EAAarkF,KAAKoiF,cAAc/tE,EAAK5S,GACrC6iF,EAAS,GACf,IAAIhB,EAAe,EAEnB,IAAK,IAAI3nC,EAAI,EAAGA,EAAI52C,EAAQ42C,IAAK,CAE7B,GAAI/0C,KAAK8I,SAAW00E,EAAiB,CACjCE,EAAOxiF,KAAK,CAAEoP,UAAW,EAAG1C,SAAU,IAAM+1E,QAAQ,IACpD,QACJ,CAGA,IAAI/pD,EACJ,GAAI5zB,KAAK8I,SAAWy0E,EAAiB,CAEjC,MAAM37D,EAAY5hB,KAAK8I,SAAW,IAAM,EAAK,EAC7C8qB,EAAY5zB,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAIu8E,EAAWt/E,OAAS,EAAGu+E,EAAe96D,GAC3E,KAAO,CAEH,MAAMg8D,EAAO59E,KAAKgJ,MAAsB,EAAhBhJ,KAAK8I,UAAgB,EACvC8Y,EAAY5hB,KAAK8I,SAAW,IAAM,EAAK,EAC7C8qB,EAAY5zB,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAIu8E,EAAWt/E,OAAS,EAAGu+E,EAAgBkB,EAAOh8D,GACnF,CAEA86D,EAAe9oD,EAGf,MAAMiqD,EAAY,CAAC,IAAM,GAAK,IAAM,GAC9Bj2E,EAAWi2E,EAAU79E,KAAKgJ,MAAMhJ,KAAK8I,SAAW+0E,EAAU1/E,SAEhEu/E,EAAOxiF,KAAK,CACRoP,UAAWmzE,EAAWf,GACtB90E,WACA+1E,QAAQ,GAEhB,CAEA,OAAOD,CACX,EC1aJ,MAAMI,GACF,WAAA5kF,CAAY8xC,GACR5xC,KAAK4xC,aAAeA,EACpB5xC,KAAK2kF,YAAc,IAAIpH,GAGvBv9E,KAAK4kF,WAAa,KAClB5kF,KAAK6kF,aAAe,QACpB7kF,KAAK8kF,aAAe,IACpB9kF,KAAK46C,eAAiB,OAGtB56C,KAAK+kF,OAAS,IAAI1hF,IAGlBrD,KAAK0/B,OAAS,CACVrB,KAAM,CAAEgV,QAAQ,EAAO2xC,KAAM,IAC7BtC,MAAO,CAAErvC,QAAQ,EAAO2xC,KAAM,IAC9BV,OAAQ,CAAEjxC,QAAQ,EAAO2xC,KAAM,IAC/BC,IAAK,CAAE5xC,QAAQ,EAAO2xC,KAAM,MAIhChlF,KAAKklF,WAAallF,KAAK4xC,aAAauzC,aACpCnlF,KAAKklF,WAAWF,KAAK3/E,MAAQ,GAC7BrF,KAAKklF,WAAWE,QAAQplF,KAAK4xC,aAAayzC,aAG1CrlF,KAAKslF,OAAStlF,KAAKulF,eACnBvlF,KAAK8yE,MAAQ9yE,KAAKwlF,cAClBxlF,KAAKwgD,OAASxgD,KAAKylF,eAGnBzlF,KAAKwgD,OAAO4kC,QAAQplF,KAAK8yE,OACzB9yE,KAAK8yE,MAAMsS,QAAQplF,KAAKslF,QACxBtlF,KAAKslF,OAAOF,QAAQplF,KAAKklF,YAGzBllF,KAAK0lF,QAAU1lF,KAAK4xC,aAAauzC,aACjCnlF,KAAK0lF,QAAQV,KAAK3/E,MAAQ,GAC1BrF,KAAK0lF,QAAQN,QAAQplF,KAAKklF,YAG1BllF,KAAK2lF,QAAU3lF,KAAK4xC,aAAauzC,aACjCnlF,KAAK2lF,QAAQX,KAAK3/E,MAAQ,GAC1BrF,KAAK2lF,QAAQP,QAAQplF,KAAKwgD,QAG1BxgD,KAAK4lF,aAAe,EACpB5lF,KAAK6lF,eAAiB,EACtB7lF,KAAK8lF,WAAa,IAGlB9lF,KAAK+lF,kBAAoB,EACzB/lF,KAAKgmF,kBAAoB,EACzBhmF,KAAKywE,YAAc,KAGnBzwE,KAAKkuC,WAAY,EACjBluC,KAAKimF,UAAY,GACjBjmF,KAAKkmF,kBAAoB,EAC7B,CAKA,YAAAX,GACI,MAAMY,EAAYnmF,KAAK4xC,aAAaw0C,kBAC9BrhF,EAAwC,EAA/B/E,KAAK4xC,aAAay0C,WAC3BC,EAAUtmF,KAAK4xC,aAAa20C,aAAa,EAAGxhF,EAAQ/E,KAAK4xC,aAAay0C,YAE5E,IAAK,IAAIG,EAAU,EAAGA,EAAU,EAAGA,IAAW,CAC1C,MAAMC,EAAcH,EAAQI,eAAeF,GAC3C,IAAK,IAAI7qC,EAAI,EAAGA,EAAI52C,EAAQ42C,IAExB8qC,EAAY9qC,IAAsB,EAAhB/0C,KAAK8I,SAAe,GAAK9I,KAAKC,IAAI,EAAI80C,EAAI52C,EAAQ,EAE5E,CAGA,OADAohF,EAAUQ,OAASL,EACZH,CACX,CAKA,WAAAX,GACI,MAAM1S,EAAQ9yE,KAAK4xC,aAAa4zC,YAAY,GAC5C1S,EAAM8T,UAAUvhF,MAAQ,IAExB,MAAMwhF,EAAW7mF,KAAK4xC,aAAauzC,aAMnC,OALA0B,EAAS7B,KAAK3/E,MAAQ,GAEtBytE,EAAMsS,QAAQyB,GACdA,EAASzB,QAAQtS,GAEVA,CACX,CAKA,YAAA2S,GACI,MAAMjlC,EAASxgD,KAAK4xC,aAAak1C,qBAIjC,OAHAtmC,EAAOl7C,KAAO,UACdk7C,EAAOtvC,UAAU7L,MAAQ,IACzBm7C,EAAOumC,EAAE1hF,MAAQ,EACVm7C,CACX,CAKA,UAAA1mC,CAAWvW,GACPvD,KAAK46C,eAAiBr3C,EACtB,MAAMyjF,EAAchnF,KAAK2kF,YAAY1B,gBAAgB1/E,GAGrDvD,KAAK6kF,aAAemC,EAAYvlF,MAChCzB,KAAK8kF,aAAekC,EAAYpG,MAGhC,MASMqG,EATiB,CACnBhuE,QAAS,CAAEiuE,KAAM,IAAMH,EAAG,GAC1Bx2E,KAAM,CAAE22E,KAAM,KAAMH,EAAG,IACvBpzE,QAAS,CAAEuzE,KAAM,KAAMH,EAAG,KAC1B9nB,OAAQ,CAAEioB,KAAM,IAAKH,EAAG,IACxBjG,MAAO,CAAEoG,KAAM,IAAMH,EAAG,KACxB7uB,UAAW,CAAEgvB,KAAM,IAAMH,EAAG,MAGAxjF,IAAY,CAAE2jF,KAAM,IAAMH,EAAG,GAC7D/mF,KAAKwgD,OAAOtvC,UAAUi2E,6BAClBF,EAASC,KACTlnF,KAAK4xC,aAAazd,YAAc,IAEpCn0B,KAAKwgD,OAAOumC,EAAEK,wBACVH,EAASF,EACT/mF,KAAK4xC,aAAazd,YAAc,IAIpCn0B,KAAKqnF,4BACT,CAKA,0BAAAA,GACI,MASMC,EATiB,CACnBruE,QAAS,YACT1I,KAAM,YACNoD,QAAS,SACTsrD,OAAQ,YACR6hB,MAAO,SACP5oB,UAAW,aAGwBl4D,KAAK46C,iBAAmB,YAC/D56C,KAAKywE,YAAczwE,KAAK2kF,YAAYhC,oBAChC3iF,KAAK4kF,WACL5kF,KAAK6kF,aACL7kF,KAAK2kF,YAAYzD,aAAaoG,GAEtC,CAKA,SAAAC,CAAUvE,EAAax0E,EAAW,EAAK+G,EAAS,KAC5C,MAAM8C,EAAYrY,KAAK4xC,aAAazd,YAC9BqzD,EAAYxnF,KAAK4xC,aAAauzC,aAGpCqC,EAAUxC,KAAKyC,eAAe,EAAGpvE,GACjCmvE,EAAUxC,KAAKoC,wBAAwBpnF,KAAK0/B,OAAOgjD,MAAMsC,KAAM3sE,EAAY9C,GAC3EiyE,EAAUxC,KAAKmC,6BAA6B,IAAM9uE,EAAY7J,GAG9Dg5E,EAAUpC,QAAQplF,KAAK0lF,SACvB8B,EAAUpC,QAAQplF,KAAK2lF,SAGvB,MAAM+B,EAAc1E,EAAY97E,IAAI,CAACggF,EAAMrpC,KACvC,MAAM8pC,EAAM3nF,KAAK4xC,aAAag2C,mBAe9B,OAdAD,EAAIz2E,UAAU7L,MAAQ6hF,EAGLS,EAAIriF,KAAP,IAAVu4C,EAAwB,OACT,IAAVA,EAAwB,WACjB,WAGhB8pC,EAAIE,OAAOxiF,MAAgC,IAAvBuB,KAAK8I,SAAW,IAEpCi4E,EAAIvC,QAAQoC,GACZG,EAAIn8E,MAAM6M,GACVsvE,EAAIj4C,KAAKr3B,EAAY7J,GAEdm5E,IAILG,EAAU,SAAStjF,KAAK+N,QAC9BvS,KAAK+kF,OAAOjgF,IAAIgjF,EAAS,CAAEJ,cAAa1C,KAAMwC,IAG9CvlF,WAAW,KACPjC,KAAK+kF,OAAOxzC,OAAOu2C,IACD,KAAlBt5E,EAAW,IACnB,CAKA,UAAAu5E,CAAWxE,EAAOyE,EAAW,GAEzB,IAAI7zD,EADc6zD,GAAYhoF,KAAK4xC,aAAazd,YAGhDovD,EAAM7hF,QAAQ,CAAC4rD,EAAMzP,KACjB,GAAIyP,EAAKi3B,OAEL,YADApwD,GAAem5B,EAAK9+C,UAIxB,MAAMm5E,EAAM3nF,KAAK4xC,aAAag2C,mBACxBK,EAAWjoF,KAAK4xC,aAAauzC,aAEnCwC,EAAIz2E,UAAU7L,MAAQioD,EAAKp8C,UAC3By2E,EAAIriF,KAAO,OAGX,MAAM4iF,EAAUloF,KAAK4xC,aAAag2C,mBAC5BO,EAAcnoF,KAAK4xC,aAAauzC,aACtC+C,EAAQh3E,UAAU7L,MAAQ,EAC1B8iF,EAAYnD,KAAK3/E,MAAQ,EAEzB6iF,EAAQ9C,QAAQ+C,GAChBA,EAAY/C,QAAQuC,EAAIz2E,WAGxB+2E,EAASjD,KAAKyC,eAAe,EAAGtzD,GAChC8zD,EAASjD,KAAKoC,wBAAwBpnF,KAAK0/B,OAAO4kD,OAAOU,KAAM7wD,EAAc,KAC7E8zD,EAASjD,KAAKmC,6BAA6B,IAAMhzD,EAA8B,GAAhBm5B,EAAK9+C,UAEpEm5E,EAAIvC,QAAQ6C,GACZA,EAAS7C,QAAQplF,KAAK0lF,SACtBuC,EAAS7C,QAAQplF,KAAK2lF,SAEtBgC,EAAIn8E,MAAM2oB,GACVwzD,EAAIj4C,KAAKvb,EAAcm5B,EAAK9+C,UAC5B05E,EAAQ18E,MAAM2oB,GACd+zD,EAAQx4C,KAAKvb,EAAcm5B,EAAK9+C,UAEhC2lB,GAAem5B,EAAK9+C,UAE5B,CAKA,SAAA45E,CAAUl3E,EAAW1C,EAAW,GAC5B,MAAM6J,EAAYrY,KAAK4xC,aAAazd,YAE9Bk0D,EAAUroF,KAAK4xC,aAAauzC,aAGlCkD,EAAQrD,KAAKyC,eAAe,EAAGpvE,GAC/BgwE,EAAQrD,KAAKoC,wBAAwBpnF,KAAK0/B,OAAOulD,IAAID,KAAM3sE,EAAY,GACvEgwE,EAAQrD,KAAKoC,wBAAwBpnF,KAAK0/B,OAAOulD,IAAID,KAAM3sE,EAAY7J,EAAW,GAClF65E,EAAQrD,KAAKoC,wBAAwB,EAAG/uE,EAAY7J,GAEpD65E,EAAQjD,QAAQplF,KAAK2lF,SAErB,IAAK,IAAIhqC,EAAI,EAAGA,EAXD,EAWaA,IAAK,CAC7B,MAAMgsC,EAAM3nF,KAAK4xC,aAAag2C,mBAC9BD,EAAIz2E,UAAU7L,MAAQ6L,EACtBy2E,EAAIriF,KAAO,WAGXqiF,EAAIE,OAAOxiF,MAA2B,IAAlBs2C,EAAIopC,GAGxB,MAAMuD,EAAYtoF,KAAK4xC,aAAauzC,aACpCmD,EAAUtD,KAAK3/E,MAAQ,EArBZ,EAwBX,MAAMkjF,EAAMvoF,KAAK4xC,aAAag2C,mBACxBY,EAAUxoF,KAAK4xC,aAAauzC,aAClCoD,EAAIr3E,UAAU7L,MAAQ,GAAW,GAAJs2C,EAC7B6sC,EAAQxD,KAAK3/E,MAAQ,GAErBkjF,EAAInD,QAAQoD,GACZA,EAAQpD,QAAQuC,EAAIz2E,WAEpBy2E,EAAIvC,QAAQkD,GACZA,EAAUlD,QAAQiD,GAElBV,EAAIn8E,MAAM6M,GACVsvE,EAAIj4C,KAAKr3B,EAAY7J,GACrB+5E,EAAI/8E,MAAM6M,GACVkwE,EAAI74C,KAAKr3B,EAAY7J,EACzB,CACJ,CAKA,gBAAAi6E,CAAiBjlF,GACb,MA+EMklF,EA/Ea,CACfjhD,QAAS,KAEL,MAAMi7C,EAAQ1iF,KAAK2kF,YAAYnC,cAAcxiF,KAAK4kF,WAAY,QAC9D5kF,KAAKunF,UAAU7E,EAAO,EAAK,IAC3B1iF,KAAKooF,UAAU1F,EAAM,GAAK,EAAG,IAGjCzpE,QAAS,KAEL,MACM0vE,EADQ3oF,KAAK2kF,YAAYvC,cAAcpiF,KAAK4kF,WAAY,UACvC19E,IAAI,CAACggF,EAAMvrC,KAAC,CAC/BzqC,UAAWg2E,EACX14E,SAAU,GACV+1E,QAAQ,KAEZvkF,KAAK+nF,WAAWY,IAGpBhnD,KAAM,KAEF,MAAMinD,EAAY5oF,KAAK2kF,YAAYxC,gBAAgBniF,KAAK4kF,YAClDiE,EAAsB,EAAZD,EAEVjB,EAAM3nF,KAAK4xC,aAAag2C,mBACxB5C,EAAOhlF,KAAK4xC,aAAauzC,aAE/BwC,EAAIz2E,UAAUu2E,eAAemB,EAAW5oF,KAAK4xC,aAAazd,aAC1DwzD,EAAIz2E,UAAUi2E,6BAA6B0B,EAAS7oF,KAAK4xC,aAAazd,YAAc,IACpFwzD,EAAIz2E,UAAUi2E,6BAA6ByB,EAAW5oF,KAAK4xC,aAAazd,YAAc,GAEtF6wD,EAAKA,KAAKyC,eAAe,EAAGznF,KAAK4xC,aAAazd,aAC9C6wD,EAAKA,KAAKoC,wBAAwB,GAAKpnF,KAAK4xC,aAAazd,YAAc,IACvE6wD,EAAKA,KAAKoC,wBAAwB,GAAKpnF,KAAK4xC,aAAazd,YAAc,IACvE6wD,EAAKA,KAAKoC,wBAAwB,EAAGpnF,KAAK4xC,aAAazd,YAAc,GAErEwzD,EAAIvC,QAAQJ,GACZA,EAAKI,QAAQplF,KAAK2lF,SAElBgC,EAAIn8E,QACJm8E,EAAIj4C,KAAK1vC,KAAK4xC,aAAazd,YAAc,IAG7C8D,MAAO,KAEH,MAAM6wD,EAAS9oF,KAAK2kF,YAAYnC,cAAcxiF,KAAK4kF,WAAY,SACzDmE,EAAS/oF,KAAK2kF,YAAYnC,cAAcxiF,KAAK4kF,WAAY,SAG/D5kF,KAAKunF,UAAUuB,EAAQ,IAGvB7mF,WAAW,KACPjC,KAAKunF,UAAUwB,EAAQ,IACxB,MAGPpzD,KAAM,KAEF,MAAM+sD,EAAQ1iF,KAAK2kF,YAAYnC,cAAcxiF,KAAK4kF,WAAY,QAC9D,IAAK,IAAIjpC,EAAI,EAAGA,EAAI,EAAGA,IACnB15C,WAAW,KACPjC,KAAKunF,UAAU7E,EAAMx7E,IAAI8hF,GAAKA,EAAIpiF,KAAKC,IAAI,EAAG80C,EAAE,KAAM,GAAK,OACxD,IAAJA,IAIXhoC,QAAS,KAEL,MAAM2wE,EAAStkF,KAAK2kF,YAAYT,eAAe,CAC3C7vE,IAAKrU,KAAK4kF,WACVnjF,MAAO,aACPsD,OAAQ,EACRo/E,gBAAiB,KAErBnkF,KAAK+nF,WAAWzD,KAIS9gF,GAC7BklF,GACAA,GAER,CAKA,YAAAO,GACQjpF,KAAKkuC,YAETluC,KAAKkuC,WAAY,EACjBluC,KAAK+lF,kBAAoB,EACzB/lF,KAAK4lF,aAAe5lF,KAAK4xC,aAAazd,YAGtCn0B,KAAKqnF,6BAGLrnF,KAAKkpF,kBACT,CAKA,eAAAA,GACI,GAAKlpF,KAAKkuC,UAAV,CAGA,KAAOluC,KAAK4lF,aAAe5lF,KAAK4xC,aAAazd,YAAcn0B,KAAKkmF,mBAAmB,CAE/E,GAAIlmF,KAAKywE,aAAezwE,KAAK0/B,OAAOgjD,MAAMrvC,OAAQ,CAC9C,MAAMqvC,EAAQ1iF,KAAKywE,YAAYzwE,KAAK+lF,mBACpC/lF,KAAKunF,UAAU7E,EAAMM,YAAa,IAGlChjF,KAAK+lF,mBAAqB/lF,KAAK+lF,kBAAoB,GAAK/lF,KAAKywE,YAAY1rE,MAC7E,CAGA,GAAI/E,KAAK0/B,OAAOrB,KAAKgV,QAAUrzC,KAAKywE,YAAa,CAC7C,MAAM0Y,EAAWnpF,KAAKywE,YAAYzwE,KAAK+lF,mBAAmB/C,YAAY,GAAK,EAC3EhjF,KAAKopF,aAAaD,EAAU,IAChC,CAGA,MAAME,EAAiB,GAAOrpF,KAAK8kF,aACnC9kF,KAAK4lF,cAAgB,IAAOyD,CAChC,CAGApnF,WAAW,IAAMjC,KAAKkpF,kBAAmBlpF,KAAKimF,UAzBzB,CA0BzB,CAKA,YAAAmD,CAAal4E,EAAW1C,GACpB,MAAMm5E,EAAM3nF,KAAK4xC,aAAag2C,mBACxB5C,EAAOhlF,KAAK4xC,aAAauzC,aAE/BwC,EAAIz2E,UAAU7L,MAAQ6L,EACtBy2E,EAAIriF,KAAO,OAEX0/E,EAAKA,KAAKyC,eAAe,EAAGznF,KAAK4xC,aAAazd,aAC9C6wD,EAAKA,KAAKoC,wBAAwBpnF,KAAK0/B,OAAOrB,KAAK2mD,KAAMhlF,KAAK4xC,aAAazd,YAAc,KACzF6wD,EAAKA,KAAKmC,6BAA6B,IAAMnnF,KAAK4xC,aAAazd,YAAc3lB,GAE7Em5E,EAAIvC,QAAQJ,GACZA,EAAKI,QAAQplF,KAAK0lF,SAElBiC,EAAIn8E,QACJm8E,EAAIj4C,KAAK1vC,KAAK4xC,aAAazd,YAAc3lB,EAC7C,CAKA,WAAA86E,GACItpF,KAAKkuC,WAAY,CACrB,CAKA,cAAAq7C,CAAejpD,EAAO+S,GACdrzC,KAAK0/B,OAAOY,KACZtgC,KAAK0/B,OAAOY,GAAO+S,OAASA,EAEpC,CAKA,eAAAm2C,CAAgBC,GACZzpF,KAAKklF,WAAWF,KAAKmC,6BACjBvgF,KAAKiB,IAAI,IAAM4hF,GACfzpF,KAAK4xC,aAAazd,YAAc,GAExC,CAKA,aAAAu1D,CAAcC,GACV,MAAMC,EAAM,EAAID,EAChB3pF,KAAK0lF,QAAQV,KAAKoC,wBAAwBwC,EAAK5pF,KAAK4xC,aAAazd,YAAc,IAC/En0B,KAAK2lF,QAAQX,KAAKoC,wBAAwBuC,EAAS3pF,KAAK4xC,aAAazd,YAAc,GACvF,ECzeG,MAAM01D,GACX,WAAA/pF,GACEE,KAAKiE,QAAU,KACfjE,KAAKm1C,WAAY,EACjBn1C,KAAK8pF,eAAgB,EAGrB9pF,KAAK+pF,MAAQ,CACXC,OAAQ,KACRrsE,QAAS,KACTglC,QAAS,MAIX3iD,KAAKiqF,eAAiB,KACtBjqF,KAAKkqF,mBAAoB,EAGzBlqF,KAAKmqF,kBAAoB,CAAA,EACzBnqF,KAAKoqF,gBAAkB,IAGvBpqF,KAAKqqF,kBAAoB,KACzBrqF,KAAKsqF,YAAc,KAGnBtqF,KAAKuqF,aAAe,GACpBvqF,KAAKwqF,cAAgB,GAGrBxqF,KAAKyqF,eAAiB,IAAIpnF,IAAI,CAC5B,CAAC,UAAW,CAAE6N,UAAW,IAAKw5E,SAAU,OAAQjB,OAAQ,KACxD,CAAC,MAAO,CAAEv4E,UAAW,IAAKw5E,SAAU,WAAYjB,OAAQ,MACxD,CAAC,UAAW,CAAEv4E,UAAW,IAAKw5E,SAAU,OAAQjB,OAAQ,MACxD,CAAC,QAAS,CAAEv4E,UAAW,IAAKw5E,SAAU,WAAYjB,OAAQ,MAC1D,CAAC,OAAQ,CAAEv4E,UAAW,IAAKw5E,SAAU,SAAUjB,OAAQ,MACvD,CAAC,WAAY,CAAEv4E,UAAW,IAAKw5E,SAAU,WAAYjB,OAAQ,MAC7D,CAAC,UAAW,CAAEv4E,UAAW,IAAKw5E,SAAU,WAAYjB,OAAQ,MAC5D,CAAC,OAAQ,CAAEv4E,UAAW,IAAKw5E,SAAU,OAAQjB,OAAQ,OAEzD,CAMA,gBAAM7rE,GACJ,IAEE,MAAM+sE,EAAoBpqF,OAAOqqF,cAAgBrqF,OAAOsqF,mBACxD,QAAKF,IAML3qF,KAAKiE,QAAU,IAAI0mF,EAGnB3qF,KAAKiqF,eAAiB,IAAIvF,GAAe1kF,KAAKiE,SAS9CjE,KAAK+pF,MAAMC,OAAShqF,KAAKiE,QAAQkhF,aACjCnlF,KAAK+pF,MAAMC,OAAOhF,KAAKyC,eAAeznF,KAAKuqF,aAAcvqF,KAAKiE,QAAQkwB,aACtEn0B,KAAK+pF,MAAMC,OAAO5E,QAAQplF,KAAKiE,QAAQohF,aAGvCrlF,KAAK+pF,MAAMpnC,QAAU3iD,KAAKiE,QAAQkhF,aAClCnlF,KAAK+pF,MAAMpnC,QAAQqiC,KAAKyC,eAAe,EAAKznF,KAAKiE,QAAQkwB,aACzDn0B,KAAK+pF,MAAMpnC,QAAQyiC,QAAQplF,KAAK+pF,MAAMC,QAEtChqF,KAAKm1C,WAAY,EACjBn1C,KAAK8pF,eAAgB,GAGd,EAET,CAAE,MAAOloF,GAGP,OADA5B,KAAKm1C,WAAY,GACV,CACT,CACF,CAKA,mBAAM21C,GACJ,GAAI9qF,KAAKiE,SAAkC,cAAvBjE,KAAKiE,QAAQoO,MAC/B,UACQrS,KAAKiE,QAAQ8mF,QAErB,CAAE,MAAOnpF,GAET,CAEJ,CAOA,eAAA4nF,CAAgBC,EAAQ7uC,EAAiB,MACvC56C,KAAKuqF,aAAe3jF,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAG2hF,IAExCzpF,KAAKm1C,WAAan1C,KAAK+pF,MAAMC,SAC/BhqF,KAAK+pF,MAAMC,OAAOhF,KAAKyC,eACrBznF,KAAKuqF,aACLvqF,KAAKiE,QAAQkwB,aAIXymB,GACF56C,KAAKgrF,oBAAoBpwC,GAG/B,CAMA,eAAAqwC,GACE,OAAOjrF,KAAKuqF,YACd,CAMA,WAAAW,GACE,OAAOlrF,KAAKm1C,WAAan1C,KAAK8pF,aAChC,CAMA,eAAAqB,CAAgBx2E,GACd3U,KAAKkqF,kBAAoBv1E,EAErBA,GAAW3U,KAAKiqF,eAElBjqF,KAAKorF,mBAEKz2E,GAAW3U,KAAKiqF,gBAE1BjqF,KAAKiqF,eAAeX,aAGxB,CAKA,YAAAL,GACMjpF,KAAKiqF,gBAAkBjqF,KAAKkqF,mBAAqBlqF,KAAKkrF,eACxDlrF,KAAKiqF,eAAehB,cAExB,CAKA,WAAAK,GACMtpF,KAAKiqF,gBACPjqF,KAAKiqF,eAAeX,aAExB,CAOA,gBAAA+B,CAAiB/qD,EAAO+S,GAClBrzC,KAAKiqF,gBACPjqF,KAAKiqF,eAAeV,eAAejpD,EAAO+S,EAE9C,CAMA,kBAAAi4C,CAAmB3B,GACb3pF,KAAKiqF,gBACPjqF,KAAKiqF,eAAeP,cAAcC,EAEtC,CAKA,OAAAp6D,GACE,IAEMvvB,KAAKqqF,oBACPrqF,KAAKqqF,kBAAkB36C,OACvB1vC,KAAKqqF,kBAAoB,MAGvBrqF,KAAKsqF,cACPtqF,KAAKsqF,YAAc,MAIjBtqF,KAAKiE,SAAkC,WAAvBjE,KAAKiE,QAAQoO,OAC/BrS,KAAKiE,QAAQsnF,OAIjB,CAAE,MAAO3pF,GAET,CAAC,QAEC5B,KAAKiE,QAAU,KACfjE,KAAK+pF,MAAQ,CAAEC,OAAQ,KAAMrsE,QAAS,KAAMglC,QAAS,MACrD3iD,KAAKqqF,kBAAoB,KACzBrqF,KAAKsqF,YAAc,KACnBtqF,KAAKm1C,WAAY,EACjBn1C,KAAK8pF,eAAgB,CACvB,CACF,CAOA,gBAAA0B,CAAiBjoF,GACf,OAAOvD,KAAKyqF,eAAe5lF,IAAItB,IAAY,IAC7C,CAOA,cAAAkoF,CAAeloF,EAASmoF,EAAqB,KAC3C,IAAK1rF,KAAKkrF,cACR,OAIF,GAAIlrF,KAAKkqF,mBAAqBlqF,KAAKiqF,eAEjC,YADAjqF,KAAKiqF,eAAenwE,WAAWvW,GAIjC,MAAMooF,EAAa3rF,KAAKwrF,iBAAiBjoF,GACzC,GAAKooF,EAKL,IAEE3rF,KAAK8qF,gBAEL,MAAM32D,EAAcn0B,KAAKiE,QAAQkwB,YAC3By3D,EAAiBF,EAAqB,IAGxC1rF,KAAKqqF,mBAAqBrqF,KAAKsqF,cACjCtqF,KAAKsqF,YAAYtF,KAAKmC,6BAA6B,KAAOhzD,EAA+B,GAAjBy3D,GACxE5rF,KAAKqqF,kBAAkB36C,KAAKvb,EAA+B,GAAjBy3D,IAI5C,MAAMC,EAAa7rF,KAAKiE,QAAQ2jF,mBAC1BkE,EAAW9rF,KAAKiE,QAAQkhF,aAG9B0G,EAAWvmF,KAAOqmF,EAAWjB,SAC7BmB,EAAW36E,UAAUu2E,eAAekE,EAAWz6E,UAAWijB,GAG1D,MAAM43D,EAAeJ,EAAWlC,OAASzpF,KAAKuqF,aAC9CuB,EAAS9G,KAAKyC,eAAe,KAAOtzD,GACpC23D,EAAS9G,KAAKmC,6BAA6B4E,EAAc53D,EAAcy3D,GAGvEC,EAAWzG,QAAQ0G,GACnBA,EAAS1G,QAAQplF,KAAK+pF,MAAMC,QAG5B6B,EAAWrgF,MAAM2oB,GAGjBn0B,KAAKqqF,kBAAoBwB,EACzB7rF,KAAKsqF,YAAcwB,CAIrB,CAAE,MAAOlqF,GAET,CACF,CAMA,eAAAwpF,CAAgBY,EAAkB,KAChC,GAAKhsF,KAAKkrF,eAAkBlrF,KAAKqqF,kBAIjC,IACE,MAAMl2D,EAAcn0B,KAAKiE,QAAQkwB,YAC3B83D,EAAWD,EAAkB,IAG/BhsF,KAAKsqF,aACPtqF,KAAKsqF,YAAYtF,KAAKmC,6BAA6B,KAAOhzD,EAAc83D,GAI1EjsF,KAAKqqF,kBAAkB36C,KAAKvb,EAAc83D,GAG1CjsF,KAAKqqF,kBAAoB,KACzBrqF,KAAKsqF,YAAc,IAIrB,CAAE,MAAO1oF,GAET,CACF,CAMA,mBAAAopF,CAAoBpwC,GAClB,IAAK56C,KAAKkrF,gBAAkBlrF,KAAKsqF,cAAgB1vC,EAC/C,OAGF,MAAM+wC,EAAa3rF,KAAKwrF,iBAAiB5wC,GACzC,GAAK+wC,EAIL,IACE,MAAMI,EAAeJ,EAAWlC,OAASzpF,KAAKuqF,aACxCp2D,EAAcn0B,KAAKiE,QAAQkwB,YAEjCn0B,KAAKsqF,YAAYtF,KAAKmC,6BAA6B4E,EAAc53D,EAAc,GACjF,CAAE,MAAOvyB,GAET,CACF,CAOA,gBAAA6mF,CAAiByD,EAAWC,EAAmB,WAC7C,IAAKnsF,KAAKkrF,cACR,OAIF,GAAIlrF,KAAKkqF,mBAAqBlqF,KAAKiqF,eAEjC,YADAjqF,KAAKiqF,eAAexB,iBAAiByD,GAIvC,MAAME,EAAcpsF,KAAKqsF,sBAAsBH,GAC/C,GAAKE,EAML,IAEEpsF,KAAK8qF,gBAEL,MAAM32D,EAAcn0B,KAAKiE,QAAQkwB,YAC3B3lB,EAAW49E,EAAY59E,SAAW,IAGlCV,EAAY9N,KAAKssF,sBAAsBH,GACvCI,EAAaH,EAAY3C,OAASzpF,KAAKuqF,aAAez8E,EAAUG,UAGhE49E,EAAa7rF,KAAKiE,QAAQ2jF,mBAC1BkE,EAAW9rF,KAAKiE,QAAQkhF,aAG9B0G,EAAWvmF,KAAO8mF,EAAY1B,SAG9B1qF,KAAKwsF,uBAAuBX,EAAYO,EAAYK,kBAAmBt4D,EAAa3lB,GAGpFxO,KAAK0sF,oBAAoBZ,EAAUM,EAAYO,eAAgBx4D,EAAa3lB,EAAU+9E,GAGtFV,EAAWzG,QAAQ0G,GACnBA,EAAS1G,QAAQplF,KAAK+pF,MAAMpnC,SAG5BkpC,EAAWrgF,MAAM2oB,GACjB03D,EAAWn8C,KAAKvb,EAAc3lB,EAIhC,CAAE,MAAO5M,GAET,MAxCE5B,KAAK4sF,cAAc,oBAAoBV,wBAAiC,WAAWA,IAyCvF,CAOA,qBAAAG,CAAsBH,GA6VpB,OA5VsB,IAAI7oF,IAAI,CAC5B,CAAC,SAAU,CACTmL,SAAU,IACVk8E,SAAU,WACVjB,OAAQ,GACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,QAAS,CACRj7E,SAAU,IACVk8E,SAAU,OACVjB,OAAQ,IACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,QAAS,CACRj7E,SAAU,IACVk8E,SAAU,WACVjB,OAAQ,GACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,IAAMpB,UAAW,KACzB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,IAAMpB,UAAW,KACzB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,IACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,OAAQ,CACPj7E,SAAU,IACVk8E,SAAU,WACVjB,OAAQ,IACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,MAAO,CACNj7E,SAAU,IACVk8E,SAAU,OACVjB,OAAQ,IACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,IACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,OAAQ,CACPj7E,SAAU,IACVk8E,SAAU,WACVjB,OAAQ,IACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,SAAU,CACTj7E,SAAU,IACVk8E,SAAU,OACVjB,OAAQ,GACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,WAAY,CACXj7E,SAAU,IACVk8E,SAAU,WACVjB,OAAQ,IACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,QAAS,CACRj7E,SAAU,IACVk8E,SAAU,SACVjB,OAAQ,GACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,MACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,IAAMm3E,OAAQ,GACtB,CAAEn3E,KAAM,IAAMm3E,OAAQ,IACtB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,OAAQ,CACPj7E,SAAU,IACVk8E,SAAU,OACVjB,OAAQ,IACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,UAAW,CACVj7E,SAAU,IACVk8E,SAAU,WACVjB,OAAQ,GACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,IACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,QAAS,CACRj7E,SAAU,IACVk8E,SAAU,WACVjB,OAAQ,GACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,IACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,OAAQ,CACPj7E,SAAU,IACVk8E,SAAU,SACVjB,OAAQ,IACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,IACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,QAAS,CACRj7E,SAAU,IACVk8E,SAAU,OACVjB,OAAQ,IACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,OAAQ,CACPj7E,SAAU,IACVk8E,SAAU,OACVjB,OAAQ,IACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,IAAMpB,UAAW,KACzB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,IAAMpB,UAAW,KACzB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,UAAW,CACVj7E,SAAU,KACVk8E,SAAU,OACVjB,OAAQ,GAERgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,IACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,KAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,IACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,OAGvB,CAAC,UAAW,CACVj7E,SAAU,IACVk8E,SAAU,SACVjB,OAAQ,GACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,UAAW,CACVj7E,SAAU,IACVk8E,SAAU,WACVjB,OAAQ,GACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,KAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,OAAQ,CACPj7E,SAAU,IACVk8E,SAAU,OACVjB,OAAQ,IACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,GACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,MAGvB,CAAC,UAAW,CACVj7E,SAAU,IACVk8E,SAAU,WACVjB,OAAQ,GACRgD,kBAAmB,CACjB,CAAEn6E,KAAM,EAAGpB,UAAW,KACtB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,GAAKpB,UAAW,KACxB,CAAEoB,KAAM,EAAGpB,UAAW,MAExBy7E,eAAgB,CACd,CAAEr6E,KAAM,EAAGm3E,OAAQ,IACnB,CAAEn3E,KAAM,GAAKm3E,OAAQ,GACrB,CAAEn3E,KAAM,GAAKm3E,OAAQ,IACrB,CAAEn3E,KAAM,EAAGm3E,OAAQ,QAKJ5kF,IAAIqnF,IAAc,IACzC,CASA,sBAAAM,CAAuBX,EAAYgB,EAAUx0E,EAAW7J,GACtDq+E,EAASnrF,QAAQsqC,IACf,MAAM15B,EAAO+F,EAAa2zB,EAAM15B,KAAO9D,EACvCq9E,EAAW36E,UAAUk2E,wBAAwBp7C,EAAM96B,UAAWoB,IAElE,CAUA,mBAAAo6E,CAAoBZ,EAAUe,EAAUx0E,EAAW7J,EAAU+9E,GAC3DM,EAASnrF,QAAQ,CAACsqC,EAAO6R,KACvB,MAAMvrC,EAAO+F,EAAa2zB,EAAM15B,KAAO9D,EACjCi7E,EAASz9C,EAAMy9C,OAAS8C,EAEhB,IAAV1uC,EACFiuC,EAAS9G,KAAKyC,eAAegC,EAAQn3E,GAErCw5E,EAAS9G,KAAKoC,wBAAwBqC,EAAQn3E,IAGpD,CAOA,qBAAAg6E,CAAsB/oF,GACpB,MAAMuK,EAAY,IAAIzK,IAAI,CACxB,CAAC,UAAW,CAAE4K,UAAW,EAAKF,MAAO,IACrC,CAAC,MAAO,CAAEE,UAAW,IAAKF,MAAO,MACjC,CAAC,UAAW,CAAEE,UAAW,GAAKF,MAAO,KACrC,CAAC,QAAS,CAAEE,UAAW,IAAKF,MAAO,MACnC,CAAC,OAAQ,CAAEE,UAAW,GAAKF,MAAO,MAClC,CAAC,WAAY,CAAEE,UAAW,IAAKF,MAAO,MACtC,CAAC,UAAW,CAAEE,UAAW,GAAKF,MAAO,KACrC,CAAC,OAAQ,CAAEE,UAAW,IAAKF,MAAO,OAGpC,OAAOD,EAAUjJ,IAAItB,IAAYuK,EAAUjJ,IAAI,UACjD,CAMA,mBAAA0zE,CAAoB5jE,GAClB3U,KAAK8sF,iBAAmBn4E,EAEpBA,GAAW3U,KAAK4xC,aAOlB5xC,KAAK+sF,eAAiB,EAGtB/sF,KAAK+sF,eAAiB,CAE1B,CAMA,kBAAOC,GACL,SAAUzsF,OAAOqqF,eAAgBrqF,OAAOsqF,mBAC1C,CAOA,aAAA+B,CAAcloF,EAAS2P,GACrB,MAAM9B,EAAM/N,KAAK+N,MAGbA,GAFgBvS,KAAKmqF,kBAAkB91E,IAAQ,GAE3BrU,KAAKoqF,kBAE3BpqF,KAAKmqF,kBAAkB91E,GAAO9B,EAElC,ECp3BF,MAAM06E,GACF,WAAAntF,GAEIE,KAAKktF,WAAa,GAGlBltF,KAAK+nE,IAAM,EAGX/nE,KAAKmtF,YAAc,EACnBntF,KAAKotF,gBAAkB,GAGvBptF,KAAK8nE,cAAgB,EACrB9nE,KAAK4wE,UAAY,EAGjB5wE,KAAKqtF,WAAa,GAClBrtF,KAAKstF,oBAAsB,GAC3BttF,KAAK4pE,iBAAmB,CAC5B,CAOA,MAAAjvD,CAAOpW,GAEH,KAAOvE,KAAKktF,WAAWnoF,OAAS,GAAK/E,KAAKktF,WAAW,IAAM3oF,EAAY,KACnEvE,KAAKktF,WAAWloF,QAkBpB,GAdAhF,KAAKktF,WAAWprF,KAAKyC,GAGrBvE,KAAK+nE,IAAM/nE,KAAKktF,WAAWnoF,OAGF,IAArB/E,KAAKmtF,YACLntF,KAAKmtF,YAAcntF,KAAK+nE,IAExB/nE,KAAKmtF,YAAcntF,KAAKmtF,YAAcntF,KAAKotF,gBACxBptF,KAAK+nE,KAAO,EAAI/nE,KAAKotF,iBAIxCptF,KAAK8nE,cAAgB,IACrB9nE,KAAK4wE,UAAYrsE,EAAYvE,KAAK8nE,cAGlC9nE,KAAKqtF,WAAWvrF,KAAK9B,KAAK4wE,WACtB5wE,KAAKqtF,WAAWtoF,OAAS/E,KAAKstF,qBAC9BttF,KAAKqtF,WAAWroF,QAIhBhF,KAAKqtF,WAAWtoF,OAAS,GAAG,CAC5B,MAAM6oD,EAAM5tD,KAAKqtF,WAAW1/B,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GACpDxH,KAAK4pE,iBAAmBhc,EAAM5tD,KAAKqtF,WAAWtoF,MAClD,CAEJ/E,KAAK8nE,cAAgBvjE,CACzB,CAMA,MAAAgpF,GACI,OAAO3mF,KAAKgB,MAAM5H,KAAK+nE,IAC3B,CAMA,cAAAylB,GACI,OAAO5mF,KAAKgB,MAAM5H,KAAKmtF,YAC3B,CAMA,YAAAM,GACI,OAAOztF,KAAK4wE,SAChB,CAMA,mBAAA8c,GACI,OAAO1tF,KAAK4pE,gBAChB,CAKA,KAAAvtD,GACIrc,KAAKktF,WAAa,GAClBltF,KAAK+nE,IAAM,EACX/nE,KAAKmtF,YAAc,EACnBntF,KAAK8nE,cAAgB,EACrB9nE,KAAK4wE,UAAY,EACjB5wE,KAAKqtF,WAAa,GAClBrtF,KAAK4pE,iBAAmB,CAC5B,CAMA,UAAA+jB,GACI,MAAO,CACH5lB,IAAK/nE,KAAKutF,SACVJ,YAAantF,KAAKwtF,iBAClB5c,UAAW5wE,KAAKytF,eAChB7jB,iBAAkB5pE,KAAK0tF,sBAEvBE,OAAQ5tF,KAAK+nE,KAAO,GAAK,OAAS/nE,KAAK+nE,KAAO,GAAK,OAAS,OAEpE,ECvFJ,MAAM8lB,GACF,WAAA/tF,CAAYiY,EAAeiO,EAAS,IAChChmB,KAAK+X,cAAgBA,EACrB/X,KAAKgmB,OAASA,EACdhmB,KAAKgmB,OAAOiiD,UAAYjiD,EAAOiiD,WAAa,GAG5CjoE,KAAKwvC,WAAY,EACjBxvC,KAAK8tF,iBAAmB,KACxB9tF,KAAK+tF,eAAiB,KACtB/tF,KAAK8nE,cAAgB,EACrB9nE,KAAKgT,UAAY,EACjBhT,KAAKugC,UAAW,EAGhBvgC,KAAKguF,uBAAyBhuF,KAAKguF,uBAAuBjtF,KAAKf,MACvC,oBAAby1C,UACPA,SAASz0C,iBAAiB,mBAAoBhB,KAAKguF,wBAIvDhuF,KAAKwoE,mBAAqB,KAS1BxoE,KAAKiuF,WAAa,IAAIhB,GAGtBjtF,KAAKkuF,WAAa,GAGlBluF,KAAKmuF,cAAgB,KAGrBnuF,KAAKouF,aAAe,IAExB,CAMA,aAAAC,CAAcH,GACVluF,KAAKkuF,WAAa,CACdvgB,aAAcugB,EAAWvgB,aACzB35B,eAAgBk6C,EAAWl6C,eAC3Bl4B,SAAUoyE,EAAWpyE,SACrBwyE,YAAaJ,EAAWI,YACxBjkB,cAAe6jB,EAAW7jB,eAI9B,MAAMkkB,EAAW,CAAC,eAAgB,iBAAkB,YACpD,IAAK,MAAMC,KAAUD,EACjB,IAAKvuF,KAAKkuF,WAAWM,GACjB,MAAM,IAAI/nF,MAAM,uBAAuB+nF,mBAK3CxuF,KAAKwoE,oBACLxoE,KAAKwoE,mBAAmB6lB,cAAcruF,KAAKkuF,WAGnD,CAMA,gBAAAO,CAAiB9sF,GACb,GAAwB,mBAAbA,EACP,MAAM,IAAI8E,MAAM,qCAEpBzG,KAAKmuF,cAAgBxsF,CACzB,CAMA,eAAA+sF,CAAgBv1D,GACZn5B,KAAKouF,aAAej1D,CACxB,CAOA,IAAAsW,CAAKgC,EAAOnzB,EAAO,MACXte,KAAKmuF,eACLnuF,KAAKmuF,cAAc18C,EAAOnzB,EAElC,CAMA,KAAA9S,GACI,OAAOxL,KAAK+X,cAAchU,KAAK,KAC3B,GAAI/D,KAAKwvC,UACL,OAAO,EAGX,IAAKxvC,KAAKkuF,WAAWvgB,aACjB,MAAM,IAAIlnE,MAAM,wDAsBpB,OAlBAzG,KAAKwvC,WAAY,EACjBxvC,KAAK8nE,cAAgB1tD,YAAY7H,MAG7BvS,KAAKkuF,WAAWI,aAAetuF,KAAKkuF,WAAWI,YAAYpD,eAC3DlrF,KAAKkuF,WAAWI,YAAYxD,gBAIhC9qF,KAAK+tF,eAAiBrmB,GAAqBkB,SACvC,CAAC51D,EAAWzO,IAAcvE,KAAK22E,QAAQ3jE,EAAWzO,GRjMpD,EQmMEvE,MAIJA,KAAKyvC,KAAK,mBAAoB,CAAEw4B,UAAWjoE,KAAKioE,aAEzC,GACR,kBA7BIjoE,EA8BX,CAMA,IAAA0vC,GACI,OAAO1vC,KAAK+X,cAAchU,KAAK,MACtB/D,KAAKwvC,YAKVxvC,KAAKwvC,WAAY,EAGbxvC,KAAK+tF,iBACLrmB,GAAqBsB,WAAWhpE,KAAK+tF,gBACrC/tF,KAAK+tF,eAAiB,MAItB/tF,KAAK8tF,mBACL5kB,qBAAqBlpE,KAAK8tF,kBAC1B9tF,KAAK8tF,iBAAmB,MAMxB9tF,KAAKkuF,WAAWpyE,UAAY9b,KAAKkuF,WAAWpyE,SAASq3C,iBACrDnzD,KAAKkuF,WAAWpyE,SAASq3C,kBAIzBnzD,KAAKkuF,WAAWI,aAAetuF,KAAKkuF,WAAWI,YAAYpD,eAC3DlrF,KAAKkuF,WAAWI,YAAYlD,kBAI5BprF,KAAKkuF,WAAWl6C,gBAChBh0C,KAAKkuF,WAAWl6C,eAAe9xC,QAInClC,KAAKyvC,KAAK,qBAEH,GACR,iBAzCIzvC,EA0CX,CAKA,sBAAAguF,GACQv4C,SAASk5C,QAET3uF,KAAKugC,UAAW,EAGZvgC,KAAKkuF,YAAYl6C,gBACjBh0C,KAAKkuF,WAAWl6C,eAAekH,oBAI/Bl7C,KAAKugC,WACLvgC,KAAKugC,UAAW,EAEhBvgC,KAAK8nE,cAAgB1tD,YAAY7H,MAE7BvS,KAAKkuF,YAAYl6C,gBACjBh0C,KAAKkuF,WAAWl6C,eAAekH,mBAI/C,CAQA,OAAAy7B,CAAQ3jE,EAAWzO,GACVvE,KAAKwvC,YAAaxvC,KAAKugC,UAE5BvgC,KAAK+X,cAAchU,KAAK,KAEpB,MAAMowB,EAAc5vB,GAAa6V,YAAY7H,MAC7CvS,KAAKgT,UAAYA,GAAcmhB,EAAcn0B,KAAK8nE,cAIlD,MAAM8mB,EAAoB5uF,KAAKgT,UAAY,GAEvChT,KAAKgT,UAAY,KAEjBhT,KAAKgT,UAAY,GAEbhT,KAAKkuF,YAAYl6C,gBACjBh0C,KAAKkuF,WAAWl6C,eAAekH,oBAKnCl7C,KAAKkuF,YAAYl6C,iBACjBh0C,KAAKkuF,WAAWl6C,eAAe6H,mBAAqB+yC,GAGxD5uF,KAAK8nE,cAAgB3zC,EAGjBn0B,KAAKwoE,oBACLxoE,KAAKwoE,mBAAmBqmB,WAAW16D,GAIvCn0B,KAAKiuF,WAAWtzE,OAAOwZ,GAGvBn0B,KAAK2a,OAAO3a,KAAKgT,WAGjBhT,KAAKk4C,SAGDl4C,KAAKwoE,oBACLxoE,KAAKwoE,mBAAmBsmB,SAAS10E,YAAY7H,QAMlD,iBA/CHvS,EAgDJ,CAMA,MAAA2a,CAAO3H,GACHhT,KAAK+X,cAAchU,KAAK,KAmBpB,GAlBoBqW,YAAY7H,MAG5BvS,KAAKkuF,WAAWvgB,cAChB3tE,KAAKkuF,WAAWvgB,aAAahzD,OAAO3H,GAMpChT,KAAKouF,cAAoD,mBAA7BpuF,KAAKouF,aAAazzE,QAC9C3a,KAAKouF,aAAazzE,OAAO3H,GAKuC,YAA9ChT,KAAKouF,cAAcpoE,QAAQglD,gBAIzChrE,KAAKkuF,WAAWl6C,gBAAkBh0C,KAAKkuF,WAAWvgB,cAAgB3tE,KAAKkuF,WAAW7jB,cAAe,CACjG,MAAM0kB,EAAiB/uF,KAAKkuF,WAAWvgB,aAAa1yD,gCAC9C6nD,EAAS9iE,KAAKkuF,WAAW7jB,cAAcjoE,YAG7C,IAAIo0C,EAAgB,KAChBC,EAAkB,EAEtB,GAAIz2C,KAAKkuF,WAAWpyE,UAAY9b,KAAKkuF,WAAWpyE,SAASs3C,kBAAmB,CACxE,MAAM2lB,EAAiB/4E,KAAKkuF,WAAWpyE,SAASs3C,oBAC5C2lB,GAAkBA,EAAenrD,iBACjC4oB,EAAgBuiC,EAAenrD,eAC/B6oB,EAAkBsiC,EAAelwE,UAAY,EAErD,CAGA7I,KAAKkuF,WAAWl6C,eAAegH,MAC3B+zC,EAAe7hF,iBACflN,KAAKkuF,WAAWvgB,aAAanyD,kBAAkBjY,QAC/CwrF,EAAehiF,aACf+1D,EAAOzgE,EACPygE,EAAOxgE,EACP0Q,GAIJhT,KAAKkuF,WAAWl6C,eAAer5B,OAAO3H,EAAW8vD,EAAOzgE,EAAGygE,EAAOxgE,EAAGk0C,EAAeC,EACxF,CAIAz2C,KAAKwoE,oBACLxoE,KAAKwoE,mBAAmBwmB,cAAc,CAClCtrF,cAAe1D,KAAKkuF,WAAWl6C,gBAAgBi7C,4BAA8B,EAC7EC,mBAAoB,EACpBC,aAAcnvF,KAAKkuF,WAAWI,aAAac,gBAAkB,KAItE,mBA7DHpvF,EA8DJ,CAKA,MAAAk4C,GACIl4C,KAAK+X,cAAchU,KAAK,KAEhB/D,KAAKouF,cAAoD,mBAA7BpuF,KAAKouF,aAAal2C,OAC9Cl4C,KAAKouF,aAAal2C,SACXl4C,KAAKkuF,WAAWpyE,UAEvB9b,KAAKkuF,WAAWpyE,SAASo8B,UAE9B,eARHl4C,EASJ,CAQA,qBAAAqvF,GAEI,MAAMC,EAAatvF,KAAKiuF,WAAajuF,KAAKiuF,WAAWN,aAAe,GACpE,MAAO,CACH5lB,IAAKunB,EAAWvnB,KAAO,GACvBwnB,WAAYD,EAAWnC,aAAe,GACtCvc,UAAW0e,EAAW1e,WAAa,MACnChH,iBAAkB0lB,EAAW1lB,kBAAoB,MACjDp6B,UAAWxvC,KAAKwvC,UAChBx8B,UAAWhT,KAAKgT,UAExB,CAMA,YAAAi3D,CAAalC,GAGb,CAMA,aAAIE,GACA,OAAOjoE,KAAKgmB,OAAOiiD,WAAa,EACpC,CAMA,WAAAgJ,GACI,OAAOjxE,KAAKwvC,SAChB,CAKA,OAAAzsC,GACI/C,KAAK0vC,OAGmB,oBAAb+F,UACPA,SAASzyC,oBAAoB,mBAAoBhD,KAAKguF,wBAItDhuF,KAAKwoE,qBACLxoE,KAAKwoE,mBAAmBzlE,UACxB/C,KAAKwoE,mBAAqB,MAI9BxoE,KAAKkuF,WAAa,GAClBluF,KAAKmuF,cAAgB,IAEzB,ECxZG,MAAMqB,GACT,WAAA1vF,CAAYkmB,EAAS,IAEjBhmB,KAAKgmB,OAAS,CACVypE,eAAgBzpE,EAAOypE,gBAAkB,IACzCC,kBAAmB1pE,EAAO0pE,mBAAqB,GAC/CC,iBAAkB3pE,EAAO2pE,kBAAoB,IAC7CC,YAAa5pE,EAAO4pE,aAAe,GACnCC,sBAAuB7pE,EAAO6pE,uBAAyB,GACvDC,QAAS9pE,EAAO8pE,SAAW,IAC3BC,oBAAqB/pE,EAAO+pE,qBAAuB,OAChD/pE,GAIPhmB,KAAK4xC,aAAe,KACpB5xC,KAAKgwF,SAAW,KAChBhwF,KAAKiwF,UAAY,KAGjBjwF,KAAKkwF,aAAe,EACpBlwF,KAAKmwF,aAAe,GACpBnwF,KAAKsY,UAAW,EAGhBtY,KAAKowF,gBAAkB,EAGvBpwF,KAAKqwF,cAAgB,EAGrBrwF,KAAK2nE,UAAY,CACb2oB,YAAa,KACbC,YAAa,KACb3uF,MAAO,KAEf,CAOA,UAAAgc,CAAWg0B,GACP,IACI,IAAKA,EACD,MAAM,IAAInrC,MAAM,uDAIpB,GAA2C,mBAAhCmrC,EAAa4+C,eACpB,MAAM,IAAI/pF,MAAM,iCA2BpB,OAvBAzG,KAAK4xC,aAAeA,EAGpB5xC,KAAKgwF,SAAWp+C,EAAa4+C,iBAC7BxwF,KAAKgwF,SAASF,QAAU9vF,KAAKgmB,OAAO8pE,QACpC9vF,KAAKgwF,SAASH,sBAAwB7vF,KAAKgmB,OAAO6pE,sBAGlD7vF,KAAKiwF,UAAY,IAAIQ,WAAWzwF,KAAKgwF,SAASU,mBAG9C1wF,KAAKkwF,aAAe,EACpBlwF,KAAKmwF,aAAe,GACpBnwF,KAAKowF,gBAAkB,EACvBpwF,KAAKsY,UAAW,EAGW,cAAvBs5B,EAAav/B,OACbu/B,EAAam5C,SAAS4F,MAAM/uF,IACxB5B,KAAK4wF,UAAU,gCAAiChvF,MAIjD,CAEX,CAAE,MAAOA,GAEL,OADA5B,KAAK4wF,UAAU,2CAA4ChvF,IACpD,CACX,CACJ,CAKA,OAAA2tB,GACI,IAEIvvB,KAAKsY,UAAW,EAChBtY,KAAKkwF,aAAe,EACpBlwF,KAAKmwF,aAAe,GACpBnwF,KAAKowF,gBAAkB,EACvBpwF,KAAKqwF,cAAgB,EAGrBrwF,KAAK4xC,aAAe,KACpB5xC,KAAKgwF,SAAW,KAChBhwF,KAAKiwF,UAAY,IAGrB,CAAE,MAAOruF,GACL5B,KAAK4wF,UAAU,2CAA4ChvF,EAC/D,CACJ,CAMA,gBAAAivF,CAAiB79E,EAAY,IACzB,GAAKhT,KAAKsY,UAAatY,KAAKgwF,UAAahwF,KAAKiwF,UAI9C,IAEIjwF,KAAKgwF,SAASc,qBAAqB9wF,KAAKiwF,WAGxC,MAAMc,EAAM/wF,KAAKgxF,eAGjBhxF,KAAKkwF,aAAetpF,KAAKkB,IAAI,EAAS,EAANipF,GAGhC/wF,KAAKixF,qBAGLjxF,KAAKkxF,qBAGLlxF,KAAKmxF,iBAET,CAAE,MAAOvvF,GACL5B,KAAK4wF,UAAU,6BAA8BhvF,GAC7C5B,KAAKkwF,aAAe,CACxB,CACJ,CAMA,YAAAc,GACI,IAAKhxF,KAAKiwF,WAAuC,IAA1BjwF,KAAKiwF,UAAUlrF,OAClC,OAAO,EAGX,IAAIqsF,EAAa,EAGjB,IAAK,IAAIz1C,EAAI,EAAGA,EAAI37C,KAAKiwF,UAAUlrF,OAAQ42C,IAAK,CAC5C,MAAM01C,EAAarxF,KAAKiwF,UAAUt0C,GAAK,IACvCy1C,GAAcC,EAAaA,CAC/B,CAGA,OAAOzqF,KAAKkb,KAAKsvE,EAAapxF,KAAKiwF,UAAUlrF,OACjD,CAKA,kBAAAksF,GAEIjxF,KAAKmwF,aAAaruF,KAAK9B,KAAKkwF,cAGxBlwF,KAAKmwF,aAAaprF,OAAS/E,KAAKgmB,OAAO4pE,aACvC5vF,KAAKmwF,aAAanrF,OAE1B,CAKA,kBAAAksF,GAEI,GAAIlxF,KAAKmwF,aAAaprF,OAAS,EAC3B,OAGJ,MAAMovB,EAAc/Z,YAAY7H,MAGhC,GAAI4hB,EAAcn0B,KAAKowF,gBAAkBpwF,KAAKgmB,OAAO2pE,iBACjD,OAIJ,MAAM2B,EAAiBtxF,KAAKmwF,aAAajqF,MAAM,GAAG,GAC5CqrF,EAAkBD,EAAe3jC,OAAO,CAACC,EAAK4jC,IAAU5jC,EAAM4jC,EAAO,GAAKF,EAAevsF,OAG/E/E,KAAKkwF,cAAgBqB,EAAkBvxF,KAAKgmB,OAAOypE,gBACpD8B,GAAmBvxF,KAAKgmB,OAAO0pE,mBAC/B1vF,KAAKkwF,cAAgD,EAAhClwF,KAAKgmB,OAAO0pE,oBAG5C1vF,KAAKowF,gBAAkBj8D,EAGvBn0B,KAAKyxF,gBAAgB,CACjBD,MAAOxxF,KAAKkwF,aACZwB,gBAAiBH,EACjBI,WAAY3xF,KAAKkwF,aAAeqB,EAChChtF,UAAW4vB,EACXxuB,UAAW3F,KAAKgmB,OAAOypE,eACvBmC,aAAc5xF,KAAKgmB,OAAO0pE,oBAItC,CAKA,YAAAmC,GACI7xF,KAAKmwF,aAAe,EACxB,CAMA,eAAA2B,GACI,OAAO9xF,KAAKkwF,YAChB,CAMA,eAAA6B,GACI,MAAO,IAAI/xF,KAAKmwF,aACpB,CAMA,WAAA6B,GACI,OAAOhyF,KAAKgwF,QAChB,CAMA,gBAAAiC,GACI,OAAKjyF,KAAKiwF,UAKH,IAAIQ,WAAWzwF,KAAKiwF,WAJhB,IAKf,CAMA,kBAAAiC,GACI,OAAOlyF,KAAKsY,QAChB,CAMA,aAAA65E,CAAcxwF,GACV,GAAwB,mBAAbA,EAGP,MAAM,IAAI8E,MAAM,4CAFhBzG,KAAK2nE,UAAU2oB,YAAc3uF,CAIrC,CAMA,aAAAywF,CAAczwF,GACV,GAAwB,mBAAbA,EAGP,MAAM,IAAI8E,MAAM,4CAFhBzG,KAAK2nE,UAAU4oB,YAAc5uF,CAIrC,CAMA,OAAA0wF,CAAQ1wF,GACJ,GAAwB,mBAAbA,EAGP,MAAM,IAAI8E,MAAM,qCAFhBzG,KAAK2nE,UAAU/lE,MAAQD,CAI/B,CAKA,kBAAA2wF,GACItyF,KAAK2nE,UAAY,CACb2oB,YAAa,KACbC,YAAa,KACb3uF,MAAO,KAEf,CAMA,YAAA2wF,CAAaC,GACTxyF,KAAKgmB,OAAS,IAAKhmB,KAAKgmB,UAAWwsE,GAG/BxyF,KAAKgwF,WACDwC,EAAU1C,UACV9vF,KAAKgwF,SAASF,QAAU9vF,KAAKgmB,OAAO8pE,QACpC9vF,KAAKiwF,UAAY,IAAIQ,WAAWzwF,KAAKgwF,SAASU,yBAGVr2E,IAApCm4E,EAAU3C,wBACV7vF,KAAKgwF,SAASH,sBAAwB7vF,KAAKgmB,OAAO6pE,uBAI9D,CAMA,SAAA4C,GACI,MAAO,IAAKzyF,KAAKgmB,OACrB,CAMA,QAAAi6B,GACI,MAAO,CACH3nC,SAAUtY,KAAKsY,SACf43E,aAAclwF,KAAKkwF,aACnBN,YAAa5vF,KAAKmwF,aAAaprF,OAC/B2jE,eAAgB1oE,KAAKgmB,OAAO4pE,YAC5B8C,cAAe1yF,KAAKowF,gBACpBuC,mBAAoB3yF,KAAKowF,gBAAkB,EAAIh2E,YAAY7H,MAAQvS,KAAKowF,gBAAkB,EAC1FwC,aAAc5yF,KAAKmwF,aAAaprF,OAAS,EACrC/E,KAAKmwF,aAAaxiC,OAAO,CAACC,EAAK4jC,IAAU5jC,EAAM4jC,EAAO,GAAKxxF,KAAKmwF,aAAaprF,OAAS,EAElG,CAKA,eAAAosF,GACI,MAAMh9D,EAAc/Z,YAAY7H,MAGhC,KAAI4hB,EAAcn0B,KAAKqwF,cAAgBrwF,KAAKgmB,OAAO+pE,uBAInD/vF,KAAKqwF,cAAgBl8D,EAEjBn0B,KAAK2nE,UAAU2oB,aACf,IACItwF,KAAK2nE,UAAU2oB,YAAY,CACvBkB,MAAOxxF,KAAKkwF,aACZ2C,QAAS7yF,KAAKiyF,mBACd1tF,UAAW4vB,EACX2+D,QAAS9yF,KAAK+xF,mBAEtB,CAAE,MAAOnwF,GACT,CAER,CAMA,eAAA6vF,CAAgBsB,GACZ,GAAI/yF,KAAK2nE,UAAU4oB,YACf,IACIvwF,KAAK2nE,UAAU4oB,YAAYwC,EAC/B,CAAE,MAAOnxF,GACT,CAER,CAOA,SAAAgvF,CAAUlsF,EAAS9C,GAEf,GAAI5B,KAAK2nE,UAAU/lE,MACf,IACI5B,KAAK2nE,UAAU/lE,MAAM,CACjB8C,UACA9C,QACA2C,UAAW6V,YAAY7H,OAE/B,CAAE,MAAOygF,GACT,CAER,CAMA,kBAAOhG,GACH,SAAUzsF,OAAOqqF,eAAgBrqF,OAAOsqF,mBAC5C,EC3HG,MAAMoI,GAAe,IAlYrB,MACH,WAAAnzF,GAEIE,KAAK2uC,UAAY,IAAItrC,IAGrBrD,KAAK0pE,OAAS,IAAIrmE,IAGlBrD,KAAKkzF,qBAGLlzF,KAAKogE,MAAQ,CACT+yB,WAAY,EACZ1yC,QAAS,EACTpN,OAAQ,EAEhB,CAWA,gBAAAryC,CAAiBoX,EAAQg7E,EAAWC,EAASv4B,EAAU,CAAA,EAAIw4B,EAAQ,WAE/D,MAAMlxE,EAAKpiB,KAAKuzF,aAGVC,EAAe,CACjBpxE,KACAhK,SACAg7E,YACAC,UACAv4B,UACAw4B,QACAjgD,QAAQ,GAmBZ,OAfArzC,KAAK2uC,UAAU7pC,IAAIsd,EAAIoxE,GAGlBxzF,KAAK0pE,OAAO3vD,IAAIu5E,IACjBtzF,KAAK0pE,OAAO5kE,IAAIwuF,EAAO,IAAIn5E,KAE/Bna,KAAK0pE,OAAO7kE,IAAIyuF,GAAOhiD,IAAIlvB,GAG3BhK,EAAOpX,iBAAiBoyF,EAAWC,EAASv4B,GAG5C96D,KAAKogE,MAAM+yB,aACXnzF,KAAKogE,MAAM/sB,SAEJjxB,CACX,CAOA,mBAAApf,CAAoBof,GAChB,MAAMoxE,EAAexzF,KAAK2uC,UAAU9pC,IAAIud,GAExC,IAAKoxE,IAAiBA,EAAangD,OAC/B,OAAO,EAIXmgD,EAAap7E,OAAOpV,oBAChBwwF,EAAaJ,UACbI,EAAaH,QACbG,EAAa14B,SAIjB04B,EAAangD,QAAS,EAGtB,MAAMigD,EAAQtzF,KAAK0pE,OAAO7kE,IAAI2uF,EAAaF,OAe3C,OAdIA,IACAA,EAAM/hD,OAAOnvB,GACM,IAAfkxE,EAAMngF,MACNnT,KAAK0pE,OAAOn4B,OAAOiiD,EAAaF,QAKxCtzF,KAAK2uC,UAAU4C,OAAOnvB,GAGtBpiB,KAAKogE,MAAM3f,UACXzgD,KAAKogE,MAAM/sB,UAEJ,CACX,CAOA,WAAAogD,CAAYH,GACR,MAAMI,EAAW1zF,KAAK0pE,OAAO7kE,IAAIyuF,GAEjC,IAAKI,EACD,OAAO,EAGX,IAAIjzC,EAAU,EAEd,IAAK,MAAMr+B,KAAMsxE,EACT1zF,KAAKgD,oBAAoBof,IACzBq+B,IAIR,OAAOA,CACX,CAOA,kBAAAkzC,CAAmBv7E,GACf,IAAIqoC,EAAU,EAEd,IAAK,MAAOr+B,EAAIwxE,KAAS5zF,KAAK2uC,UAAUhjC,UAChCioF,EAAKx7E,SAAWA,GAAUw7E,EAAKvgD,QAC3BrzC,KAAKgD,oBAAoBof,IACzBq+B,IAKZ,OAAOA,CACX,CAOA,eAAAozC,CAAgBT,GACZ,IAAI3yC,EAAU,EAEd,IAAK,MAAOr+B,EAAIwxE,KAAS5zF,KAAK2uC,UAAUhjC,UAChCioF,EAAKR,YAAcA,GAAaQ,EAAKvgD,QACjCrzC,KAAKgD,oBAAoBof,IACzBq+B,IAKZ,OAAOA,CACX,CAMA,SAAAqzC,GACI,IAAIrzC,EAAU,EAEd,IAAK,MAAOr+B,EAAIwxE,KAAS5zF,KAAK2uC,UAAUhjC,UAChCioF,EAAKvgD,QACDrzC,KAAKgD,oBAAoBof,IACzBq+B,IAKZ,OAAOA,CACX,CAUA,gBAAAszC,CAAiB37E,EAAQg7E,EAAWC,EAASv4B,EAAU,CAAA,GACnD,MAAM14C,EAAKpiB,KAAKgB,iBAAiBoX,EAAQg7E,EAAWC,EAASv4B,GAE7D,MAAO,CACH14C,KACA4xE,OAAQ,IAAMh0F,KAAKgD,oBAAoBof,GAE/C,CAUA,IAAA6xE,CAAK77E,EAAQg7E,EAAWC,EAASv4B,EAAU,CAAA,GACvC,MAKM14C,EAAKpiB,KAAKgB,iBAAiBoX,EAAQg7E,EALjB3hD,IACpB4hD,EAAQ5hD,GACRzxC,KAAKgD,oBAAoBof,IAGuC04C,GAEpE,OAAO14C,CACX,CAWA,SAAA8xE,CAAU97E,EAAQg7E,EAAWC,EAASvgB,EAAQ,IAAKhY,EAAU,IACzD,IAAIq5B,EAOJ,OAAOn0F,KAAKgB,iBAAiBoX,EAAQg7E,EALX3hD,IACtB1vC,aAAaoyF,GACbA,EAAYlyF,WAAW,IAAMoxF,EAAQ5hD,GAAQqhC,IAGiBhY,EACtE,CAWA,SAAAs5B,CAAUh8E,EAAQg7E,EAAWC,EAASgB,EAAQ,IAAKv5B,EAAU,IACzD,IAAIw5B,GAAa,EAYjB,OAAOt0F,KAAKgB,iBAAiBoX,EAAQg7E,EAVX3hD,IACjB6iD,IACDjB,EAAQ5hD,GACR6iD,GAAa,EACbryF,WAAW,KACPqyF,GAAa,GACdD,KAIuDv5B,EACtE,CAMA,kBAAAo4B,GACI,GAAsB,oBAAX3yF,OAAwB,OAEnC,MAAMgvB,EAAU,KACZvvB,KAAK8zF,aAITvzF,OAAOS,iBAAiB,eAAgBuuB,GACxChvB,OAAOS,iBAAiB,SAAUuuB,EACtC,CAOA,UAAAgkE,GACI,MAAO,YAAY/uF,KAAK+N,SAAS3L,KAAK8I,SAAS3H,SAAS,IAAIT,OAAO,EAAG,IAC1E,CAMA,QAAA24C,GACI,MAAO,IACAjgD,KAAKogE,MACRsJ,OAAQ1pE,KAAK0pE,OAAOv2D,KACpBw7B,UAAW3uC,KAAK2uC,UAAUx7B,KAElC,CAMA,kBAAAohF,GACI,MAAMlhD,EAAS,GAEf,IAAK,MAAOjxB,EAAIwxE,KAAS5zF,KAAK2uC,UAAUhjC,UAChCioF,EAAKvgD,QACLA,EAAOvxC,KAAK,CACRsgB,KACAgxE,UAAWQ,EAAKR,UAChBE,MAAOM,EAAKN,MACZl7E,OAAQw7E,EAAKx7E,OAAOtY,YAAYwM,OAK5C,OAAO+mC,CACX,CAMA,YAAAmhD,GACI,MAAMC,EAAW,CACbC,eAAgB10F,KAAK2uC,UAAUx7B,KAC/BwhF,gBAAiB30F,KAAKogE,MAAM/sB,OAC5BuhD,sBAAuB,EACvBC,SAAU,IAAIxxF,IACdyxF,OAAQ,IAAIzxF,IACZ0xF,eAAgB,IAGpB,IAAK,MAAO3yE,EAAIwxE,KAAS5zF,KAAK2uC,UAAUhjC,UAAW,CAE/C,MAAMqpF,EAAapB,EAAKx7E,OAAOtY,YAAYwM,KAC3CmoF,EAASI,SAAS/vF,IACdkwF,GACCP,EAASI,SAAShwF,IAAImwF,IAAe,GAAK,GAI/CP,EAASK,OAAOhwF,IACZ8uF,EAAKR,WACJqB,EAASK,OAAOjwF,IAAI+uF,EAAKR,YAAc,GAAK,GAI5CQ,EAAKvgD,SACNohD,EAASG,wBACTH,EAASM,eAAejzF,KAAK,CACzBsgB,KACAgxE,UAAWQ,EAAKR,UAChBh7E,OAAQ48E,IAGpB,CAMA,OAHAP,EAASI,SAAW9uF,OAAOC,YAAYyuF,EAASI,UAChDJ,EAASK,OAAS/uF,OAAOC,YAAYyuF,EAASK,QAEvCL,CACX,CAMA,OAAAllE,GACI,IAAI0lE,EAAU,EAEd,IAAK,MAAO7yE,EAAIwxE,KAAS5zF,KAAK2uC,UAAUhjC,UAC/BioF,EAAKvgD,SACNrzC,KAAK2uC,UAAU4C,OAAOnvB,GACtB6yE,KAIR,OAAOA,CACX,GClSG,MAAMC,GACT,WAAAp1F,CAAYkmB,EAAS,IACjBhmB,KAAKgmB,OAAS,CACVmvE,qBAAoD,IAA/BnvE,EAAOmvE,oBAC5BC,oBAAkD,IAA9BpvE,EAAOovE,mBAC3BC,2BAAgE,IAArCrvE,EAAOqvE,0BAClCC,0BAA8D,IAApCtvE,EAAOsvE,yBACjCC,uBAAwD,IAAjCvvE,EAAOuvE,sBAC9BC,sBAAsD,IAAhCxvE,EAAOwvE,qBAC7BC,eAAgBzvE,EAAOyvE,gBAAkB,UACtCzvE,GAIPhmB,KAAK01F,wBAAyB,EAC9B11F,KAAK21F,qBAAsB,EAC3B31F,KAAK41F,oBAAqB,EAC1B51F,KAAK61F,0BAA2B,EAChC71F,KAAK81F,sBAAwB91F,KAAKgmB,OAAOyvE,eAGzCz1F,KAAK+1F,kBAAoB,IAAI1yF,IAC7BrD,KAAKg2F,mBAAoB,EACzBh2F,KAAKi2F,aAAe,GAGpBj2F,KAAKk2F,WAAa,KAClBl2F,KAAKm2F,kBAAoB,GAGzBn2F,KAAKo2F,aAAe,CAChBz6D,OAAQ,KACR06D,aAAc,CACVC,QAAS,UACTC,UAAW,UACX//D,OAAQ,UACRggE,WAAY,UACZ78C,UAAW,WAEf88C,WAAY,CACRH,QAAS,UACTC,UAAW,UACX//D,OAAQ,UACRggE,WAAY,UACZ78C,UAAW,WAEf+8C,aAAc,CACVJ,QAAS,UACTC,UAAW,UACX//D,OAAQ,UACRggE,WAAY,UACZ78C,UAAW,WAEfg9C,WAAY,CACRL,QAAS,UACTC,UAAW,UACX//D,OAAQ,UACRggE,WAAY,UACZ78C,UAAW,YAKnB35C,KAAK8nB,SAAW,CACZ8uE,KAAM,OACNC,QAAS,UACTC,WAAY,aACZC,MAAO,SAIX/2F,KAAKg3F,cAAgB,CACjBpb,KAAM57E,KAAK8nB,SAASivE,MACpBtjF,MAAOzT,KAAK8nB,SAAS8uE,KACrB39E,QAASjZ,KAAK8nB,SAAS+uE,QACvBtmF,KAAMvQ,KAAK8nB,SAASivE,MACpBpjF,QAAS3T,KAAK8nB,SAASgvE,WACvBljF,WAAY5T,KAAK8nB,SAAS+uE,QAC1BhjF,IAAK7T,KAAK8nB,SAAS8uE,KACnBhrF,QAAS5L,KAAK8nB,SAASivE,OAI3B/2F,KAAK4d,YACT,CAKA,UAAAA,GAEI5d,KAAKi3F,wBAGLj3F,KAAKk3F,kBAGDl3F,KAAKgmB,OAAOsvE,0BACZt1F,KAAKm3F,0BAITn3F,KAAKo3F,0BAET,CAKA,qBAAAH,GAEI,GAAIj3F,KAAKgmB,OAAOmvE,qBAAuB50F,OAAO82F,WAAY,CACtD,MAAMC,EAAc/2F,OAAO82F,WAAW,oCACtCr3F,KAAK01F,uBAAyB4B,EAAYC,OAC9C,CAGA,GAAIv3F,KAAKgmB,OAAOovE,oBAAsB70F,OAAO82F,WAAY,CACrD,MAAMG,EAAgBj3F,OAAO82F,WAAW,4BAIxC,GAHAr3F,KAAK21F,oBAAsB6B,EAAcD,SAGpCv3F,KAAK21F,oBAAqB,CAC3B,MAAM8B,EAAiBl3F,OAAO82F,WAAW,+BACzCr3F,KAAK21F,oBAAsB8B,EAAeF,OAC9C,CACJ,CAGAv3F,KAAK03F,oBACT,CAKA,kBAAAA,GAEI,MAAMC,EAAcliD,SAAS0lB,cAAc,eACrCy8B,EAAgBniD,SAAS0lB,cAAc,iBAGvC08B,EAAUpiD,SAAS0lB,cAAc,wBAGjC28B,EAAYC,UAAUD,UAAU/tF,cAChCiuF,EAAaF,EAAUtyF,SAAS,SACpBsyF,EAAUtyF,SAAS,SACnBsyF,EAAUtyF,SAAS,aAErCxF,KAAK41F,sBAAwB+B,GAAeC,GAAiBC,GAAWG,EAC5E,CAKA,eAAAd,GACSl3F,KAAKgmB,OAAOqvE,4BAGjBr1F,KAAKk2F,WAAazgD,SAASC,eAAe,wBACrC11C,KAAKk2F,aACNl2F,KAAKk2F,WAAazgD,SAAS6lB,cAAc,OACzCt7D,KAAKk2F,WAAW9zE,GAAK,uBACrBpiB,KAAKk2F,WAAW+B,aAAa,YAAa,UAC1Cj4F,KAAKk2F,WAAW+B,aAAa,cAAe,QAC5Cj4F,KAAKk2F,WAAW96B,MAAM3jB,SAAW,WACjCz3C,KAAKk2F,WAAW96B,MAAMyc,KAAO,WAC7B73E,KAAKk2F,WAAW96B,MAAM36D,MAAQ,MAC9BT,KAAKk2F,WAAW96B,MAAM16D,OAAS,MAC/BV,KAAKk2F,WAAW96B,MAAM88B,SAAW,SACjCziD,SAAS0iD,KAAK38B,YAAYx7D,KAAKk2F,aAEvC,CAKA,uBAAAiB,GACI1hD,SAASz0C,iBAAiB,UAAWhB,KAAKo4F,cAAcr3F,KAAKf,OAC7Dy1C,SAASz0C,iBAAiB,QAAShB,KAAKq4F,YAAYt3F,KAAKf,MAC7D,CAKA,wBAAAo3F,GACQ72F,OAAO82F,aAEa92F,OAAO82F,WAAW,oCAC1BiB,YAAa3gB,IACrB33E,KAAK01F,uBAAyB/d,EAAE4f,QAChCv3F,KAAKu4F,mBAAmB,gBAAiB5gB,EAAE4f,WAIzBh3F,OAAO82F,WAAW,4BAC1BiB,YAAa3gB,IACvB33E,KAAK21F,oBAAsBhe,EAAE4f,QAC7Bv3F,KAAKu4F,mBAAmB,eAAgB5gB,EAAE4f,WAGtD,CAMA,aAAAa,CAAc3mD,GACV,GAAKzxC,KAAKgmB,OAAOsvE,yBAAjB,CAEA,OAAQ7jD,EAAMp9B,KACV,IAAK,MACDo9B,EAAM+mD,iBACNx4F,KAAKy4F,cAAchnD,EAAMinD,UAAW,EAAK,GACzC,MACJ,IAAK,QACL,IAAK,IACD14F,KAAK24F,uBACL,MACJ,IAAK,SACD34F,KAAK44F,aACL,MACJ,IAAK,YACL,IAAK,aACL,IAAK,UACL,IAAK,YACD54F,KAAK64F,sBAAsBpnD,EAAMp9B,KAIzCrU,KAAK61F,0BAA2B,CAtBW,CAuB/C,CAMA,WAAAwC,CAAY5mD,GAEZ,CAMA,aAAAgnD,CAAcjwE,GACV,MAAMswE,EAAiBvsF,MAAMC,KAAKxM,KAAK+1F,kBAAkB5oE,UACzD,GAA8B,IAA1B2rE,EAAe/zF,OAAc,OAEjC/E,KAAKg2F,mBAAqBxtE,EAGtBxoB,KAAKg2F,kBAAoB,EACzBh2F,KAAKg2F,kBAAoB8C,EAAe/zF,OAAS,EAC1C/E,KAAKg2F,mBAAqB8C,EAAe/zF,SAChD/E,KAAKg2F,kBAAoB,GAG7B,MAAM+C,EAAUD,EAAe94F,KAAKg2F,mBACpCh2F,KAAKg5F,SAASD,GAGVA,EAAQE,OACRj5F,KAAKk5F,SAAS,cAAcH,EAAQE,QAE5C,CAMA,qBAAAJ,CAAsBxkF,GAElB,MAOMmU,EAPa,CACf2wE,UAAa,CAAE92F,KAAOC,EAAG,GACzB82F,WAAc,CAAE/2F,EAAG,EAAGC,EAAG,GACzB+2F,QAAW,CAAEh3F,EAAG,EAAGC,GAAG,GACtBg3F,UAAa,CAAEj3F,EAAG,EAAGC,EAAG,IAGC+R,GACzBmU,GAAaxoB,KAAKu5F,mBAClBv5F,KAAKu5F,kBAAkB/wE,EAE/B,CAOA,wBAAAgxE,CAAyBp3E,EAAI22E,GACzB/4F,KAAK+1F,kBAAkBjxF,IAAIsd,EAAI,CAC3BA,KACA62E,MAAOF,EAAQE,OAAS72E,EACxBq3E,OAAQV,EAAQU,QAAU,KAC1BC,OAAQX,EAAQW,QAAU,KAC1Bp0F,KAAMyzF,EAAQzzF,MAAQ,UAE9B,CAMA,0BAAAq0F,CAA2Bv3E,GACvBpiB,KAAK+1F,kBAAkBxkD,OAAOnvB,EAClC,CAMA,QAAA42E,CAASD,GACD/4F,KAAK45F,eACL55F,KAAK45F,cAAcb,GAGvB/4F,KAAKi2F,aAAan0F,KAAKi3F,EAAQ32E,IAC3BpiB,KAAKi2F,aAAalxF,OAAS,IAC3B/E,KAAKi2F,aAAajxF,OAE1B,CAKA,UAAA4zF,GACI54F,KAAKg2F,mBAAoB,EACrBh2F,KAAK45F,eACL55F,KAAK45F,cAAc,MAGvB55F,KAAKk5F,SAAS,gBAClB,CAKA,oBAAAP,GACI,MAAMG,EAAiBvsF,MAAMC,KAAKxM,KAAK+1F,kBAAkB5oE,UACzD,GAAIntB,KAAKg2F,mBAAqB,GAAKh2F,KAAKg2F,kBAAoB8C,EAAe/zF,OAAQ,CAC/E,MAAMg0F,EAAUD,EAAe94F,KAAKg2F,mBAChC+C,EAAQW,SACRX,EAAQW,SACR15F,KAAKk5F,SAAS,aAAaH,EAAQE,SAE3C,CACJ,CAOA,QAAAC,CAASx0F,EAAS+J,EAAW,UACpBzO,KAAKgmB,OAAOqvE,2BAA8Br1F,KAAKk2F,aAGpDl2F,KAAKm2F,kBAAkBr0F,KAAK,CAAE4C,UAAS+J,aAGvCzO,KAAK65F,2BACT,CAKA,wBAAAA,GACI,GAAsC,IAAlC75F,KAAKm2F,kBAAkBpxF,OAAc,OAEzC,MAAML,QAAEA,EAAO+J,SAAEA,GAAazO,KAAKm2F,kBAAkBnxF,QAGrDhF,KAAKk2F,WAAW+B,aAAa,YAAaxpF,GAC1CzO,KAAKk2F,WAAWvgD,YAAcjxC,EAG9BzC,WAAW,KACHjC,KAAKk2F,aACLl2F,KAAKk2F,WAAWvgD,YAAc,IAI9B31C,KAAKm2F,kBAAkBpxF,OAAS,GAChC/E,KAAK65F,4BAEV,IACP,CAOA,oBAAAC,CAAqBC,EAAmB,IACpC,OAAK/5F,KAAK01F,uBAKH,IACAqE,EACHvrF,SAAUurF,EAAiBvrF,SAAuC,GAA5BurF,EAAiBvrF,SAAiB,EACxEwrF,WAAY,EACZtuF,OAAQ,SACRuuF,kBAAkB,EAClBC,mBAAmB,EACnBC,UAAU,GAXHJ,CAaf,CAOA,cAAAK,CAAeC,EAAiB,IAO5B,OALKr6F,KAAKo2F,aAAaz6D,SACnB37B,KAAKo2F,aAAaz6D,OAAS,IAAK0+D,IAIhCr6F,KAAK21F,oBACE31F,KAAKo2F,aAAaC,aAIM,SAA/Br2F,KAAK81F,uBAAoC91F,KAAKo2F,aAAap2F,KAAK81F,uBACzD91F,KAAKo2F,aAAap2F,KAAK81F,uBAG3BuE,CACX,CAOA,eAAAC,CAAgBjoF,GACZ,MAAmC,SAA/BrS,KAAK81F,sBACE91F,KAAK8nB,SAASivE,MAGlB/2F,KAAKg3F,cAAc3kF,IAAUrS,KAAK8nB,SAASivE,KACtD,CAQA,mBAAAwD,CAAoBt6F,EAAKgR,EAASwoF,GAC9B,GAAIxoF,IAAYjR,KAAK8nB,SAASivE,MAAO,OAErC92F,EAAIwC,OAEJ,MAAM+3F,EAAgB/kD,SAAS6lB,cAAc,UACvCm/B,EAAaD,EAAct6F,WAAW,MAE5C,OAAQ+Q,GACJ,KAAKjR,KAAK8nB,SAAS8uE,KACf52F,KAAK06F,iBAAiBD,EAAYD,GAClC,MACJ,KAAKx6F,KAAK8nB,SAAS+uE,QACf72F,KAAK26F,oBAAoBF,EAAYD,GACrC,MACJ,KAAKx6F,KAAK8nB,SAASgvE,WACf92F,KAAK46F,wBAAwBH,EAAYD,GAIjD,MAAMK,EAAgB56F,EAAI66F,cAAcN,EAAe,UACvDv6F,EAAI84C,UAAY8hD,EAChB56F,EAAI4/C,YAAc,GAClB5/C,EAAI65D,SAAS2/B,EAAOp3F,EAAGo3F,EAAOn3F,EAAGm3F,EAAOh5F,MAAOg5F,EAAO/4F,QAEtDT,EAAI4C,SACR,CAOA,gBAAA63F,CAAiBz6F,EAAKF,GAClBA,EAAOU,MAAQ,GACfV,EAAOW,OAAS,GAEhBT,EAAI84C,UAAY,QAChB94C,EAAI04C,YACJ14C,EAAI24C,IAAI,EAAG,EAAG,EAAG,EAAa,EAAVhyC,KAAKgE,IACzB3K,EAAI+4C,MACR,CAOA,mBAAA2hD,CAAoB16F,EAAKF,GACrBA,EAAOU,MAAQ,GACfV,EAAOW,OAAS,GAEhBT,EAAIw4C,YAAc,QAClBx4C,EAAIy4C,UAAY,EAChBz4C,EAAI04C,YACJ14C,EAAIikD,OAAO,EAAG,IACdjkD,EAAIkkD,OAAO,GAAI,GACflkD,EAAI44C,QACR,CAOA,uBAAA+hD,CAAwB36F,EAAKF,GACzBA,EAAOU,MAAQ,GACfV,EAAOW,OAAS,GAEhBT,EAAIw4C,YAAc,QAClBx4C,EAAIy4C,UAAY,EAGhBz4C,EAAI04C,YACJ14C,EAAIikD,OAAO,EAAG,IACdjkD,EAAIkkD,OAAO,GAAI,GACflkD,EAAI44C,SAEJ54C,EAAI04C,YACJ14C,EAAIikD,OAAO,EAAG,GACdjkD,EAAIkkD,OAAO,GAAI,IACflkD,EAAI44C,QACR,CAMA,iBAAAkiD,CAAkB7lF,GACK,CAAC,OAAQ,aAAc,eAAgB,cAC1C1P,SAAS0P,KAIzBlV,KAAK81F,sBAAwB5gF,EAC7BlV,KAAKk5F,SAAS,2BAA2BhkF,KAErClV,KAAKg7F,qBACLh7F,KAAKg7F,oBAAoBh7F,KAAKo6F,kBAEtC,CAMA,SAAAa,GACI,MAAO,CACHC,cAAel7F,KAAK01F,uBACpBW,aAAcr2F,KAAK21F,oBACnBwF,aAAcn7F,KAAK41F,mBACnBwF,mBAAoBp7F,KAAK61F,yBACzBJ,eAAgBz1F,KAAK81F,sBACrBuF,eAAgBr7F,KAAKg2F,mBAAqB,EACtCzpF,MAAMC,KAAKxM,KAAK+1F,kBAAkB5oE,UAAUntB,KAAKg2F,mBAAqB,KAC1EsF,mBAAoBt7F,KAAK+1F,kBAAkB5iF,KAEnD,CAOA,kBAAAolF,CAAmBgD,EAAYl2F,GAG3BrF,KAAKk5F,SAAS,GAAGqC,YAAqBl2F,EAAQ,UAAY,cAGvC,kBAAfk2F,GAAkCv7F,KAAKw7F,uBACvCx7F,KAAKw7F,sBAAsBn2F,GAGZ,iBAAfk2F,GAAiCv7F,KAAKy7F,sBACtCz7F,KAAKy7F,qBAAqBp2F,EAElC,CAOA,sBAAAq2F,CAAuBrpF,GAYnB,MAXqB,CACjBupE,KAAM,sCACNnoE,MAAO,+BACPwF,QAAS,0CACT1I,KAAM,8BACNoD,QAAS,uCACTC,WAAY,mCACZC,IAAK,6BACLjI,QAAS,gCAGOyG,EAAM6F,YAAc,kBAC5C,CAKA,OAAAnV,GAEI0yC,SAASzyC,oBAAoB,UAAWhD,KAAKo4F,eAC7C3iD,SAASzyC,oBAAoB,QAAShD,KAAKq4F,aAGvCr4F,KAAKk2F,YAAcl2F,KAAKk2F,WAAWyF,YACnC37F,KAAKk2F,WAAWyF,WAAWC,YAAY57F,KAAKk2F,YAIhDl2F,KAAK+1F,kBAAkB7zF,QACvBlC,KAAKm2F,kBAAoB,GACzBn2F,KAAKi2F,aAAe,EAExB,EC3rBG,MAAM4F,GACT,WAAA/7F,CAAYkmB,EAAS,IACjBhmB,KAAKgmB,OAAS,CACV81E,yBAA4D,IAAnC91E,EAAO81E,wBAChCC,wBAA0D,IAAlC/1E,EAAO+1E,uBAC/BC,2BAAgE,IAArCh2E,EAAOg2E,0BAClCC,0BAA8D,IAApCj2E,EAAOi2E,yBACjCC,yBAA4D,IAAnCl2E,EAAOk2E,wBAChCC,iBAAkBn2E,EAAOm2E,kBAAoB,EAC7CC,eAAgBp2E,EAAOo2E,gBAAkB,IACzCC,eAAgBr2E,EAAOq2E,gBAAkB,GACzCC,eAAgBt2E,EAAOs2E,gBAAkB,MACtCt2E,GAIPhmB,KAAKu8F,SAAWv8F,KAAKw8F,eACrBx8F,KAAKy8F,SAAWz8F,KAAK08F,eACrB18F,KAAK28F,cAAgB38F,KAAK48F,cAC1B58F,KAAK68F,MAAQ,mBAAmBC,KAAK/E,UAAUD,WAC/C93F,KAAK+8F,UAAY,UAAUD,KAAK/E,UAAUD,WAG1C93F,KAAKi4E,QAAU,IAAI50E,IACnBrD,KAAKg9F,cAAgB,EACrBh9F,KAAKi9F,YAAc,EACnBj9F,KAAKk9F,SAAW,EAChBl9F,KAAKm9F,mBAAqB,KAC1Bn9F,KAAKo9F,YAAa,EAClBp9F,KAAKq9F,YAAa,EAClBr9F,KAAKs9F,kBAAoB,EACzBt9F,KAAKu9F,aAAe,EAGpBv9F,KAAK+4E,eAAiB,KACtB/4E,KAAKw9F,iBAAmB,EACxBx9F,KAAKy9F,eAAiB,GAGtBz9F,KAAK09F,aAAe,CAAEj9F,MAAOF,OAAOo9F,WAAYj9F,OAAQH,OAAOq9F,aAC/D59F,KAAK69F,YAAc79F,KAAK89F,iBACxB99F,KAAK+9F,WAAax9F,OAAOC,kBAAoB,EAC7CR,KAAKg+F,mBAAqB,EAG1Bh+F,KAAKi+F,aAAe,EACpBj+F,KAAKk+F,YAAa,EAClBl+F,KAAKm+F,cAAe,EAGpBn+F,KAAKo+F,0BAA4B,CAC7BC,iBAAkBr+F,KAAKu8F,SACvB+B,qBAAsBt+F,KAAKu8F,SAC3BgC,eAAgBv+F,KAAKu8F,SACrBiC,eAAgBx+F,KAAKu8F,UAAYv8F,KAAKy8F,SACtCx0B,UAAWjoE,KAAKu8F,SAAW,GAAK,GAChCtvF,aAAcjN,KAAKu8F,SAAW,GAAK,IAIvCv8F,KAAKy+F,YAAc,EACnBz+F,KAAK0+F,mBAAqB1+F,KAAK2+F,0BAG/B3+F,KAAK45E,iBAAmB55E,KAAK45E,iBAAiB74E,KAAKf,MACnDA,KAAKg4E,gBAAkBh4E,KAAKg4E,gBAAgBj3E,KAAKf,MACjDA,KAAK65E,eAAiB75E,KAAK65E,eAAe94E,KAAKf,MAC/CA,KAAK4+F,kBAAoB5+F,KAAK4+F,kBAAkB79F,KAAKf,MACrDA,KAAK6+F,wBAA0B7+F,KAAK6+F,wBAAwB99F,KAAKf,MACjEA,KAAK8+F,qBAAuB9+F,KAAK8+F,qBAAqB/9F,KAAKf,MAC3DA,KAAKguF,uBAAyBhuF,KAAKguF,uBAAuBjtF,KAAKf,MAG/DA,KAAK4d,YACT,CAKA,UAAAA,GACQ5d,KAAKgmB,OAAO81E,yBAA2B97F,KAAK28F,eAC5C38F,KAAK++F,qBAGL/+F,KAAKgmB,OAAO+1E,wBACZ/7F,KAAKg/F,wBAGLh/F,KAAKgmB,OAAOg2E,2BACZh8F,KAAKi/F,yBAGLj/F,KAAKgmB,OAAOi2E,0BACZj8F,KAAKk/F,2BAITl/F,KAAKm/F,0BACT,CAMA,YAAA3C,GACI,MAAM1E,EAAYC,UAAUD,UAAU/tF,cAIhCq1F,EAHiB,CAAC,UAAW,SAAU,OAAQ,gBAAiB,cAGpCnmB,KAAKomB,GAAWvH,EAAUtyF,SAAS65F,IAG/DC,EAAe/+F,OAAOo9F,YAAc,IAGpC4B,EAAW,iBAAkBh/F,QAAUw3F,UAAUyH,eAAiB,EAExE,OAAOJ,GAAeE,GAAgBC,CAC1C,CAMA,YAAA7C,GACI,MAAM5E,EAAYC,UAAUD,UAAU/tF,cAChC01F,EAAS,OAAO3C,KAAKhF,GACrB4H,EAAkB,UAAU5C,KAAKhF,KAAe,SAASgF,KAAKhF,GAC9D6H,EAAkB,UAAU7C,KAAKhF,IAAc,QAAQgF,KAAKhF,GAG5D8H,EAAer/F,OAAOo9F,WAAa,KAAOp9F,OAAOo9F,YAAc,KAC/D4B,EAAW,iBAAkBh/F,QAAUw3F,UAAUyH,eAAiB,EAExE,OAAOC,GAAUC,GAAmBC,GAAoBC,GAAgBL,CAC5E,CAMA,WAAA3C,GACI,MAAO,iBAAkBr8F,QAClBw3F,UAAUyH,eAAiB,GAC3BzH,UAAU8H,iBAAmB,CACxC,CAMA,uBAAAlB,GACI,MAAkC,oBAApBmB,eAClB,CAKA,kBAAAf,GACI,MAAMh/F,EAASC,KAAK+/F,YACfhgG,IAGLA,EAAOq7D,MAAM4kC,YAAc,OAC3BjgG,EAAOq7D,MAAM6kC,WAAa,OAC1BlgG,EAAOq7D,MAAM8kC,iBAAmB,OAGhCngG,EAAOiB,iBAAiB,aAAchB,KAAK45E,iBAAkB,CAAEQ,SAAS,IACxEr6E,EAAOiB,iBAAiB,YAAahB,KAAKg4E,gBAAiB,CAAEoC,SAAS,IACtEr6E,EAAOiB,iBAAiB,WAAYhB,KAAK65E,eAAgB,CAAEO,SAAS,IACpEr6E,EAAOiB,iBAAiB,cAAehB,KAAK4+F,kBAAmB,CAAExkB,SAAS,IAG1Er6E,EAAOiB,iBAAiB,cAAgB22E,GAAMA,EAAE6gB,kBACpD,CAKA,qBAAAwG,GACIz+F,OAAOS,iBAAiB,SAAUhB,KAAK8+F,sBACvCv+F,OAAOS,iBAAiB,oBAAqBhB,KAAK6+F,yBAGlDppD,SAASz0C,iBAAiB,mBAAoBhB,KAAKguF,wBAGnDhuF,KAAKmgG,mBACT,CAKA,iBAAAA,GACI,IAAIC,EAAe3qD,SAAS0lB,cAAc,yBAErCilC,IACDA,EAAe3qD,SAAS6lB,cAAc,QACtC8kC,EAAa9zF,KAAO,WACpBmpC,SAAS8lB,KAAKC,YAAY4kC,IAI9BA,EAAa1hC,QAAU,4EAC3B,CAKA,4BAAMugC,GACF,GAAKlH,UAAUsI,WAEf,IACI,MAAMC,QAAgBvI,UAAUsI,aAEhCrgG,KAAKi+F,aAAeqC,EAAQ9O,MAC5BxxF,KAAKk+F,WAAaoC,EAAQC,SAG1BD,EAAQt/F,iBAAiB,cAAe,KACpChB,KAAKi+F,aAAeqC,EAAQ9O,MAC5BxxF,KAAKwgG,oBAGTF,EAAQt/F,iBAAiB,iBAAkB,KACvChB,KAAKk+F,WAAaoC,EAAQC,SAC1BvgG,KAAKwgG,oBAITxgG,KAAKwgG,iBACT,CAAE,MAAO5+F,GACT,CACJ,CAKA,wBAAAs9F,GACQ3+F,OAAOkgG,wBACPlgG,OAAOS,iBAAiB,oBAAsBywC,IAC1CzxC,KAAK0gG,wBAAwBjvD,IAGzC,CAMA,gBAAAmoC,CAAiBnoC,GACbA,EAAM+mD,iBAEN,MAAMjmF,EAAM/N,KAAK+N,MACjBvS,KAAKw9F,iBAAmBjrF,EAGxB,IAAK,MAAM2lE,KAASzmC,EAAMwmC,QACtBj4E,KAAKi4E,QAAQnzE,IAAIozE,EAAMqC,WAAY,CAC/Bn4D,GAAI81D,EAAMqC,WACV5rD,OAAQupD,EAAMN,QACdlpD,OAAQwpD,EAAMJ,QACd6oB,SAAUzoB,EAAMN,QAChBgpB,SAAU1oB,EAAMJ,QAChBz/D,UAAW9F,IAKU,IAAzBk/B,EAAMwmC,QAAQlzE,OACd/E,KAAK6gG,uBAAuBpvD,EAAMwmC,QAAQ,IACV,IAAzBxmC,EAAMwmC,QAAQlzE,QACrB/E,KAAK8gG,sBAAsBrvD,EAAMwmC,SAIrCj4E,KAAK+gG,eAAe,aAAc,CAC9B9oB,QAAS1rE,MAAMC,KAAKxM,KAAKi4E,QAAQ9qD,UACjC5oB,UAAWgO,GAEnB,CAMA,sBAAAsuF,CAAuB3oB,GACnB,MAAM3lE,EAAM/N,KAAK+N,MAGbA,EAAMvS,KAAKi9F,YAAcj9F,KAAKgmB,OAAOo2E,eACrCp8F,KAAKk9F,WAELl9F,KAAKk9F,SAAW,EAGpBl9F,KAAKi9F,YAAc1qF,EACnBvS,KAAKm9F,mBAAqB,CAAE96F,EAAG61E,EAAMN,QAASt1E,EAAG41E,EAAMJ,QAC3D,CAMA,qBAAAgpB,CAAsB7oB,GAClB,GAAuB,IAAnBA,EAAQlzE,OAAc,CAEtB,MAAMi8F,EAAS/oB,EAAQ,GACjBgpB,EAAShpB,EAAQ,GAEvBj4E,KAAKs9F,kBAAoBt9F,KAAKkhG,YAC1BF,EAAOppB,QAASopB,EAAOlpB,QACvBmpB,EAAOrpB,QAASqpB,EAAOnpB,SAG3B93E,KAAKu9F,aAAev9F,KAAKmhG,SACrBH,EAAOppB,QAASopB,EAAOlpB,QACvBmpB,EAAOrpB,QAASqpB,EAAOnpB,SAG3B93E,KAAKo9F,YAAa,CACtB,CACJ,CAMA,eAAAplB,CAAgBvmC,GACZA,EAAM+mD,iBAGN,IAAK,MAAMtgB,KAASzmC,EAAMwmC,QAAS,CAC/B,MAAMmpB,EAAcphG,KAAKi4E,QAAQpzE,IAAIqzE,EAAMqC,YACvC6mB,IACAA,EAAYT,SAAWzoB,EAAMN,QAC7BwpB,EAAYR,SAAW1oB,EAAMJ,QAErC,CAG6B,IAAzBrmC,EAAMwmC,QAAQlzE,OACd/E,KAAKqhG,sBAAsB5vD,EAAMwmC,QAAQ,IACT,IAAzBxmC,EAAMwmC,QAAQlzE,QACrB/E,KAAKshG,qBAAqB7vD,EAAMwmC,SAIpCj4E,KAAK+gG,eAAe,YAAa,CAC7B9oB,QAAS1rE,MAAMC,KAAKxM,KAAKi4E,QAAQ9qD,UACjC3pB,QAASxD,KAAK+4E,gBAEtB,CAMA,qBAAAsoB,CAAsBnpB,GAClB,MAAMkpB,EAAcphG,KAAKi4E,QAAQpzE,IAAIqzE,EAAMqC,YAC3C,IAAK6mB,EAAa,OAElB,MAAMG,EAASrpB,EAAMN,QAAUwpB,EAAYzyE,OACrC6yE,EAAStpB,EAAMJ,QAAUspB,EAAY1yE,OAC1B9nB,KAAKkb,KAAKy/E,EAASA,EAASC,EAASA,GAGvCxhG,KAAKgmB,OAAOq2E,eAGnBz1F,KAAKib,IAAI0/E,GAAU36F,KAAKib,IAAI2/E,GAC5BxhG,KAAK+4E,eAAiBwoB,EAAS,EAAI,aAAe,YAElDvhG,KAAK+4E,eAAiByoB,EAAS,EAAI,YAAc,UAGrDxhG,KAAK+4E,eAAiB,KAE9B,CAMA,oBAAAuoB,CAAqBrpB,GACjB,GAAuB,IAAnBA,EAAQlzE,OAAc,OAE1B,MAAMi8F,EAAS/oB,EAAQ,GACjBgpB,EAAShpB,EAAQ,GAGjBwpB,EAAkBzhG,KAAKkhG,YACzBF,EAAOppB,QAASopB,EAAOlpB,QACvBmpB,EAAOrpB,QAASqpB,EAAOnpB,SAGrB4pB,EAAaD,EAAkBzhG,KAAKs9F,kBACpCqE,EAAaF,EAAkBzhG,KAAKs9F,kBAEtC12F,KAAKib,IAAI6/E,GAAc1hG,KAAKgmB,OAAOs2E,iBACnCt8F,KAAK+4E,eAAiB4oB,EAAa,EAAI,WAAa,UAGpD3hG,KAAK+gG,eAAe,QAAS,CACzBt/F,MAAOkgG,EACPC,MAAOF,KAKf,MAAMG,EAAkB7hG,KAAKmhG,SACzBH,EAAOppB,QAASopB,EAAOlpB,QACvBmpB,EAAOrpB,QAASqpB,EAAOnpB,SAGrBgqB,EAAgBD,EAAkB7hG,KAAKu9F,aAEzC32F,KAAKib,IAAIigF,GAAiB,IAC1B9hG,KAAK+4E,eAAiB,SAGtB/4E,KAAK+gG,eAAe,SAAU,CAC1B5hF,MAAO0iF,EACPD,MAAOE,KAIf9hG,KAAKs9F,kBAAoBmE,EACzBzhG,KAAKu9F,aAAesE,CACxB,CAMA,cAAAhoB,CAAepoC,GACXA,EAAM+mD,iBAEN,MAAMjmF,EAAM/N,KAAK+N,MAGjB,IAAK,MAAM2lE,KAASzmC,EAAM6oC,eAAgB,CACtC,MAAM8mB,EAAcphG,KAAKi4E,QAAQpzE,IAAIqzE,EAAMqC,YAE3C,GAAI6mB,EAAa,CACb,MAAM5yF,EAAW+D,EAAM6uF,EAAY/oF,UAC7BkpF,EAASH,EAAYT,SAAWS,EAAYzyE,OAC5C6yE,EAASJ,EAAYR,SAAWQ,EAAY1yE,OAC5C3L,EAAWnc,KAAKkb,KAAKy/E,EAASA,EAASC,EAASA,GAGlDhzF,EAAW,KAAOuU,EAAW,KACP,IAAlB/iB,KAAKk9F,UACLl9F,KAAK+gG,eAAe,YAAa,CAC7B1+F,EAAG++F,EAAYT,SACfr+F,EAAG8+F,EAAYR,WAEnB5gG,KAAKk9F,SAAW,GAEhBl9F,KAAK+gG,eAAe,MAAO,CACvB1+F,EAAG++F,EAAYT,SACfr+F,EAAG8+F,EAAYR,YAMvBpyF,EAAW,KAAOuU,EAAW,IAC7B/iB,KAAK+gG,eAAe,YAAa,CAC7B1+F,EAAG++F,EAAYT,SACfr+F,EAAG8+F,EAAYR,WAIvB5gG,KAAKi4E,QAAQ1mC,OAAO2mC,EAAMqC,WAC9B,CACJ,CAG6B,IAAzB9oC,EAAMwmC,QAAQlzE,SACd/E,KAAK+4E,eAAiB,KACtB/4E,KAAKo9F,YAAa,EAClBp9F,KAAKq9F,YAAa,GAItBr9F,KAAK+gG,eAAe,WAAY,CAC5Bv9F,QAASxD,KAAK+4E,eACdvqE,SAAU+D,EAAMvS,KAAKw9F,kBAE7B,CAMA,iBAAAoB,CAAkBntD,GAEdzxC,KAAKi4E,QAAQ/1E,QACblC,KAAK+4E,eAAiB,KACtB/4E,KAAKo9F,YAAa,EAClBp9F,KAAKq9F,YAAa,EAElBr9F,KAAK+gG,eAAe,cAAe,GACvC,CAMA,uBAAAlC,CAAwBptD,GACpBzxC,KAAK69F,YAAc79F,KAAK89F,iBAGxB99F,KAAK+gG,eAAe,oBAAqB,CACrClD,YAAa79F,KAAK69F,YAClB1+E,MAAO5e,OAAOs9F,aAAe,IAIjC79F,KAAK+hG,+BACT,CAMA,uBAAArB,CAAwBjvD,GAEpB,MAAMtxC,MAAEA,EAAK6hG,KAAEA,EAAIC,MAAEA,GAAUxwD,EAE/BzxC,KAAK+gG,eAAe,oBAAqB,CACrC5gG,QACA6hG,OACAC,SAER,CAMA,oBAAAnD,CAAqBrtD,GACjB,MAAMl/B,EAAM/N,KAAK+N,MAGbA,EAAMvS,KAAKg+F,mBAAqB,MAEpCh+F,KAAKg+F,mBAAqBzrF,EAC1BvS,KAAK09F,aAAe,CAChBj9F,MAAOF,OAAOo9F,WACdj9F,OAAQH,OAAOq9F,aAInB59F,KAAK+9F,WAAax9F,OAAOC,kBAAoB,EAG7CR,KAAK+gG,eAAe,iBAAkB,CAClC5tF,KAAMnT,KAAK09F,aACXK,WAAY/9F,KAAK+9F,WACjBF,YAAa79F,KAAK89F,mBAIlB99F,KAAKgmB,OAAOk2E,yBACZl8F,KAAKkiG,yBAEb,CAMA,sBAAAlU,CAAuBv8C,GACnB,MAAM0wD,GAAa1sD,SAASk5C,OAE5B3uF,KAAK+gG,eAAe,mBAAoB,CACpCqB,QAASD,KAIRA,GAAaniG,KAAKgmB,OAAOg2E,0BAE1Bh8F,KAAKqiG,+BAGLriG,KAAKsiG,oBAEb,CAMA,cAAAxE,GACI,OAAOv9F,OAAOo9F,WAAap9F,OAAOq9F,YAAc,YAAc,UAClE,CAUA,WAAAsD,CAAYngC,EAAIC,EAAIuhC,EAAIC,GACpB,MAAM3/E,EAAK0/E,EAAKxhC,EACVj+C,EAAK0/E,EAAKxhC,EAChB,OAAOp6D,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,EACpC,CAUA,QAAAq+E,CAASpgC,EAAIC,EAAIuhC,EAAIC,GACjB,OAAsC,IAA/B57F,KAAKipB,MAAM2yE,EAAKxhC,EAAIuhC,EAAKxhC,GAAYn6D,KAAKgE,EACrD,CAKA,wBAAAu0F,GACI,IAAKn/F,KAAKu8F,WAAav8F,KAAKy8F,SAAU,OAEtC,MAAMgG,EAAgB,IACfziG,KAAKo+F,0BACRK,YAAaz+F,KAAK0iG,8BAClBC,UAAU,EACVjE,mBAAoB1+F,KAAK0+F,oBAM7B,OAFA1+F,KAAK+gG,eAAe,sBAAuB0B,GAEpCA,CACX,CAKA,6BAAAV,GACI,MAAMa,EAAmC,cAArB5iG,KAAK69F,YAEnB4E,EAAgB,CAClBI,WAAYD,EAAc,aAAe,WACzCE,kBAAmBF,EAAc,aAAe,WAChDG,QAASH,EAAc,GAAM,GAKjC,OAFA5iG,KAAK+gG,eAAe,2BAA4B0B,GAEzCA,CACX,CAKA,sBAAAP,GACI,MACMvjF,EAAc/X,KAAKkB,IACrB9H,KAAK09F,aAAaj9F,MAFJ,IAGd,GAUJ,OAPAT,KAAKy+F,YAAc9/E,EAEnB3e,KAAK+gG,eAAe,kBAAmB,CACnCt/F,MAAOzB,KAAKy+F,YACZuE,SAAUhjG,KAAK09F,eAGZ19F,KAAKy+F,WAChB,CAKA,4BAAA4D,GACI,MAAMI,EAAgB,CAClBx6B,UAAW,EACXgyB,kBAAkB,EAClBgJ,mBAAmB,EACnBC,cAAc,GAKlB,OAFAljG,KAAK+gG,eAAe,0BAA2B0B,GAExCA,CACX,CAKA,kBAAAH,GACI,MAAMrb,EAAWjnF,KAAKm/F,2BAItB,OAFAn/F,KAAK+gG,eAAe,qBAAsB9Z,GAEnCA,CACX,CAKA,eAAAuZ,GAGI,GAFAxgG,KAAKm+F,aAAen+F,KAAKi+F,aAAe,KAAQj+F,KAAKk+F,WAEjDl+F,KAAKm+F,aAAc,CAEnB,MAAMsE,EAAgB,CAClBx6B,UAAW,GACXh7D,aAAc,EACduxF,gBAAgB,EAChB0E,cAAc,GAGlBljG,KAAK+gG,eAAe,eAAgB,CAChC9C,aAAcj+F,KAAKi+F,aACnBC,WAAYl+F,KAAKk+F,WACjBuE,iBAER,CACJ,CAMA,2BAAAC,GAEI,OAAI1iG,KAAKu8F,SACE31F,KAAKkB,IAAI9H,KAAK+9F,WAAY,GAC1B/9F,KAAKy8F,SACL71F,KAAKkB,IAAI9H,KAAK+9F,WAAY,KAG9B/9F,KAAK+9F,UAChB,CAMA,SAAAgC,GAEI,OAAO//F,KAAKD,QAAU01C,SAAS0lB,cAAc,SACjD,CAMA,SAAAgoC,CAAUpjG,GACNC,KAAKD,OAASA,EAEVC,KAAKgmB,OAAO81E,yBAA2B97F,KAAK28F,eAC5C38F,KAAK++F,oBAEb,CAOA,cAAAgC,CAAe3N,EAAW90E,GAClBte,KAAKojG,cACLpjG,KAAKojG,aAAahQ,EAAW90E,EAErC,CAMA,SAAA28E,GACI,MAAO,CACHoI,OAAQ,CACJ9G,SAAUv8F,KAAKu8F,SACfE,SAAUz8F,KAAKy8F,SACfE,cAAe38F,KAAK28F,cACpBE,MAAO78F,KAAK68F,MACZE,UAAW/8F,KAAK+8F,WAEpBiG,SAAU,CACN7vF,KAAMnT,KAAK09F,aACXG,YAAa79F,KAAK69F,YAClBE,WAAY/9F,KAAK+9F,WACjBU,YAAaz+F,KAAKy+F,aAEtB6B,QAAS,CACL9O,MAAOxxF,KAAKi+F,aACZC,WAAYl+F,KAAKk+F,WACjBC,aAAcn+F,KAAKm+F,cAEvBjmB,MAAO,CACHorB,cAAetjG,KAAKi4E,QAAQ9kE,KAC5B4lE,eAAgB/4E,KAAK+4E,eACrBqkB,WAAYp9F,KAAKo9F,WACjBC,WAAYr9F,KAAKq9F,YAErBjjF,YAAapa,KAAKo+F,0BAE1B,CAKA,OAAAr7F,GACI,MAAMhD,EAASC,KAAK+/F,YAEhBhgG,IACAA,EAAOiD,oBAAoB,aAAchD,KAAK45E,kBAC9C75E,EAAOiD,oBAAoB,YAAahD,KAAKg4E,iBAC7Cj4E,EAAOiD,oBAAoB,WAAYhD,KAAK65E,gBAC5C95E,EAAOiD,oBAAoB,cAAehD,KAAK4+F,oBAGnDr+F,OAAOyC,oBAAoB,SAAUhD,KAAK8+F,sBAC1Cv+F,OAAOyC,oBAAoB,oBAAqBhD,KAAK6+F,yBACrDppD,SAASzyC,oBAAoB,mBAAoBhD,KAAKguF,wBAEtDhuF,KAAKi4E,QAAQ/1E,QACblC,KAAKy9F,eAAiB,EAE1B,ECxzBG,MAAM8F,GACT,WAAAzjG,CAAYkmB,EAAS,IACjBhmB,KAAKgmB,OAAS,CACVw9E,eAAwC,IAAzBx9E,EAAOw9E,cACtBC,iBAA4C,IAA3Bz9E,EAAOy9E,gBACxBC,gBAA0C,IAA1B19E,EAAO09E,eACvBC,WAAY39E,EAAO29E,YAAc,GACjCC,cAAe59E,EAAO49E,eAAiB,IACvCC,gBAA0C,IAA1B79E,EAAO69E,kBACpB79E,GAIPhmB,KAAK8jG,QAAU,IAAIzgG,IACnBrD,KAAK+jG,YAAc,CAAC,UAAW,UAAW,WAAY,QAAS,WAAY,aAC3E/jG,KAAKgkG,cAAgB,IAAI3gG,IAAIrD,KAAK+jG,YAAY78F,IAAI5B,GAAQ,CAACA,EAAM,IAAI6U,OAGrEna,KAAKikG,aAAe,IAAI5gG,IACxBrD,KAAKkkG,gBAAkB,IAAI7gG,IAG3BrD,KAAKmkG,aAAe,IAAI9gG,IACxBrD,KAAKokG,eAAiB,IAAIjqF,IAC1Bna,KAAKqkG,cAAgB,IAAIlqF,IAGzBna,KAAKskG,MAAQ,IAAIjhG,IAAI,CACjB,CAAC,aAAc,IAAI8W,KACnB,CAAC,YAAa,IAAIA,KAClB,CAAC,eAAgB,IAAIA,KACrB,CAAC,cAAe,IAAIA,KACpB,CAAC,eAAgB,IAAIA,KACrB,CAAC,cAAe,IAAIA,KACpB,CAAC,gBAAiB,IAAIA,KACtB,CAAC,eAAgB,IAAIA,OAIzBna,KAAKukG,UAAYvkG,KAAKwkG,kBAGtBxkG,KAAKykG,UAAY,IAAIphG,IACrBrD,KAAK0kG,qBAAuB,CACxBn4D,SAAYvsC,KAAK2kG,iBAAiB5jG,KAAKf,MACvC4kG,MAAS5kG,KAAK6kG,cAAc9jG,KAAKf,MACjC8kG,OAAU9kG,KAAK+kG,eAAehkG,KAAKf,MACnCglG,MAAShlG,KAAKilG,cAAclkG,KAAKf,OAIrCA,KAAKklG,kBAAoBllG,KAAKmlG,0BAG9BnlG,KAAKolG,QAAU,KACXplG,KAAKgmB,OAAO09E,iBACZ1jG,KAAKolG,QAAUplG,KAAKqlG,gBAI5B,CAMA,eAAAb,GACI,MAAO,CAEHc,aAActlG,KAAKslG,aAAavkG,KAAKf,MACrCyvC,KAAMzvC,KAAKulG,gBAAgBxkG,KAAKf,MAChC0xC,GAAI1xC,KAAKwlG,cAAczkG,KAAKf,MAG5BylG,UAAWzlG,KAAKylG,UAAU1kG,KAAKf,MAC/B0lG,UAAW1lG,KAAK0lG,UAAU3kG,KAAKf,MAG/B2lG,IAAK3lG,KAAK4lG,cAAc7kG,KAAKf,MAC7B4B,MAAO5B,KAAK6lG,gBAAgB9kG,KAAKf,MAGjC8lG,SAAU9lG,KAAK+lG,eAAehlG,KAAKf,MACnCw3C,SAAUx3C,KAAKgmG,eAAejlG,KAAKf,MAGnCyyF,UAAW,KAAA,IAAYzyF,KAAKgmB,SAG5BigF,QAAS,QAEjB,CAMA,uBAAAd,GACI,MAAMe,EAAU,IAAI7iG,IAGd8iG,EAAa,CACf75F,KAAM,CAAEhH,KAAM,SAAUipF,UAAU,GAClC0X,QAAS,CAAE3gG,KAAM,SAAUipF,UAAU,GACrCjpF,KAAM,CAAEA,KAAM,SAAUipF,UAAU,EAAM6X,KAAMpmG,KAAK+jG,aACnDn3F,YAAa,CAAEtH,KAAM,SAAUipF,UAAU,GACzC8X,OAAQ,CAAE/gG,KAAM,SAAUipF,UAAU,GACpC0V,aAAc,CAAE3+F,KAAM,QAASipF,UAAU,GACzCkW,UAAW,CAAEn/F,KAAM,QAASipF,UAAU,GACtC+X,KAAM,CAAEhhG,KAAM,WAAYipF,UAAU,GACpCxrF,QAAS,CAAEuC,KAAM,WAAYipF,UAAU,IAuE3C,OAnEA2X,EAAQphG,IAAI,UAAW,IAChBqhG,EACH5iG,QAAS,CACL+B,KAAM,SACNipF,UAAU,EACVrzE,WAAY,CACR5O,KAAM,CAAEhH,KAAM,SAAUipF,UAAU,GAClCzqF,MAAO,CAAEwB,KAAM,SAAUipF,UAAU,GACnC/1C,cAAe,CAAElzC,KAAM,SAAUipF,UAAU,GAC3ClzB,UAAW,CAAE/1D,KAAM,SAAUipF,UAAU,GACvChgF,YAAa,CAAEjJ,KAAM,SAAUipF,UAAU,KAGjDgY,cAAe,CAAEjhG,KAAM,WAAYipF,UAAU,GAC7CiY,cAAe,CAAElhG,KAAM,WAAYipF,UAAU,KAIjD2X,EAAQphG,IAAI,UAAW,IAChBqhG,EACH3iG,QAAS,CACL8B,KAAM,SACNipF,UAAU,EACVrzE,WAAY,CACR5O,KAAM,CAAEhH,KAAM,SAAUipF,UAAU,GAClC//E,SAAU,CAAElJ,KAAM,SAAUipF,UAAU,GACtCkY,UAAW,CAAEnhG,KAAM,QAASipF,UAAU,GACtCmY,cAAe,CAAEphG,KAAM,SAAUipF,UAAU,KAGnDoY,eAAgB,CAAErhG,KAAM,WAAYipF,UAAU,GAC9CqY,WAAY,CAAEthG,KAAM,WAAYipF,UAAU,KAI9C2X,EAAQphG,IAAI,WAAY,IACjBqhG,EACHpzF,SAAU,CACNzN,KAAM,SACNipF,UAAU,EACVrzE,WAAY,CACR5O,KAAM,CAAEhH,KAAM,SAAUipF,UAAU,GAClCthF,aAAc,CAAE3H,KAAM,SAAUipF,UAAU,GAC1C3hE,SAAU,CAAEtnB,KAAM,WAAYipF,UAAU,GACxCr2C,OAAQ,CAAE5yC,KAAM,WAAYipF,UAAU,KAG9CsY,gBAAiB,CAAEvhG,KAAM,WAAYipF,UAAU,GAC/CuY,cAAe,CAAExhG,KAAM,WAAYipF,UAAU,KAIjD2X,EAAQphG,IAAI,QAAS,IACdqhG,EACHx1F,MAAO,CACHrL,KAAM,SACNipF,UAAU,EACVrzE,WAAY,CACR5O,KAAM,CAAEhH,KAAM,SAAUipF,UAAU,GAClCwY,OAAQ,CAAEzhG,KAAM,SAAUipF,UAAU,GACpC5rC,QAAS,CAAEr9C,KAAM,QAASipF,UAAU,KAG5CyY,UAAW,CAAE1hG,KAAM,WAAYipF,UAAU,GACzC0Y,aAAc,CAAE3hG,KAAM,WAAYipF,UAAU,KAGzC2X,CACX,CAMA,aAAAb,GA2BI,MAzBgB,CAEZz+F,KAAMA,KACNpC,KAAMA,KACNuoD,KAAMA,KAGNm6C,QAAS,CACLvB,IAAK,IAAIxhG,IAAS,KAClBgjG,KAAM,IAAIhjG,IAAS,KACnBvC,MAAO,IAAIuC,IAAS,MAIxB5D,YAAQ8Z,EACRo7B,cAAUp7B,EACV+sF,kBAAc/sF,EACdgtF,oBAAgBhtF,EAChBitF,WAAOjtF,EACPktF,oBAAgBltF,EAGhBmtF,IAAKxnG,KAAKukG,UAIlB,CAOA,oBAAMkD,CAAeC,GACjB,IAAK1nG,KAAKgmB,OAAOw9E,cAEb,OAAO,EAIX,GAAIxjG,KAAK8jG,QAAQ3wF,MAAQnT,KAAKgmB,OAAO29E,WAEjC,OAAO,EAIX,GAAI3jG,KAAKgmB,OAAOy9E,kBACOzjG,KAAK2nG,eAAeD,GACvBE,MAEZ,OAAO,EAMf,GADkB5nG,KAAK6nG,eAAeH,GACxB3iG,OAAS,IAAM/E,KAAKgmB,OAAO69E,eAErC,OAAO,EAKX,WAD2B7jG,KAAK8nG,oBAAoBJ,IAClCK,SAEd,OAAO,EAIX,IACI/nG,KAAKokG,eAAe9yD,IAAIo2D,EAAOp7F,MAE/B,MAAMrI,EAAUjE,KAAKgmB,OAAO09E,eAAiB1jG,KAAKolG,QAAU7kG,OAG5D,UAF0BP,KAAKgoG,iBAAiBN,EAAQzjG,GAGpD,MAAM,IAAIwC,MAAM,gCA+BpB,OA3BAzG,KAAK8jG,QAAQh/F,IAAI4iG,EAAOp7F,KAAMo7F,GAC9B1nG,KAAKgkG,cAAcn/F,IAAI6iG,EAAOpiG,MAAMgsC,IAAIo2D,EAAOp7F,MAC/CtM,KAAKmkG,aAAar/F,IAAI4iG,EAAOp7F,KAAM,UACnCtM,KAAKqkG,cAAc/yD,IAAIo2D,EAAOp7F,MAG1Bo7F,EAAOzD,eACPjkG,KAAKikG,aAAan/F,IAAI4iG,EAAOp7F,KAAMo7F,EAAOzD,cAC1CjkG,KAAKioG,sBAAsBP,EAAOp7F,KAAMo7F,EAAOzD,eAI/CyD,EAAOpD,OACPv+F,OAAO4F,QAAQ+7F,EAAOpD,OAAO5iG,QAAQ,EAAEwmG,EAAM7U,MACzCrzF,KAAKslG,aAAa4C,EAAM7U,EAASqU,EAAOp7F,QAOhDtM,KAAKulG,gBAAgB,mBAAoB,CACrCj5F,KAAMo7F,EAAOp7F,KACbhH,KAAMoiG,EAAOpiG,KACb2gG,QAASyB,EAAOzB,WAGb,CAEX,CAAE,MAAOrkG,GAEL,OAAO,CACX,CAAC,QACG5B,KAAKokG,eAAe7yD,OAAOm2D,EAAOp7F,KACtC,CACJ,CAOA,cAAAq7F,CAAeD,GACX,MAAMxkG,EAAS,GAwBf,GArBKwkG,EAAOp7F,MAA+B,iBAAhBo7F,EAAOp7F,MAC9BpJ,EAAOpB,KAAK,iCAGX4lG,EAAOpiG,MAAStF,KAAK+jG,YAAYv+F,SAASkiG,EAAOpiG,OAClDpC,EAAOpB,KAAK,+BAA+B9B,KAAK+jG,YAAY38F,KAAK,SAGhEsgG,EAAOzB,SAAqC,iBAAnByB,EAAOzB,SACjC/iG,EAAOpB,KAAK,8BAGW,mBAAhB4lG,EAAOpB,MACdpjG,EAAOpB,KAAK,qCAGc,mBAAnB4lG,EAAO3kG,SACdG,EAAOpB,KAAK,uCAIZ4lG,EAAOpiG,MAAQtF,KAAKklG,kBAAkBnrF,IAAI2tF,EAAOpiG,MAAO,CACxD,MAAM6iG,EAASnoG,KAAKklG,kBAAkBrgG,IAAI6iG,EAAOpiG,MAC3C8iG,EAAapoG,KAAKqoG,sBAAsBX,EAAQS,GACtDjlG,EAAOpB,QAAQsmG,EACnB,CAEA,MAAO,CACHR,MAAyB,IAAlB1kG,EAAO6B,OACd7B,SAER,CAQA,qBAAAmlG,CAAsBC,EAAKH,GACvB,MAAMjlG,EAAS,GAyBf,OAvBA6C,OAAO4F,QAAQw8F,GAAQzmG,QAAQ,EAAE2S,EAAKk0F,MAKlC,GAJIA,EAAMha,YAAcl6E,KAAOi0F,IAC3BplG,EAAOpB,KAAK,8BAA8BuS,KAG1CA,KAAOi0F,EAAK,CACZ,MAAMjjG,EAAQijG,EAAIj0F,GAUlB,GARIk0F,EAAMjjG,aAAeD,IAAUkjG,EAAMjjG,MACrCpC,EAAOpB,KAAK,YAAYuS,qBAAuBk0F,EAAMjjG,QAGrDijG,EAAMnC,OAASmC,EAAMnC,KAAK5gG,SAASH,IACnCnC,EAAOpB,KAAK,YAAYuS,qBAAuBk0F,EAAMnC,KAAKh/F,KAAK,SAG/DmhG,EAAMrtF,YAA+B,iBAAV7V,EAAoB,CAC/C,MAAMmjG,EAAYxoG,KAAKqoG,sBAAsBhjG,EAAOkjG,EAAMrtF,YAC1DhY,EAAOpB,QAAQ0mG,EAAUthG,IAAIywE,GAAK,GAAGtjE,KAAOsjE,KAChD,CACJ,IAGGz0E,CACX,CAOA,cAAA2kG,CAAeH,GACX,MAAMjD,EAAY,GA0BlB,OAvBIiD,EAAOjD,WACPiD,EAAOjD,UAAU/iG,QAAQ+mG,IACjBzoG,KAAK8jG,QAAQ/pF,IAAI0uF,IACjBhE,EAAU3iG,KAAK2mG,KAMP,YAAhBf,EAAOpiG,MAAsC,YAAhBoiG,EAAOpiG,MAEpCtF,KAAK8jG,QAAQpiG,QAASgnG,IAClB,GAAIA,EAAepjG,OAASoiG,EAAOpiG,KAAM,CACrC,MAAMqjG,EAAeD,EAAehB,EAAOpiG,OAAOgH,KAC5Cs8F,EAAUlB,EAAOA,EAAOpiG,OAAOgH,KAEjCq8F,IAAiBC,GACjBnE,EAAU3iG,KAAK,GAAG4lG,EAAOpiG,wBAAwBsjG,IAEzD,IAIDnE,CACX,CAOA,yBAAMqD,CAAoBJ,GACtB,IAAKA,EAAOzD,cAA+C,IAA/ByD,EAAOzD,aAAal/F,OAC5C,MAAO,CAAEgjG,UAAU,EAAMc,QAAS,IAGtC,MAAMA,EAAU,GAEhB,IAAK,MAAMC,KAAOpB,EAAOzD,aAEhBjkG,KAAK8jG,QAAQ/pF,IAAI+uF,UAEG9oG,KAAK+oG,kBAAkBD,IAExCD,EAAQ/mG,KAAKgnG,GAKzB,MAAO,CACHf,SAA6B,IAAnBc,EAAQ9jG,OAClB8jG,UAER,CAOA,uBAAME,CAAkBC,GAGpB,OAAOhpG,KAAK8jG,QAAQ/pF,IAAIivF,EAC5B,CAOA,qBAAAf,CAAsBgB,EAAYhF,GAC9BjkG,KAAKkkG,gBAAgBp/F,IAAImkG,EAAY,IAAI9uF,IAAI8pF,IAG7CA,EAAaviG,QAAQonG,IACZ9oG,KAAKkkG,gBAAgBnqF,IAAI+uF,IAC1B9oG,KAAKkkG,gBAAgBp/F,IAAIgkG,EAAK,IAAI3uF,MAG9C,CAQA,sBAAM6tF,CAAiBN,EAAQzjG,GAC3B,IAEI,MAAMilG,EAAU,IAAIxiG,QAAQ,CAACmsE,EAAGiyB,KAC5B7iG,WAAW,IAAM6iG,EAAO,IAAIr+F,MAAM,kCAAmCzG,KAAKgmB,OAAO49E,iBAI/E0C,EAAOoB,EAAOpB,KAAKvlG,KAAKkD,GAM9B,OAAkB,UALGyC,QAAQyiG,KAAK,CAC9B7C,EAAKtmG,KAAKukG,WACV2E,GAIR,CAAE,MAAOtnG,GAEL,OAAO,CACX,CACJ,CAOA,sBAAMwnG,CAAiBH,GACnB,MAAMvB,EAAS1nG,KAAK8jG,QAAQj/F,IAAIokG,GAChC,IAAKvB,EAED,OAAO,EAKX,GADmB1nG,KAAKqpG,oBAAoBJ,GAC7BlkG,OAAS,EAEpB,OAAO,EAGX,IA4BI,MA1B8B,mBAAnB2iG,EAAO3kG,eACR2kG,EAAO3kG,UAIjB/C,KAAK8jG,QAAQvyD,OAAO03D,GACpBjpG,KAAKgkG,cAAcn/F,IAAI6iG,EAAOpiG,MAAMisC,OAAO03D,GAC3CjpG,KAAKmkG,aAAa5yD,OAAO03D,GACzBjpG,KAAKqkG,cAAc9yD,OAAO03D,GAC1BjpG,KAAKikG,aAAa1yD,OAAO03D,GACzBjpG,KAAKkkG,gBAAgB3yD,OAAO03D,GAG5BjpG,KAAKskG,MAAM5iG,QAAQ4nG,IACfA,EAAQ5nG,QAAQwmG,IACRA,EAAKe,aAAeA,GACpBK,EAAQ/3D,OAAO22D,OAQ3BloG,KAAKulG,gBAAgB,qBAAsB,CAAEj5F,KAAM28F,KAE5C,CACX,CAAE,MAAOrnG,GAEL,OAAO,CACX,CACJ,CAOA,mBAAAynG,CAAoBJ,GAChB,MAAMM,EAAa,GAQnB,OANAvpG,KAAKikG,aAAaviG,QAAQ,CAAC8nG,EAAMl9F,KACzBk9F,EAAKhkG,SAASyjG,IACdM,EAAWznG,KAAKwK,KAIjBi9F,CACX,CAQA,YAAAjE,CAAamE,EAAUpW,EAAS4V,GACvBjpG,KAAKskG,MAAMvqF,IAAI0vF,IAChBzpG,KAAKskG,MAAMx/F,IAAI2kG,EAAU,IAAItvF,KAGjCna,KAAKskG,MAAMz/F,IAAI4kG,GAAUn4D,IAAI,CACzB+hD,UACA4V,cAER,CAQA,kBAAMS,CAAaD,EAAUnrF,GACzB,MAAMgmF,EAAQtkG,KAAKskG,MAAMz/F,IAAI4kG,GAC7B,IAAKnF,GAAwB,IAAfA,EAAMnxF,KAAY,MAAO,GAEvC,MAAMw2F,EAAU,GAEhB,IAAK,MAAMzB,KAAQ5D,EACf,IACI,MAAMtsD,QAAekwD,EAAK7U,QAAQ/0E,GAClCqrF,EAAQ7nG,KAAK,CAAEmnG,WAAYf,EAAKe,WAAYjxD,UAChD,CAAE,MAAOp2C,GAET,CAGJ,OAAO+nG,CACX,CAOA,SAAAlE,CAAUwD,GACN,OAAOjpG,KAAK8jG,QAAQj/F,IAAIokG,IAAe,IAC3C,CAOA,SAAAvD,CAAUuD,GACN,OAAOjpG,KAAK8jG,QAAQ/pF,IAAIkvF,EAC5B,CAOA,gBAAAW,CAAiBtkG,GACb,MAAMukG,EAAc7pG,KAAKgkG,cAAcn/F,IAAIS,GAC3C,OAAKukG,EAEEt9F,MAAMC,KAAKq9F,GAAa3iG,IAAIoF,GAAQtM,KAAK8jG,QAAQj/F,IAAIyH,IAFnC,EAG7B,CAMA,YAAAw9F,CAAab,GACT,IAAKjpG,KAAK8jG,QAAQ/pF,IAAIkvF,GAAa,OAEnCjpG,KAAKmkG,aAAar/F,IAAImkG,EAAY,UAClCjpG,KAAKqkG,cAAc/yD,IAAI23D,GAEvB,MAAMvB,EAAS1nG,KAAK8jG,QAAQj/F,IAAIokG,GAC5BvB,EAAOqC,UACPrC,EAAOqC,WAGX/pG,KAAKulG,gBAAgB,gBAAiB,CAAEj5F,KAAM28F,GAClD,CAMA,aAAAe,CAAcf,GACV,IAAKjpG,KAAK8jG,QAAQ/pF,IAAIkvF,GAAa,OAGhBjpG,KAAKqpG,oBAAoBJ,GAK5CjpG,KAAKmkG,aAAar/F,IAAImkG,EAAY,YAClCjpG,KAAKqkG,cAAc9yD,OAAO03D,GAE1B,MAAMvB,EAAS1nG,KAAK8jG,QAAQj/F,IAAIokG,GAC5BvB,EAAOuC,WACPvC,EAAOuC,YAGXjqG,KAAKulG,gBAAgB,iBAAkB,CAAEj5F,KAAM28F,GACnD,CAOA,eAAA1D,CAAgB2E,EAAW5rF,GAEnBte,KAAKwlG,eACLxlG,KAAKwlG,cAAc0E,EAAW5rF,EAEtC,CAOA,aAAAknF,CAAc0E,EAAW7W,GAGzB,CAOA,aAAAuS,CAAcqD,KAAe9kG,GAE7B,CAOA,eAAA0hG,CAAgBoD,KAAe9kG,GAE/B,CAQA,cAAA4hG,CAAekD,EAAY50F,EAAKhP,GACvBrF,KAAKmkG,aAAapqF,IAAIkvF,IACvBjpG,KAAKmkG,aAAar/F,IAAImkG,EAAY,CAAA,GAGtC,MAAM52F,EAAQrS,KAAKmkG,aAAat/F,IAAIokG,GACf,iBAAV52F,IACPA,EAAMgC,GAAOhP,EAErB,CAQA,cAAA2gG,CAAeiD,EAAY50F,GACvB,MAAMhC,EAAQrS,KAAKmkG,aAAat/F,IAAIokG,GACpC,GAAqB,iBAAV52F,EACP,OAAOA,EAAMgC,EAGrB,CAKA,gBAAAswF,CAAiBwF,EAAUC,GACvB,OAAOA,CACX,CAEA,aAAAvF,CAAcsF,EAAUC,GACpB,MAAO,IAAKD,KAAaC,EAC7B,CAEA,cAAArF,CAAeoF,EAAUC,GACrB,OAAOD,CACX,CAEA,aAAAlF,CAAckF,EAAUC,GACpB,MAAO,CAACD,EAAUC,EACtB,CAMA,SAAAnP,GACI,MAAO,CACHtmF,QAAS3U,KAAKgmB,OAAOw9E,cACrB6G,aAAcrqG,KAAK8jG,QAAQ3wF,KAC3BkxF,cAAerkG,KAAKqkG,cAAclxF,KAClCixF,eAAgBpkG,KAAKokG,eAAejxF,KACpC6wF,cAAej+F,OAAOC,YAClBuG,MAAMC,KAAKxM,KAAKgkG,cAAcr4F,WAAWzE,IAAI,EAAE5B,EAAMw+F,KAAa,CAACx+F,EAAMw+F,EAAQ3wF,QAErFmxF,MAAOv+F,OAAOC,YACVuG,MAAMC,KAAKxM,KAAKskG,MAAM34F,WAAWzE,IAAI,EAAEghG,EAAMoC,KAAc,CAACpC,EAAMoC,EAASn3F,QAGvF,CAKA,aAAMpQ,GAEF,MAAM8mG,EAAct9F,MAAMC,KAAKxM,KAAK8jG,QAAQr3F,QAE5C,IAAK,MAAMH,KAAQu9F,QACT7pG,KAAKopG,iBAAiB98F,GAIhCtM,KAAK8jG,QAAQ5hG,QACblC,KAAKgkG,cAAc9hG,QACnBlC,KAAKikG,aAAa/hG,QAClBlC,KAAKkkG,gBAAgBhiG,QACrBlC,KAAKmkG,aAAajiG,QAClBlC,KAAKqkG,cAAcniG,QACnBlC,KAAKokG,eAAeliG,QACpBlC,KAAKskG,MAAMpiG,QACXlC,KAAKykG,UAAUviG,OAGnB,ECxzBG,MAAMqoG,GACT,WAAAzqG,GAEI,GAAIyqG,GAAiBC,EAGjB,OAFAxqG,KAAKizB,SAAWs3E,GAAiBC,OACjCxqG,KAAKyqG,aAAeF,GAAiBG,GAIzC1qG,KAAKizB,SAAW,CACZ03E,SAAU3qG,KAAK4qG,iBACfC,SAAU7qG,KAAK8qG,iBACf36D,sBAAuBnwC,KAAK+qG,8BAC5BvqG,iBAAkBR,KAAKgrG,yBACvBp5D,aAAc5xC,KAAKirG,qBACnBC,aAAclrG,KAAKmrG,qBACnB/wF,YAAapa,KAAKorG,oBAClBC,qBAAsBrrG,KAAKsrG,8BAG/BtrG,KAAKyqG,aAAezqG,KAAKurG,qBAGzBhB,GAAiBC,EAAkBxqG,KAAKizB,SACxCs3E,GAAiBG,EAAsB1qG,KAAKyqG,YAChD,CAMA,cAAAG,GACI,IACI,SAAUrqG,OAAOqqF,eAAgBrqF,OAAOsqF,mBAC5C,CAAE,MAAOlT,GACL,OAAO,CACX,CACJ,CAMA,cAAAmzB,GACI,IACI,MAAM/qG,EAAS01C,SAAS6lB,cAAc,UACtC,SAAUv7D,EAAOG,aAAcH,EAAOG,WAAW,MACrD,CAAE,MAAOy3E,GACL,OAAO,CACX,CACJ,CAMA,2BAAAozB,GACI,SAAUxqG,OAAO4vC,uBACR5vC,OAAOirG,6BACPjrG,OAAOkrG,0BACPlrG,OAAOmrG,wBACPnrG,OAAOorG,wBACpB,CAMA,sBAAAX,GACI,MAA0C,iBAA5BzqG,OAAOC,gBACzB,CAMA,kBAAAyqG,GACI,IAEI,SAD0B1qG,OAAOqqF,eAAgBrqF,OAAOsqF,mBAM5D,CAAE,MAAOlT,GACL,OAAO,CACX,CACJ,CAMA,kBAAAwzB,GACI,SAAUpT,UAAUmT,eAAgBnT,UAAUmT,aAAaU,aAC/D,CAMA,iBAAAR,GACI,SAAU7qG,OAAO6Z,cAAe7Z,OAAO6Z,YAAY7H,IACvD,CAMA,0BAAA+4F,GACI,MAA8C,mBAAhC/qG,OAAOsrG,oBACzB,CAMA,kBAAAN,GACI,MAAMO,EAAQ/lG,OAAOonB,OAAOntB,KAAKizB,UAAUutB,OAAOurD,SAAShnG,OACrDilE,EAAQjkE,OAAO0G,KAAKzM,KAAKizB,UAAUluB,OACnCinG,EAAcF,EAAQ9hC,EAAS,IAErC,IAAIwnB,EAAQ,QAKZ,OAJIwa,GAAc,GAAIxa,EAAQ,OACrBwa,GAAc,GAAIxa,EAAQ,OAC1Bwa,GAAc,KAAIxa,EAAQ,WAE5B,CACHsa,QACA9hC,QACAgiC,aACAxa,QACAya,gBAAiBjsG,KAAKksG,mBAAmB1a,GAEjD,CAOA,kBAAA0a,CAAmB1a,GACf,MAAMya,EAAkB,GAexB,OAbKjsG,KAAKizB,SAAS03E,UACfsB,EAAgBnqG,KAAK,mCAEpB9B,KAAKizB,SAASkd,uBACf87D,EAAgBnqG,KAAK,0CAEpB9B,KAAKizB,SAAS7Y,aACf6xF,EAAgBnqG,KAAK,0CAEX,UAAV0vF,GACAya,EAAgBnqG,KAAK,uDAGlBmqG,CACX,CAMA,WAAAE,GACI,MAAO,IAAKnsG,KAAKizB,SACrB,CAMA,eAAAm5E,GACI,MAAO,IAAKpsG,KAAKyqG,aACrB,EAMG,MAAM4B,GACT,WAAAvsG,GACIE,KAAKssG,UAAY,IAAIjpG,IACrBrD,KAAKusG,QAAU,IAAIpyF,GACvB,CAOA,QAAAyuD,CAAS4jC,EAASC,GACdzsG,KAAKssG,UAAUxnG,IAAI0nG,EAASC,EAChC,CAOA,KAAA39E,CAAM09E,GACF,GAAIxsG,KAAKusG,QAAQxyF,IAAIyyF,GACjB,OAAO,EAGX,MAAMC,EAAazsG,KAAKssG,UAAUznG,IAAI2nG,GACtC,IAAKC,EAED,OAAO,EAGX,IAII,OAHAA,IACAzsG,KAAKusG,QAAQj7D,IAAIk7D,IAEV,CACX,CAAE,MAAO5qG,GAEL,OAAO,CACX,CACJ,CAMA,QAAA8qG,GACI,MAAMH,EAAU,GAChB,IAAK,MAAMC,KAAWxsG,KAAKssG,UAAU7/F,OAC7BzM,KAAK8uB,MAAM09E,IACXD,EAAQzqG,KAAK0qG,GAGrB,OAAOD,CACX,CAOA,SAAAI,CAAUH,GACN,OAAOxsG,KAAKusG,QAAQxyF,IAAIyyF,EAC5B,EAMG,SAASI,KACRrsG,OAAO4vC,wBAGX5vC,OAAO4vC,sBACH5vC,OAAOirG,6BACPjrG,OAAOkrG,0BACPlrG,OAAOmrG,wBACPnrG,OAAOorG,yBACP,SAAShqG,GACL,OAAOpB,OAAO0B,WAAW,WACrBN,EAAS6C,KAAK+N,MAClB,EAAG,IAAO,GACd,EAEJhS,OAAO2oE,qBACH3oE,OAAOssG,4BACPtsG,OAAOusG,yBACPvsG,OAAOwsG,uBACPxsG,OAAOysG,wBACP,SAAS5qF,GACL7hB,OAAOwB,aAAaqgB,EACxB,EACR,CAKO,SAAS6qF,KACZ,GAAI1sG,OAAO6Z,aAAe7Z,OAAO6Z,YAAY7H,IAAK,OAE7ChS,OAAO6Z,cACR7Z,OAAO6Z,YAAc,IAGzB,MAAM/B,EAAY7T,KAAK+N,MACvBhS,OAAO6Z,YAAY7H,IAAM,WACrB,OAAO/N,KAAK+N,MAAQ8F,CACxB,CACJ,CAKO,SAAS60F,KACR3sG,OAAOqqF,cAAgBrqF,OAAOsqF,qBAGlCtqF,OAAOqqF,aAAe,WAClB5qF,KAAKqS,MAAQ,YACbrS,KAAKqmF,WAAa,MAClBrmF,KAAKm0B,YAAc,EACnBn0B,KAAKqlF,YAAc,CACfD,QAAS,WAAY,EACrBnK,WAAY,WAAY,GAG5Bj7E,KAAKmlF,WAAa,WACd,MAAO,CACHH,KAAM,CAAE3/E,MAAO,GACf+/E,QAAS,WAAY,EACrBnK,WAAY,WAAY,EAEhC,EAEAj7E,KAAK4nF,iBAAmB,WACpB,MAAO,CACH12E,UAAW,CAAE7L,MAAO,KACpBC,KAAM,OACNkG,MAAO,WAAY,EACnBkkC,KAAM,WAAY,EAClB01C,QAAS,WAAY,EACrBnK,WAAY,WAAY,EAEhC,EAEAj7E,KAAKwwF,eAAiB,WAClB,MAAO,CACHV,QAAS,KACTY,kBAAmB,KACnBI,qBAAsB,SAASqc,GAE3B,IAAK,IAAIxxD,EAAI,EAAGA,EAAIwxD,EAAMpoG,OAAQ42C,IAC9BwxD,EAAMxxD,GAAK,CAEnB,EACAypC,QAAS,WAAY,EACrBnK,WAAY,WAAY,EAEhC,EAEAj7E,KAAK+qF,OAAS,WAEV,OADA/qF,KAAKqS,MAAQ,UACN3L,QAAQC,SACnB,EAEA3G,KAAKotG,QAAU,WAEX,OADAptG,KAAKqS,MAAQ,YACN3L,QAAQC,SACnB,EAEA3G,KAAKurF,MAAQ,WAET,OADAvrF,KAAKqS,MAAQ,SACN3L,QAAQC,SACnB,CACJ,EAGJ,CAKO,MAAM0mG,GACT,WAAAvtG,CAAYC,GACRC,KAAKD,OAASA,EACdC,KAAKiE,QAAU,KACfjE,KAAKstG,eAAgB,EACrBttG,KAAKutG,kBAAoB,GAEzBvtG,KAAKwtG,0BACT,CAKA,wBAAAA,GACIxtG,KAAKD,OAAOiB,iBAAiB,mBAAqBywC,IAC9CA,EAAM+mD,iBACNx4F,KAAKstG,eAAgB,IAIzBttG,KAAKD,OAAOiB,iBAAiB,uBAAwB,KACjDhB,KAAKstG,eAAgB,EACrBttG,KAAKiE,QAAUjE,KAAKD,OAAOG,WAAW,MAItCF,KAAKutG,kBAAkB7rG,QAAQC,IAC3B,IACIA,EAAS3B,KAAKiE,QAClB,CAAE,MAAOrC,GAET,KAGZ,CAMA,UAAA1B,GACI,GAAIF,KAAKstG,cACL,OAAO,KAGX,IAAKttG,KAAKiE,QACN,IACIjE,KAAKiE,QAAUjE,KAAKD,OAAOG,WAAW,KAC1C,CAAE,MAAO0B,GAEL,OAAO,IACX,CAGJ,OAAO5B,KAAKiE,OAChB,CAMA,UAAAwpG,CAAW9rG,GACP3B,KAAKutG,kBAAkBzrG,KAAKH,EAChC,CAMA,MAAA+rG,GACI,OAAO1tG,KAAKstG,aAChB,CAMA,OAAAK,GACI,IAAK3tG,KAAKstG,cACN,OAAO,EAGX,IAEI,GADAttG,KAAKiE,QAAUjE,KAAKD,OAAOG,WAAW,MAClCF,KAAKiE,QAEL,OADAjE,KAAKstG,eAAgB,GACd,CAEf,CAAE,MAAO1rG,GAET,CAEA,OAAO,CACX,EAMG,MAAMgsG,GACT,WAAA9tG,GAEI,GAAI8tG,GAAqBC,EAGrB,OAFA7tG,KAAK8tG,QAAUF,GAAqBC,OACpC7tG,KAAKyiG,cAAgBmL,GAAqBG,GAI9C/tG,KAAK8tG,QAAU9tG,KAAKguG,gBACpBhuG,KAAKyiG,cAAgB,IAAIp/F,IACzBrD,KAAKiuG,qBAGLL,GAAqBC,EAAiB7tG,KAAK8tG,QAC3CF,GAAqBG,EAAuB/tG,KAAKyiG,aACrD,CAMA,aAAAuL,GACI,MAAMlW,EAAYC,UAAUD,UAE5B,IAAIxrF,EAAO,UACP25F,EAAU,UAEd,GAAInO,EAAUtyF,SAAS,UAAW,CAC9B8G,EAAO,SACP,MAAM4hG,EAAQpW,EAAUoW,MAAM,iBAC9BjI,EAAUiI,EAAQA,EAAM,GAAK,SACjC,MAAO,GAAIpW,EAAUtyF,SAAS,WAAY,CACtC8G,EAAO,UACP,MAAM4hG,EAAQpW,EAAUoW,MAAM,kBAC9BjI,EAAUiI,EAAQA,EAAM,GAAK,SACjC,MAAO,GAAIpW,EAAUtyF,SAAS,YAAcsyF,EAAUtyF,SAAS,UAAW,CACtE8G,EAAO,SACP,MAAM4hG,EAAQpW,EAAUoW,MAAM,kBAC9BjI,EAAUiI,EAAQA,EAAM,GAAK,SACjC,MAAO,GAAIpW,EAAUtyF,SAAS,QAAS,CACnC8G,EAAO,OACP,MAAM4hG,EAAQpW,EAAUoW,MAAM,eAC9BjI,EAAUiI,EAAQA,EAAM,GAAK,SACjC,CAEA,MAAO,CAAE5hG,OAAM25F,UAASnO,YAC5B,CAKA,kBAAAmW,GAEIjuG,KAAKyiG,cAAc39F,IAAI,SAAU,CAC7BqpG,yBAA0B,wBAC1BC,oBAAqB,CAAEC,YAAa,eACpCC,oBAAqB,CAAC,sBACtBC,cAAe,KAInBvuG,KAAKyiG,cAAc39F,IAAI,UAAW,CAC9BqpG,yBAA0B,wBAC1BC,oBAAqB,CAAEC,YAAa,YACpCC,oBAAqB,GACrBC,cAAe,KAInBvuG,KAAKyiG,cAAc39F,IAAI,SAAU,CAC7BqpG,yBAA0B,wBAC1BC,oBAAqB,CAAEC,YAAa,YACpCC,oBAAqB,GACrBC,cAAe,KAInBvuG,KAAKyiG,cAAc39F,IAAI,OAAQ,CAC3BqpG,yBAA0B,wBAC1BC,oBAAqB,CAAEC,YAAa,eACpCC,oBAAqB,CAAC,sBACtBC,cAAe,IAEvB,CAMA,gBAAAC,GACI,OAAOxuG,KAAKyiG,cAAc59F,IAAI7E,KAAK8tG,QAAQxhG,OAAStM,KAAKyiG,cAAc59F,IAAI,SAC/E,CAMA,UAAA4pG,GACI,MAAO,IAAKzuG,KAAK8tG,QACrB,CAOA,wBAAAY,CAAyB3uG,EAAQkE,GAG7B,GAFajE,KAAKwuG,mBAETF,oBAAoB9oG,SAAS,sBAClC,IAE6BzF,EAAOG,WAAW,KAAM,CAAEG,oBAAoB,GAI3E,CAAE,MAAOuB,GAET,CAER,CAMA,2BAAA+sG,GACI,OAAO3uG,KAAKwuG,mBAAmBD,aACnC,CAMA,sBAAAK,GACI,OAAO5uG,KAAKwuG,mBAAmBJ,mBACnC,EAOJ,IAAIS,GAAuB,KAoDvBC,GAAgC,KAU7B,MAAMC,IAPJD,KACDA,GAtDD,WAEH,GAAID,GACA,OAAOA,GAGX,MAAMG,EAAmB,IAAIzE,GACvB0E,EAAkB,IAAI5C,GACtB6C,EAAuB,IAAItB,GAGjCqB,EAAgBrmC,SAAS,wBAAyBgkC,IAClDqC,EAAgBrmC,SAAS,iBAAkBqkC,IAC3CgC,EAAgBrmC,SAAS,WAAYskC,IAGrC,MAAMiC,EAAmB,GA8BzB,OA5BKH,EAAiB/7E,SAASkd,uBACvB8+D,EAAgBngF,MAAM,0BACtBqgF,EAAiBrtG,KAAK,yBAIzBktG,EAAiB/7E,SAAS7Y,aACvB60F,EAAgBngF,MAAM,mBACtBqgF,EAAiBrtG,KAAK,kBAIzBktG,EAAiB/7E,SAAS03E,UACvBsE,EAAgBngF,MAAM,aACtBqgF,EAAiBrtG,KAAK,YAK9B+sG,GAAuB,CACnBG,mBACAC,kBACAC,uBACAC,mBACA1E,aAAcuE,EAAiB5C,kBAC/B0B,QAASoB,EAAqBT,cAG3BI,EACX,CAOwCO,IAE7BN,ICvpBEO,GAAa,CACtBC,KAAM,EACNC,MAAO,EACPC,KAAM,EACNC,KAAM,EACNC,MAAO,EACPC,MAAO,GA2vBEC,GAAkB,IArvBxB,MACH,WAAA9vG,CAAYkmB,EAAS,IACjBhmB,KAAKgmB,OAAS,CACVrR,SAA4B,IAAnBqR,EAAOrR,QAChB68E,MAAOxrE,EAAOwrE,OAAS6d,GAAWI,KAClCI,iBAA4C,IAA3B7pF,EAAO6pF,gBACxBC,qBAAoD,IAA/B9pF,EAAO8pF,oBAC5BC,sBAAsD,IAAhC/pF,EAAO+pF,qBAC7BC,cAAehqF,EAAOgqF,eAAiB,IACvCC,kBAAmBjqF,EAAOiqF,mBAAqB,OAC5CjqF,GAIPhmB,KAAKkwG,KAAO,GACZlwG,KAAKkD,OAAS,GACdlD,KAAKmwG,SAAW,IAAI9sG,IACpBrD,KAAKowG,gBAAkB,GAGvBpwG,KAAKqwG,aAAe,GACpBrwG,KAAKswG,gBAAkB,IAGvBtwG,KAAKoD,YAAc,IAAIC,IACvBrD,KAAKuwG,WAAa,IAAIltG,IAGtBrD,KAAKyqG,aAAe,CAChBrwF,YAAoC,oBAAhBA,aAA+BA,YAAY7H,IAC/Di+F,OAA+B,oBAAhBp2F,aAA+BA,YAAYo2F,OAC1DtJ,QAA4B,oBAAZA,QAChBuJ,WAA6B,oBAAVhqG,OAIvBzG,KAAKqY,UAAYrY,KAAKuS,MACtBvS,KAAK0wG,qBAED1wG,KAAKgmB,OAAOrR,SACZ3U,KAAK2lG,IAAI,QAAS,8BAA+B,CAC7C3/E,OAAQhmB,KAAKgmB,OACbykF,aAAczqG,KAAKyqG,cAG/B,CAMA,GAAAl4F,GACI,OAAIvS,KAAKyqG,aAAarwF,YACXA,YAAY7H,MAEhB/N,KAAK+N,MAAQvS,KAAKqY,SAC7B,CAKA,kBAAAq4F,GACS1wG,KAAKgmB,OAAO8pF,qBAAyC,oBAAXvvG,SAK/CA,OAAOS,iBAAiB,QAAUywC,IAC9BzxC,KAAK2wG,WAAW,kBAAmBl/D,EAAM7vC,OAAS,IAAI6E,MAAMgrC,EAAM/sC,SAAU,CACxEksG,SAAUn/D,EAAMm/D,SAChBC,OAAQp/D,EAAMo/D,OACdC,MAAOr/D,EAAMq/D,UAKrBvwG,OAAOS,iBAAiB,qBAAuBywC,IAC3CzxC,KAAK2wG,WAAW,sBAAuBl/D,EAAMs/D,OAAQ,CACjDC,QAASv/D,EAAMu/D,YAG3B,CAQA,GAAArL,CAAInU,EAAO9sF,EAAS4Z,EAAO,MACvB,IAAKte,KAAKgmB,OAAOrR,QAAS,OAG1B,IADmB06F,GAAW7d,IAAU6d,GAAWI,MAClCzvG,KAAKgmB,OAAOwrE,MAAO,OAEpC,MAAMjtF,EAAYvE,KAAKuS,MACjB0+F,EAAW,CACb1sG,YACAitF,QACA9sF,UACA4Z,OACAmyF,WAAYzwG,KAAKkxG,iBAUrB,GANAlxG,KAAKkwG,KAAKpuG,KAAKmvG,GACXjxG,KAAKkwG,KAAKnrG,OAAS/E,KAAKgmB,OAAOgqF,eAC/BhwG,KAAKkwG,KAAKlrG,QAIVhF,KAAKyqG,aAAavD,QAAS,CAC3B,MAAMiK,EAAgBnxG,KAAKoxG,iBAAiB5f,GACtC6f,EAAU,KAAK9sG,EAAY,KAAMs9D,QAAQ,OAE3CvjD,EACA6yF,EAAc,GAAGE,MAAY7f,MAAU9sF,IAAW4Z,GAElD6yF,EAAc,GAAGE,MAAY7f,MAAU9sF,IAE/C,CACJ,CAOA,gBAAA0sG,CAAiB5f,GAMA,OAAO,KAAS,GAAEzwF,KAAKmmG,QAExC,CAMA,aAAAgK,GACI,IAAKlxG,KAAKyqG,aAAagG,WAAY,OAAO,KAE1C,IACI,MAAM,IAAIhqG,KACd,CAAE,MAAOkxE,GACL,OAAOA,EAAEhzE,KACb,CACJ,CAQA,UAAAgsG,CAAWrrG,EAAM1D,EAAOqC,EAAU,CAAA,GAC9B,IAAKjE,KAAKgmB,OAAO8pF,oBAAqB,OAEtC,MACMxrG,EAAa,CACfC,UAFcvE,KAAKuS,MAGnBjN,OACAZ,QAAS9C,EAAM8C,SAAW4sG,OAAO1vG,GACjC+C,MAAO/C,EAAM+C,MACbV,UACAW,MAAO,GAIL2sG,EAAW,GAAGjsG,KAAQ1D,EAAM8C,UAC9B1E,KAAKoD,YAAY2W,IAAIw3F,IACrBvxG,KAAKoD,YAAY0B,IAAIysG,EAAUvxG,KAAKoD,YAAYyB,IAAI0sG,GAAY,GAChEjtG,EAAWM,MAAQ5E,KAAKoD,YAAYyB,IAAI0sG,IAExCvxG,KAAKoD,YAAY0B,IAAIysG,EAAU,GAInCvxG,KAAKkD,OAAOpB,KAAKwC,GACjBtE,KAAKuwG,WAAWzrG,IAAIQ,EAAMhB,GAG1BtE,KAAK2lG,IAAI,QAAS,GAAGrgG,MAAS1D,EAAM8C,UAAW,CAC3C9C,MAAO0C,EACPL,WAER,CAOA,YAAAutG,CAAallG,EAAMmlG,EAAW,IAC1B,IAAKzxG,KAAKgmB,OAAO6pF,gBAAiB,OAElC,MAAM6B,EAAU,CACZplG,OACA+L,UAAWrY,KAAKuS,MAChBk/F,WACAE,QAAS,GACTr5F,UAAU,GAGdtY,KAAKmwG,SAASrrG,IAAIwH,EAAMolG,GACxB1xG,KAAK2lG,IAAI,QAAS,sBAAsBr5F,IAAQmlG,EACpD,CAQA,aAAAG,CAActlG,EAAM2sF,EAAO36E,EAAO,MAC9B,IAAKte,KAAKgmB,OAAO6pF,gBAAiB,OAElC,MAAM6B,EAAU1xG,KAAKmwG,SAAStrG,IAAIyH,GAClC,IAAKolG,IAAYA,EAAQp5F,SAAU,OAEnC,MAAMu5F,EAAS,CACXttG,UAAWvE,KAAKuS,MAChB0mF,QACA36E,OACAwzF,aAAc9xG,KAAKuS,MAAQm/F,EAAQr5F,WAGvCq5F,EAAQC,QAAQ7vG,KAAK+vG,EACzB,CAOA,UAAAE,CAAWzlG,GACP,IAAKtM,KAAKgmB,OAAO6pF,gBAAiB,OAAO,KAEzC,MAAM6B,EAAU1xG,KAAKmwG,SAAStrG,IAAIyH,GAClC,IAAKolG,IAAYA,EAAQp5F,SAAU,OAAO,KAgB1C,GAdAo5F,EAAQM,QAAUhyG,KAAKuS,MACvBm/F,EAAQljG,SAAWkjG,EAAQM,QAAUN,EAAQr5F,UAC7Cq5F,EAAQp5F,UAAW,EAGnBo5F,EAAQtxC,MAAQpgE,KAAKiyG,sBAAsBP,GAE3C1xG,KAAK2lG,IAAI,QAAS,oBAAoBr5F,IAAQ,CAC1CkC,SAAUkjG,EAAQljG,SAClBmjG,QAASD,EAAQC,QAAQ5sG,OACzBq7D,MAAOsxC,EAAQtxC,QAIfpgE,KAAKmwG,SAASh9F,KAAOnT,KAAKgmB,OAAOiqF,kBAAmB,CACpD,MAAMiC,EAAYlyG,KAAKmwG,SAAS1jG,OAAOguE,OAAOp1E,MAC9CrF,KAAKmwG,SAAS5+D,OAAO2gE,EACzB,CAEA,MAAO,IAAKR,EAChB,CAOA,qBAAAO,CAAsBP,GAClB,GAA+B,IAA3BA,EAAQC,QAAQ5sG,OAChB,MAAO,CAAEotG,YAAa,GAG1B,MAAM1tB,EAAY,GAClB,IAAK,IAAI9oC,EAAI,EAAGA,EAAI+1D,EAAQC,QAAQ5sG,OAAQ42C,IACxC8oC,EAAU3iF,KAAK4vG,EAAQC,QAAQh2D,GAAGm2D,aAAeJ,EAAQC,QAAQh2D,EAAI,GAAGm2D,cAG5E,GAAyB,IAArBrtB,EAAU1/E,OACV,MAAO,CAAEotG,YAAaT,EAAQC,QAAQ5sG,QAG1C,MACMqtG,EADM3tB,EAAU92B,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAC5Bi9E,EAAU1/E,OACtB+C,EAAMlB,KAAKkB,OAAO28E,GAClB58E,EAAMjB,KAAKiB,OAAO48E,GAExB,MAAO,CACH0tB,YAAaT,EAAQC,QAAQ5sG,OAC7BstG,kBAAmBD,EACnBE,kBAAmBxqG,EACnByqG,kBAAmB1qG,EACnB2qG,cAAed,EAAQljG,SAE/B,CAMA,gBAAAikG,CAAiB7hC,GACR5wE,KAAKgmB,OAAO6pF,kBAEjB7vG,KAAKqwG,aAAavuG,KAAK,CACnByC,UAAWvE,KAAKuS,MAChBq+D,YACA7I,IAAK,IAAO6I,IAGZ5wE,KAAKqwG,aAAatrG,OAAS/E,KAAKswG,iBAChCtwG,KAAKqwG,aAAarrG,QAE1B,CAMA,kBAAA0tG,CAAmBzZ,EAAQ,YACvB,IAAKj5F,KAAKgmB,OAAO+pF,uBAAyB/vG,KAAKyqG,aAAa+F,OAAQ,OAEpE,MAAMmC,EAAW,CACbpuG,UAAWvE,KAAKuS,MAChB0mF,QACAuX,OAAQ,CACJoC,eAAgBx4F,YAAYo2F,OAAOoC,eACnCC,gBAAiBz4F,YAAYo2F,OAAOqC,gBACpCC,gBAAiB14F,YAAYo2F,OAAOsC,kBAI5C9yG,KAAKowG,gBAAgBtuG,KAAK6wG,GAGtB3yG,KAAKowG,gBAAgBrrG,OAAS,KAC9B/E,KAAKowG,gBAAgBprG,QAGzBhF,KAAK2lG,IAAI,QAAS,oBAAoB1M,IAAS0Z,EAASnC,OAC5D,CAMA,cAAAuC,GA4BI,MA3Be,CACXxuG,UAAWvE,KAAKuS,MAChBygG,OAAQhzG,KAAKuS,MAAQ,EACrByT,OAAQhmB,KAAKgmB,OACbykF,aAAczqG,KAAKyqG,aAGnBwI,SAAUjzG,KAAKkwG,KAAKnrG,OACpBmuG,WAAYlzG,KAAKkwG,KAAKhqG,OAAM,IAG5BitG,WAAYnzG,KAAKkD,OAAO6B,OACxBquG,aAAcpzG,KAAKoD,YAAY+P,KAC/BlN,aAAcjG,KAAKkD,OAAOgD,OAAM,GAChC9C,YAAa2C,OAAOC,YAAYhG,KAAKoD,aAGrCiwG,eAAgB9mG,MAAMC,KAAKxM,KAAKmwG,SAAShjF,UAAUqzB,OAAOj4C,GAAKA,EAAE+P,UAAUvT,OAC3EuuG,kBAAmB/mG,MAAMC,KAAKxM,KAAKmwG,SAAShjF,UAAUqzB,OAAOj4C,IAAMA,EAAE+P,UAAUvT,OAG/EsrG,aAAcrwG,KAAKuzG,sBAGnBnD,gBAAiBpwG,KAAKowG,gBAAgBlqG,OAAM,GAIpD,CAMA,mBAAAqtG,GACI,GAAiC,IAA7BvzG,KAAKqwG,aAAatrG,OAClB,MAAO,CAAEotG,YAAa,GAG1B,MAAM9kB,EAAartF,KAAKqwG,aAAanpG,IAAI8hF,GAAKA,EAAEpY,WAC1C7I,EAAM/nE,KAAKqwG,aAAanpG,IAAI8hF,GAAKA,EAAEjhB,KAEzC,MAAO,CACHoqC,YAAanyG,KAAKqwG,aAAatrG,OAC/ByuG,aAAcnmB,EAAW1/B,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAAK6lF,EAAWtoF,OACjE+kE,aAAcljE,KAAKkB,OAAOulF,GAC1BxjB,aAAcjjE,KAAKiB,OAAOwlF,GAC1BomB,OAAQ1rC,EAAIpa,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAAKugE,EAAIhjE,OAC7C2uG,OAAQ9sG,KAAKkB,OAAOigE,GACpB4rC,OAAQ/sG,KAAKiB,OAAOkgE,GAE5B,CAMA,eAAA6rC,GACI,MAAO,CACHnC,SAAU,CACNoC,WAAYrvG,KAAK+N,MACjBuhG,eAAgB9zG,KAAKuS,MACrByT,OAAQhmB,KAAKgmB,OACbykF,aAAczqG,KAAKyqG,cAEvByF,KAAM,IAAIlwG,KAAKkwG,MACfhtG,OAAQ,IAAIlD,KAAKkD,QACjBitG,SAAUpqG,OAAOC,YAAYhG,KAAKmwG,UAClCE,aAAc,IAAIrwG,KAAKqwG,cACvBD,gBAAiB,IAAIpwG,KAAKowG,iBAC1BhtG,YAAa2C,OAAOC,YAAYhG,KAAKoD,aAE7C,CAKA,KAAAlB,GACIlC,KAAKkwG,KAAO,GACZlwG,KAAKkD,OAAS,GACdlD,KAAKmwG,SAASjuG,QACdlC,KAAKqwG,aAAe,GACpBrwG,KAAKowG,gBAAkB,GACvBpwG,KAAKoD,YAAYlB,QACjBlC,KAAKuwG,WAAWruG,QAEhBlC,KAAK2lG,IAAI,OAAQ,qBACrB,CAKA,OAAA5iG,GACI/C,KAAKkC,QACLlC,KAAKgmB,OAAOrR,SAAU,CAO1B,GAmT+C,CAC/CA,QAA2B,oBAAXpU,QAA0BA,OAAOwzG,UAAYxzG,OAAOwzG,SAASC,OAAOxuG,SAAS,cAC7FgsF,MAAO6d,GAAWI,OAGTwE,GAAsB,IAlT5B,MACH,WAAAn0G,GACIE,KAAKyqG,aAAezqG,KAAKk0G,qBACzBl0G,KAAKoa,YAAcpa,KAAKm0G,oBAC5B,CAMA,kBAAAD,GAsCI,MArCa,CAETE,IAAKp0G,KAAKq0G,YACVC,OAAQt0G,KAAKu0G,eACbC,QAASx0G,KAAKy0G,gBAGdC,MAAO10G,KAAK20G,cACZC,OAAQ50G,KAAK60G,eACbC,WAAY90G,KAAK+0G,mBACjBC,eAAgBh1G,KAAKi1G,uBAGrBC,oBAAqBl1G,KAAKm1G,4BAC1B9J,qBAAsBrrG,KAAKsrG,6BAC3BrxB,eAAgBj6E,KAAKo1G,uBAGrBhO,aAAcpnG,KAAKq1G,qBACnBhO,eAAgBrnG,KAAKs1G,uBACrBC,UAAWv1G,KAAKw1G,kBAGhBlO,MAAOtnG,KAAKy1G,cACZC,WAAY11G,KAAK21G,mBAGjBC,YAAa51G,KAAK61G,oBAClBC,cAAe91G,KAAK+1G,sBACpBC,kBAAmBh2G,KAAKi2G,0BAGxBpL,SAAU7qG,KAAK8qG,iBACfoL,cAAel2G,KAAKm2G,sBACpB/zC,gBAAiBpiE,KAAKo2G,wBAI9B,CAEA,SAAA/B,GACI,IAEI,MAAyB,oBAAXgC,QACY,oBAAZ3vG,SACQ,oBAARrD,KACQ,oBAAR8W,GAClB,CAAE,MAAOw9D,GACL,OAAO,CACX,CACJ,CAEA,YAAA48B,GACI,IAEI,MAAwB,oBAAV+B,OACP,WACI,IACI,MAAoE,kBAA7DC,SAAS,4BAATA,GAAwCz2G,YAAYwM,IAC/D,CAAE,MAAMqrE,GACJ,OAAO,CACX,CACH,CAND,EAOX,CAAE,MAAOA,GACL,OAAO,CACX,CACJ,CAEA,aAAA88B,GACI,IACI,MAA2B,oBAAbh/D,UAA4B,aAAcA,SAAS6lB,cAAc,SACnF,CAAE,MAAOqc,GACL,OAAO,CACX,CACJ,CAEA,WAAAg9B,GACI,IACI,MAAM50G,EAAS01C,SAAS6lB,cAAc,UACtC,SAAUv7D,EAAOG,WAAW,WAAYH,EAAOG,WAAW,sBAC9D,CAAE,MAAOy3E,GACL,OAAO,CACX,CACJ,CAEA,YAAAk9B,GACI,IAEI,QADep/D,SAAS6lB,cAAc,UACtBp7D,WAAW,SAC/B,CAAE,MAAOy3E,GACL,OAAO,CACX,CACJ,CAEA,gBAAAo9B,GACI,MAAyB,oBAAXyB,MAClB,CAEA,oBAAAvB,GACI,MAAO,kBAAmBld,SAC9B,CAEA,yBAAAod,GACI,MAAsC,oBAAxBsB,mBAClB,CAEA,0BAAAnL,GACI,MAAuC,oBAAzBO,oBAClB,CAEA,oBAAAuJ,GACI,MAAiC,oBAAnBl7B,cAClB,CAEA,kBAAAm7B,GACI,IACI,MAA+B,oBAAjBjO,cAAiD,OAAjBA,YAClD,CAAE,MAAOzvB,GACL,OAAO,CACX,CACJ,CAEA,oBAAA29B,GACI,IACI,MAAiC,oBAAnBjO,gBAAqD,OAAnBA,cACpD,CAAE,MAAO1vB,GACL,OAAO,CACX,CACJ,CAEA,eAAA69B,GACI,MAA4B,oBAAdD,SAClB,CAEA,WAAAE,GACI,MAAwB,oBAAVnO,KAClB,CAEA,gBAAAqO,GACI,MAA4B,oBAAde,SAClB,CAEA,iBAAAb,GACI,MAAO,iBAAkBt1G,QAAUw3F,UAAUyH,eAAiB,CAClE,CAEA,mBAAAuW,GACI,MAA+B,oBAAjBY,YAClB,CAEA,uBAAAV,GACI,MAAO,wBAAyB11G,MACpC,CAEA,cAAAuqG,GACI,IAEI,QADer1D,SAAS6lB,cAAc,UACtBp7D,WAAW,KAC/B,CAAE,MAAOy3E,GACL,OAAO,CACX,CACJ,CAEA,mBAAAw+B,GACI,IAGI,MAAO,WAFQ1gE,SAAS6lB,cAAc,UACnBp7D,WAAW,KAElC,CAAE,MAAOy3E,GACL,OAAO,CACX,CACJ,CAEA,qBAAAy+B,GACI,MAAkC,oBAApBtW,eAClB,CAMA,kBAAAqU,GACI,MAAMyC,EAAe,CAAA,EAGfprG,EAAQ4O,YAAY7H,MAK1BqkG,EAAaC,iBAAmBz8F,YAAY7H,MAAQ/G,EAGpD,IACI,MAAMzL,EAAS01C,SAAS6lB,cAAc,UACtCv7D,EAAOU,MAAQ,IACfV,EAAOW,OAAS,IAChB,MAAMT,EAAMF,EAAOG,WAAW,MAExB42G,EAAc18F,YAAY7H,MAChC,IAAK,IAAIopC,EAAI,EAAGA,EAAI,IAAMA,IACtB17C,EAAI65D,SAAyB,IAAhBlzD,KAAK8I,SAAgC,IAAhB9I,KAAK8I,SAAgB,GAAI,IAE/DknG,EAAaG,kBAAoB38F,YAAY7H,MAAQukG,CACzD,CAAE,MAAOn/B,GACLi/B,EAAaG,kBAAoB,IACrC,CAEA,OAAOH,CACX,CAMA,eAAAxK,GACI,MAAO,IAAKpsG,KAAKyqG,aACrB,CAMA,cAAAuM,GACI,MAAO,IAAKh3G,KAAKoa,YACrB,CAMA,cAAA68F,GACI,MAAMC,EAAoBnxG,OAAO4F,QAAQ3L,KAAKyqG,cACzCjqD,OAAO,GAAI22D,KAAeA,GAC1BjwG,IAAI,EAAEslG,KAAaA,GAElB4K,EAAsBrxG,OAAO4F,QAAQ3L,KAAKyqG,cAC3CjqD,OAAO,EAAC,CAAG22D,MAAgBA,GAC3BjwG,IAAI,EAAEslG,KAAaA,GAElB6K,EAAqBH,EAAkBnyG,OAASgB,OAAO0G,KAAKzM,KAAKyqG,cAAc1lG,OAAU,IAE/F,MAAO,CACHR,UAAWC,KAAK+N,MAChBulF,UAAWC,UAAUD,UACrBof,oBACAE,sBACAC,kBAAmBzwG,KAAKgB,MAAMyvG,GAC9Bj9F,YAAapa,KAAKoa,YAClB6xF,gBAAiBjsG,KAAKs3G,wBAAwBD,GAEtD,CAOA,uBAAAC,CAAwBD,GACpB,MAAMpL,EAAkB,GA0BxB,OAxBIoL,EAAoB,IACpBpL,EAAgBnqG,KAAK,6DAGpB9B,KAAKyqG,aAAaiK,OACnBzI,EAAgBnqG,KAAK,gEAGpB9B,KAAKyqG,aAAaqK,YACnB7I,EAAgBnqG,KAAK,iEAGpB9B,KAAKyqG,aAAanD,OACnB2E,EAAgBnqG,KAAK,oEAGrB9B,KAAKoa,YAAYy8F,iBAAmB,IACpC5K,EAAgBnqG,KAAK,2EAGrB9B,KAAKoa,YAAY28F,kBAAoB,KACrC9K,EAAgBnqG,KAAK,0EAGlBmqG,CACX,GCrxBJ,SAASsL,GAAeC,GACpB,MAAMl/E,EAAS,GACf,IAAK,IAAIqjB,EAAI,EAAGA,EAAI67D,EAAW77D,IAAK,CAChC,MAAMx8B,EAASw8B,EAAI67D,EAAa5wG,KAAKgE,GAAK,EAC1C0tB,EAAOx2B,KAAK,CACRO,EAAG,GAAwB,GAAlBuE,KAAK0E,IAAI6T,GAClB7c,EAAG,GAAwB,GAAlBsE,KAAKiE,IAAIsU,IAE1B,CACA,OAAOmZ,CACX,CAyFA,SAASm/E,GAAYD,EAAWE,EAAU,IAEtC,OAAOH,GAAeC,EAC1B,CAuIO,MAAMG,GAAoB,CAC7BC,OAAQ,CACJt/E,OAAQi/E,GAAe,IACvBnmC,OAAQ,CAAE9rE,KAAM,SAEpBuyG,MAAO,CACHv/E,OApOR,WACI,MAAMA,EAAS,GACf,IAAK,IAAIqjB,EAAI,EAAGA,EAkOU,GAlOKA,IAAK,CAChC,MAAMlzC,EAAKkzC,EAiOW,GAjOM/0C,KAAKgE,GAAK,EAGhCvI,EAAI,GAAKuE,KAAKC,IAAID,KAAKiE,IAAIpC,GAAI,GAC/BnG,IAAM,GAAKsE,KAAK0E,IAAI7C,GAAK,EAAI7B,KAAK0E,IAAI,EAAI7C,GACtC,EAAI7B,KAAK0E,IAAI,EAAI7C,GAAK7B,KAAK0E,IAAI,EAAI7C,IAG7C6vB,EAAOx2B,KAAK,CACRO,EAAG,GAAMA,EAAI,GACbC,EAAG,GAAMA,EAAI,IAErB,CACA,OAAOg2B,CACX,CAmNgBw/E,GACR1mC,OAAQ,CAAE9rE,KAAM,SAEpByyG,KAAM,CACFz/E,OAzMR,SAAsBk/E,EAAWQ,EAAa,GAC1C,MAAM1/E,EAAS,GAKTgC,EAAW,GACXmrC,EAAuB,EAAV7+D,KAAKgE,GAAUotG,EAC5BC,EAAgBxyC,EAAY,EAElC,IAAK,IAAI9pB,EAAI,EAAGA,EAAIq8D,EAAYr8D,IAAK,CAEjC,MAAMu8D,EAAcv8D,EAAI8pB,EAAa7+D,KAAKgE,GAAK,EAC/C0vB,EAASx4B,KAAK,CACVO,EAAG,GAZS,GAYHuE,KAAK0E,IAAI4sG,GAClB51G,EAAG,GAbS,GAaHsE,KAAKiE,IAAIqtG,KAItB,MAAMC,EAAaD,EAAaD,EAChC39E,EAASx4B,KAAK,CACVO,EAAG,GAlBSmxD,KAkBH5sD,KAAK0E,IAAI6sG,GAClB71G,EAAG,GAnBSkxD,KAmBH5sD,KAAKiE,IAAIstG,IAE1B,CAGA,IAAK,IAAIx8D,EAAI,EAAGA,EAAI67D,EAAW77D,IAAK,CAChC,MAAMlzC,EAAIkzC,EAAI67D,EACRY,EAAc99E,EAASv1B,OAGvBszG,EAAY5vG,EAAI2vG,EAChB79E,EAAY3zB,KAAKgJ,MAAMyoG,GAAaD,EACpC59E,GAAaD,EAAY,GAAK69E,EAC9B39E,EAAe49E,EAAYzxG,KAAKgJ,MAAMyoG,GAGtCC,EAAKh+E,EAASC,GACdg+E,EAAKj+E,EAASE,GAEpBlC,EAAOx2B,KAAK,CACRO,EAAGi2G,EAAGj2G,GAAKk2G,EAAGl2G,EAAIi2G,EAAGj2G,GAAKo4B,EAC1Bn4B,EAAGg2G,EAAGh2G,GAAKi2G,EAAGj2G,EAAIg2G,EAAGh2G,GAAKm4B,GAElC,CAEA,OAAOnC,CACX,CAyJgBkgF,CAAa,GAAI,GACzBpnC,OAAQ,CAAE9rE,KAAM,SAEpBmzG,IAAK,CACDngF,OAAQm/E,GAAY,GAAI,IACxBrmC,OAAQ,CACJ9rE,KAAM,MACNozG,QAAQ,EACRzqG,UAAW,IACX0jE,QAAQ,EACRN,SAAS,EACTxuC,WAAY,KAGpB81E,KAAM,CACFrgF,OA9NGi/E,GA8NkB,IACrBnmC,OAAQ,CACJ9rE,KAAM,WACNkrE,SAAU,IACVrxD,OAAO,GACPy5F,SAAU,IACVn2E,OAAQ,KAGhBo2E,MAAO,CACHvgF,OAAQi/E,GAAe,IACvBnmC,OAAQ,CACJ9rE,KAAM,QACNkrE,SAAU,GACV1sE,MAAO,uBACP2sE,YAAa,WAGrB/jE,UAAW,CACP4rB,OA7KR,WACI,MAAMA,EAAS,GACf,IAAK,IAAIqjB,EAAI,EAAGA,EA2Kc,GA3KCA,IAAK,CAChC,MAAMlzC,EAAKkzC,EA0Ke,GA1KE/0C,KAAKgE,GAAK,EAEtC,IAAIvI,EAAGC,EACP,GAAImG,EAAI7B,KAAKgE,GAETvI,EAAkB,IAAduE,KAAK0E,IAAI7C,GACbnG,EAAkB,IAAdsE,KAAKiE,IAAIpC,OACV,CAEH,MAAMqwG,EAAmB,EAAVlyG,KAAKgE,GAASnC,EAC7BpG,EAAuB,IAAnBuE,KAAK0E,IAAIwtG,GAAiB,GAC9Bx2G,EAAuB,IAAnBsE,KAAKiE,IAAIiuG,EACjB,CAEAxgF,EAAOx2B,KAAK,CACRO,EAAG,GAAMA,EACTC,EAAG,GAAMA,GAEjB,CACA,OAAOg2B,CACX,CAsJgBygF,GACR3nC,OAAQ,CAAE9rE,KAAM,SAEpB0zG,QAAS,CACL1gF,OAAQi/E,GAAe,IACvBnmC,OAAQ,CACJ9rE,KAAM,QACNkrE,SAAU,GACV1sE,MAAO,yBAGfm1G,OAAQ,CACJ3gF,OA7JR,WACI,MAAMA,EAAS,GACT4gF,EAAgBtyG,KAAKgJ,MAAM4nG,IAEjC,IAAK,IAAI3iD,EAAO,EAAGA,EAAO,EAAGA,IACzB,IAAK,IAAIlZ,EAAI,EAAGA,EAAIu9D,EAAev9D,IAAK,CACpC,MAAMlzC,EAAIkzC,EAAIu9D,EACd,IAAI72G,EAAGC,EAEP,OAAQuyD,GACJ,KAAK,EACDxyD,GAAI,GAAOoG,EACXnG,GAAI,GACJ,MACJ,KAAK,EACDD,EAAI,GACJC,GAAI,GAAOmG,EACX,MACJ,KAAK,EACDpG,EAAI,GAAMoG,EACVnG,EAAI,GACJ,MACJ,KAAK,EACDD,GAAI,GACJC,EAAI,GAAMmG,EAIlB6vB,EAAOx2B,KAAK,CACRO,EAAG,GAAU,GAAJA,EACTC,EAAG,GAAU,GAAJA,GAEjB,CAEJ,OAAOg2B,CACX,CA0HgB6gF,GACR/nC,OAAQ,CAAE9rE,KAAM,SAEpB8zG,SAAU,CACN9gF,OAzHR,WACI,MAAMA,EAAS,GAETgC,EAAW,CACb,CAAEj4B,EAAG,EAAGC,OACR,CAAED,GAAG,KAAQC,EAAG,KAChB,CAAED,EAAG,KAAOC,EAAG,MAIb+2G,EAAQ,CACVzyG,KAAKkb,KAAKlb,KAAKC,IAAIyzB,EAAS,GAAGj4B,EAAIi4B,EAAS,GAAGj4B,EAAG,GAAKuE,KAAKC,IAAIyzB,EAAS,GAAGh4B,EAAIg4B,EAAS,GAAGh4B,EAAG,IAC/FsE,KAAKkb,KAAKlb,KAAKC,IAAIyzB,EAAS,GAAGj4B,EAAIi4B,EAAS,GAAGj4B,EAAG,GAAKuE,KAAKC,IAAIyzB,EAAS,GAAGh4B,EAAIg4B,EAAS,GAAGh4B,EAAG,IAC/FsE,KAAKkb,KAAKlb,KAAKC,IAAIyzB,EAAS,GAAGj4B,EAAIi4B,EAAS,GAAGj4B,EAAG,GAAKuE,KAAKC,IAAIyzB,EAAS,GAAGh4B,EAAIg4B,EAAS,GAAGh4B,EAAG,KAE7Fg3G,EAAYD,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAGxCH,EAAgBG,EAAMnyG,IAAIgB,GAAKtB,KAAKgB,MAuGb,GAvG+BM,EAAIoxG,IAG1DC,EAAcL,EAAcvrD,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GACtD+xG,EAmGyB,KAlGzBL,EAAc,IAkGW,GAlGOK,GAIpC,IAAK,IAAI1kD,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CACjC,MAAMyjD,EAAKh+E,EAASu6B,GACd0jD,EAAKj+E,GAAUu6B,EAAO,GAAK,GAC3B2kD,EAAaN,EAAcrkD,GAEjC,IAAK,IAAIlZ,EAAI,EAAGA,EAAI69D,EAAY79D,IAAK,CAEjC,GAAIA,IAAM69D,EAAa,GAAK3kD,EAAO,EAAG,SAEtC,MAAMpsD,EAAIkzC,EAAI69D,EACRn3G,EAAIi2G,EAAGj2G,GAAKk2G,EAAGl2G,EAAIi2G,EAAGj2G,GAAKoG,EAC3BnG,EAAIg2G,EAAGh2G,GAAKi2G,EAAGj2G,EAAIg2G,EAAGh2G,GAAKmG,EAEjC6vB,EAAOx2B,KAAK,CACRO,EAAG,GAAU,GAAJA,EACTC,EAAG,GAAU,GAAJA,GAEjB,CACJ,CAGA,KAAOg2B,EAAOvzB,OAyEe,IAxEzBuzB,EAAOx2B,KAAKw2B,EAAOA,EAAOvzB,OAAS,IAEvC,KAAOuzB,EAAOvzB,OAsEe,IArEzBuzB,EAAOoiB,MAGX,OAAOpiB,CACX,CAiEgBmhF,GACRroC,OAAQ,CAAE9rE,KAAM,SAEpBo0G,MAAO,CACHphF,OAAQm/E,GAAY,GAAI,IACxBrmC,OAAQ,CACJ9rE,KAAM,eAENozG,QAAQ,EACRzqG,UAAW,IACX0jE,QAAQ,EACRN,SAAS,EACTxuC,WAAY,GAEZytC,aAAc,CACVhrE,KAAM,QACNkrE,SAAU,EACV1sE,MAAO,qBACP2sE,YAAa,aCzO7B,MAAMkpC,GAAY,IA5FlB,MACI,WAAA75G,GACIE,KAAK45G,MAAQ,IAAIv2G,IACjBrD,KAAK65G,MAAQ,IAAI1/F,GACrB,CAQA,OAAA2/F,CAAQ3mG,EAAM7N,EAAO,SACjB,MAAM+O,EAAM,GAAG/O,KAAQ6N,IAElBnT,KAAK45G,MAAM7/F,IAAI1F,IAChBrU,KAAK45G,MAAM90G,IAAIuP,EAAK,IAGxB,MAAMulC,EAAO55C,KAAK45G,MAAM/0G,IAAIwP,GAG5B,GAAIulC,EAAK70C,OAAS,EAAG,CACjB,MAAMooG,EAAQvzD,EAAKc,MAEnB,OADA16C,KAAK65G,MAAMvoE,IAAI67D,GACRA,CACX,CAGA,IAAI4M,EACJ,OAAQz0G,GACJ,IAAK,UACDy0G,EAAW,IAAIl4D,aAAa1uC,GAC5B,MACJ,IAAK,QACD4mG,EAAW,IAAItpB,WAAWt9E,GAC1B,MACJ,QACI4mG,EAAW,IAAIxtG,MAAM4G,GAAM6lC,KAAK,GAIxC,OADAh5C,KAAK65G,MAAMvoE,IAAIyoE,GACRA,CACX,CAMA,OAAAxwE,CAAQ4jE,GACJ,IAAKntG,KAAK65G,MAAM9/F,IAAIozF,GAChB,OAGJntG,KAAK65G,MAAMtoE,OAAO47D,GAGlB,IAAI7nG,EAAO,QACP6nG,aAAiBtrD,aAAcv8C,EAAO,UACjC6nG,aAAiB1c,aAAYnrF,EAAO,SAE7C,MACM+O,EAAM,GAAG/O,KADF6nG,EAAMpoG,SAKfooG,EAAMn0D,KAAK,GAMVh5C,KAAK45G,MAAM7/F,IAAI1F,IAChBrU,KAAK45G,MAAM90G,IAAIuP,EAAK,IAGxB,MAAMulC,EAAO55C,KAAK45G,MAAM/0G,IAAIwP,GACxBulC,EAAK70C,OAAS,IACd60C,EAAK93C,KAAKqrG,EAElB,CAKA,KAAAjrG,GACIlC,KAAK45G,MAAM13G,QACXlC,KAAK65G,MAAM33G,OACf,GCxFG,MAAM83G,GACT,WAAAl6G,CAAYm6G,GACRj6G,KAAKi6G,QAAUA,EAGfj6G,KAAKkxE,iBAAmB,EACxBlxE,KAAKmxE,YAAc,EACnBnxE,KAAKk6G,mBAAoB,EACzBl6G,KAAKm6G,oBAAsB,EAC3Bn6G,KAAKo6G,aAAe,GAGpBp6G,KAAKq6G,WAAa,EAClBr6G,KAAKs6G,cAAgB,EACrBt6G,KAAKu6G,eAAiB,EAGtBv6G,KAAKw6G,iBAAkB,EACvBx6G,KAAKy6G,kBAAoB,EACzBz6G,KAAK06G,eAAiB,IACtB16G,KAAK26G,kBAAoB,EACzB36G,KAAK46G,qBAAuB,CAChC,CAOA,qBAAAC,CAAsBviF,GAElB,IAAKA,GAA4B,IAAlBA,EAAOvzB,OAClB,OAAO/E,KAAKi6G,QAAQa,yBAIxB,GAAI96G,KAAKi6G,QAAQc,eAAiB/6G,KAAKi6G,QAAQc,cAAcC,oBAAsBh7G,KAAKi6G,QAAQc,cAAcC,mBAAmBj2G,OAAS,EAAG,CACzI/E,KAAKi6G,QAAQgB,cAAgB,IAAIj7G,KAAKi6G,QAAQc,cAAcC,oBAY5D,IAAIE,EAAoB,EACpBC,EAAY,EAGhB,IAAK,IAAIx/D,EAAI,EAAGA,GAAK,GAAKA,EAAI37C,KAAKi6G,QAAQgB,cAAcl2G,OAAQ42C,IAC7Du/D,GAAqBl7G,KAAKi6G,QAAQgB,cAAct/D,GAChDw/D,IAEAA,EAAY,IACZD,GAAqBC,GAIpBn7G,KAAKi6G,QAAQmB,kBACdp7G,KAAKi6G,QAAQmB,gBAAkB,GAC/Bp7G,KAAKi6G,QAAQoB,eAAiB,GAIlCr7G,KAAKi6G,QAAQmB,gBAAgBt5G,KAAKo5G,GAC9Bl7G,KAAKi6G,QAAQmB,gBAAgBr2G,OAAS,IACtC/E,KAAKi6G,QAAQmB,gBAAgBp2G,QAIjC,MAAMs2G,EAAUt7G,KAAKi6G,QAAQmB,gBAAgBztD,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAAKxH,KAAKi6G,QAAQmB,gBAAgBr2G,OAKjGw2G,EAAmBv7G,KAAKi6G,QAAQc,eAAiB/6G,KAAKi6G,QAAQc,cAAcS,iBAMlF,GAHgBN,EAA8B,KAAVI,GACrBJ,GAHMK,EAAmB,IAAO,KAKlC,CAET,MAAME,EAAmBF,EAAmB,EAAI,EAChDv7G,KAAKq6G,WAAazzG,KAAKkB,IAAI,GAAMozG,EAAoBI,GAAWG,GAChEz7G,KAAKi6G,QAAQoB,eAAiB,EAClC,MAAWr7G,KAAKi6G,QAAQoB,eAAiB,GACrCr7G,KAAKi6G,QAAQoB,iBACbr7G,KAAKq6G,YAAc,IAEnBr6G,KAAKq6G,WAAa,EAuBjBr6G,KAAKi6G,QAAQyB,kBACd17G,KAAKi6G,QAAQyB,gBAAkB,GAC/B17G,KAAKi6G,QAAQ0B,oBAAsB,GAEnC37G,KAAKi6G,QAAQ2B,eAAiB,EAC9B57G,KAAKi6G,QAAQ4B,cAAcx/F,QAC3Brc,KAAKi6G,QAAQ6B,YAAc,EAG3B97G,KAAKi6G,QAAQ8B,eAAiB,GAC9B/7G,KAAKi6G,QAAQ+B,sBAAwB,KACrCh8G,KAAKi6G,QAAQgC,wBAA0B,EACvCj8G,KAAKi6G,QAAQiC,iBAAmB,EAChCl8G,KAAKi6G,QAAQkC,qBAAuB,GACpCn8G,KAAKi6G,QAAQmC,qBAAsB,GAIvC,MAAMC,EAAkB,IAAIr8G,KAAKi6G,QAAQgB,eAGzC,IAAIqB,EAAe,EACfC,EAAW,EAEf,GAAIv8G,KAAKi6G,QAAQyB,gBAAgB32G,OAAS,EAAG,CACzC,MAAMy3G,EAAex8G,KAAKi6G,QAAQyB,gBAAgB17G,KAAKi6G,QAAQyB,gBAAgB32G,OAAS,GAGxF,IAAK,IAAI42C,EAAI,EAAGA,GAAK,GAAKA,EAAI0gE,EAAgBt3G,OAAQ42C,IAAK,CACvD,MAAMqM,EAAOq0D,EAAgB1gE,GAAK6gE,EAAa7gE,GAC3CqM,EAAO,IAAGu0D,GAAYv0D,EAC9B,CAIA,IAAK,IAAIrM,EAAI,EAAGA,GAAK,IAAMA,EAAI0gE,EAAgBt3G,OAAQ42C,IAAK,CACxD,MAAMqM,EAAOq0D,EAAgB1gE,GAAK6gE,EAAa7gE,GAC3CqM,EAAO,IAGPs0D,GAAgBt0D,GADArM,GAAK,GAAKA,GAAK,GAAM,EAAM,GAGnD,CAGI4gE,EAAW,MACXD,GAAgB,GAExB,CAeA,GAZAt8G,KAAKi6G,QAAQyB,gBAAgB55G,KAAKu6G,GAC9Br8G,KAAKi6G,QAAQyB,gBAAgB32G,OAAS,IACtC/E,KAAKi6G,QAAQyB,gBAAgB12G,QAIjChF,KAAKi6G,QAAQ0B,oBAAoB75G,KAAKw6G,GAClCt8G,KAAKi6G,QAAQ0B,oBAAoB52G,OAAS,IAC1C/E,KAAKi6G,QAAQ0B,oBAAoB32G,QAIjChF,KAAKi6G,QAAQ0B,oBAAoB52G,QAAU,GAAI,CAC/C,MAAM03G,EAAS,IAAIz8G,KAAKi6G,QAAQ0B,qBAAqBr9D,KAAK,CAACC,EAAG/2C,IAAM+2C,EAAI/2C,GAClEk1G,EAASD,EAAO71G,KAAKgJ,MAAM6sG,EAAO13G,OAAS,IAC3C43G,EAAOF,EAAO9uD,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAAKi1G,EAAO13G,OAGxD/E,KAAKi6G,QAAQ2B,eAAiBc,EAA2B,IAAjBC,EAAOD,EACnD,CAIA,MAAME,EAAeN,EAA6C,IAA9Bt8G,KAAKi6G,QAAQ2B,gBAAwBU,EAAe,IAClFO,EAAcP,EAA6C,EAA9Bt8G,KAAKi6G,QAAQ2B,gBAAwBU,EAAe,IASvF,GANIM,IACA58G,KAAK26G,kBAAoB,EACzB36G,KAAKi6G,QAAQ6C,eAAiB,IAI9BD,EAAa,CACb,MAAMtqG,EAAM6H,YAAY7H,MAGlBwqG,EAAgB,CAClBzqG,KAAMC,EACNob,SAAU2uF,GAAgBt8G,KAAKi6G,QAAQ2B,gBAAkB,GACzDoB,WAAYT,GAEhBv8G,KAAKi6G,QAAQ8B,eAAej6G,KAAKi7G,GAE7B/8G,KAAKi6G,QAAQ8B,eAAeh3G,OAAS,IACrC/E,KAAKi6G,QAAQ8B,eAAe/2G,QAIhChF,KAAKi6G,QAAQ4B,cAAcoB,SAAS1qG,EAAK+pG,EAE7C,CAGAt8G,KAAKi6G,QAAQ4B,cAAclhG,OAAOP,YAAY7H,OAC9CvS,KAAKi6G,QAAQ6B,YAAc97G,KAAKi6G,QAAQ4B,cAAcC,YACtD97G,KAAKi6G,QAAQiD,cAAgBl9G,KAAKi6G,QAAQ4B,cAAcqB,cAGpDl9G,KAAKi6G,QAAQ6B,YAAc,GAAK97G,KAAKi6G,QAAQiD,cAAgB,IAEzDl9G,KAAKi6G,QAAQkD,qBACbn9G,KAAKi6G,QAAQkD,oBAAqB,GAItCn9G,KAAK26G,kBAAoB,GACzB36G,KAAK26G,oBAIL36G,KAAKi6G,QAAQ6C,eAAiB,IAC9B98G,KAAKi6G,QAAQ6C,gBAAkB,KAInC98G,KAAKs6G,cAAgBgC,EAMrBt8G,KAAKi6G,QAAQmD,YAAYp9G,KAAKi6G,QAAQoD,cAAgBr9G,KAAKq6G,WAC3Dr6G,KAAKi6G,QAAQqD,aAAat9G,KAAKi6G,QAAQoD,cAAgBr9G,KAAKs6G,cAC5Dt6G,KAAKi6G,QAAQoD,cAAgBr9G,KAAKi6G,QAAQoD,aAAe,GAAKr9G,KAAKi6G,QAAQmD,YAAYr4G,OAGvE/E,KAAKi6G,QAAQmD,YAAYzvD,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAAKxH,KAAKi6G,QAAQmD,YAAYr4G,OAC9E/E,KAAKi6G,QAAQqD,aAAa3vD,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAAKxH,KAAKi6G,QAAQqD,aAAav4G,OAGlG/E,KAAKi6G,QAAQsD,iBAAmBv9G,KAAKi6G,QAAQoB,eAAiB,EAQ9Dr7G,KAAKi6G,QAAQuD,kBAAoBx9G,KAAKi6G,QAAQuD,mBAAqB,EAEnEx9G,KAAKi6G,QAAQuD,kBAAoBx9G,KAAKs6G,cAGtCt6G,KAAKk6G,kBAAoBl6G,KAAK26G,kBAAoB,CAEtD,CAIA,MAAM8C,EAAmBz9G,KAAKi6G,QAAQgB,eAAiBj7G,KAAKi6G,QAAQgB,cAAchiC,KAAK+P,GAAKA,EAAI,KAsChG,GArCKhpF,KAAKi6G,QAAQc,eAAkB0C,IAG5Bz9G,KAAKkxE,iBAAmB,KACxBlxE,KAAKi6G,QAAQsD,kBAAmB,EAChCv9G,KAAKq6G,WAAazzG,KAAKkB,IAAI,EAA6B,GAAxB9H,KAAKkxE,oBAGhClxE,KAAKi6G,QAAQoB,gBAAkBr7G,KAAKi6G,QAAQoB,gBAAkB,KAC/Dr7G,KAAKi6G,QAAQoB,eAAiB,KAE3Br7G,KAAKi6G,QAAQoB,eAAiB,IAErCr7G,KAAKi6G,QAAQoB,iBACbr7G,KAAKq6G,YAAc,IAInBr6G,KAAKmxE,YAAc,KACnBnxE,KAAKk6G,mBAAoB,EACzBl6G,KAAKs6G,cAAgBt6G,KAAKmxE,eAM7BssC,GAAoBz9G,KAAKkxE,iBAAmB,MAASlxE,KAAKi6G,QAAQsD,mBACnEv9G,KAAKi6G,QAAQsD,kBAAmB,EAChCv9G,KAAKq6G,WAAazzG,KAAKiB,IAAI7H,KAAKq6G,WAAoC,GAAxBr6G,KAAKkxE,oBAC5ClxE,KAAKi6G,QAAQoB,gBAAkBr7G,KAAKi6G,QAAQoB,gBAAkB,KAC/Dr7G,KAAKi6G,QAAQoB,eAAiB,OAKK,IAA1Br7G,KAAKkxE,kBAA0BlxE,KAAKq6G,WAAa,KAClDr6G,KAAKs6G,cAAgB,KAEjC,OAAOhiF,EAGX,MAAMolF,EAAW,GAmBjB,GAdI19G,KAAKi6G,QAAQsD,mBAET32G,KAAK8I,SAAW,MAChB1P,KAAKi6G,QAAQ0D,yBAEjB39G,KAAKi6G,QAAQ2D,iBAAmB,IAAO59G,KAAKi6G,QAAQ0D,qBAIpD39G,KAAKi6G,QAAQc,eAAiB/6G,KAAKm6G,oBAAsB,IACzDn6G,KAAKm6G,qBAAuB,IAI5Bn6G,KAAKk6G,mBAAqBtzG,KAAK8I,SAAW,GAAK,CAC/C1P,KAAKo6G,aAAe,GACpB,MAAMyD,EAAc,EAAIj3G,KAAKgJ,MAAsB,EAAhBhJ,KAAK8I,UACxC,IAAK,IAAIisC,EAAI,EAAGA,EAAIkiE,EAAaliE,IAC7B37C,KAAKo6G,aAAat4G,KAAK,CACnB+7C,MAAOj3C,KAAKgJ,MAAMhJ,KAAK8I,SAAW4oB,EAAOvzB,QACzCkJ,UAAW,IAAuB,IAAhBrH,KAAK8I,SACvB8F,MAAO,IAAuB,IAAhB5O,KAAK8I,UAG/B,CAGA1P,KAAKo6G,aAAep6G,KAAKo6G,aAAa55D,OAAOj5C,IACzCA,EAAE0G,WAAa1G,EAAEiO,MACVjO,EAAE0G,UAAY,MAGzB,IAAK,IAAI0tC,EAAI,EAAGA,EAAIrjB,EAAOvzB,OAAQ42C,IAAK,CACpC,MAAM3P,EAAQ1T,EAAOqjB,GAGrB,IAAK3P,QAA4B,IAAZA,EAAM3pC,QAAwC,IAAZ2pC,EAAM1pC,EAAmB,CAC5E,MAAM6c,EAASw8B,EAAIrjB,EAAOvzB,OAAU6B,KAAKgE,GAAK,EAC9C8yG,EAAS57G,KAAK,CACVO,EAAG,GAAwB,GAAlBuE,KAAK0E,IAAI6T,GAClB7c,EAAG,GAAwB,GAAlBsE,KAAKiE,IAAIsU,KAEtB,QACJ,CAGA,MAAM0D,EAAKmpB,EAAM3pC,EAlDD,GAmDVygB,EAAKkpB,EAAM1pC,EAnDO,GAoDlBygB,EAAWnc,KAAKkb,KAAKe,EAAKA,EAAKC,EAAKA,GACpC3D,EAAQvY,KAAKipB,MAAM/M,EAAID,GAGvBi7F,EAAkD,IAAlCl3G,KAAKib,IAAI7hB,KAAKkxE,kBAGpC,IAAI6sC,EAAa,EACbC,EAAc,EAElB,GAAIh+G,KAAKi6G,QAAQsD,iBAAkB,CAE/B,MAAMU,EAAY,EACZC,EAAoC,IAAlBl+G,KAAKq6G,WAC7B0D,EAAan3G,KAAKiE,IAAIsU,EAAQ8+F,EAAYj+G,KAAKi6G,QAAQ2D,iBAAmBM,EAG1EF,EAAcp3G,KAAKiE,IAAmC,GAA/B7K,KAAKi6G,QAAQ2D,iBAAyB59G,KAAKq6G,WAAa,GACnF,CAGA,IAAIlxF,EAAe,EACnB,MAAMg1F,EAAcn+G,KAAKo6G,aAAagE,KAAK72G,GAAKA,EAAEs2C,QAAUlC,GAC5D,GAAIwiE,EAAa,CAEb,MAAM9+D,EAA2B,KAAb76C,KAAK+N,MACnBsR,EAAUjd,KAAKiE,IAAIw0C,EAAkB,GAAJ1D,GAAW/0C,KAAK0E,IAAkB,GAAd+zC,GAC3Dl2B,EAAeg1F,EAAYlwG,UAAY4V,EAAU,EACrD,CAGA,MAAMw6F,EAAmB,EAAIP,EAAgBC,EAAaC,EAAc70F,EAElEqY,EAAcze,EAAWnc,KAAKiB,IAAI,GAAKw2G,GAE7CX,EAAS57G,KAAK,CACVO,EAxFY,GAwFEuE,KAAK0E,IAAI6T,GAASqiB,EAChCl/B,EAzFoB,GAyFNsE,KAAKiE,IAAIsU,GAASqiB,GAExC,CAEA,OAAOk8E,CACX,CAMA,mBAAAY,CAAoBj5G,GAChBrF,KAAKkxE,iBAAmBtqE,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAGzC,IAChDrF,KAAKk6G,kBAAoB70G,EAAQ,GACrC,CAMA,cAAAk5G,CAAel5G,GACXrF,KAAKmxE,YAAcvqE,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAGzC,IAC3CrF,KAAKk6G,kBAAoB70G,EAAQ,GACrC,CAMA,oBAAAm5G,CAAqBvD,GACbA,IACAj7G,KAAKq6G,WAAaY,EAAc58E,MAAQ,EACxCr+B,KAAKs6G,cAAgBW,EAAcwD,OAAS,EAC5Cz+G,KAAKu6G,eAAiBU,EAAczjG,MAAQ,EAEpD,CAOA,gBAAAknG,CAAiB1wG,EAAWrI,GACpBqI,EAAYrI,GACZ3F,KAAKw6G,iBAAkB,EACvBx6G,KAAKy6G,kBAAoBzsG,EACzBhO,KAAK46G,qBAAuB56G,KAAK26G,mBAC1B36G,KAAK46G,qBAAuB,EACnC56G,KAAK46G,wBAEL56G,KAAKy6G,mBAAqBz6G,KAAK06G,eAC3B16G,KAAKy6G,kBAAoB,MACzBz6G,KAAKw6G,iBAAkB,GAGnC,CAKA,QAAAhjE,GACI,MAAO,CACH05B,iBAAkBlxE,KAAKkxE,iBACvBC,YAAanxE,KAAKmxE,YAClB+oC,kBAAmBl6G,KAAKk6G,kBACxBC,oBAAqBn6G,KAAKm6G,oBAC1BK,gBAAiBx6G,KAAKw6G,gBACtBC,kBAAmBz6G,KAAKy6G,kBAEhC,CAKA,KAAAp+F,GACIrc,KAAKkxE,iBAAmB,EACxBlxE,KAAKmxE,YAAc,EACnBnxE,KAAKk6G,mBAAoB,EACzBl6G,KAAKm6G,oBAAsB,EAC3Bn6G,KAAKo6G,aAAe,GACpBp6G,KAAKw6G,iBAAkB,EACvBx6G,KAAKy6G,kBAAoB,CAC7B,EC3eG,MAAMkE,GACT,WAAA7+G,GAEIE,KAAK4+G,OAAS,GACd5+G,KAAK6+G,UAAY,EAGjB7+G,KAAKsY,UAAW,EAChBtY,KAAK8+G,WAAa,EAClB9+G,KAAKq1C,UAAY,EACjBr1C,KAAKyuC,aAAe,EAGpBzuC,KAAK++G,YAAc,GACnB/+G,KAAKg/G,iBAAmB,IAGxBh/G,KAAKi/G,OAAS,GACdj/G,KAAKk/G,OAAS,IACdl/G,KAAKm/G,qBAAuB,GAC5Bn/G,KAAKo/G,sBAAwB,CACzBn9E,KAAM,CAAEn6B,IAAK,GAAID,IAAK,GAAIw3G,OAAQ,GAClC1jF,OAAQ,CAAE7zB,IAAK,GAAID,IAAK,IAAKw3G,OAAQ,GACrCn9E,KAAM,CAAEp6B,IAAK,IAAKD,IAAK,IAAKw3G,OAAQ,IACpCC,SAAU,CAAEx3G,IAAK,IAAKD,IAAK,IAAKw3G,OAAQ,IAEhD,CAKA,WAAAE,CAAYz3E,EAAK5wB,EAAc,GAC3B,MAAO,CACH4wB,IAAKA,EACL5wB,YAAaA,EACbsoG,aAAc13E,EAAM5wB,EACpB8X,MAAO,EACP8vF,WAAY,GACZz+C,KAAM,EACNC,OAAQ,EACR7xB,aAAcr0B,YAAY7H,MAC1BktG,aAAc,KAAS33E,EAAM5wB,GAErC,CAKA,gBAAAwoG,CAAiBC,EAAe,KAC5B3/G,KAAK4+G,OAAS,GAGd,IAAI9vE,EAAe,CAAC,GAIhBA,EAFA6wE,EAAe,KAGRA,EAAe,IADP,CAAC,GAAK,IAAM,GAIpBA,EAAe,GAEP,CAAC,EAAG,IAAK,GAGT,CAAC,GAAK,EAAG,KAG5B7wE,EAAaptC,QAAQk+G,IACjB,MAAMC,EAAQ7/G,KAAKu/G,YAAYI,EAAcC,GAEzCD,EAAeC,EAAM,MACrBC,EAAMf,WAAa,IAEvB9+G,KAAK4+G,OAAO98G,KAAK+9G,KAIjBF,EAAe,MACf3/G,KAAK4+G,OAAO98G,KAAK9B,KAAKu/G,YAAYI,EAAe,EAAG,IACpD3/G,KAAK4+G,OAAO98G,KAAK9B,KAAKu/G,YAAYI,EAAe,EAAG,MAE5D,CAKA,WAAAG,CAAYnyF,EAAUrb,EAAO8H,YAAY7H,OAQrC,GANAvS,KAAK++G,YAAYj9G,KAAK,CAAE6rB,WAAUrb,SAC9BtS,KAAK++G,YAAYh6G,OAAS/E,KAAKg/G,kBAC/Bh/G,KAAK++G,YAAY/5G,UAIjBhF,KAAK++G,YAAYh6G,OAAS,GAA9B,CAGA,IAAK/E,KAAKsY,UAAmC,IAAvBtY,KAAK4+G,OAAO75G,OAAc,CAC5C,MAAMg7G,EAAW//G,KAAKggH,iBACtBhgH,KAAK0/G,iBAAiBK,GACtB//G,KAAKsY,UAAW,CACpB,CAGItY,KAAKq1C,UAAY,GAAKr1C,KAAK8+G,WAAa,IAExC9+G,KAAK4+G,OAAOl9G,QAAQm+G,IAChB7/G,KAAKigH,WAAWJ,EAAOvtG,EAAMqb,KAI7B3tB,KAAK8+G,WAAa,KAClB9+G,KAAKkgH,eACLlgH,KAAKmgH,sBAKTngH,KAAK4+G,OAAOl9G,QAAQm+G,IAChB7/G,KAAKigH,WAAWJ,EAAOvtG,EAAMqb,KAIjC3tB,KAAKkgH,eAGLlgH,KAAKmgH,mBAhCwB,CAkCrC,CAKA,UAAAF,CAAWJ,EAAOO,EAAUC,GACxB,MAAMC,EAAoBF,EAAWP,EAAMpxE,aACrC8xE,EAAmBV,EAAMJ,aAIzBe,EAAY,EAD4E,EAA5E55G,KAAKib,IAAKy+F,EAAoBC,EAAoBA,EAAmB,IAOnFC,EAAY,IACZX,EAAMx/C,OACNw/C,EAAMf,WAAal4G,KAAKkB,IAAI,EAAG+3G,EAAMf,WAAa,IAG9C0B,EAAY,MACZX,EAAMpxE,aAAe2xE,IAElBI,EAAY,KACnBX,EAAMv/C,SACNu/C,EAAMf,WAAal4G,KAAKiB,IAAI,EAAGg4G,EAAMf,WAAa,MAItDe,EAAMf,YAAc,IACxB,CAKA,YAAAoB,GAEIlgH,KAAK4+G,OAAOtgE,KAAK,CAACC,EAAG/2C,IAAMA,EAAEs3G,WAAavgE,EAAEugE,YAGxC9+G,KAAK4+G,OAAO75G,OAAS/E,KAAK6+G,YAC1B7+G,KAAK4+G,OAAS5+G,KAAK4+G,OAAO14G,MAAM,EAAGlG,KAAK6+G,YAI5C,MAAM4B,EAAYzgH,KAAK4+G,OAAO,GAC9B,GAAI6B,EAAU3B,WAAa,IAAO9+G,KAAK4+G,OAAO75G,OAAS/E,KAAK6+G,UAAW,CAEnE,MAAM6B,EAAY,EAA4B,KAAvB95G,KAAK8I,SAAW,IACjCixG,EAAW3gH,KAAKu/G,YAClBkB,EAAU34E,IAAM44E,EAChBD,EAAUvpG,aAEdypG,EAAS7B,WAAoC,GAAvB2B,EAAU3B,WAChC9+G,KAAK4+G,OAAO98G,KAAK6+G,EACrB,CAGA3gH,KAAK4+G,OAAS5+G,KAAK4+G,OAAOp+D,OAAOjC,GAAKA,EAAEugE,WAAa,GACzD,CAKA,gBAAAqB,GACI,GAA2B,IAAvBngH,KAAK4+G,OAAO75G,OAAc,OAE9B,MAAM07G,EAAYzgH,KAAK4+G,OAAO,GAG9B,OAAI6B,EAAU3B,WAAa9+G,KAAKm/G,sBAENn/G,KAAK4+G,OAAOp+D,OAAOjC,GACrC33C,KAAKib,IAAI08B,EAAEihE,aAAeiB,EAAUjB,cAAgBiB,EAAUjB,aAAe,KAI/Dz6G,QAAU6B,KAAKkB,IAAI,EAAwB,GAArB9H,KAAK4+G,OAAO75G,UAEhD/E,KAAKq1C,UAAYzuC,KAAKgB,MAAM64G,EAAU34E,KACtC9nC,KAAK8+G,WAAa2B,EAAU3B,WAG5B9+G,KAAK4gH,yBAEE,EAKnB,CAKA,qBAAAA,GACI,IAAK,MAAOhxF,EAAO5J,KAAWjgB,OAAO4F,QAAQ3L,KAAKo/G,uBAC9C,GAAIp/G,KAAKq1C,WAAarvB,EAAOle,KAAO9H,KAAKq1C,UAAYrvB,EAAOne,KAEjC7H,KAAK4+G,OAAOR,KAAK7/D,GACpC33C,KAAKib,IAAI08B,EAAEzW,IAAM9nC,KAAKq1C,WAAa,GACnCzuC,KAAKib,IAAI08B,EAAErnC,YAAc8O,EAAOq5F,QAAU,IAI1C,OAAOr5F,EAAOq5F,OAI1B,OAAO,CACX,CAKA,cAAAW,GACI,GAAIhgH,KAAK++G,YAAYh6G,OAAS,EAAG,OAAO,IAGxC,MAAM87G,EAAc7gH,KAAK++G,YAAY74G,OAAM,IACrC24B,EAAY,GAElB,IAAK,IAAI8c,EAAI,EAAGA,EAAIklE,EAAY97G,OAAQ42C,IACpC9c,EAAU/8B,KAAK++G,EAAYllE,GAAGrpC,KAAOuuG,EAAYllE,EAAE,GAAGrpC,MAG1D,GAAyB,IAArBusB,EAAU95B,OAAc,OAAO,IAGnC85B,EAAUyf,KAAK,CAACC,EAAG/2C,IAAM+2C,EAAI/2C,GAI7B,IAAIs5G,EAAe,IAHJjiF,EAAUj4B,KAAKgJ,MAAMivB,EAAU95B,OAAS,IAYvD,OANI+7G,EAAe9gH,KAAKi/G,OACpB6B,GAAgB,EACTA,EAAe9gH,KAAKk/G,SAC3B4B,GAAgB,GAGbl6G,KAAKiB,IAAI7H,KAAKi/G,OAAQr4G,KAAKkB,IAAI9H,KAAKk/G,OAAQ4B,GACvD,CAKA,KAAAzkG,CAAM0kG,EAAU,MACZ/gH,KAAK4+G,OAAS,GACd5+G,KAAK8+G,WAAa,EAClB9+G,KAAKq1C,UAAY,EACjBr1C,KAAK++G,YAAc,GAEfgC,GACA/gH,KAAK0/G,iBAAiBqB,EAE9B,CAKA,MAAAtuE,GACI,OAAIzyC,KAAKq1C,UAAY,GAAKr1C,KAAK8+G,WAAa,GACjC9+G,KAAKq1C,UAGZr1C,KAAK4+G,OAAO75G,OAAS,EACd6B,KAAKgB,MAAM5H,KAAK4+G,OAAO,GAAG92E,KAG9B,CACX,CAKA,cAAAk5E,GACI,GAAIhhH,KAAK4+G,OAAO75G,OAAS,EAAG,CACxB,MAAM07G,EAAYzgH,KAAK4+G,OAAO,GAGxB92E,EAAM24E,EAAU34E,IACtB,IAAK,MAAOlY,EAAO5J,KAAWjgB,OAAO4F,QAAQ3L,KAAKo/G,uBAC9C,GAAIt3E,GAAO9hB,EAAOle,KAAOggC,EAAM9hB,EAAOne,IAClC,OAAOme,EAAOq5F,OAItB,OAAOoB,EAAUvpG,WACrB,CACA,OAAO,CACX,CAKA,SAAA+jF,GACI,MAAO,CACHnzD,IAAK9nC,KAAKyyC,SACVv7B,YAAalX,KAAKghH,iBAClBlC,WAAY9+G,KAAK8+G,WACjBmC,OAAQjhH,KAAKq1C,UAAY,GAAKr1C,KAAK8+G,WAAa,GAChDoC,WAAYlhH,KAAK4+G,OAAO75G,OACxBo8G,UAAWnhH,KAAK4+G,OAAO14G,MAAM,EAAG,GAAGgB,IAAIq3C,IAAC,CACpCzW,IAAKlhC,KAAKgB,MAAM22C,EAAEzW,KAClB5wB,YAAaqnC,EAAErnC,YACf4nG,WAAYvgE,EAAEugE,WAAWj9C,QAAQ,MAG7C,ECpVG,MAAMu/C,GACT,WAAAthH,GAEIE,KAAKqhH,eAAiB,GACtBrhH,KAAK+7G,eAAiB,GACtB/7G,KAAKshH,cAAgB,EACrBthH,KAAK47G,eAAiB,GAGtB57G,KAAK87G,YAAc,EACnB97G,KAAKk9G,cAAgB,EACrBl9G,KAAKuhH,mBAAqB,EAC1BvhH,KAAKwhH,uBAAyB,IAG9BxhH,KAAKyhH,WAAa,GAClBzhH,KAAK0hH,aAAc,EACnB1hH,KAAK2hH,eAAiB,EAGtB3hH,KAAK4hH,cAAgB,IAAIjD,GACzB3+G,KAAK6hH,mBAAoB,EAGzB7hH,KAAKiuC,cAAgB,MACrBjuC,KAAKg8G,sBAAwB,KAC7Bh8G,KAAKi8G,wBAA0B,EAC/Bj8G,KAAKm8G,qBAAuB,GAC5Bn8G,KAAKo8G,qBAAsB,EAC3Bp8G,KAAK8hH,cAAgB,EACrB9hH,KAAK+hH,cAAgB,EACrB/hH,KAAKk8G,iBAAmB,EAGxBl8G,KAAKgiH,kBAAmB,EACxBhiH,KAAKiiH,gBAAkB,EAGvBjiH,KAAKm9G,oBAAqB,CAC9B,CAMA,YAAA+E,GAEI,GAAIliH,KAAK6hH,kBAAmB,CACxB,MAAMM,EAAcniH,KAAK4hH,cAAc3mB,YACvC,GAAIknB,EAAYlB,QAAUkB,EAAYrD,WAAa,GAa/C,OAXA9+G,KAAK87G,YAAcqG,EAAYr6E,IAC/B9nC,KAAKk9G,cAAgBiF,EAAYrD,WACjC9+G,KAAK0hH,aAAc,EACnB1hH,KAAK2hH,eAAiBQ,EAAYr6E,IAGlC9nC,KAAKyhH,WAAW3/G,KAAK9B,KAAK87G,aACtB97G,KAAKyhH,WAAW18G,OAAS,IACzB/E,KAAKyhH,WAAWz8G,QAGbhF,KAAK87G,YACT,GAAIqG,EAAYr6E,IAAM,GAAKq6E,EAAYrD,WAAa,GAUvD,OARA9+G,KAAK87G,YAAcqG,EAAYr6E,IAC/B9nC,KAAKk9G,cAAgBiF,EAAYrD,WAG7BqD,EAAYrD,WAAa,KACzB9+G,KAAK0hH,aAAc,GAGhB1hH,KAAK87G,WAEpB,CAGA,GAAI97G,KAAKqhH,eAAet8G,OAAS,EAAG,OAAO/E,KAAK87G,YAGhD,MAAMsG,EAAiBpiH,KAAKqhH,eAAen7G,OAAM,IAG3Cm8G,EAAkBriH,KAAKsiH,oBAAoBF,GACjD,GAA+B,IAA3BC,EAAgBt9G,OAAc,OAAO/E,KAAK87G,YAG9C,MAAMyG,EAAgBF,EAAgB,GAChCG,EAAe57G,KAAKgB,MAAM,IAAQ26G,EAAcnlC,UAGtD,IAAKp9E,KAAK0hH,aAAe1hH,KAAKyhH,WAAW18G,OAAS,EAAG,CAEjD,MAAM09G,EAAaziH,KAAKyhH,WAAWv7G,OAAM,GACnCw8G,EAAYD,EAAW90D,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAAKi7G,EAAW19G,OACpD09G,EAAW90D,OAAO,CAACC,EAAK9lB,IAAQ8lB,EAAMhnD,KAAKC,IAAIihC,EAAM46E,EAAW,GAAI,GAAKD,EAAW19G,OAGtF,IACX/E,KAAK2hH,eAAiB/6G,KAAKgB,MAAM86G,GACjC1iH,KAAK0hH,aAAc,EACnB1hH,KAAKk9G,cAAgB,EAE7B,CAGA,IAAIyF,EAAWH,EA6Bf,GA5BIxiH,KAAK0hH,cACY1hH,KAAK4iH,sBAAsBJ,EAAcxiH,KAAK2hH,iBAG3DgB,EAAW3iH,KAAK2hH,eAChB3hH,KAAKk9G,cAAgBt2G,KAAKkB,IAAI,EAAK9H,KAAKk9G,cAAgB,MAGxDl9G,KAAKk9G,eAAiB,GAGlBl9G,KAAKk9G,cAAgB,IAAOqF,EAAc50F,SAAW,IACrD3tB,KAAK2hH,eAAiBa,EACtBxiH,KAAKk9G,cAAgB,IAGrByF,EAAW3iH,KAAK2hH,iBAM5B3hH,KAAKyhH,WAAW3/G,KAAK6gH,GACjB3iH,KAAKyhH,WAAW18G,OAAS,IACzB/E,KAAKyhH,WAAWz8G,QAIK,IAArBhF,KAAK87G,YACL97G,KAAK87G,YAAc6G,MAChB,CACH,MAAME,EAAY7iH,KAAK0hH,YAAc,EAAI,EACnC15D,EAAO26D,EAAW3iH,KAAK87G,YACzBl1G,KAAKib,IAAImmC,IAAS66D,EAClB7iH,KAAK87G,YAAc6G,EAEnB3iH,KAAK87G,aAAel1G,KAAKygB,KAAK2gC,GAAQ66D,CAE9C,CASA,OANItiH,OAAOoyC,mBAAqBpyC,OAAOoyC,kBAAkBM,YAChD1yC,OAAO4yC,sCACR5yC,OAAOoyC,kBAAkBM,UAAUjzC,KAAK87G,cAIzC97G,KAAK87G,WAChB,CAOA,mBAAAwG,CAAoBzjF,GAChB,MAAMikF,EAAa,GAGnB,IAAK,IAAI30F,IAAc,CAAC,EAAG,EAAG,GAAI,CAC9B,MAAM40F,EAAgBlkF,EAAU33B,IAAIy0C,GAAKA,EAAIxtB,GAGvC60F,EAAWhjH,KAAKijH,iBAAiBF,GAEvC,IAAK,IAAIG,KAAWF,EAAU,CAC1B,MACMG,EADcD,EAAQrkF,UAAU8uB,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAAK07G,EAAQrkF,UAAU95B,OAChDopB,EAG/BR,EAAYu1F,EAAQrkF,UAAU95B,OAAS85B,EAAU95B,OAAUm+G,EAAQE,YAGnEt7E,EAAM,IAAQq7E,EAEdE,EAAkBv7E,GAAO,KAAOA,GAAO,IAAO,GAAM,EACtDA,GAAO,IAAMA,GAAO,KACpBg7E,EAAWhhH,KAAK,CACZs7E,SAAU+lC,EACVx1F,SAAUA,EAAW01F,EACrBl1F,WAAYA,GAGxB,CACJ,CAGA,OAAO20F,EAAWxkE,KAAK,CAACC,EAAG/2C,IAAMA,EAAEmmB,SAAW4wB,EAAE5wB,SACpD,CAOA,gBAAAs1F,CAAiBpkF,GACb,MAAM49E,EAAS,IAAI59E,GAAWyf,KAAK,CAACC,EAAG/2C,IAAM+2C,EAAI/2C,GAC3Cw7G,EAAW,GACjB,IAAIM,EAAiB,CAAC7G,EAAO,IAE7B,IAAK,IAAI9gE,EAAI,EAAGA,EAAI8gE,EAAO13G,OAAQ42C,IAAK,CACpC,MAAM1J,EAAgC,IAApBqxE,EAAe,GACjC,GAAI7G,EAAO9gE,GAAK2nE,EAAe,IAAMrxE,EACjCqxE,EAAexhH,KAAK26G,EAAO9gE,QACxB,CACH,GAAI2nE,EAAev+G,QAAU,EAAG,CAE5B,MAAMqtG,EAAMkR,EAAe31D,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAAK87G,EAAev+G,OAEjEq+G,EAAc,GAAK,EADRE,EAAe31D,OAAO,CAACC,EAAKhgD,IAAQggD,EAAMhnD,KAAKC,IAAI+G,EAAMwkG,EAAK,GAAI,GAAKkR,EAAev+G,QAC9DqtG,EAAMA,IAE/C4Q,EAASlhH,KAAK,CACV+8B,UAAWykF,EACXF,YAAaA,GAErB,CACAE,EAAiB,CAAC7G,EAAO9gE,GAC7B,CACJ,CAGA,GAAI2nE,EAAev+G,QAAU,EAAG,CAC5B,MAAMqtG,EAAMkR,EAAe31D,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAAK87G,EAAev+G,OAEjEq+G,EAAc,GAAK,EADRE,EAAe31D,OAAO,CAACC,EAAKhgD,IAAQggD,EAAMhnD,KAAKC,IAAI+G,EAAMwkG,EAAK,GAAI,GAAKkR,EAAev+G,QAC9DqtG,EAAMA,IAC/C4Q,EAASlhH,KAAK,CACV+8B,UAAWykF,EACXF,YAAaA,GAErB,CAEA,OAAOJ,CACX,CAQA,qBAAAJ,CAAsBW,EAAMC,GACxB,MAAMxxF,EAAQprB,KAAKiB,IAAI07G,EAAMC,GAAQ58G,KAAKkB,IAAIy7G,EAAMC,GAKpD,MADqB,CAAC,EAAG,IAAK,MAAO,MACjBvqC,KAAK5xE,GAAKT,KAAKib,IAAImQ,EAAQ3qB,GAJ7B,IAKtB,CAMA,mBAAAo8G,GAEI,MAAMC,EAAY1jH,KAAKm9G,mBAAqB,EAAI,GAChD,GAAyB,IAArBn9G,KAAK87G,aAAqB97G,KAAK+7G,eAAeh3G,OAAS2+G,EACvD,OAAO1jH,KAAKiuC,cAIhB,GAAIjuC,KAAKo8G,sBAAwBp8G,KAAKm9G,mBAClC,OAAOn9G,KAAKg8G,uBAAyBh8G,KAAKiuC,cAG9C,MAAMwxE,EAAe,IAAQz/G,KAAK87G,YAK5B6H,EAAW,IAAIp3G,MADC,GACoBysC,KAAK,GAAG9xC,IAAI,KAAA,CAClDymB,SAAU,EACVqvF,WAAY,EACZp4G,MAAO,KAILg/G,EAAe5jH,KAAK+7G,eAAe71G,OAAOU,KAAKkB,IAAI,GAAI9H,KAAK+7G,eAAeh3G,SACjF,GAA4B,IAAxB6+G,EAAa7+G,OAAc,OAAO/E,KAAKiuC,cAC3C,MAAM51B,EAAYurG,EAAa,GAAGtxG,KAElC,IAAK,IAAIuxG,KAASD,EAAc,CAC5B,MACME,GADiBD,EAAMvxG,KAAO+F,GACGonG,EAdrB,EAeZsE,EAAWn9G,KAAKgB,MAAMk8G,GAfV,EAiBlBH,EAASI,GAAUp2F,UAAYk2F,EAAMl2F,SACrCg2F,EAASI,GAAU/G,YAAc6G,EAAM7G,YAAc,EACrD2G,EAASI,GAAUn/G,OACvB,CAIA,IAAK,IAAIo/G,KAAOL,EACRK,EAAIp/G,MAAQ,IACZo/G,EAAIr2F,UAAYq2F,EAAIp/G,MACpBo/G,EAAIhH,YAAcgH,EAAIp/G,OAM9B,IAAIq/G,EAAc,MAIdN,EAAS,GAAGh2F,SAAkC,EAAvBg2F,EAAS,GAAGh2F,UACnCg2F,EAAS,GAAGh2F,SAAkC,EAAvBg2F,EAAS,GAAGh2F,UACnCg2F,EAAS,GAAG/+G,MAA4B,GAApB++G,EAAS,GAAG/+G,OAER5E,KAAKkkH,iBAAiBN,EAAcnE,GACtC,KAClBwE,EAAc,OAKtBjkH,KAAKm8G,qBAAqBr6G,KAAKmiH,GAC3BjkH,KAAKm8G,qBAAqBp3G,OAAS,GACnC/E,KAAKm8G,qBAAqBn3G,QAI9B,MAAMm/G,EAAcnkH,KAAKm9G,mBAAqB,EAAI,EAClD,GAAIn9G,KAAKm8G,qBAAqBp3G,QAAUo/G,EAAa,CACjD,MAAMC,EAAS,CAAA,EACf,IAAK,IAAIC,KAAOrkH,KAAKm8G,qBACjBiI,EAAOC,IAAQD,EAAOC,IAAQ,GAAK,EAIvC,IAAIC,EAAa,MACbC,EAAW,EACf,IAAK,IAAKF,EAAKz/G,KAAUmB,OAAO4F,QAAQy4G,GAChCx/G,EAAQ2/G,IACRA,EAAW3/G,EACX0/G,EAAaD,GAKrB,GAAIE,GAAY,EAAG,CACfvkH,KAAKg8G,sBAAwBsI,EAC7BtkH,KAAKo8G,qBAAsB,EAC3Bp8G,KAAKi8G,wBAA0BsI,EAAW,EAGtChkH,OAAOoyC,mBAAqBpyC,OAAOoyC,kBAAkB3B,kBACrDzwC,OAAOoyC,kBAAkB3B,iBAAiBhxC,KAAKg8G,uBAKnD,MAAMxmE,EAAiBC,SAASC,eAAe,oBAC3CF,IACAA,EAAeG,YAAc31C,KAAKg8G,sBAE1C,CACJ,CAEA,OAAOh8G,KAAKg8G,uBAAyBh8G,KAAKiuC,aAC9C,CAQA,gBAAAi2E,CAAiBM,EAAQ/E,GAErB,IAAIgF,EAAc,EACdC,EAAc,EAElB,IAAK,IAAI/oE,EAAI,EAAGA,EAAI6oE,EAAOz/G,OAAS,EAAG42C,GAAK,EACxC,GAAIA,EAAI,EAAI6oE,EAAOz/G,OAAQ,CACvB2/G,IACA,MAAMC,EAAQH,EAAO7oE,GAAGhuB,UAAY62F,EAAO7oE,GAAGqhE,YAAc,GACtD4H,EAASJ,EAAO7oE,EAAI,GAAGhuB,UAAY62F,EAAO7oE,EAAI,GAAGqhE,YAAc,GAC/D5+E,EAAQomF,EAAO7oE,EAAI,GAAGhuB,UAAY62F,EAAO7oE,EAAI,GAAGqhE,YAAc,GAGhE2H,EAAiB,IAATC,GAAgBD,EAAgB,IAARvmF,GAChCqmF,GAER,CAGJ,OAAOC,EAAc,EAAID,EAAcC,EAAc,CACzD,CAQA,QAAAzH,CAAS3qG,EAAMqb,EAAUqvF,EAAa,GAMlC,GAJIh9G,KAAK6hH,mBACL7hH,KAAK4hH,cAAc9B,YAAYnyF,EAAUrb,GAGzCtS,KAAKshH,cAAgB,EAAG,CACxB,MAAMlkC,EAAW9qE,EAAOtS,KAAKshH,cAEzBlkC,EAAW,KAAOA,EAAW,MAC7Bp9E,KAAKqhH,eAAev/G,KAAKs7E,GACrBp9E,KAAKqhH,eAAet8G,OAAS,IAC7B/E,KAAKqhH,eAAer8G,QAGhC,CAEAhF,KAAK+7G,eAAej6G,KAAK,CAAEwQ,OAAMqb,WAAUqvF,eACvCh9G,KAAK+7G,eAAeh3G,OAAS,IAC7B/E,KAAK+7G,eAAe/2G,QAGxBhF,KAAKshH,cAAgBhvG,CACzB,CAMA,MAAAqI,CAAOpI,GAECA,EAAMvS,KAAKuhH,mBAAqBvhH,KAAKwhH,yBACrCxhH,KAAKkiH,eACLliH,KAAKyjH,sBACLzjH,KAAKuhH,mBAAqBhvG,EAElC,CAKA,yBAAAsyG,GACI,OAAI7kH,KAAK6hH,kBACE7hH,KAAK4hH,cAAcZ,iBAI1BhhH,KAAK87G,YAAc,GAAW,EAC9B97G,KAAK87G,YAAc,GAAW,EAC9B97G,KAAK87G,YAAc,KACnB97G,KAAK87G,YAAc,IADY,GAE5B,CACX,CAKA,KAAAz/F,GACIrc,KAAKqhH,eAAiB,GACtBrhH,KAAK+7G,eAAiB,GACtB/7G,KAAKshH,cAAgB,EACrBthH,KAAK87G,YAAc,EACnB97G,KAAKk9G,cAAgB,EACrBl9G,KAAKyhH,WAAa,GAClBzhH,KAAK0hH,aAAc,EACnB1hH,KAAK2hH,eAAiB,EACtB3hH,KAAKiuC,cAAgB,MACrBjuC,KAAKg8G,sBAAwB,KAC7Bh8G,KAAKi8G,wBAA0B,EAC/Bj8G,KAAKm8G,qBAAuB,GAGxBn8G,KAAK4hH,eACL5hH,KAAK4hH,cAAcvlG,QAEvBrc,KAAKo8G,qBAAsB,EAC3Bp8G,KAAKgiH,kBAAmB,EACxBhiH,KAAKm9G,oBAAqB,CAC9B,CAKA,YAAA2H,GACI,MAAO,CACHh9E,IAAK9nC,KAAK87G,YACVgD,WAAY9+G,KAAKk9G,cACjBjvE,cAAejuC,KAAKiuC,cACpB82E,UAAW/kH,KAAKgiH,iBAChBC,gBAAiBjiH,KAAKiiH,gBAE9B,EClfG,MAAM+C,GACT,WAAAllH,CAAYm6G,GACRj6G,KAAKi6G,QAAUA,EAGfj6G,KAAKyb,iBAAkB,EACvBzb,KAAKilH,oBAAsB,EAC3BjlH,KAAK0rF,mBAAqB,IAC1B1rF,KAAK0b,mBAAqB,EAC1B1b,KAAKklH,eAAiB,gBAGtBllH,KAAK8vE,aAAe,SACpB9vE,KAAK+vE,YAAc,KACnB/vE,KAAKmlH,cAAgB,KAGrBnlH,KAAKolH,WAAa,GAClBplH,KAAKqlH,aAAe,EAGpBrlH,KAAKslH,aAAe,KACpBtlH,KAAKszE,eAAiB,CAC1B,CAOA,eAAAiyC,CAAgBx1C,EAAajV,EAAU,IAE/B96D,KAAKyb,iBAAmBzb,KAAKolH,WAAWrgH,OAAS/E,KAAKqlH,aACtDrlH,KAAKolH,WAAWtjH,KAAK,CAAE0jH,MAAOz1C,EAAajV,aAI/C96D,KAAKmlH,cAAgBnlH,KAAK8vE,aAC1B9vE,KAAK+vE,YAAcA,EACnB/vE,KAAKyb,iBAAkB,EACvBzb,KAAKilH,oBAAsB7qG,YAAY7H,MACvCvS,KAAK0rF,mBAAqB5wB,EAAQtsD,UAAY,IAC9CxO,KAAKklH,eAAiBpqD,EAAQpvD,QAAU,gBACxC1L,KAAK0b,mBAAqB,EAG1B1b,KAAKslH,aAAetlH,KAAKylH,oBAAoBzlH,KAAK8vE,aAAcC,GACpE,CAMA,MAAAp1D,CAAO3H,GACH,IAAKhT,KAAKyb,gBAAiB,OAE3B,MACMV,EADMX,YAAY7H,MACFvS,KAAKilH,oBACrBS,EAAc9+G,KAAKkB,IAAI,EAAGiT,EAAU/a,KAAK0rF,oBAG/C1rF,KAAK0b,mBAAqB1b,KAAKuL,YAAYm6G,GAGvC1lH,KAAKslH,eACLtlH,KAAKszE,eAAiBtzE,KAAK2lH,wBAAwBD,IAInDA,GAAe,GACf1lH,KAAK2c,oBAEb,CAKA,kBAAAA,GAQI,GAPA3c,KAAK8vE,aAAe9vE,KAAK+vE,YACzB/vE,KAAK+vE,YAAc,KACnB/vE,KAAKyb,iBAAkB,EACvBzb,KAAK0b,mBAAqB,EAC1B1b,KAAKslH,aAAe,KAGhBtlH,KAAKolH,WAAWrgH,OAAS,EAAG,CAC5B,MAAM01E,EAAOz6E,KAAKolH,WAAWpgH,QAC7BhF,KAAKulH,gBAAgB9qC,EAAK+qC,MAAO/qC,EAAK3f,QAC1C,CACJ,CAQA,mBAAA2qD,CAAoBj5G,EAAMqQ,GA0BtB,MAxBoB,CAChB,eAAgB,CACZvX,KAAM,QACNuhD,YAAa,UACb++D,gBAAiB,IAErB,eAAgB,CACZtgH,KAAM,WACNuhD,YAAa,UACb++D,gBAAiB,IAErB,cAAe,CACXtgH,KAAM,QACNuhD,YAAa,UACb++D,gBAAiB,IAErB,cAAe,CACXtgH,KAAM,WACNuhD,YAAa,UACb++D,gBAAiB,KAIb,GAAGp5G,KAAQqQ,MACI,IAC/B,CAOA,uBAAA8oG,CAAwB98G,GACpB,IAAK7I,KAAKslH,aAAc,OAAO,EAE/B,OAAQtlH,KAAKslH,aAAahgH,MACtB,IAAK,QAED,OAAOuD,EAAW,GACD,EAAXA,EACA,EAAgB,EAAXA,EAEf,IAAK,QAED,OAAOjC,KAAKC,IAAI,EAAIgC,EAAU,GAElC,IAAK,WACL,IAAK,WAED,OAAOjC,KAAKiE,IAAIhC,EAAWjC,KAAKgE,IAEpC,QACI,OAAO,EAEnB,CAOA,WAAAW,CAAY9C,GACR,OAAQzI,KAAKklH,gBACT,IAAK,SAkBL,QACI,OAAOz8G,EAjBX,IAAK,aACD,OAAOA,EAAIA,EACf,IAAK,cACD,OAAOA,GAAK,EAAIA,GACpB,IAAK,gBACD,OAAOA,EAAI,GACL,EAAIA,EAAIA,GACF,EAAI,EAAIA,GAAKA,EAAnB,EACV,IAAK,cACD,OAAOA,EAAIA,EAAIA,EACnB,IAAK,eACD,QAAUA,EAAKA,EAAIA,EAAI,EAC3B,IAAK,iBACD,OAAOA,EAAI,GACL,EAAIA,EAAIA,EAAIA,GACXA,EAAI,IAAM,EAAIA,EAAI,IAAM,EAAIA,EAAI,GAAK,EAIxD,CAKA,UAAAo9G,GACI7lH,KAAKolH,WAAa,EACtB,CAKA,eAAAU,GACI,OAAO9lH,KAAKolH,WAAWrgH,OAAS,CACpC,CAKA,QAAAyyC,GACI,MAAO,CACH/7B,gBAAiBzb,KAAKyb,gBACtBq0D,aAAc9vE,KAAK8vE,aACnBC,YAAa/vE,KAAK+vE,YAClBlnE,SAAU7I,KAAK0b,mBACfqqG,YAAa/lH,KAAKolH,WAAWrgH,OAErC,CAKA,KAAAsX,GACIrc,KAAKyb,iBAAkB,EACvBzb,KAAK8vE,aAAe,SACpB9vE,KAAK+vE,YAAc,KACnB/vE,KAAK0b,mBAAqB,EAC1B1b,KAAKolH,WAAa,GAClBplH,KAAKslH,aAAe,IACxB,EC1MJ,MAAMU,GACF,WAAAlmH,CAAYg7D,EAAU,IAElB96D,KAAKw3G,UAAY18C,EAAQ08C,WAAa,GACtCx3G,KAAKimH,cAAgBnrD,EAAQmrD,eAAiB,IAC9CjmH,KAAK0L,OAASovD,EAAQpvD,QAAU,iBAGhC1L,KAAKkmH,kBAAoB,IAAIlB,GAAkBhlH,MAC/CA,KAAKmmH,cAAgB,IAAInM,GAAch6G,MACvCA,KAAK67G,cAAgB,IAAIuF,GAGzBphH,KAAK8vE,aAAe,SACpB9vE,KAAK+vE,YAAc,KACnB/vE,KAAK06B,cAAgB,EACrB16B,KAAKomH,eAAiB,EACtBpmH,KAAKqmH,eAAiB,KACtBrmH,KAAKyb,iBAAkB,EAGvBzb,KAAKsmH,WAAa,IAAIjjH,IACtBrD,KAAKumH,cAAgB,GACrBvmH,KAAKwmH,aAAe,GAGpBxmH,KAAKstB,gBAAkB,KACvBttB,KAAK+W,QAAS,EAGd/W,KAAKkxE,iBAAmB,EACxBlxE,KAAKmxE,YAAc,EACnBnxE,KAAKymH,gBAAkB,EACvBzmH,KAAK0mH,gBAAkB,EACvB1mH,KAAK2mH,oBAAsB,GAG3B3mH,KAAK+6G,cAAgB,KACrB/6G,KAAKi7G,cAAgBtB,GAAUG,QAAQ,GAAI,WAC3C95G,KAAKo6G,aAAe,GACpBp6G,KAAK49G,gBAAkB,EACvB59G,KAAK29G,oBAAsB,EAC3B39G,KAAKm6G,oBAAsB,EAG3Bn6G,KAAKq6G,WAAa,EAClBr6G,KAAKs6G,cAAgB,EAGrBt6G,KAAKo9G,YAAczD,GAAUG,QAAQ,GAAI,WACzC95G,KAAKs9G,aAAe3D,GAAUG,QAAQ,GAAI,WAC1C95G,KAAKq9G,aAAe,EAGpBr9G,KAAK4mH,mBAAqB,EAC1B5mH,KAAK6mH,oBAAsB,EAG3B7mH,KAAK8mH,wBAA0B,IAC/B9mH,KAAK+mH,yBAA2B,IAGhC/mH,KAAKu9G,kBAAmB,EACxBv9G,KAAKk6G,mBAAoB,EAGzBl6G,KAAK26G,kBAAoB,EACzB36G,KAAK88G,eAAiB,EAGtB98G,KAAKmlE,WAAa,KAClBnlE,KAAKolE,WAAa,KAGlBplE,KAAKgnH,YAAc,KAGnBhnH,KAAKumH,cAAgBvmH,KAAKinH,eAAe,UACzCjnH,KAAKknH,cAAe,EAGpBlnH,KAAK6sD,cACT,CAKA,YAAAA,GAEyB,CACjB,SAAU,QAAS,OAAQ,MAAO,OAClC,QAAS,SAAU,YAIVnrD,QAAQ8jH,IACb7N,GAAkB6N,IAElBxlH,KAAKinH,eAAezB,KAKP,CAAC,EAAG,IAAM,GAAK,IAAM,GAC7B9jH,QAAQ+G,IACjBzI,KAAKuL,YAAY9C,IAEzB,CAKA,cAAAw+G,CAAeE,GACX,IAAKnnH,KAAKsmH,WAAWvsG,IAAIotG,GAAY,CACjC,MAAMC,EAAWzP,GAAkBwP,GACnC,IAAKC,IAAaA,EAAS9uF,OAAQ,CAC/B,MAAM+uF,EAAe1P,GAAkBC,OAAOt/E,OAE9C,OADAt4B,KAAKsmH,WAAWxhH,IAAIqiH,EAAWE,GACxBA,CACX,CAEA,MAAM/uF,EAAS8uF,EAAS9uF,OAExB,OADAt4B,KAAKsmH,WAAWxhH,IAAIqiH,EAAW7uF,GACxBA,CACX,CACA,OAAOt4B,KAAKsmH,WAAWzhH,IAAIsiH,EAC/B,CAOA,OAAAG,CAAQv3C,EAAajV,EAAU,IAC3B,IAAK96D,KAAKknH,aACN,OAGJ,GAAIn3C,IAAgB/vE,KAAK8vE,eAAiB9vE,KAAKyb,gBAC3C,OAIJ,GAAIzb,KAAKyb,kBAAoBq/C,EAAQysD,MAGjC,OADAvnH,KAAKgnH,YAAc,CAAEj3C,cAAajV,WAC3B,SACA96D,KAAKyb,iBAAmBq/C,EAAQysD,OAEvCvnH,KAAKwnH,eAAc,GAIvB,MAAMC,EAAmBznH,KAAKylH,oBAAoBzlH,KAAK8vE,aAAcC,GAYrE,GATA/vE,KAAK+vE,YAAcA,EACnB/vE,KAAKwmH,aAAexmH,KAAKinH,eAAel3C,GACxC/vE,KAAKqmH,eAAiB7hH,KAAK+N,MAC3BvS,KAAKyb,iBAAkB,EACvBzb,KAAK06B,cAAgB,EACrB16B,KAAKomH,eAAiB,EAIG,QAArBtrD,EAAQtsD,UAA2C,SAArBssD,EAAQtsD,SAAqB,CAE3D,MACM+/B,EAAe,KADTP,GAAalG,KAAO,KAGP,QAArBgzB,EAAQtsD,SAERxO,KAAKimH,cAA+B,EAAf13E,EAErBvuC,KAAKimH,cAAgB13E,EAGzBvuC,KAAKstB,iBAAkB,EACvBttB,KAAK+W,QAA4B,IAAnB+jD,EAAQ/jD,MAC1B,MAEI/W,KAAKimH,cAAgBwB,GAAkBj5G,UAAYssD,EAAQtsD,UAAY,IACvExO,KAAKstB,gBAAkB,KACvBttB,KAAK+W,QAAS,EAIlB/W,KAAK0nH,UAAY5sD,EAAQ5lD,MAAQ,SACjClV,KAAKynH,iBAAmBA,EAGxBznH,KAAKmlE,WAAarK,EAAQqK,WAC1BnlE,KAAKolE,WAAatK,EAAQsK,UAE9B,CAMA,MAAAzqD,CAAO3H,GAEH,GAAIhT,KAAK+6G,eAAiB/6G,KAAK+6G,cAAc4M,YAAa,CACtD,MAAMC,EAAY5nH,KAAK+6G,cAAc8M,sBACrC,GAAID,GAAaA,EAAU5kC,YAAa,CAEpC,IAAI8kC,GAAa,EACjB,IAAK,IAAInsE,EAAI,EAAGA,EAAI/0C,KAAKkB,IAAI8/G,EAAU5kC,YAAYj+E,OAAQ/E,KAAKi7G,cAAcl2G,QAAS42C,IACnF37C,KAAKi7G,cAAct/D,GAAKisE,EAAU5kC,YAAYrnC,GAC1CisE,EAAU5kC,YAAYrnC,GAAK,IAAGmsE,GAAa,GAG/CA,IAAe9nH,KAAK+nH,IAEpB/nH,KAAK+nH,GAAmB,EAEhC,CACJ,CAGA,IAAK/nH,KAAKyb,kBAAoBzb,KAAK+vE,YAAa,OAGhD,MACMh1D,EADcvW,KAAK+N,MACKvS,KAAKqmH,eAGnC,GAAIrmH,KAAKstB,gBAAiB,CACtB,MACMihB,EAAe,KADFP,GAAalG,KAAO,KAIjCkgF,EADmBhoH,KAAKimH,cACmB,EAAf13E,EAClCvuC,KAAKimH,cAAgB+B,EAAwB,EAAfz5E,EAAmBA,CACrD,CAEA,IAAI1lC,EAAWjC,KAAKkB,IAAIiT,EAAU/a,KAAKimH,cAAe,GAGtD,GAAIjmH,KAAKstB,iBAAmBttB,KAAK+W,OAAQ,CACrC,MAAM+wB,EAAMkG,GAAalG,KAAO,IAGhC,IAAI5wB,EAEAA,EADA4wB,EAAM,IACQ,EACPA,EAAM,IACC,EAEA,EAIlB,MAAMyG,EAAe,IAAQzG,EACvB6H,EAAa3vC,KAAKimH,cAAgB13E,EAClCJ,EAActlC,EAAW8mC,EACzBs4E,EAAgBrhH,KAAKgB,MAAMumC,EAAcj3B,GAAeA,EACxDgxG,EAAoBthH,KAAKkB,IAAI,EAAGmgH,EAAgBt4E,GAUhDw4E,GAJe,GAAmB,IAHtBrgF,EAAM,GACpBlhC,KAAKiB,IAAI,IAAMigC,EAAM,IAAM,IAC3BlhC,KAAKiB,IAAI,GAAKjB,KAAKkB,IAAI,EAAG,GAAMggC,EAAM,IAAM,QAKH,GAAwB,GAD7ClhC,KAAKiE,IAAIhC,EAAWjC,KAAKgE,KAMjD/B,GAFUs/G,KACc,EAAI,EADlBA,IAEaD,EAAoBr/G,EAC/C,CAGA7I,KAAK06B,cAAgB16B,KAAKuL,YAAY1C,GAItC7I,KAAKomH,eAAuC,GAAtBpmH,KAAKomH,eAA4C,GAArBpmH,KAAK06B,cAGnD9zB,KAAKib,IAAI7hB,KAAKomH,eAAiBpmH,KAAK06B,eAAiB,OACrD16B,KAAKomH,eAAiBpmH,KAAK06B,eAI3B16B,KAAKolE,YACLplE,KAAKolE,WAAWplE,KAAK06B,eAIrB16B,KAAK06B,eAAiB,IACtB16B,KAAKomH,eAAiB,EACtBpmH,KAAKwnH,gBAEb,CAMA,aAAAA,CAAcY,GAAY,GAgBtB,GAdIpoH,KAAK+vE,cACL/vE,KAAK8vE,aAAe9vE,KAAK+vE,YACzB/vE,KAAKumH,cAAgB,IAAIvmH,KAAKwmH,eAElCxmH,KAAK+vE,YAAc,KACnB/vE,KAAKyb,iBAAkB,EACvBzb,KAAK06B,cAAgB,EACrB16B,KAAKomH,eAAiB,EAElBpmH,KAAKmlE,YACLnlE,KAAKmlE,WAAWnlE,KAAK8vE,eAIpBs4C,GAAapoH,KAAKgnH,YAAa,CAChC,MAAMqB,EAASroH,KAAKgnH,YACpBhnH,KAAKgnH,YAAc,KAGnB/kH,WAAW,KACPjC,KAAKsnH,QAAQe,EAAOt4C,YAAas4C,EAAOvtD,UACzC,GACP,CACJ,CAMA,cAAAwtD,GACI,OAA4B,OAArBtoH,KAAKgnH,WAChB,CAKA,UAAAnB,GACI7lH,KAAKgnH,YAAc,IACvB,CASA,eAAAt3C,CAAgB/uE,EAASC,EAAS0S,GAC9B,IAAIi1G,EAEJ,IACIA,EAAmBvoH,KAAKwoH,uBAC5B,CAAE,MAAO7wC,GACL4wC,EAAmBvoH,KAAK86G,wBAC5B,CAGK96G,KAAKyoH,oBACNzoH,KAAKyoH,kBAAoB,IAE7B,MAAMC,EAAe1oH,KAAKyoH,kBAI1B,GAHAC,EAAa3jH,OAAS,GAGjBwjH,GAAgD,IAA5BA,EAAiBxjH,OAAc,CAEpD,IAAK,IAAI42C,EAAI,EAAGA,EAAI37C,KAAKw3G,UAAW77D,IAAK,CACrC,MAAMx8B,EAASw8B,EAAI37C,KAAKw3G,UAAa5wG,KAAKgE,GAAK,EAC/C89G,EAAa5mH,KAAK,CACdO,EAAG1B,EAAUiG,KAAK0E,IAAI6T,GAAS7L,EAC/BhR,EAAG1B,EAAUgG,KAAKiE,IAAIsU,GAAS7L,GAEvC,CACA,OAAOo1G,CACX,CAGA,MAAMC,EAAcp8G,MAAM+uC,QAAQitE,GAAoBA,EAAmB,GAEzE,IAAK,IAAI5sE,EAAI,EAAGA,EAAIgtE,EAAY5jH,OAAQ42C,IAAK,CACzC,MAAM3P,EAAQ28E,EAAYhtE,GAC1B,GAAK3P,GAA4B,iBAAZA,EAAM3pC,GAAqC,iBAAZ2pC,EAAM1pC,EAOnD,CAEH,MAAMD,EAAI1B,GAAWqrC,EAAM3pC,EAAI,IAAOiR,EAAS,EACzChR,EAAI1B,GAAWorC,EAAM1pC,EAAI,IAAOgR,EAAS,EAC/Co1G,EAAa5mH,KAAK,CAAEO,IAAGC,KAC3B,KAZ0E,CAEtE,MAAM6c,EAASw8B,EAAIgtE,EAAY5jH,OAAU6B,KAAKgE,GAAK,EACnD89G,EAAa5mH,KAAK,CACdO,EAAG1B,EAAUiG,KAAK0E,IAAI6T,GAAS7L,EAC/BhR,EAAG1B,EAAUgG,KAAKiE,IAAIsU,GAAS7L,GAEvC,CAMJ,CAGA,KAAOo1G,EAAa3jH,OAAS/E,KAAKw3G,WAAW,CACzC,MACMr4F,EADIupG,EAAa3jH,OACJ/E,KAAKw3G,UAAa5wG,KAAKgE,GAAK,EAC/C89G,EAAa5mH,KAAK,CACdO,EAAG1B,EAAUiG,KAAK0E,IAAI6T,GAAS7L,EAC/BhR,EAAG1B,EAAUgG,KAAKiE,IAAIsU,GAAS7L,GAEvC,CAEA,OAAOo1G,CACX,CAMA,qBAAAF,GAMI,GAJKxoH,KAAKumH,eAA+C,IAA9BvmH,KAAKumH,cAAcxhH,SAC1C/E,KAAKumH,cAAgBvmH,KAAK86G,2BAGzB96G,KAAKyb,gBACN,OAAOzb,KAAK66G,sBAAsB76G,KAAKumH,eAG3C,MAAMjuF,EAAS,GACf,IAAK,IAAIqjB,EAAI,EAAGA,EAAI37C,KAAKw3G,UAAW77D,IAAK,CACrC,MAAMxjC,EAAUnY,KAAKumH,cAAc5qE,GAC7BvjC,EAASpY,KAAKwmH,aAAa7qE,GAGjC,IAAKxjC,IAAYC,EAAQ,CACrB,MAAM+G,EAASw8B,EAAI37C,KAAKw3G,UAAa5wG,KAAKgE,GAAK,EAC/C0tB,EAAOx2B,KAAK,CACRO,EAAG,GAAwB,GAAlBuE,KAAK0E,IAAI6T,GAClB7c,EAAG,GAAwB,GAAlBsE,KAAKiE,IAAIsU,KAEtB,QACJ,CAGA,MAAMtW,EAAW7I,KAAKomH,eACtB,IAAI/jH,EAAGC,EAGP,MAAMsmH,EAAe,CAAC,SAAU,SAAU,OAAQ,YAC5CC,EAAkBD,EAAapjH,SAASxF,KAAK8vE,cAC7Cg5C,EAAiBF,EAAapjH,SAASxF,KAAK+vE,aAGlD,GAFyB84C,GAAmBC,EAEtB,CAElB,MAAM5rE,EAAK,GAAKC,EAAK,GAGrB,GAAI2rE,IAAmBD,EAAiB,CAGpC,MAAME,EAAW3wG,EAAO/V,EAAI66C,EACtB8rE,EAAW5wG,EAAO9V,EAAI66C,EAM5B,GAHuBn9C,KAAKuL,YAAY1C,GAGpCA,EAAW,GAAK,CAEhB,MAAMs0B,EAAiBt0B,EAAW,GAClCxG,EAAI8V,EAAQ9V,GAAK66C,EAAK/kC,EAAQ9V,GAAK86B,EACnC76B,EAAI6V,EAAQ7V,GAAK66C,EAAKhlC,EAAQ7V,GAAK66B,CACvC,KAAO,CAEH,MAAM8rF,GAAepgH,EAAW,IAAO,GACvCxG,EAAI66C,EAAK6rE,EAAWE,EACpB3mH,EAAI66C,EAAK6rE,EAAWC,CACxB,CACJ,MAAO,GAAIJ,IAAoBC,EAAgB,CAE3C,MAAMrgF,EAAYtwB,EAAQ9V,EAAI66C,EACxBxU,EAAYvwB,EAAQ7V,EAAI66C,EAE9B,GAAIt0C,EAAW,GAAK,CAEhB,MAAMqgH,EAAmBrgH,EAAW,GACpCxG,EAAI8V,EAAQ9V,EAAIomC,EAAYygF,EAC5B5mH,EAAI6V,EAAQ7V,EAAIomC,EAAYwgF,CAChC,KAAO,CAEH,MAAM9xC,GAAkBvuE,EAAW,IAAO,GAC1CxG,EAAI66C,GAAM9kC,EAAO/V,EAAI66C,GAAMk6B,EAC3B90E,EAAI66C,GAAM/kC,EAAO9V,EAAI66C,GAAMi6B,CAC/B,CACJ,KAAO,CAEH,MAAM3uC,EAAYtwB,EAAQ9V,EAAI66C,EACxBxU,EAAYvwB,EAAQ7V,EAAI66C,EACxB4rE,EAAW3wG,EAAO/V,EAAI66C,EACtB8rE,EAAW5wG,EAAO9V,EAAI66C,EAE5B,GAAIt0C,EAAW,GAAK,CAEhB,MAAMqgH,EAAmBrgH,EAAW,GACpCxG,EAAI8V,EAAQ9V,EAAIomC,EAAYygF,EAC5B5mH,EAAI6V,EAAQ7V,EAAIomC,EAAYwgF,CAChC,KAAO,CAEH,MAAM9xC,GAAkBvuE,EAAW,IAAO,GAC1CxG,EAAI66C,EAAK6rE,EAAW3xC,EACpB90E,EAAI66C,EAAK6rE,EAAW5xC,CACxB,CACJ,CACJ,MAAO,GAAuB,WAAnBp3E,KAAK0nH,UAAwB,CAEpC,MAAMvoG,EAAQtW,EAAWjC,KAAKgE,GAAK,EAC7Bu+G,EAAqC,IAA5BviH,KAAKiE,IAAIsU,EAAY,GAAJw8B,IAAmB,EAA+B,EAA3B/0C,KAAKib,IAAIhZ,EAAW,KAC3ExG,EAAI8V,EAAQ9V,GAAK+V,EAAO/V,EAAI8V,EAAQ9V,GAAKwG,EAAWsgH,EACpD7mH,EAAI6V,EAAQ7V,GAAK8V,EAAO9V,EAAI6V,EAAQ7V,GAAKuG,EAAWsgH,CACxD,MAAO,GAAuB,SAAnBnpH,KAAK0nH,UAAsB,CAElC,MAAM/lF,EAAoD,IAA7C/6B,KAAKiE,IAAQ,GAAJ8wC,EAAU9yC,EAAWjC,KAAKgE,GAAK,GACrDvI,EAAI8V,EAAQ9V,GAAK+V,EAAO/V,EAAI8V,EAAQ9V,GAAKwG,EAAW84B,EACpDr/B,EAAI6V,EAAQ7V,GAAK8V,EAAO9V,EAAI6V,EAAQ7V,GAAKuG,EAAW84B,CACxD,MAEIt/B,EAAI8V,EAAQ9V,GAAK+V,EAAO/V,EAAI8V,EAAQ9V,GAAKwG,EACzCvG,EAAI6V,EAAQ7V,GAAK8V,EAAO9V,EAAI6V,EAAQ7V,GAAKuG,EAG7CyvB,EAAOx2B,KAAK,CAAEO,IAAGC,KACrB,CAEA,OAAOtC,KAAK66G,sBAAsBviF,EACtC,CAKA,qBAAAuiF,CAAsBviF,GAElB,OAAOt4B,KAAKmmH,cAActL,sBAAsBviF,EACpD,CAMA,mBAAAgmF,CAAoBj5G,GAChB,MAAMkN,EAAM/N,KAAK+N,MACbA,EAAMvS,KAAKymH,gBAAkBzmH,KAAK2mH,sBAClC3mH,KAAKkxE,iBAAmBtqE,KAAKiB,KAAI,EAAIjB,KAAKkB,IAAI,EAAGzC,IACjDrF,KAAKymH,gBAAkBl0G,EAEnBvS,KAAKmmH,eACLnmH,KAAKmmH,cAAc7H,oBAAoB13G,KAAKib,IAAI7hB,KAAKkxE,mBAGjE,CAMA,cAAAqtC,CAAel5G,GACX,MAAMkN,EAAM/N,KAAK+N,MACbA,EAAMvS,KAAK0mH,gBAAkB1mH,KAAK2mH,sBAClC3mH,KAAKmxE,YAAcvqE,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAGzC,IAC3CrF,KAAK0mH,gBAAkBn0G,EAEnBvS,KAAKmmH,eACLnmH,KAAKmmH,cAAc5H,eAAev+G,KAAKmxE,aAGnD,CAKA,mBAAAs0C,CAAoBj5G,EAAMqQ,GACtB,MAAMusG,EAAYzR,GAAkBnrG,GAC9B68G,EAAU1R,GAAkB96F,GAGlC,MAAW,SAAPA,EACO,CACHvX,KAAM,UACNoG,OAAQ,iBACR8C,SAAU,KACV7K,cAAe,IACf2lH,gBAAgB,GAMX,SAAT98G,GAA0B,UAAPqQ,EACZ,CACHvX,KAAM,gBACNoG,OAAQ,gBACR8C,SAAU,IACV+6G,kBAAkB,EAClB38G,YAAa,6DAKR,SAATJ,EACO,CACHlH,KAAM,YACNoG,OAAQ,iBACR8C,SAAU,IACV+6G,kBAAkB,EAClBC,iBAAkB,GAClB58G,YAAa,iDAMV,UAAPiQ,EACO,CACHvX,KAAM,sBACNgwB,YAAY,IAKP,UAAT9oB,GAA2B,SAAPqQ,EACb,CACHvX,KAAM,gBACNmkH,WAAW,IAKN,UAATj9G,EACO,CACHlH,KAAM,qBACNmkH,WAAW,IAKa,SAA5BL,GAAWh4C,QAAQ9rE,MAA6C,UAA1B+jH,GAASj4C,QAAQ9rE,KAChD,CACHA,KAAM,gBACNkjB,UAAW,SAIa,UAA5B4gG,GAAWh4C,QAAQ9rE,MAA8C,SAA1B+jH,GAASj4C,QAAQ9rE,KACjD,CACHA,KAAM,eACNkjB,UAAW,QAKN,QAAThc,GAAyB,QAAPqQ,EACX,CACHvX,KAAM,WACNokH,aAAa,GAIR,QAATl9G,GAAyB,QAAPqQ,EACX,CACHvX,KAAM,YACNqkH,cAAc,GAIf,CACHrkH,KAAM,WAEd,CAMA,gBAAAqqE,GAEI,MAAMw3C,EAAYnnH,KAAK8vE,cAAgB,SACjC85C,EAAajS,GAAkBwP,GAC/B0C,EAAY7pH,KAAK+vE,YAAc4nC,GAAkB33G,KAAK+vE,aAAe,KAErEP,EAAgBo6C,GAAYx4C,QAAU,CAAE9rE,KAAM,QAC9CwkH,EAAeD,GAAWz4C,QAAU,KAI1C,IAAKpxE,KAAKyb,kBAAoBquG,EAC1B,OAAOt6C,EAIX,MAAMx0D,EAAgBhb,KAAK06B,cAI3B,GAAI16B,KAAKynH,kBAAmD,cAA/BznH,KAAKynH,iBAAiBniH,MAAwBtF,KAAKynH,iBAAiB8B,iBAAkB,CAC/G,MAAMQ,EAAa/pH,KAAKynH,iBAAiB+B,kBAAoB,GAG7D,GAAIxuG,EAAgB+uG,EAAY,CAC5B,MAAMC,EAAgBhvG,EAAgB+uG,EAChC5qG,GAAQ,GAAMvY,KAAKgE,GAAK,IAGxBq/G,EAAc,GAEdC,EAAgBD,GADJ,IAC+BA,GAAeD,EAQhE,MAAO,CACH1kH,KAAM,WACNkrE,SAJaw5C,EAAgB,GAAM,KAAQ,EAA4B,GAAvBA,EAAgB,KAAY,IAK5E7qG,OAAO,GACPsjB,OAAQynF,EACR12C,QAXY5sE,KAAK0E,IAAI6T,GAAS+qG,EAY9BC,QAXYvjH,KAAKiE,IAAIsU,GAAS+qG,EAatC,CAGA,MAAO,CAAE5kH,KAAM,OACnB,CAGA,GAAItF,KAAKynH,kBAAmD,kBAA/BznH,KAAKynH,iBAAiBniH,KAA0B,CACzE,MAAM6Z,EAAQnf,KAAKynH,iBAAiBnyF,WAAa1uB,KAAKgE,GAAK,IACrDw/G,EAAiB,EAAIpvG,EACrB2V,EAA4B,GAAlB/pB,KAAK0E,IAAI6T,GAAeirG,EAClCx5F,EAA4B,GAAlBhqB,KAAKiE,IAAIsU,GAAeirG,EAGlCC,EAAazjH,KAAKC,IAAImU,EAAe,GAG3C,GAAIA,EAAgB,GAEhB,MAAO,CACH1V,KAAM,WACNkrE,SAAU,KAAQ,EAAiB,GAAb65C,GACtBlrG,MAAOnf,KAAKynH,iBAAiBnyF,WAC7BmN,OAAQ,GAAM2nF,EACd52C,QAAS7iD,EACTw5F,QAASv5F,GAEV,CAEH,MAAM05F,GAActvG,EAAgB,IAAO,GACrCuvG,EAAc3jH,KAAKiE,IAAIy/G,EAAa1jH,KAAKgE,GAAK,GAEpD,MAAO,CACHtF,KAAM,QACNkrE,SAAU,IAAO,GAAM+5C,EACvBzmH,MAAO,mBAAmB,GAAM,GAAMymH,KACtC/2C,QAAS7iD,GAAW,EAAI45F,GACxBJ,QAASv5F,GAAW,EAAI25F,GACxBx2C,UAAWw2C,EACXj3C,eAAgBt4D,EAExB,CACJ,CAGA,GAAIhb,KAAKynH,kBAAmD,wBAA/BznH,KAAKynH,iBAAiBniH,KAAgC,CAE/E,GAAI0V,EAAgB,GAChB,MAAO,CAAE1V,KAAM,QAInB,MAAMguE,GAAkBt4D,EAAgB,IAAO,GACzCwvG,EAAiB5jH,KAAKiE,IAAIyoE,EAAiB1sE,KAAKgE,GAAK,GACrDuU,EAAQnf,KAAKynH,iBAAiBnyF,WAAa1uB,KAAKgE,GAAK,IACrDw/G,EAAiB,EAAII,EACrB75F,EAA4B,GAAlB/pB,KAAK0E,IAAI6T,GAAeirG,EAClCx5F,EAA4B,GAAlBhqB,KAAKiE,IAAIsU,GAAeirG,EAGxC,GAAI92C,EAAiB,GAGjB,MAAO,CACHhuE,KAAM,WACNkrE,SAAU,IAHC5pE,KAAKC,IAAIysE,EAAiB,GAAK,IAI1Cn0D,MAAOnf,KAAKynH,iBAAiBnyF,WAC7BmN,OAAQ,GAAM2nF,EACd52C,QAAS7iD,EACTw5F,QAASv5F,GAEV,CAEH,MAAM65F,GAAiBn3C,EAAiB,IAAO,GACzCi3C,EAAc3jH,KAAKiE,IAAI4/G,EAAgB7jH,KAAKgE,GAAK,GAEvD,MAAO,CACHtF,KAAM,QACNkrE,SAAU,IAAO,GAAM+5C,EACvBzmH,MAAO,mBAAmB,GAAM,GAAMymH,KACtC/2C,QAAS7iD,GAAW,EAAI45F,GACxBJ,QAASv5F,GAAW,EAAI25F,GACxBx2C,UAAWw2C,EACXj3C,eAAgBA,EAExB,CACJ,CAGA,GAAItzE,KAAKynH,kBAAmD,kBAA/BznH,KAAKynH,iBAAiBniH,KAA0B,CACzE,MAAM6Z,EAAQnf,KAAKynH,iBAAiBgC,UAAY7iH,KAAKgE,GAAK,IAGpD8/G,EAAgB9jH,KAAKiE,IAAImQ,EAAgBpU,KAAKgE,GAAK,GACnD+lB,EAA4B,GAAlB/pB,KAAK0E,IAAI6T,GAAeurG,EAClC95F,EAA4B,GAAlBhqB,KAAKiE,IAAIsU,GAAeurG,EAGxC,GAAI1vG,EAAgB,GAAK,CAErB,MAAM2vG,EAAiB3vG,EAAgB,GACjC4vG,EAAkBhkH,KAAKC,IAAI8jH,EAAgB,IAEjD,MAAO,CACHrlH,KAAM,QACNkrE,SAAU,IAAQ,GAAMo6C,EACxB9mH,MAAO,mBAAmB,GAAM,GAAM8mH,KACtCp3C,QAAmB,GAAV7iD,EACTw5F,QAAmB,GAAVv5F,EACTmjD,UAAW,EAAI62C,EAEvB,CAAO,CAEH,MAAMC,GAAiB7vG,EAAgB,IAAO,GAG9C,MAAO,CACH1V,KAAM,WACNkrE,SAAU,IAJC5pE,KAAKiE,IAAIggH,EAAgBjkH,KAAKgE,GAAK,GAIpB,GAC1BuU,MAAOnf,KAAKynH,iBAAiBgC,UAC7BhnF,OAAQ,GACR+wC,QAAS7iD,EACTw5F,QAASv5F,EAEjB,CACJ,CAGA,GAAI5wB,KAAKynH,kBAAmD,uBAA/BznH,KAAKynH,iBAAiBniH,KAA+B,CAE9E,GAAI0V,EAAgB,GAAK,CACrB,MAAMs4D,EAAiBt4D,EAAgB,GAEjCmE,EAAQnf,KAAKynH,iBAAiBgC,UAAY7iH,KAAKgE,GAAK,IAG1D,GAAI0oE,EAAiB,GAAK,CAEtB,MAAMq3C,EAAiBr3C,EAAiB,GAClCS,EAAY,EAAI42C,EAChBG,EAA6B,GAAjBH,EAElB,MAAO,CACHrlH,KAAM,QACNkrE,SAAU,IAAQ,GAAMm6C,EACxB7mH,MAAO,mBAAmB,GAAM,GAAM6mH,KACtCn3C,QAA2B,GAAlB5sE,KAAK0E,IAAI6T,GAAe2rG,EACjCX,QAA2B,GAAlBvjH,KAAKiE,IAAIsU,GAAe2rG,EACjC/2C,UAAWA,EAEnB,CAAO,CAEH,MAAMg3C,GAAaz3C,EAAiB,IAAO,GACrC03C,EAAapkH,KAAKC,IAAIkkH,EAAW,IACjCp6F,EAA4B,GAAlB/pB,KAAK0E,IAAI6T,GAAe6rG,EAClCp6F,EAA4B,GAAlBhqB,KAAKiE,IAAIsU,GAAe6rG,EAGxC,MAAO,CACH1lH,KAAM,WACNkrE,SAAU,KAJE,EAAI5pE,KAAKC,IAAIkkH,EAAW,IAKpC5rG,MAAOnf,KAAKynH,iBAAiBgC,UAC7BhnF,OAAQ,GAAMuoF,EACdx3C,QAAS7iD,EACTw5F,QAASv5F,EAEjB,CACJ,CAGA,MAAO,CAAEtrB,KAAM,OACnB,CAGA,GAAItF,KAAKynH,kBAAmD,kBAA/BznH,KAAKynH,iBAAiBniH,KAA0B,CACzE,MAAMkuE,EAAU,IAAuB,IAAhBx4D,EAEvB,MAAO,IACA8uG,EACHt2C,QAASA,EACTF,eAAgBt4D,EAExB,CAAO,GAAmC,iBAA/Bhb,KAAKynH,iBAAiBniH,KAAyB,CACtD,MAAMkuE,EAA2B,KAAhBx4D,EAEjB,MAAO,IACAw0D,EACHgB,SAAUhB,EAAcgB,UAAY,EAAIx1D,GACxCw4D,QAASA,EACTF,eAAgB,EAAIt4D,EAE5B,CAAO,GAAmC,aAA/Bhb,KAAKynH,iBAAiBniH,KAAqB,CAElD,MAAM2lH,EAAiB,EAAIjwG,EAG3B,MAAO,IACAw0D,EACHvhE,WAAYuhE,EAAcvhE,WAAa,GAAKrH,KAAKC,IAAIokH,EAAgB,IACrEvS,OAAQlpC,EAAckpC,OACtBlnC,cAAey5C,EACft5C,OAAQnC,EAAcmC,OACtBu5C,cAAetkH,KAAKC,IAAIokH,EAAgB,KACxC55C,QAAS7B,EAAc6B,QACvBC,eAAgB1qE,KAAKC,IAAIokH,EAAgB,GACzCpoF,YAAa2sC,EAAc3sC,YAAc,IAAOooF,EAExD,CAAO,GAAmC,cAA/BjrH,KAAKynH,iBAAiBniH,KAAsB,CAEnD,MAAM6lH,EAAgBnwG,EAGtB,MAAO,IACA8uG,EACH77G,WAAY67G,EAAa77G,WAAa,GAAKrH,KAAKC,IAAIskH,EAAe,KACnEzS,OAAQoR,EAAapR,OACrBlnC,cAAe5qE,KAAKC,IAAIskH,EAAe,IACvCx5C,OAAQm4C,EAAan4C,OACrBu5C,cAAeC,EAAgB,GAAMvkH,KAAKC,KAAKskH,EAAgB,IAAO,GAAK,IAAO,EAClF95C,QAASy4C,EAAaz4C,QACtBC,eAAgB65C,EAAgB,GAAMvkH,KAAKC,KAAKskH,EAAgB,IAAO,GAAK,GAAK,EACjFtoF,YAAainF,EAAajnF,YAAc,IAAOsoF,EAEvD,CAGA,GAA2B,SAAvB37C,EAAclqE,MAAyC,SAAtBwkH,EAAaxkH,KAAiB,CAC/D,MAAMkrE,GAAYhB,EAAcgB,UAAY,KAC3Bs5C,EAAat5C,UAAY,IAAMhB,EAAcgB,UAAY,IAAMx1D,EAEhF,MAAO,CACH1V,KAA4B,SAAtBwkH,EAAaxkH,KAAkBwkH,EAAaxkH,KAAOkqE,EAAclqE,KACvEkrE,SAAUA,EACVrxD,MAAO2qG,EAAa3qG,OAASqwD,EAAcrwD,OAAS,EACpDy5F,SAAUkR,EAAalR,UAAYppC,EAAcopC,UAAY,GAC7D/vG,SAAUmS,EAElB,CAEA,OAAOw0D,CACX,CAMA,kBAAA47C,GAGI,OAAO,IACX,CAKA,WAAA7/G,CAAY9C,GAER,OADezI,KAAKynH,kBAAkB/7G,QAAU1L,KAAK0L,QAAU,UAE3D,IAAK,SACD,OAAOjD,EACX,IAAK,aACD,OAAOA,EAAIA,EACf,IAAK,cACD,OAAOA,GAAK,EAAIA,GACpB,IAAK,gBACD,OAAOA,EAAI,GAAM,EAAIA,EAAIA,GAAU,EAAI,EAAIA,GAAKA,EAAnB,EACjC,IAAK,gBACD,QAAS7B,KAAK0E,IAAI1E,KAAKgE,GAAKnC,GAAK,GAAK,EAE1C,QACI,OAAOA,EAAI,GACL,EAAIA,EAAIA,EAAIA,EACZ,EAAI7B,KAAKC,KAAI,EAAK4B,EAAI,EAAG,GAAK,EAEhD,CAKA,YAAAy5G,GACI,OAAOliH,KAAK67G,cAAcqG,cAC9B,CAKA,mBAAAI,CAAoBzjF,GAChB,OAAO7+B,KAAK67G,cAAcyG,oBAAoBzjF,EAClD,CAKA,gBAAAokF,CAAiBpkF,GACb,OAAO7+B,KAAK67G,cAAcoH,iBAAiBpkF,EAC/C,CAKA,qBAAA+jF,CAAsBW,EAAMC,GACxB,OAAOxjH,KAAK67G,cAAc+G,sBAAsBW,EAAMC,EAC1D,CAKA,mBAAAC,GAEIzjH,KAAK67G,cAAcsB,mBAAqBn9G,KAAKm9G,mBAG7C,MAAMlvE,EAAgBjuC,KAAK67G,cAAc4H,sBAOzC,OAJAzjH,KAAKg8G,sBAAwBh8G,KAAK67G,cAAcG,sBAChDh8G,KAAKi8G,wBAA0Bj8G,KAAK67G,cAAcI,wBAClDj8G,KAAKo8G,oBAAsBp8G,KAAK67G,cAAcO,oBAEvCnuE,CACX,CAKA,gBAAAi2E,CAAiBM,EAAQ/E,GACrB,OAAOz/G,KAAK67G,cAAcqI,iBAAiBM,EAAQ/E,EACvD,CAMA,mBAAA4L,GAEIrrH,KAAKm9G,oBAAqB,EAG1Bn9G,KAAK67G,cAAcx/F,QAGnBrc,KAAK67G,cAAcsB,oBAAqB,EAGxCn9G,KAAK47G,eAAiB,EACtB57G,KAAK87G,YAAc,EACnB97G,KAAKk9G,cAAgB,EAGrBl9G,KAAK+7G,eAAiB,GACtB/7G,KAAKg8G,sBAAwB,KAC7Bh8G,KAAKi8G,wBAA0B,EAG/Bj8G,KAAK67G,cAAc0F,mBAAqB,EACxCvhH,KAAKk8G,iBAAmB,EACxBl8G,KAAKm8G,qBAAuB,GAC5Bn8G,KAAKo8G,qBAAsB,EAG3Bp8G,KAAK07G,gBAAkB,GACvB17G,KAAK27G,oBAAsB,GAG3B,MAAMnmE,EAAiBC,SAASC,eAAe,oBAC3CF,IACAA,EAAeG,YAAc,IAGrC,CAKA,mBAAA21E,GACI,MAAO,CACHxjF,IAAK9nC,KAAK87G,YACV7tE,cAAejuC,KAAKg8G,sBACpB5mE,UAAWp1C,KAAK0hH,YAChB6J,cAAevrH,KAAKo8G,oBAE5B,CAKA,sBAAAtB,GACI,MAAMxiF,EAAS,GACf,IAAK,IAAIqjB,EAAI,EAAGA,EAAI37C,KAAKw3G,UAAW77D,IAAK,CACrC,MAAMx8B,EAASw8B,EAAI37C,KAAKw3G,UAAa5wG,KAAKgE,GAAK,EAC/C0tB,EAAOx2B,KAAK,CACRO,EAAG,GAAwB,GAAlBuE,KAAK0E,IAAI6T,GAClB7c,EAAG,GAAwB,GAAlBsE,KAAKiE,IAAIsU,IAE1B,CACA,OAAOmZ,CACX,CAKA,QAAAkf,GACI,MAAO,CACHs4B,aAAc9vE,KAAK8vE,aACnBC,YAAa/vE,KAAK+vE,YAClBt0D,gBAAiBzb,KAAKyb,gBACtB5S,SAAU7I,KAAK06B,cACfw2C,iBAAkBlxE,KAAKkxE,iBACvBC,YAAanxE,KAAKmxE,YAE1B,CAMA,WAAA7K,CAAYz5D,GAAS,GAEjB,OAAOA,EAAS7M,KAAKomH,eAAiBpmH,KAAK06B,aAC/C,CAKA,cAAA8wF,GACI,OAAOxrH,KAAKyb,eAChB,EC9oCG,MAAMgwG,GACT,WAAA3rH,GACIE,KAAK4xC,aAAe,KACpB5xC,KAAKgwF,SAAW,KAChBhwF,KAAK8xC,OAAS,KACd9xC,KAAK0rH,cAAgB,KACrB1rH,KAAKiwF,UAAY,KACjBjwF,KAAK2nH,aAAc,EACnB3nH,KAAK2rH,iBAAmB,KACxB3rH,KAAK8rF,SAAW,KAGhB9rF,KAAK4rH,eAAiB,GACtB5rH,KAAKotF,gBAAkB,GAGvBptF,KAAK6rH,WAAa,CAAE/jH,IAAK,GAAID,IAAK,KAClC7H,KAAK8rH,iBAAmB,EACxB9rH,KAAKg7G,mBAAqB,IAAIzuG,MAAMvM,KAAK4rH,gBAAgB5yE,KAAK,GAG9Dh5C,KAAK+rH,cAAgB,GACrB/rH,KAAKyuC,aAAe,EACpBzuC,KAAK4uC,cAAgB,EACzB,CAKA,UAAM03D,GACF,IACItmG,KAAK4xC,aAAe,IAAKrxC,OAAOqqF,cAAgBrqF,OAAOsqF,oBACvD7qF,KAAKgwF,SAAWhwF,KAAK4xC,aAAa4+C,iBAClCxwF,KAAKgwF,SAASF,QAAU,KACxB9vF,KAAKgwF,SAASH,sBAAwB,GAEtC,MAAMm8B,EAAehsH,KAAKgwF,SAASU,kBAGnC,OAFA1wF,KAAKiwF,UAAY,IAAIQ,WAAWu7B,IAEzB,CACX,CAAE,MAAOpqH,GACL,OAAO,CACX,CACJ,CAMA,mBAAAqqH,CAAoBC,GAChB,GAAKlsH,KAAK4xC,aAIV,IAES5xC,KAAK0rH,eAAiB1rH,KAAK2rH,mBAAqBO,IACjDlsH,KAAK0rH,cAAgB1rH,KAAK4xC,aAAau6E,yBAAyBD,GAChElsH,KAAK0rH,cAActmC,QAAQplF,KAAKgwF,UAChChwF,KAAK0rH,cAActmC,QAAQplF,KAAK4xC,aAAayzC,cAEjDrlF,KAAK8xC,OAAS9xC,KAAK0rH,cACnB1rH,KAAK2rH,iBAAmBO,EACxBlsH,KAAK2nH,aAAc,EAGnB3nH,KAAKosH,SACT,CAAE,MAAOxqH,GAEDA,EAAM8C,SAAW9C,EAAM8C,QAAQc,SAAS,uBACxCxF,KAAK8xC,OAAS9xC,KAAK0rH,cACnB1rH,KAAK2rH,iBAAmBO,EACxBlsH,KAAK2nH,aAAc,EACnB3nH,KAAKosH,UAGb,CACJ,CAMA,OAAAA,GACI,IAAKpsH,KAAK2nH,YAAa,OAEvBx3E,sBAAsB,IAAMnwC,KAAKosH,WAGjCpsH,KAAKgwF,SAASc,qBAAqB9wF,KAAKiwF,WAGxC,MAAMo8B,EAAW,IAAI57B,WAAWzwF,KAAKgwF,SAASU,mBAI9C,GAHA1wF,KAAKgwF,SAASs8B,sBAAsBD,IAG/BrsH,KAAKusH,EAAc,CACpB,MAAMC,EAAU5lH,KAAKiB,OAAO7H,KAAKiwF,WAC3Bw8B,EAAU7lH,KAAKiB,OAAOwkH,GACtBK,EAAU9lH,KAAKkB,OAAOukH,GAExBG,EAAU,GAAkB,MAAZC,GAA+B,MAAZC,EAEnC1sH,KAAKusH,GAAe,GAGfvsH,KAAK2sH,IAAe3sH,KAAK2sH,EAAgB,GAC9C3sH,KAAK2sH,IACD3sH,KAAK2sH,EAIjB,CAGA,IAAI/+D,EAAM,EACNg/D,EAAW,EACXC,EAAa,EAGjB,MACMC,EADU9sH,KAAK4xC,aAAay0C,WAAa,EACvBrmF,KAAKiwF,UAAUlrF,OACjCgoH,EAAcnmH,KAAKgJ,MAAM5P,KAAK6rH,WAAW/jH,IAAMglH,GAC/CE,EAAcpmH,KAAKqmH,KAAKjtH,KAAK6rH,WAAWhkH,IAAMilH,GAGpD,IAAK,IAAInxE,EAAI,EAAGA,EAAI37C,KAAKiwF,UAAUlrF,OAAQ42C,IAAK,CAC5C,MAAMt2C,EAAQrF,KAAKiwF,UAAUt0C,GAAK,IAClCiS,GAAOvoD,EAGHs2C,GAAKoxE,GAAepxE,GAAKqxE,IACzBJ,GAAYvnH,EACZwnH,IAER,CAGA7sH,KAAK8rH,iBAAmBl+D,EAAM5tD,KAAKiwF,UAAUlrF,OAC7C,MAAMmoH,EAAiBL,EAAa,EAAID,EAAWC,EAAa,EAShE,OANA7sH,KAAKmtH,wBAGLntH,KAAKotH,WAAWptH,KAAK8rH,kBAGd,CACH99G,UAAWhO,KAAK8rH,iBAChBoB,eAAgBA,EAChBlqC,YAAahjF,KAAKg7G,mBAClBnoB,QAAS7yF,KAAKiwF,UAEtB,CAKA,qBAAAk9B,GACI,MAAME,EAAczmH,KAAKgJ,MAAM5P,KAAKiwF,UAAUlrF,OAAS/E,KAAK4rH,gBAE5D,IAAK,IAAIjwE,EAAI,EAAGA,EAAI37C,KAAK4rH,eAAgBjwE,IAAK,CAC1C,IAAIiS,EAAM,EACV,MAAM0/D,EAAW3xE,EAAI0xE,EACfE,EAAS3mH,KAAKkB,IAAIwlH,EAAWD,EAAartH,KAAKiwF,UAAUlrF,QAE/D,IAAK,IAAI4lD,EAAI2iE,EAAU3iE,EAAI4iE,EAAQ5iE,IAC/BiD,GAAO5tD,KAAKiwF,UAAUtlC,GAAK,IAI/B,MAAM6iE,EAAW5/D,EAAMy/D,EACvBrtH,KAAKg7G,mBAAmBr/D,GAAK37C,KAAKg7G,mBAAmBr/D,GAAK37C,KAAKotF,gBAClCogC,GAAY,EAAIxtH,KAAKotF,gBACtD,CACJ,CAKA,UAAAggC,CAAWp/G,GACP,MAAMuE,EAAM6H,YAAY7H,MAIpBvE,EAAYhO,KAAK+rH,eAAiBx5G,EAAMvS,KAAKyuC,aAAe,KAC5DzuC,KAAKyuC,aAAel8B,EAGpBvS,KAAK4uC,cAAcltC,QAAQC,GAAYA,EAASqM,IAExD,CAKA,mBAAAy/G,GAEI,IAAIC,EAAW,EACf,MAAM/Q,EAAO38G,KAAKg7G,mBAAmBrtD,OAAO,CAACpP,EAAG/2C,IAAM+2C,EAAI/2C,EAAG,GAAKxH,KAAK4rH,eAEvE,IAAK,IAAIjwE,EAAI,EAAGA,EAAI37C,KAAK4rH,eAAgBjwE,IACrC+xE,GAAY9mH,KAAKC,IAAI7G,KAAKg7G,mBAAmBr/D,GAAKghE,EAAM,GAO5D,OAJA+Q,EAAW9mH,KAAKkb,KAAK4rG,EAAW1tH,KAAK4rH,gBAGjBhlH,KAAKkB,IAAI,EAAc,EAAX4lH,EAAuC,GAAxB1tH,KAAK8rH,iBAExD,CAKA,mBAAAjE,GACI,MAAO,CACH8F,YAAa3tH,KAAKytH,sBAClBzqC,YAAa,IAAIhjF,KAAKg7G,oBACtBhtG,UAAWhO,KAAK8rH,iBAExB,CAKA,MAAA/0G,CAAOpV,GACH3B,KAAK4uC,cAAc9sC,KAAKH,EAC5B,CAKA,IAAA+tC,GAGI,GAFA1vC,KAAK2nH,aAAc,EAEf3nH,KAAK8rF,SAAU,CACf,IACI9rF,KAAK8rF,SAAS7Q,YAClB,CAAE,MAAOtD,GAAI,CACb33E,KAAK8rF,SAAW,IACpB,CAGA,GAAI9rF,KAAK0rH,eAAiB1rH,KAAK2rH,iBAAkB,CAC7C,IACI3rH,KAAK0rH,cAActmC,QAAQplF,KAAKgwF,SACpC,CAAE,MAAOrY,GAET,CACA33E,KAAK8xC,OAAS9xC,KAAK0rH,aACvB,CACJ,CAKA,YAAM3gC,GACE/qF,KAAK4xC,cAA4C,cAA5B5xC,KAAK4xC,aAAav/B,aACjCrS,KAAK4xC,aAAam5C,QAEhC,CAKA,OAAAhoF,GACI/C,KAAK0vC,OAED1vC,KAAK4xC,eACL5xC,KAAK4xC,aAAa25C,QAClBvrF,KAAK4xC,aAAe,MAGxB5xC,KAAKgwF,SAAW,KAChBhwF,KAAKiwF,UAAY,KACjBjwF,KAAK4uC,cAAgB,EACzB,EC/RG,MAAMg/E,GACT,WAAA9tH,GAEIE,KAAK6tH,cAAgB,CACjBjyF,SAAU,CACNkyF,SAAU,CAAC,SAAU,OAAQ,UAAW,OAAQ,SAChDl3F,OAAQ,EACRnoB,SAAU,EACV7B,YAAa,mCAEjBurD,OAAQ,CACJ21D,SAAU,CAAC,OAAQ,MAAO,QAAS,SACnCl3F,OAAQ,GACRnoB,SAAU,EACV7B,YAAa,6BAEjBmhH,QAAS,CACLD,SAAU,CAAC,SAAU,OAAQ,OAAQ,OAAQ,UAC7Cl3F,OAAQ,GACRnoB,SAAU,EACV7B,YAAa,8BAEjBsK,YAAa,CACT42G,SAAU,CAAC,QAAS,UAAW,QAAS,UAAW,WACnDl3F,OAAQ,IACRnoB,SAAU,EACV7B,YAAa,2BAEjBohH,WAAY,CACRF,SAAU,CAAC,UAAW,QAAS,QAC/Bl3F,QAAQ,EACRnoB,SAAU,EACV7B,YAAa,+BAKrB5M,KAAKiuH,aAAe,CAChBC,OAAQ,CAAC,UAAW,SACpBC,SAAU,CAAC,QAAS,WACpBj2D,UAAW,CAAC,SAAU,WACtB/kC,OAAQ,CAAC,OAAQ,SAIrBnzB,KAAKouH,gBAAkB,CACnBC,OAAQ,CACJC,gBAAiB,GACjBC,iBAAkB,EAClB3hH,YAAa,oBAEjBqzB,SAAU,CACNquF,gBAAiB,GACjBC,iBAAkB,EAClB3hH,YAAa,qBAEjB4hH,MAAO,CACHF,gBAAiB,GACjBC,iBAAkB,EAClB3hH,YAAa,mBAEjB6hH,MAAO,CACHH,gBAAiB,GACjBC,iBAAkB,GAClB3hH,YAAa,mBAKrB5M,KAAK0pE,OAAS,CAEV93D,SAAU,CACNk8G,SAAU,CAAC,SAAU,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,QAAS,UACvEY,gBAAiB,EACjBjgH,SAAU,EACV7B,YAAa,+CAIjB+hH,WAAY,CACRb,SAAU,CAAC,OAAQ,MAAO,QAAS,QAAS,OAAQ,OAAQ,SAC5DY,gBAAiB,EACjBjgH,SAAU,EACV7B,YAAa,6CAIjBgiH,MAAO,CACHd,SAAU,CAAC,UAAW,SAAU,aAAc,cAC9CY,gBAAiB,EACjBjgH,SAAU,EACV7B,YAAa,mDAIjB+1C,QAAS,CACLmrE,SAAU,CAAC,QAAS,OAAQ,UAAW,QAAS,UAAW,WAC3DY,iBAAiB,EACjBjgH,SAAU,EACV7B,YAAa,2CAIjBkB,UAAW,CACPggH,SAAU,CAAC,UAAW,QAAS,QAC/BY,iBAAiB,EACjBjgH,SAAU,EACV7B,YAAa,qCAKrB5M,KAAK6uH,sBAAwB,CACzB,CAAC,SAAU,WACX,CAAC,OAAQ,QACT,CAAC,OAAQ,SACT,CAAC,MAAO,SACR,CAAC,OAAQ,SACT,CAAC,OAAQ,WACT,CAAC,QAAS,WACV,CAAC,QAAS,WACV,CAAC,UAAW,UAIhB7uH,KAAK8uH,kBAAoB,CACrB,CAAC,SAAU,QACX,CAAC,OAAQ,SACT,CAAC,OAAQ,SACT,CAAC,MAAO,SACR,CAAC,OAAQ,SAIb9uH,KAAK4iF,OAAS,CACVmsC,UAAW,CAAC,SAAU,UAAW,SACjCC,SAAU,CAAC,OAAQ,MAAO,QAC1B/1G,QAAS,CAAC,OAAQ,QAAS,UAC3Bg2G,SAAU,CAAC,QAAS,UAAW,WAC/BC,MAAO,CAAC,UAAW,QAAS,WAC5B/7F,OAAQ,CAAC,OAAQ,OAAQ,WACzBE,SAAU,CAAC,OAAQ,QAAS,YAKhCrzB,KAAKmvH,OAAS,CACVC,QAAS,8CACTC,QAAS,0CACTN,UAAW,qDACX57F,OAAQ,mDACRs7F,MAAO,6DACPO,SAAU,+BACVC,SAAU,4DACVL,MAAO,8DAEf,CAQA,wBAAAU,CAAyBC,EAAUC,GAE/B,GAAID,IAAaC,EAAU,OAAO,EAMlC,GAHqBxvH,KAAK8uH,kBAAkB71C,KAAKw2C,GAC5CA,EAAKjqH,SAAS+pH,IAAaE,EAAKjqH,SAASgqH,IAE5B,OAAO,EAGzB,MAAME,EAAS1vH,KAAK2vH,gBAAgBJ,GAC9BK,EAAS5vH,KAAK2vH,gBAAgBH,GAGpC,GAAIE,IAAWE,EAAQ,CACnB,MAAMt8B,EAAQtzF,KAAK0pE,OAAOgmD,GAC1B,OAAOp8B,GAAmC,IAA1BA,EAAMo7B,eAC1B,CAIA,QAAe,aAAXgB,GAAoC,aAAXE,GACd,UAAXF,GAAiC,UAAXE,EAG9B,CAOA,eAAAD,CAAgBnsH,GACZ,IAAK,MAAOqsH,EAAWv8B,KAAUvtF,OAAO4F,QAAQ3L,KAAK0pE,QACjD,GAAI4pB,EAAMw6B,SAAStoH,SAAShC,GACxB,OAAOqsH,EAGf,OAAO,IACX,CAOA,kBAAAC,CAAmBtsH,GACf,MAAM8vF,EAAQtzF,KAAK2vH,gBAAgBnsH,GACnC,OAAO8vF,EAAQtzF,KAAK0pE,OAAO4pB,GAAO7kF,SAAW,EACjD,CAOA,qBAAAshH,CAAsBjC,GAClB,IAAKA,GAAgC,IAApBA,EAAS/oH,OAAc,MAAO,GAC/C,GAAwB,IAApB+oH,EAAS/oH,OAAc,OAAO+oH,EAElC,MAAMprC,EAAQ,GACRstC,EAAO,IAAI71G,IAGX81G,EAAoB1oH,GAAmB,iBAANA,EAAiBA,EAAIA,EAAEkoD,YAGxDgtD,EAAS,IAAIqR,GAAUxvE,KAAK,CAACC,EAAG/2C,IAChBxH,KAAK8vH,mBAAmBG,EAAiB1xE,IACzCv+C,KAAK8vH,mBAAmBG,EAAiBzoH,KAI/D,IAAK,MAAMhE,KAAWi5G,EAAQ,CAC1B,GAAIuT,EAAKj2G,IAAIvW,GAAU,SAEvB,MAAMisD,EAAcwgE,EAAiBzsH,GAGrC,IAAI0sH,GAAS,EACb,IAAK,MAAMC,KAAaztC,EAAO,CAC3B,MAAM0tC,EAAmBH,EAAiBE,GAC1C,IAAKnwH,KAAKsvH,yBAAyB7/D,EAAa2gE,GAAmB,CAC/DF,GAAS,EACT,KACJ,CACJ,CAEA,GAAIA,EAAQ,CAER,MAAM58B,EAAQtzF,KAAK0pE,OAAO1pE,KAAK2vH,gBAAgBlgE,IAC/C,GAAI6jC,GAASA,EAAMo7B,gBAAkB,GACdhsC,EAAMliC,OAAO6vE,GAC5BrwH,KAAK2vH,gBAAgBM,EAAiBI,MAAQrwH,KAAK2vH,gBAAgBlgE,IACrE1qD,QACgBuuF,EAAMo7B,gBACpB,SAIRhsC,EAAM5gF,KAAK0B,GACXwsH,EAAK1+E,IAAI9tC,EACb,CACJ,CAEA,OAAOk/E,CACX,CAOA,UAAA4tC,CAAWC,GACP,OAAKA,GAGDvwH,KAAKmvH,OAAOoB,KACZA,EAAcvwH,KAAKmvH,OAAOoB,IAGhBA,EAAYtpH,MAAM,KAAKC,IAAIgB,GAAKA,EAAEsoH,QACnCtpH,IAAI88D,GAENA,EAAK/8D,MAAM,KAAKC,IAAIK,GAAKA,EAAEipH,QAAQhwE,OAAOj5C,GAAKA,KAVjC,EAY7B,CAOA,sBAAAkpH,CAAuB3C,GACnB,MAAM4C,EAAe5C,EAAS5mH,IAAIK,GACjB,iBAANA,EAAiBA,EAAIA,EAAEkoD,aAGlC,OAAOzvD,KAAK6uH,sBAAsB51C,KAAK03C,GACnCA,EAAMC,MAAMptH,GAAWktH,EAAalrH,SAAShC,IAErD,CAOA,QAAAqtH,CAASC,GACL,OAAO9wH,KAAK4iF,OAAOkuC,IAAc,IACrC,CAOA,WAAAC,CAAYjD,GACR,MAAMkD,EAAahxH,KAAK+vH,sBAAsBjC,GACxCmD,EAAcjxH,KAAKywH,uBAAuBO,GAEhD,MAAO,CACH1rH,KAAM,QACNwoH,SAAUkD,EAAW9pH,IAAIK,GAAkB,iBAANA,EAAiBA,EAAIA,EAAEkoD,aAC5DwhE,cACA1sH,UAAWC,KAAK+N,MAExB,CAOA,cAAA2+G,CAAe1tH,GACX,OAAyC,OAAlCxD,KAAK2vH,gBAAgBnsH,EAChC,CAMA,cAAA2tH,GACI,MAAMrD,EAAW,GACjB,IAAK,MAAMx6B,KAASvtF,OAAOonB,OAAOntB,KAAK0pE,QACnCokD,EAAShsH,QAAQwxF,EAAMw6B,UAE3B,MAAO,IAAI,IAAI3zG,IAAI2zG,GACvB,CAOA,gBAAAsD,CAAiB5tH,GACb,IAAK,MAAO6tH,EAAWC,KAAgBvrH,OAAO4F,QAAQ3L,KAAK6tH,eACvD,GAAIyD,EAAYxD,SAAStoH,SAAShC,GAC9B,MAAO,CACH8I,KAAM+kH,KACHC,GAIf,OAAO,IACX,CASA,qBAAAC,CAAsB/tH,EAAS2qC,EAAaj3B,EAAc,GACtD,MAAM0f,EAAS52B,KAAKoxH,iBAAiB5tH,GACrC,IAAKozB,EAAQ,OAAOuX,EAAc,EAGlC,IAAsB,IAAlBvX,EAAOA,OAAe,OAAOuX,EAGjC,MAAMsxE,EAAe7oF,EAAOA,OAAS1f,EAC/Bs6G,EAAW5qH,KAAKqmH,KAAK9+E,EAAcsxE,GAAgBA,EAGzD,MAAoB,YAAhB7oF,EAAOtqB,KACAklH,EAAW,GAGfA,CACX,CAQA,eAAAC,CAAgB3pF,EAAK75B,EAAY,YAC7B,MAAMyjG,EAAU1xG,KAAKouH,gBAAgBngH,IAAcjO,KAAKouH,gBAAgBnuF,SAGxE,IAAIhvB,EAYJ,OAVIA,EADA62B,EAAM,GACI,YACHA,EAAM,IACH,WACHA,EAAM,IACH,SAEA,SAIVlhC,KAAK8I,SAAWgiG,EAAQ4c,iBACjBtuH,KAAKiuH,aAAah9G,IAEtB,EACX,CASA,yBAAAygH,CAA0B15G,EAAcm2B,EAAarG,GACjD,MAAM6pF,EAAY,CAAA,EACZC,EAAY,IAAIz3G,IAGtB,IAAK,MAAMkD,KAAQrF,EAAc,CAC7B,GAAI45G,EAAU73G,IAAIsD,GAAO,SAEzB,MAAM7Z,EAA0B,iBAAT6Z,EAAoBA,EAAOA,EAAKoyC,YACjD+hE,EAAWxxH,KAAKuxH,sBAAsB/tH,EAAS2qC,GAEhDwjF,EAAUH,KACXG,EAAUH,GAAY,IAIPxxH,KAAK+vH,sBACpB/3G,EAAawoC,OAAOj5C,IAAMqqH,EAAU73G,IAAIxS,KAGjC7F,QAAQ6F,IACf,MAAMsqH,EAAqB,iBAANtqH,EAAiBA,EAAIA,EAAEkoD,YAC5BzvD,KAAKoxH,iBAAiBS,IAGvB7xH,KAAKuxH,sBAAsBM,EAAO1jF,KAAiBqjF,IAC9DG,EAAUH,GAAU1vH,KAAKyF,GACzBqqH,EAAUtgF,IAAI/pC,KAG1B,CAGA,MAAM0G,EAAYjO,KAAK8xH,oBAAoBhqF,GACrCiqF,EAAQ/xH,KAAKyxH,gBAAgB3pF,EAAK75B,GAGxC,IAAK,IAAIwiC,EAAOtC,EAAasC,EAAOtC,EAAc,EAAGsC,GAAQ,IACpDkhF,EAAUlhF,IAAoC,IAA3BkhF,EAAUlhF,GAAM1rC,QAChCgtH,EAAMhtH,OAAS,GAAK6B,KAAK8I,SAAW,KACpCiiH,EAAUlhF,GAAQ,CAACshF,EAAMnrH,KAAKgJ,MAAMhJ,KAAK8I,SAAWqiH,EAAMhtH,WAKtE,OAAO4sH,CACX,CAOA,mBAAAG,CAAoBhqF,GAChB,OAAIA,EAAM,GAAW,QACjBA,EAAM,KACNA,EAAM,IADY,WAEA,QAE1B,CAQA,gBAAAkqF,CAAiBC,EAAcphF,EAAa,KAExC,MAAiB,IADAohF,EAAe,EAGrBrrH,KAAKgJ,MAAMqiH,GAAgBphF,EAE/BohF,CACX,EAIJ,MAAMC,GAAuB,IAAItE,6EChgBjC,MAAMuE,GACF,WAAAryH,GAEIE,KAAKoyH,UAAY,CACbC,SAAU,CACN/lH,KAAM,WACN2hC,cAAe,MACfqkF,aAAc,YACdC,gBAAiB,iBACjBthH,QAAS,CACLuhH,SAAU,CAAC,EAAG,EAAG,GAAK,GACtBC,WAAY,CAAC,EAAK,EAAG,GAAK,GAC1B3jF,aAAc,CAAC,EAAG,KAEtBn5B,MAAO,EACP+8G,aAAc,IACdC,kBAAmB,CACf/2F,SAAU,CAAC,SAAU,UAAW,QAChCmyF,QAAS,CAAC,QAAS,WACnBgE,MAAO,CAAC,UAAW,SAEvBa,cAAe,KACf3kH,UAAW,WACXrB,YAAa,0CAGjB+I,MAAO,CACHrJ,KAAM,QACN2hC,cAAe,MACfqkF,aAAc,aACdC,gBAAiB,kBACjBK,cAAe,WACf3hH,QAAS,CACLuhH,SAAU,CAAC,EAAG,EAAG,IAAM,GACvBC,WAAY,CAAC,EAAK,EAAG,GAAK,GAC1B3jF,aAAc,CAAC,EAAG,MAEtBn5B,MAAO,IACP+8G,aAAc,IACdC,kBAAmB,CACf/2F,SAAU,CAAC,OAAQ,OAAQ,UAC3BmyF,QAAS,CAAC,SAAU,SACpBgE,MAAO,CAAC,UAAW,UAEvB9jH,UAAW,WACXrB,YAAa,4CAGjBimH,QAAS,CACLvmH,KAAM,UACN2hC,cAAe,MACfqkF,aAAc,YACdC,gBAAiB,iBACjBK,cAAe,KACf3hH,QAAS,CACLuhH,SAAU,CAAC,EAAG,IAAM,GAAK,KACzBC,WAAY,CAAC,EAAK,GAAK,GAAK,IAC5B3jF,aAAc,CAAC,EAAG,IAAM,GAAK,MAEjCn5B,MAAO,IACP+8G,aAAc,IACdC,kBAAmB,CACf/2F,SAAU,CAAC,SAAU,WACrBu8B,OAAQ,CAAC,QAAS,UAClB41D,QAAS,CAAC,QAAS,WACnBgE,MAAO,CAAC,UAAW,UAEvB9jH,UAAW,QACXrB,YAAa,uCAGjBs0B,MAAO,CACH50B,KAAM,QACN2hC,cAAe,MACfqkF,aAAc,aACdC,gBAAiB,iBACjBK,cAAe,YACf3hH,QAAS,CAELuhH,SAAU,CAAC,EAAG,EAAG,KAAO,GAAK,EAAG,IAAM,EAAG,GACzCC,WAAY,CAAC,EAAK,EAAG,GAAK,GAAK,EAAG,GAAK,EAAG,GAC1C3jF,aAAc,CAAC,EAAG,KAAO,GAAK,MAElCn5B,MAAO,EACP+8G,aAAc,IACdC,kBAAmB,CACf/2F,SAAU,CAAC,OAAQ,UACnBk3F,YAAa,CAAC,QAAS,QACvB/E,QAAS,CAAC,QAAS,WACnBgE,MAAO,CAAC,UAAW,UAEvB9jH,UAAW,QACXrB,YAAa,uCAGjBmJ,UAAW,CACPzJ,KAAM,YACN2hC,cAAe,MACfqkF,aAAc,aACdC,gBAAiB,kBACjBK,cAAe,KACf3hH,QAAS,CAELuhH,SAAU,CAAC,EAAG,EAAG,EAAG,IAAM,IAAM,GAAK,EAAG,MACxCC,WAAY,CAAC,EAAK,EAAG,EAAG,GAAK,GAAK,GAAK,EAAG,IAC1C3jF,aAAc,CAAC,EAAG,IAAM,GAAK,KAAO,MAExCn5B,MAAO,EACP+8G,aAAc,IACdC,kBAAmB,CACf/2F,SAAU,CAAC,SAAU,SACrBk3F,YAAa,CAAC,QAAS,SACvB/E,QAAS,CAAC,QAAS,UACnBgE,MAAO,CAAC,UAAW,WAEvB9jH,UAAW,QACXrB,YAAa,iCAGjB8I,MAAO,CACHpJ,KAAM,QACN2hC,cAAe,MACfqkF,aAAc,aACdC,gBAAiB,kBACjBK,cAAe,KACf3hH,QAAS,CACLuhH,SAAU,CAAC,EAAG,IAAM,KACpBC,WAAY,CAAC,EAAK,GAAK,IACvB3jF,aAAc,CAAC,EAAG,IAAM,MAE5Bn5B,MAAO,EACP+8G,aAAc,IACdC,kBAAmB,CACf/2F,SAAU,CAAC,OAAQ,SACnBm3F,KAAM,CAAC,UAAW,QAClBhB,MAAO,CAAC,UAAW,SAEvB9jH,UAAW,SACXrB,YAAa,kBAGjBomH,OAAQ,CACJ1mH,KAAM,SACN2hC,cAAe,MACfqkF,aAAc,cACdC,gBAAiB,iBACjBK,cAAe,WACf3hH,QAAS,CAELuhH,SAAU,CAAC,EAAG,IAAM,GAAK,IAAM,EAAG,IAAM,GAAK,KAC7CC,WAAY,CAAC,EAAK,GAAK,EAAK,GAAK,EAAK,GAAK,EAAK,IAChD3jF,aAAc,CAAC,EAAG,IAAM,GAAK,MAEjCn5B,MAAO,EACP+8G,aAAc,IACdC,kBAAmB,CACf/2F,SAAU,CAAC,QAAS,UACpB1kB,YAAa,CAAC,QAAS,UACvB66G,MAAO,CAAC,UAAW,WAEvB9jH,UAAW,QACXrB,YAAa,oCAGjB+Q,QAAS,CACLrR,KAAM,UACN2hC,cAAe,MACfqkF,aAAc,cACdC,gBAAiB,kBACjBK,cAAe,KACf3hH,QAAS,CACLuhH,SAAU,CAAC,GAAK,EAAG,GAAK,EAAG,GAAK,EAAG,GAAK,GACxCC,WAAY,CAAC,GAAK,EAAG,GAAK,EAAG,GAAK,EAAG,GAAK,GAC1C3jF,aAAc,CAAC,EAAG,KAEtBn5B,MAAO,EACP+8G,aAAc,IACdC,kBAAmB,CACf/2F,SAAU,CAAC,QAAS,WACpBmyF,QAAS,CAAC,OAAQ,WAClBgE,MAAO,CAAC,OAAQ,UAEpB9jH,UAAW,SACXrB,YAAa,2BAGjBo0B,KAAM,CACF10B,KAAM,OACN2hC,cAAe,MACfqkF,aAAc,aACdC,gBAAiB,iBACjBK,cAAe,cACf3hH,QAAS,CAELuhH,SAAU,CAAC,IAAK,KAAO,IAAM,EAAG,KAAO,IAAM,EAAG,MAChDC,WAAY,CAAC,IAAK,GAAK,GAAK,EAAG,GAAK,GAAK,EAAG,IAC5C3jF,aAAc,CAAC,EAAG,KAAO,IAAM,KAAO,IAAM,OAEhDn5B,MAAO,GACP+8G,aAAc,IACdC,kBAAmB,CACfM,IAAK,CAAC,SAAU,SAChBC,MAAO,CAAC,SAAU,SAClBJ,YAAa,CAAC,OAAQ,SACtBf,MAAO,CAAC,QAAS,YAErB9jH,UAAW,QACXrB,YAAa,wCAGjBg9B,KAAM,CACFt9B,KAAM,OACN2hC,cAAe,MACfqkF,aAAc,aACdC,gBAAiB,iBACjBK,cAAe,KACf3hH,QAAS,CAELuhH,SAAU,CAAC,EAAG,EAAG,EAAG,KAAO,EAAG,IAAM,KAAO,GAC3CC,WAAY,CAAC,EAAK,EAAG,EAAG,GAAK,EAAG,GAAK,GAAK,GAC1C3jF,aAAc,CAAC,EAAG,KAAO,IAAM,OAEnCn5B,MAAO,EACP+8G,aAAc,IACdC,kBAAmB,CACf/2F,SAAU,CAAC,SAAU,QACrBu3F,MAAO,CAAC,QAAS,WACjBL,YAAa,CAAC,QAAS,SACvBf,MAAO,CAAC,UAAW,WAEvB9jH,UAAW,WACXrB,YAAa,qCAKrB5M,KAAKuO,YAAc,CACf6kH,QAAS,EACTC,QAAS,EACTC,WAAY,EACZ3mF,OAAQ,GAIZ3sC,KAAKuzH,cAAgB,KACrBvzH,KAAKwzH,eAAiB,UACtBxzH,KAAKyzH,cAAgB,IACzB,CAKA,WAAAC,CAAYpnH,GACR,OAAOtM,KAAKoyH,UAAU9lH,EAAKvC,gBAAkB/J,KAAKoyH,UAAUC,QAChE,CAKA,WAAAsB,CAAY5nF,EAAQqE,EAAYl5B,GAC5B,IAAK60B,IAAWA,EAAO96B,QAAS,OAAO,EAMvC,MAAM2iH,EAAe7nF,EAAO96B,QAAQ69B,aAAa+kF,UAC7CjU,GAAOh5G,KAAKib,IAAI+9F,EAAM1oG,GAAe,KAGzC,WAAI08G,EAA4B,EAEzB7nF,EAAO96B,QAAQuhH,SAASoB,IAAiB,CACpD,CAKA,WAAAE,CAAY/nF,EAAQqE,EAAYl5B,GAC5B,IAAK60B,IAAWA,EAAO96B,QAAS,OAAO,EAKvC,MAAM2iH,EAAe7nF,EAAO96B,QAAQ69B,aAAa+kF,UAC7CjU,GAAOh5G,KAAKib,IAAI+9F,EAAM1oG,GAAe,KAGzC,WAAI08G,EAA4B,EAEzB7nF,EAAO96B,QAAQwhH,WAAWmB,IAAiB,CACtD,CAKA,mBAAAG,CAAoBhoF,EAAQqE,EAAYl5B,EAAa88G,EAAoB,IACrE,IAAKjoF,IAAWA,EAAO4mF,kBAAmB,OAAO,KAGjD,IAAIsB,EAEAA,EADgB,IAAhB/8G,EACW,WACY,KAAhBA,EACI,UACY,MAAhBA,GAAwC,MAAhBA,EACpB,cAEA,cAIK,SAAhB60B,EAAOz/B,MAAmB8jC,EAAa,GAAM,GAAqB,IAAhBl5B,IAClD+8G,EAAW,OAGf,MAAMC,EAAYnoF,EAAO4mF,kBAAkBsB,IAAaloF,EAAO4mF,kBAAkBZ,MACjF,IAAKmC,GAAkC,IAArBA,EAAUnvH,OAAc,OAAO,KAGjD,GAAIivH,EAAkBjvH,OAAS,EAAG,CAC9B,MAAMovH,EAAYD,EAAU1zE,OAAOj5C,GAAKysH,EAAkBxuH,SAAS+B,IACnE,GAAI4sH,EAAUpvH,OAAS,EACnB,OAAOovH,EAAUvtH,KAAKgJ,MAAMhJ,KAAK8I,SAAWykH,EAAUpvH,QAE9D,CAGA,OAAOmvH,EAAUttH,KAAKgJ,MAAMhJ,KAAK8I,SAAWwkH,EAAUnvH,QAC1D,CAKA,cAAAqvH,CAAeroF,EAAQnV,GACnB,IAAKmV,IAAWA,EAAO2mF,aAAc,OAAO97F,EAE5C,MAAM82F,EAAW3hF,EAAO2mF,aAClBjwF,GAAU77B,KAAK8I,SAAW,IAAOg+G,EACvC,OAAO9mH,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAG8uB,EAAS6L,GAC5C,CAKA,UAAA4xF,CAAWtoF,EAAQ70B,GACf,OAAK60B,GAAWA,EAAOp2B,OAA0B,IAAjBo2B,EAAOp2B,MAGnC/O,KAAKib,IAAI3K,EAAc,IAAO,IACvB,GAA6B,IAAtB60B,EAAOp2B,MAAQ,IAI7B/O,KAAKib,IAAI3K,EAAc,KAAQ,IACxB,IAA8B,KAAtB60B,EAAOp2B,MAAQ,IAE9B/O,KAAKib,IAAI3K,EAAc,KAAQ,IACxB,IAA8B,KAAtB60B,EAAOp2B,MAAQ,IAG3BuB,EAfoDA,CAgB/D,CAKA,SAAAo9G,CAAUhoH,EAAMknH,EAAiB,MAC7B,MAAMznF,EAAS/rC,KAAK0zH,YAAYpnH,GAChC,QAAKy/B,IAIQ,aAFAynF,GAAkBxzH,KAAKwzH,iBAETxzH,KAAKuzH,cAI5BvzH,KAAKyzH,cAAgB1nF,GAHrB/rC,KAAKuzH,cAAgBxnF,EACrB/rC,KAAKyzH,cAAgB,OAMlB,EACX,CAKA,MAAA18G,CAAOq5B,GACEpwC,KAAKyzH,gBAGmB,YAAxBzzH,KAAKwzH,gBAAgCpjF,EAAa,GAAM,GAChC,eAAxBpwC,KAAKwzH,gBAAmCpjF,EAAa,IAAO,KAG7DpwC,KAAKuzH,cAAgBvzH,KAAKyzH,cAC1BzzH,KAAKyzH,cAAgB,KAE7B,CAKA,eAAAc,GACI,OAAOv0H,KAAKuzH,eAAejB,cAAgB,IAC/C,CAKA,kBAAAkC,GACI,OAAOx0H,KAAKuzH,eAAehB,iBAAmB,gBAClD,CAKA,gBAAAkC,GACI,OAAOz0H,KAAKuzH,eAAeX,eAAiB,IAChD,CAOA,sBAAA8B,CAAuBtkF,GACnB,QAAKpwC,KAAKuzH,eAAeX,eAIlBxiF,GAD2C,WAAjCpwC,KAAKuzH,cAActlH,UAAyB,GAAK,KACjC,CACrC,CAQA,kBAAA0mH,CAAmBvkF,EAAYl5B,GAC3B,IAAKlX,KAAKuzH,cAAe,OAAO,KAEhC,MAAMvtG,EAAS,CACXm8B,KAAMniD,KAAKu0H,kBACX/9F,OAAQ,KACR1b,WAAY,KACZ85G,UAAW,KACXl9E,SAAU,GAIV13C,KAAK00H,uBAAuBtkF,IAA+B,IAAhBl5B,IAC3C8O,EAAO4uG,UAAY50H,KAAKy0H,oBAI5B,MAAMjC,EAAWxyH,KAAK2zH,YAAY3zH,KAAKuzH,cAAenjF,EAAYl5B,GAC5DwgC,EAAW13C,KAAK8zH,YAAY9zH,KAAKuzH,cAAenjF,EAAYl5B,GAgBlE,OAdIs7G,EAAW,IAAO96E,EAAW,KAC7B1xB,EAAOwQ,OAASx2B,KAAK+zH,oBACjB/zH,KAAKuzH,cACLnjF,EACAl5B,GAEJ8O,EAAO0xB,SAAWA,GAIlB1xB,EAAOwQ,QAAU5vB,KAAK8I,SAAW,KACjCsW,EAAOlL,WAAa9a,KAAKw0H,sBAGtBxuG,CACX,CAKA,cAAA6uG,GACI,OAAO9uH,OAAO0G,KAAKzM,KAAKoyH,UAC5B,CAKA,aAAA0C,CAAcxoH,GACV,MAAMyoH,EAAW/0H,KAAKoyH,UAAU9lH,GAChC,OAAKyoH,EAEE,CACHzoH,KAAMyoH,EAASzoH,KACf2hC,cAAe8mF,EAAS9mF,cACxBrhC,YAAamoH,EAASnoH,YACtBqB,UAAW8mH,EAAS9mH,UACpB0H,MAAOo/G,EAASp/G,MAChB28G,aAAcyC,EAASzC,aACvBM,cAAemC,EAASnC,eATN,IAW1B,ECpfG,MAAMoC,GACT,WAAAl1H,CAAYq5B,GACRn5B,KAAKm5B,OAASA,EACdn5B,KAAKi1H,oBAAsB,IAC/B,CAKA,IAAA3uB,GAEA,CAOA,eAAA4uB,GAsBI,OApBIl1H,KAAKm5B,OAAO4hF,eACZ/6G,KAAKm5B,OAAO4hF,cAAcrrE,OAI1B1vC,KAAKi1H,sBACLE,cAAcn1H,KAAKi1H,qBACnBj1H,KAAKi1H,oBAAsB,MAK3Bj1H,KAAKm5B,OAAOs2C,eACZzvE,KAAKm5B,OAAOs2C,aAAa8uC,eAAe,GACxCv+G,KAAKm5B,OAAOs2C,aAAa6uC,oBAAoB,GAC7Ct+G,KAAKm5B,OAAOs2C,aAAasrC,cAAgB,KACzC/6G,KAAKm5B,OAAOs2C,aAAa0qC,oBAAsB,EAC/Cn6G,KAAKm5B,OAAOs2C,aAAa2qC,aAAe,IAGrCp6G,KAAKm5B,MAChB,CAOA,kBAAMi8F,CAAalJ,GACf,OAAKlsH,KAAKm5B,OAAO4hF,eAKZ/6G,KAAKm5B,OAAO4hF,cAAcnpE,oBACrB5xC,KAAKm5B,OAAO4hF,cAAczU,OAIpCtmG,KAAKm5B,OAAO4hF,cAAckR,oBAAoBC,GAG1ClsH,KAAKm5B,OAAOs2C,eACZzvE,KAAKm5B,OAAOs2C,aAAasrC,cAAgB/6G,KAAKm5B,OAAO4hF,cAGrD/6G,KAAKm5B,OAAO4hF,cAAchkG,OAAQ/I,IAC1BhO,KAAKm5B,OAAOs2C,cAAgBzvE,KAAKm5B,OAAOs2C,aAAayqC,oBAErDl6G,KAAKm5B,OAAOs2C,aAAa0qC,oBAAkC,GAAZnsG,MAMvDhO,KAAKi1H,qBACLE,cAAcn1H,KAAKi1H,qBAGvBj1H,KAAKi1H,oBAAsBI,YAAY,KACnC,GAAIr1H,KAAKm5B,OAAO4hF,cAAc4M,aAAe3nH,KAAKm5B,OAAOs2C,aAAc,CAEnE,MAAMzhE,EAAYhO,KAAKm5B,OAAO4hF,cAAc+Q,kBAAoB,EAC1DwJ,EAAmBt1H,KAAKm5B,OAAO4hF,cAAc0S,uBAAyB,EAG5EztH,KAAKm5B,OAAOs2C,aAAa8uC,eAAe+W,GAGxCt1H,KAAKm5B,OAAOs2C,aAAa6uC,oBAAgC,EAAZtwG,EACjD,GACD,IAGChO,KAAKm5B,OAAOrd,WACZ9b,KAAKm5B,OAAOrd,SAASi/F,cAAgB/6G,KAAKm5B,OAAO4hF,eAG9C/6G,KAAKm5B,QAhDDn5B,KAAKm5B,MAiDpB,CAMA,YAAAyhC,GACI,IAAK56D,KAAKm5B,OAAOlhB,SACb,OAAOjY,KAAKm5B,OAIhB,MAAMo8F,EAAqBv1H,KAAKm5B,OAAOq8F,oBAAoB1jC,kBAiB3D,OAdA9xF,KAAKm5B,OAAOq8F,oBAAoBjmG,UAGhCvvB,KAAKm5B,OAAOlhB,UAAW,EAGvBjY,KAAKm5B,OAAOrd,SAAS25G,eAGrBz1H,KAAKm5B,OAAOsW,KAAK,gBAAiB,CAC9B8lF,qBACAG,iBAAkB,MAGf11H,KAAKm5B,MAChB,CAOA,SAAAw8F,CAAUlsC,GACN,MAAMmsC,EAAgBhvH,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAG2hF,IAG9C,GAFAzpF,KAAKm5B,OAAOnT,OAAOukE,aAAeqrC,EAE9B51H,KAAKm5B,OAAOm1D,YAAYpD,cAAe,CACvC,MAAMtwC,EAAiB56C,KAAKm5B,OAAOw0C,aAAanyD,kBAAkBjY,QAClEvD,KAAKm5B,OAAOm1D,YAAY9E,gBAAgBosC,EAAeh7E,EAC3D,CAIA,OAFA56C,KAAKm5B,OAAOsW,KAAK,gBAAiB,CAAEg6C,OAAQmsC,IAErC51H,KAAKm5B,MAChB,CAKA,OAAAp2B,GACI/C,KAAKk1H,iBACT,EC3JG,MAAMW,GACT,WAAA/1H,CAAYq5B,GACRn5B,KAAKm5B,OAASA,EACdn5B,KAAK+4E,eAAiB,KACtB/4E,KAAKgY,aAAe,EACxB,CAKA,IAAAsuF,GAEA,CAcA,OAAAvjG,GACI/C,KAAKgY,aAAe,GACpBhY,KAAK+4E,eAAiB,IAC1B,EC1BG,MAAM+8C,GACT,WAAAh2H,CAAYq5B,GACRn5B,KAAKm5B,OAASA,EACdn5B,KAAK46C,eAAiB,UACtB56C,KAAK+1H,iBAAmB,CAC5B,CAKA,IAAAzvB,GAEA,CAQA,UAAAxsF,CAAWvW,EAASu3D,EAAU,MAE1B,MAQMk7D,EARiB,CACnBviH,MAAS,MACTE,QAAW,WACXC,WAAc,QACdC,IAAO,WAI0BtQ,IAAYA,EAGjD,IAAIsG,EAAY,KACZ2E,EAAW,IAYf,GAVuB,iBAAZssD,EACPjxD,EAAYixD,EACLA,GAA8B,iBAAZA,IACzBjxD,EAAYixD,EAAQjxD,WAAa,KACjC2E,EAAWssD,EAAQtsD,UAAY,KAInBxO,KAAKm5B,OAAOw0C,aAAa7zD,WAAWk8G,EAAensH,EAAW2E,GAEjE,CAET,MAAMktC,EAAgB5nC,EAAWkiH,GAKjC,GAJIt6E,GACA/I,GAAkBW,eAAe,UAAW0iF,EAAet6E,GAG3D17C,KAAKm5B,OAAO6a,eAAgB,CAE5Bh0C,KAAKm5B,OAAO6a,eAAe9xC,QAG3B,MAAM6sF,EAAiB/uF,KAAKm5B,OAAOw0C,aAAa1yD,gCAKhD,IAAIg7G,EASJ,GAPIA,EADkB,YAAlBD,EACe,EACU,YAAlBA,EACQ,EAEApvH,KAAKkB,IAAI,EAAGlB,KAAKgJ,MAAMm/E,EAAehiF,aAAe,IAGpEkpH,EAAe,EAAG,CAElB,MAAMt1H,EAAUX,KAAKm5B,OAAOkxC,cAAc5pE,MAAQ,EAC5CG,EAAUZ,KAAKm5B,OAAOkxC,cAAc3pE,OAAS,EAEnDV,KAAKm5B,OAAO6a,eAAelnB,MACvBmpG,EACAlnC,EAAe7hF,iBACfvM,EACAC,EAER,CACJ,CAQA,GAA0C,YAAtCZ,KAAKm5B,OAAOnT,OAAOglD,gBAAgChrE,KAAKm5B,OAAOrd,SAASo5D,kBAAmB,CAC3F,MAAMghD,EAAgB/hH,EAAuB6hH,GAC7Ch2H,KAAKm5B,OAAOrd,SAASo5D,kBAAkB8gD,EAAeE,EAAersH,EACzE,CAGA7J,KAAKm5B,OAAOsW,KAAK,iBAAkB,CAAElsC,QAASyyH,EAAensH,YAAW2E,YAE5E,CAGA,OADAxO,KAAK46C,eAAiBo7E,EACfh2H,KAAKm5B,MAChB,CAcA,OAAAp2B,GACI/C,KAAK46C,eAAiB,SAC1B,ECzHG,MAAMu7E,GACT,WAAAr2H,CAAYq5B,GACRn5B,KAAKm5B,OAASA,EACdn5B,KAAKo2H,YAAc,KACnBp2H,KAAKwvC,WAAY,EACjBxvC,KAAKq2H,SAAW,CACpB,CAKA,IAAA/vB,GAEA,CAMA,KAAA96F,GACI,GAAIxL,KAAKm5B,OAAOm9F,oBAAoBrlD,cAChC,OAAOjxE,KAAKm5B,OAMhB,GAFgBn5B,KAAKm5B,OAAOm9F,oBAAoB9qH,QAEnC,CAKT,GAJAxL,KAAKm5B,OAAOqW,WAAY,EACxBxvC,KAAKwvC,WAAY,EAGyB,YAAtCxvC,KAAKm5B,OAAOnT,OAAOglD,gBAAgChrE,KAAKm5B,OAAO6a,eAAgB,CAC/E,MAGMkiF,EAAgB/hH,EAHDnU,KAAKm5B,OAAOw0C,aAAanyD,kBACjBjY,SAK7B,IAAIgzH,EAAMC,EACV,GAAIx2H,KAAKm5B,OAAOrd,UAAY9b,KAAKm5B,OAAOrd,SAASo6D,sBAAuB,CACpE,MAAMugD,EAASz2H,KAAKm5B,OAAOrd,SAASo6D,wBACpCqgD,EAAOE,EAAOp0H,EACdm0H,EAAOC,EAAOn0H,CAClB,MAEIi0H,EAAOv2H,KAAKm5B,OAAOkxC,cAAc5pE,MAAQ,EACzC+1H,EAAOx2H,KAAKm5B,OAAOkxC,cAAc3pE,OAAS,EAO9C,GAHAV,KAAKm5B,OAAO6a,eAAe9xC,QAGvBg0H,EAAcnpH,aAAe,EAAG,CAEhC,MAAMkpH,EAAervH,KAAKkB,IAAI,EAAGlB,KAAKgJ,MAAMsmH,EAAcnpH,aAAe,IAErEkpH,EAAe,GACfj2H,KAAKm5B,OAAO6a,eAAelnB,MACvBmpG,EACAC,EAAchpH,iBACdqpH,EACAC,EAGZ,CACJ,CAGIx2H,KAAKm5B,OAAOu9F,oBACZ12H,KAAKm5B,OAAOu9F,mBAAmBC,kBAInC32H,KAAKm5B,OAAOsW,KAAK,UACrB,CAEA,OAAOzvC,KAAKm5B,MAChB,CAMA,IAAAuW,GACI,OAAK1vC,KAAKm5B,OAAOm9F,oBAAoBrlD,eAKjCjxE,KAAKm5B,OAAOlhB,UACZjY,KAAKm5B,OAAOy9F,aAAah8D,eAIb56D,KAAKm5B,OAAOm9F,oBAAoB5mF,SAG5C1vC,KAAKm5B,OAAOqW,WAAY,EACxBxvC,KAAKwvC,WAAY,EAGbxvC,KAAKm5B,OAAOu9F,oBACZ12H,KAAKm5B,OAAOu9F,mBAAmBG,iBAInC72H,KAAKm5B,OAAOsW,KAAK,YAGdzvC,KAAKm5B,QAxBDn5B,KAAKm5B,MAyBpB,CAMA,MAAAxe,CAAO3H,GAOH,GALIhT,KAAKm5B,OAAOlhB,UAAYjY,KAAKm5B,OAAOq8F,oBAAoBtjC,sBACxDlyF,KAAKm5B,OAAOq8F,oBAAoB3kC,iBAAiB79E,GAIX,YAAtChT,KAAKm5B,OAAOnT,OAAOglD,eAA8B,CAEjD,GAAIhrE,KAAKm5B,OAAO29F,cACZ92H,KAAKm5B,OAAO29F,YAAYn8G,OAAO3H,GAIR,cADAhT,KAAKm5B,OAAOw0C,aAAanyD,kBAAkBjY,SAC9B,CAEhC,MAAM+1E,EAAWt5E,KAAKm5B,OAAO29F,YAAYx9C,SACnC34E,EAAUX,KAAKm5B,OAAOp5B,OAAOU,MAAQ,EACrCG,EAAUZ,KAAKm5B,OAAOp5B,OAAOW,OAAS,EACtCqiB,EAAWnc,KAAKkb,KAClBlb,KAAKC,IAAIyyE,EAASj3E,EAAI1B,EAAS,GAC/BiG,KAAKC,IAAIyyE,EAASh3E,EAAI1B,EAAS,IAI7Bm2H,EAAmBjjH,EAAW,aACpC,GAAIijH,GAAoBA,EAAiBlqH,OAAQ,CAC7C,MAAM6tE,EAAc9zE,KAAKkB,IAAInH,EAASC,GAChC4M,EAAc5G,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAG,EAAKib,EAAW23D,IAC5Dq8C,EAAiBlqH,OAAOW,YAAcA,CAC1C,CACJ,CASJ,GALIxN,KAAKm5B,OAAO69F,cACZh3H,KAAKm5B,OAAO69F,aAAar8G,OAAO3H,GAIhChT,KAAKm5B,OAAO29F,aAAe92H,KAAKm5B,OAAO69F,aAAc,CACrD,MAAM3rD,EAAarrE,KAAKm5B,OAAO29F,YAAYn8C,gBACrCh7D,EAAa3f,KAAKm5B,OAAO69F,aAAa75C,gBAGtC85C,EAAYj3H,KAAKm5B,OAAO29F,YAAYt/E,WAGpCq+B,EAAW,CACbpzC,OAAQ,CACJpgC,EAAGgpE,EAAWhpE,EAAIsd,EAAWtd,EAC7BC,EAAG+oE,EAAW/oE,EAAIqd,EAAWrd,GAEjCwzE,UAAWmhD,EAAUnhD,UACrBohD,UAAWD,EAAUC,WAIrBl3H,KAAKm5B,OAAOrd,SAASq7G,aACrBn3H,KAAKm5B,OAAOrd,SAASq7G,YAAYthD,EAEzC,CACJ,CACJ,CAKA,OAAA9yE,GACI/C,KAAK0vC,MACT,EC9LG,MAAM0nF,GACT,WAAAt3H,CAAYq5B,EAAQnT,EAAS,IACzBhmB,KAAKm5B,OAASA,EACdn5B,KAAKgmB,OAAShmB,KAAKq3H,eAAerxG,EACtC,CAKA,cAAAqxG,CAAerxG,GACX,MAAO,CACHsxG,SAAUtxG,EAAOsxG,UAAY,iBAC7BC,gBAAiBvxG,EAAOuxG,iBAAmB,UAC3CC,wBAAyBxxG,EAAOwxG,yBAA2B,GAC3DC,kBAAmBzxG,EAAOyxG,mBAAqB,EAC/C9zH,cAAeqiB,EAAOriB,eAAiB,EACvCu/F,aAAcl9E,EAAOk9E,eAAgB,EACrCw0B,QAAS1xG,EAAO0xG,UAAW,EAC3BC,UAAW3xG,EAAO2xG,YAAa,EAC/BC,WAAY5xG,EAAO4xG,YAAc,UACjC3qH,aAAc+Y,EAAO/Y,cAAgB,OAClC+Y,EAEX,CAYA,SAAAysE,GACI,MAAO,IAAKzyF,KAAKgmB,OACrB,CAKA,YAAAusE,CAAaslC,GAET,OADA73H,KAAKgmB,OAAS,IAAKhmB,KAAKgmB,UAAW6xG,GAC5B73H,KAAKgmB,MAChB,SCqBJ,MACI,WAAAlmB,CAAYkmB,EAAS,IAEjBhmB,KAAK+X,cAAgB,IAAI9U,EAGzBjD,KAAKizF,aAAe,IAAI6kC,GAAa,CACjCC,aAAc/xG,EAAOgyG,mBAAqB,IAC1CC,gBAAiBjyG,EAAOkyG,uBAAwB,EAChDC,iBAAkBnyG,EAAOoyG,wBAAyB,EAClDC,uBAAwBryG,EAAOsyG,6BAA+B,KAIlEt4H,KAAK+X,cAAchU,KAAK,KACpB/D,KAAK4d,WAAWoI,IACjB,iBAFHhmB,EAGJ,CASA,UAAA4d,CAAWoI,GAEP,MAAMuyG,EAAcxpB,GAAqBG,qBAAqBV,mBAIxDlrG,EAAW,CACbg0H,SAAU,iBACVrvD,UAAW,GACXuwD,YAAazpB,GAAqBC,iBAAiB/7E,SAAS03E,SAC5DpgB,aAAc,GACdt9E,aAAcsrH,EAAYhqB,cAC1BkqB,eAAgB,UAChBC,wBAAwB,EACxBC,2BAA2B,EAC3B3tD,eAAgB,UAChB4tD,oBAAoB,EACpBC,qBAAqB,EACrBC,cAAe,CACXz1D,UAAW,UACXyH,gBAAiB,GACjBvgC,eAAgB,IAChBwgC,iBAAkB,WAEtBI,UAAW,GAUf,GAPAnrE,KAAKgmB,OAAS,IAAK1iB,KAAa0iB,GAGhChmB,KAAKD,OAAyC,iBAAzBC,KAAKgmB,OAAOsxG,SAC3B7hF,SAASC,eAAe11C,KAAKgmB,OAAOsxG,UACpCt3H,KAAKgmB,OAAOsxG,UAEbt3H,KAAKD,OACN,MAAM,IAAI0G,MAAM,mBAAmBzG,KAAKgmB,OAAOsxG,uBAInDt3H,KAAKqqE,cAAgB,IAAIxqE,EAAcG,KAAKD,QAG5CC,KAAK+4H,gBAAkB,IAAI1rB,GAAsBrtG,KAAKD,QACtDC,KAAK+4H,gBAAgBtrB,WAAYxpG,IAEzBjE,KAAK8b,UACL9b,KAAK8b,SAAS08D,sBAAsBv0E,KAK5C8qG,GAAqBG,qBAAqBR,yBACtC1uG,KAAKD,OACLC,KAAKqqE,cAAcnqE,cAGvBF,KAAK2tE,aAAe,IAAI71D,EAAoB9X,KAAK+X,eACjD/X,KAAKg0C,eAAiB,IAAIyF,GAAez5C,KAAKgmB,OAAO/Y,aAAcjN,KAAK+X,eAGxE/X,KAAK8b,SAAW,IAAIsuD,GAAgBpqE,KAAKqqE,cAAe,IACjDrqE,KAAKgmB,OAAO8yG,cACf3tD,UAAWnrE,KAAKgmB,OAAOmlD,WAAa,IAIxCnrE,KAAKyvE,aAAe,IAAIu2C,GACxBhmH,KAAK+6G,cAAgB,IAAI0Q,GAGzBzrH,KAAKkyH,qBAAuBA,GAG5BlyH,KAAKg5H,gBAAkB,IAAI7G,GAG3BnyH,KAAKyvE,aAAasrC,cAAgB/6G,KAAK+6G,cAGvC/6G,KAAK8b,SAAS2zD,aAAezvE,KAAKyvE,aAClCzvE,KAAK8b,SAASi/F,cAAgB/6G,KAAK+6G,cAGnC/6G,KAAK8b,SAAS6xD,aAAe3tE,KAAK2tE,aAClC3tE,KAAK2tE,aAAa7xD,SAAW9b,KAAK8b,SAG9B9b,KAAKgmB,OAAO4yG,qBACZ54H,KAAK82H,YAAc,IAAI59C,GAAYl5E,KAAKD,OAAQ,CAC5CuqB,UAAW,GACXkJ,UAAW,IACX7e,SAAS,IAIb3U,KAAK82H,YAAY97C,uBAAuB,KAChCh7E,KAAKwmD,SAELxmD,KAAKi5H,OACEj5H,KAAKg3H,cAEZh3H,KAAKg3H,aAAah6C,oBAM1Bh9E,KAAKgmB,OAAO6yG,sBACZ74H,KAAKg3H,aAAe,IAAI97C,GAAa,CACjCvmE,SAAS,EACT6mE,aAAczR,MAIlB/pE,KAAKg3H,aAAa35C,YAAY,UAAY/+D,IAClCte,KAAK8b,UAAY9b,KAAK8b,SAASzJ,QAC/BrS,KAAK8b,SAASzJ,MAAM2pD,SAA0B,UAAf19C,EAAK0Q,SAI5ChvB,KAAKg3H,aAAa35C,YAAY,UAAW,KACjCr9E,KAAK8b,UAAY9b,KAAK8b,SAAS2+C,gBAC/Bz6D,KAAK8b,SAAS2+C,mBAItBz6D,KAAKg3H,aAAa35C,YAAY,SAAU,KAChCr9E,KAAK8b,UAAY9b,KAAK8b,SAAS4+C,QAC/B16D,KAAK8b,SAAS4+C,YAK1B16D,KAAKsuF,YAAc,IAAIzE,GAGvB7pF,KAAK02H,mBAAqB,KAG1B12H,KAAKk5H,qBAAuB,IAAIhkC,GAAqB,CACjDC,qBAAyD,IAApCn1F,KAAKgmB,OAAOmvE,oBACjCC,oBAAuD,IAAnCp1F,KAAKgmB,OAAOovE,mBAChCC,2BAAqE,IAA1Cr1F,KAAKgmB,OAAOqvE,0BACvCC,0BAAmE,IAAzCt1F,KAAKgmB,OAAOsvE,yBACtCG,eAAgBz1F,KAAKgmB,OAAOyvE,gBAAkB,SAIlDz1F,KAAKm5H,mBAAqB,IAAIt9B,GAAmB,CAC7CC,yBAAiE,IAAxC97F,KAAKgmB,OAAO81E,wBACrCC,wBAA+D,IAAvC/7F,KAAKgmB,OAAO+1E,uBACpCC,2BAAqE,IAA1Ch8F,KAAKgmB,OAAOg2E,4BAI3Ch8F,KAAKm5H,mBAAmBh2B,UAAUnjG,KAAKD,QAGvCC,KAAKo5H,aAAe,IAAI71B,GAAa,CACjCC,eAA6C,IAA9BxjG,KAAKgmB,OAAOw9E,cAC3BC,iBAAiD,IAAhCzjG,KAAKgmB,OAAOy9E,gBAC7BC,gBAA+C,IAA/B1jG,KAAKgmB,OAAO09E,iBAIhC1jG,KAAKw1H,oBAAsB,IAAIhmC,GAAoB,CAC/CC,eAAgBzvF,KAAKgmB,OAAOypE,gBAAkB,IAC9CC,kBAAmB1vF,KAAKgmB,OAAO0pE,mBAAqB,GACpDC,iBAAkB3vF,KAAKgmB,OAAO2pE,kBAAoB,MAItD,IACI3vF,KAAKs2H,oBAAsB,IAAIzoC,GAAoB7tF,KAAK+X,cAAe,CACnEkwD,UAAWjoE,KAAKgmB,OAAOiiD,WAE/B,CAAE,MAAOrmE,GAGL5B,KAAKs2H,oBAAsB,CACvBrlD,YAAa,IAAMjxE,KAAKwvC,UACxBhkC,MAAO,KAAQxL,KAAKwvC,WAAY,GAAa,GAC7CE,KAAM,KAAQ1vC,KAAKwvC,WAAY,GAAc,GAC7Cy6B,aAAc,OACdhC,UAAWjoE,KAAKgmB,OAAOiiD,UACvBonB,sBAAuB,KAAA,CAAStnB,IAAK,EAAGv4B,UAAWxvC,KAAKwvC,UAAW6pF,wBAAwB,EAAOrmH,UAAW,GAAIg1D,WAAY,EAAGC,UAAWjoE,KAAKgmB,OAAOiiD,YACvJomB,cAAe,OACfI,iBAAkB,OAClBC,gBAAiB,OACjB3rF,QAAS,OACTiQ,UAAW,GAEnB,CAGAhT,KAAKs2H,oBAAoBjoC,cAAc,CACnC1gB,aAAc3tE,KAAK2tE,aACnB35B,eAAgBh0C,KAAKg0C,eACrBl4B,SAAU9b,KAAK8b,SACfwyE,YAAatuF,KAAKsuF,YAClBjkB,cAAerqE,KAAKqqE,gBAIxBrqE,KAAKs2H,oBAAoB7nC,iBAAiB,CAACh9C,EAAOnzB,KAC9Cte,KAAKyvC,KAAKgC,EAAOnzB,KAIrBte,KAAKs2H,oBAAoB5nC,gBAAgB1uF,MAGzCA,KAAKwvC,WAAY,EAGbxvC,KAAKgmB,OAAOwyG,aACZx4H,KAAKsuF,YAAY1wE,aAAa07G,KAAKvtE,IAC3BA,GACA/rD,KAAKsuF,YAAY9E,gBAAgBxpF,KAAKgmB,OAAOukE,gBASzDvqF,KAAKiY,UAAW,EAGhBjY,KAAKmqF,kBAAoB,GAGzBnqF,KAAKu5H,eAAgB,EACrB5mF,GAAkB/0B,aAIlB5d,KAAK2yC,kBAAoBA,GACzB3yC,KAAKoqF,gBAAkB,IAGvBpqF,KAAK2kD,WAAY,EAGjB3kD,KAAKwmD,UAAW,EAGhBxmD,KAAKw5H,IAAM,CACPrF,UAA6B,oBAAX5zH,QAA0B,oBAAqBA,OACjE0X,UAAU,EACVwhH,iBAAkB,MAItBz5H,KAAK42H,aAAe,IAAI5B,GAAah1H,MACrCA,KAAK05H,kBAAoB,IAAI7D,GAAkB71H,MAC/CA,KAAK25H,iBAAmB,IAAI7D,GAAiB91H,MAC7CA,KAAK45H,oBAAsB,IAAIzD,GAAoBn2H,MACnDA,KAAK65H,qBAAuB,IAAIzC,GAAqBp3H,KAAMgmB,GAG3DhmB,KAAK42H,aAAatwB,OAClBtmG,KAAK05H,kBAAkBpzB,OACvBtmG,KAAK25H,iBAAiBrzB,OACtBtmG,KAAK45H,oBAAoBtzB,OAKzBtmG,KAAK23H,UAAY33H,KAAKgmB,OAAO8zG,cAAe,EACxC95H,KAAK23H,YACL/nB,GAAgBjK,IAAI,OAAQ,uCAAwC,CAChE3/E,OAAQhmB,KAAKgmB,OACbiuF,oBAAqBA,GAAoBgD,mBAI7CrH,GAAgB4B,aAAa,wBAAyB,CAClD8lB,SAAUt3H,KAAKgmB,OAAOsxG,SACtBrqH,aAAcjN,KAAKgmB,OAAO/Y,gBAKlCjN,KAAK+5H,oCAGL/5H,KAAK2tE,aAAa7zD,WAAW9Z,KAAKgmB,OAAOyyG,gBAGzCz4H,KAAKqqE,cAAcxoE,SAAS,CAACpB,EAAOC,EAAQJ,KACxCN,KAAKc,aAAaL,EAAOC,EAAQJ,KAOjCN,KAAK23H,YACL/nB,GAAgBmC,WAAW,yBAC3BnC,GAAgB8C,mBAAmB,uBAE3C,CAOA,sBAAAsnB,CAAuBvoF,EAAOnzB,GAC1B,OAAQmzB,GACJ,IAAK,qBAEDzxC,KAAKi6H,yBAAyB37G,EAAK2oE,UACnCjnF,KAAKyvC,KAAK,yBAA0BnxB,GACpC,MAEJ,IAAK,kBAEDte,KAAKi6H,yBAAyB37G,EAAK2oE,UACnCjnF,KAAKyvC,KAAK,sBAAuBnxB,GACjC,MAEJ,IAAK,eAEDte,KAAKi6H,yBAAyB37G,EAAK2oE,UACnCjnF,KAAKyvC,KAAK,0BAA2BnxB,GAGjD,CAMA,wBAAA27G,CAAyBhzC,GAEjBjnF,KAAKg0C,qBAA6C35B,IAA3B4sE,EAASsnB,eAChCvuG,KAAKg0C,eAAeoM,gBAAgB6mC,EAASsnB,eAI7CvuG,KAAKsuF,kBAAyCj0E,IAA1B4sE,EAASic,eACxBjc,EAASic,cAAgBljG,KAAKsuF,YAAYpD,eAC3ClrF,KAAKsuF,YAAYlD,gBAAgB,KAarCprF,KAAK8b,eAAsCzB,IAA1B4sE,EAAS3O,cAC1Bt4E,KAAK8b,SAASs8D,gBAAgB6O,EAAS3O,aAE/C,CAKA,iCAAAyhD,GAEI/5H,KAAKw1H,oBAAoBrjC,cAAe7zE,IAEpCte,KAAK8b,SAAS+0E,iBAAiBvyE,EAAKkzE,OAGpCxxF,KAAKyvC,KAAK,mBAAoB,CAC1B+hD,MAAOlzE,EAAKkzE,MACZqB,QAAStmF,MAAMC,KAAK8R,EAAKu0E,SACzBtuF,UAAW+Z,EAAK/Z,cAKxBvE,KAAKw1H,oBAAoBpjC,cAAeW,IAGX/yF,KAAKg0C,eAAe2F,UAAUs/B,KAAK1wE,GAAKA,EAAEkuC,gBAAkB,KAGpEz2C,KAAK2tE,aAAanyD,kBAAkBjY,QACjCvD,KAAK2tE,aAAa1yD,gCAIlCjb,KAAKk6H,QAAQ,SAKTl6H,KAAKyvC,KAAK,cAAe,IAClBsjD,EACHonC,kBAAkB,OAelCn6H,KAAKw1H,oBAAoBnjC,QAAS+nC,IAE9Bp6H,KAAKyvC,KAAK,uBAAwB2qF,IAE1C,CAQA,UAAAtgH,CAAWvW,EAASu3D,EAAU,MAC1B,OAAO96D,KAAK+X,cAAchU,KAAK,IACpB/D,KAAK25H,iBAAiB7/G,WAAWvW,EAASu3D,GAClD,kBAAmB96D,KAFfA,EAGX,CAOA,eAAAi1E,CAAgBprE,GACZ,OAAO7J,KAAK+X,cAAchU,KAAK,KAE3B/D,KAAK2tE,aAAahyD,uBAAuB9R,GAErC7J,KAAK8b,UAAY9b,KAAK8b,SAASm5D,iBAC/Bj1E,KAAK8b,SAASm5D,gBAAgBprE,GAE3B7J,MACR,mBAAoBA,KARhBA,EASX,CAOA,MAAA+wC,CAAOjJ,GACH,OAAO9nC,KAAK+X,cAAchU,KAAK,KACvB/D,KAAK8b,UAAY9b,KAAK8b,SAASi1B,QAC/B/wC,KAAK8b,SAASi1B,OAAOjJ,GAElB9nC,MACR,aAAcA,KALVA,EAMX,CAOA,gBAAA+lE,CAAiBh4D,GACb,OAAO/N,KAAK+X,cAAchU,KAAK,KACvB/D,KAAK8b,UAAY9b,KAAK8b,SAASiqD,kBAC/B/lE,KAAK8b,SAASiqD,iBAAiBh4D,GAE5B/N,MACR,wBAAyBA,KALrBA,EAMX,CAOA,gBAAA21E,CAAiBx2D,GACb,OAAOnf,KAAK+X,cAAchU,KAAK,KACvB/D,KAAK8b,UAAY9b,KAAK8b,SAAS65D,kBAC/B31E,KAAK8b,SAAS65D,iBAAiBx2D,GAE5Bnf,MACR,wBAAyBA,KALrBA,EAMX,CAOA,eAAAu3E,CAAgB5iE,GACZ,OAAO3U,KAAK+X,cAAchU,KAAK,KACvB/D,KAAK8b,UAAY9b,KAAK8b,SAASy7D,iBAC/Bv3E,KAAK8b,SAASy7D,gBAAgB5iE,GAE3B3U,MACR,uBAAwBA,KALpBA,EAMX,CAQA,OAAAk6H,CAAQ12H,EAASs3D,EAAU,IACvB,OAAO96D,KAAK+X,cAAchU,KAAK,KAE3B,MAAMy5F,EAAmBpjF,YAAY7H,MAC/Bk9C,EAAcljD,MAAM+uC,QAAQ93C,IACK,iBAAZA,GAAyC,UAAjBA,EAAQ8B,KADd,QAE1B9B,EAMnB,GAJIxD,KAAKwoE,oBACLxoE,KAAKwoE,mBAAmB6xD,iBAAiB5qE,IAGxCjsD,EAKD,OAHIxD,KAAKwoE,oBACLxoE,KAAKwoE,mBAAmB8xD,eAAe7qE,GAEpCzvD,KAIX,GAAIuM,MAAM+uC,QAAQ93C,GACd,OAAOxD,KAAKu6H,aAAa/2H,EAASs3D,GAItC,GAAuB,iBAAZt3D,GAAyC,UAAjBA,EAAQ8B,KACvC,OAAOtF,KAAKu6H,aAAa/2H,EAAQsqH,SAAUhzD,GAQ/C,IAAKA,EAAQ0/D,eAAiBj6H,OAAOk6H,kBAAoBl6H,OAAOoyC,mBAAqBpyC,OAAOoyC,kBAAkBh+B,QAE1G,OADkBpU,OAAOk6H,iBAAiBC,eAAel3H,EAASs3D,GAC3D96D,KAOX,MAqDM26H,EArDkB,CACpBttG,OAAU,cACVmC,MAAS,aACTY,MAAS,aACT0E,KAAQ,YACR/D,IAAO,WACPmL,KAAQ,YACR4M,OAAU,cACVW,SAAY,gBACZK,MAAS,aACThL,MAAS,aACT1I,QAAW,eACX+T,KAAQ,YACRl0B,QAAW,eACX4N,QAAW,eACXioB,OAAU,cACVC,OAAU,cACVC,MAAS,aACTC,KAAQ,YACRC,MAAS,aACTC,QAAW,eACX7a,MAAS,aACTgT,QAAW,eACXrT,QAAW,eACX0Q,KAAQ,YACR8F,QAAW,eACXxP,MAAS,aACT82B,UAAa,iBACbC,KAAQ,YACR9nB,OAAU,cACV5V,MAAS,eACTsM,QAAW,eACXqB,KAAQ,YACR7K,KAAQ,YACR66B,SAAY,gBACZC,UAAa,iBACbC,WAAc,kBACdC,gBAAmB,uBACnBz5B,KAAQ,YACR05B,KAAQ,YACRC,WAAc,kBACdC,WAAc,kBAEdkX,WAAc,kBACdC,UAAa,iBACbC,WAAc,kBACdC,YAAe,mBACfC,WAAc,mBAMiBrjE,GACnC,GAAIm3H,GAAc36H,KAAK8b,UAAY9b,KAAK8b,SAAS6+G,GAAa,CAU1D,GARA36H,KAAK8b,SAAS6+G,GAAY7/D,GAGtB96D,KAAKsuF,YAAYpD,eACjBlrF,KAAKsuF,YAAY7F,iBAAiBjlF,GAIlCxD,KAAKwoE,mBAAoB,CACzB,MAAMoyD,EAAiBxgH,YAAY7H,MACnCvS,KAAKwoE,mBAAmB8xD,eAAe7qE,GACvCzvD,KAAKwoE,mBAAmBqyD,kBAAkBprE,EAAamrE,EAAiBp9B,EAC5E,CAEA,OAAOx9F,IACX,CAKA,MAAM86H,EAAgBzuF,GAAW7oC,GAEjC,GAAIs3H,EAAe,CAqBf,GAnBAnoF,GAAkBW,eAAe,UAAW9vC,EAASs3H,GAGrD96H,KAAK+6H,sBAAwB,CACzBz1H,KAAM9B,EACNwiB,OAAQ80G,EACRziH,UAAW+B,YAAY7H,MACvB/D,SAAUssH,EAAcE,eAAexsH,UAAY,IACnD3F,SAAU,GAMV7I,KAAKsuF,YAAYpD,eACjBlrF,KAAKsuF,YAAY7F,iBAAiBjlF,GAIlCxD,KAAKwoE,mBAAoB,CACzB,MAAMoyD,EAAiBxgH,YAAY7H,MACnCvS,KAAKwoE,mBAAmB8xD,eAAe7qE,GACvCzvD,KAAKwoE,mBAAmBqyD,kBAAkBprE,EAAamrE,EAAiBp9B,EAC5E,CAEA,OAAOx9F,IACX,CAUA,OAPAA,KAAK4sF,cAAc,oBAAoBppF,IAAW,WAAWA,KAGzDxD,KAAKwoE,oBACLxoE,KAAKwoE,mBAAmB8xD,eAAe7qE,GAGpCzvD,MACR,qBAAsBA,KAhKlBA,EAiKX,CAQA,YAAAu6H,CAAazM,EAAUhzD,EAAU,IAC7B,OAAO96D,KAAK+X,cAAchU,KAAK,KAC3B,IAAK+pH,IAAavhH,MAAM+uC,QAAQwyE,IAAiC,IAApBA,EAAS/oH,OAClD,OAAO/E,KAINA,KAAKkyH,sBAENxrH,QAAAC,UAAA2yH,KAAA,WAAA,OAAA2B,EAAA,GAAyC3B,KAAK4B,IAC1Cl7H,KAAKkyH,qBAAuBgJ,EAAOC,UACpCxqC,MAAMyqC,OAMb,MAAMC,EAAqBr7H,KAAKkyH,qBAC5BlyH,KAAKkyH,qBAAqBnC,sBAAsBjC,GAChDA,EAmBJ,OAdAuN,EAAmB35H,QAAQ+tD,IACvB,MAAM6rE,EAA2C,iBAAhB7rE,EAC7BA,EAAcA,EAAYA,YAG9BzvD,KAAKu7H,uBAAuBD,EAAmBxgE,KAI/C96D,KAAKkyH,sBAAsBzB,yBAAyB4K,IAEpDr7H,KAAK8b,UAAU4zC,gBAAgB8rE,eAG5Bx7H,MACR,gBAAiBA,KAtCbA,EAuCX,CAMA,sBAAAu7H,CAAuB/3H,EAASs3D,EAAU,IAEtC,MA6BM6/D,EA7BkB,CACpBttG,OAAU,cACVmC,MAAS,aACTY,MAAS,aACT0E,KAAQ,YACR/D,IAAO,WACPmL,KAAQ,YACR4N,MAAS,aACTK,KAAQ,YACRl0B,QAAW,eACX4N,QAAW,eACXioB,OAAU,cACVC,OAAU,cACVC,MAAS,aACTC,KAAQ,YACRC,MAAS,aACTC,QAAW,eACX7a,MAAS,aACT8C,KAAQ,YACRuB,KAAQ,YACRgM,KAAQ,YACR2C,QAAW,eACXmD,QAAW,eACXnT,MAAS,aACT+6B,KAAQ,YACRpwB,KAAQ,YACR2B,MAAS,cAGsBp9B,GAC/Bm3H,GAAc36H,KAAK8b,UAAiD,mBAA9B9b,KAAK8b,SAAS6+G,IACpD36H,KAAK8b,SAAS6+G,GAAY7/D,GAI9B96D,KAAKyvC,KAAK,UAAW,CAAEnjC,KAAM9I,EAASs3D,WAC1C,CAOA,KAAA2gE,IAAS3N,GAEL,GAAI9tH,KAAKkyH,qBAAsB,CAC3B,MAAMpwE,EAAQ9hD,KAAKkyH,qBAAqB5B,WAAWxC,EAAS1mH,KAAK,MAEjE,GAAI06C,EAAM/8C,OAAS,EAAG,CAClB,MAAM22H,EAAY55E,EAAM,GACpB45E,EAAU32H,OAAS,EACnB/E,KAAKu6H,aAAamB,GAElB17H,KAAKk6H,QAAQwB,EAAU,GAE/B,CACJ,MAEQ5N,EAAS/oH,OAAS,GAClB/E,KAAKk6H,QAAQpM,EAAS,IAG9B,OAAO9tH,IACX,CAOA,aAAA26D,CAAc/oB,GACV,OAAO5xC,KAAK+X,cAAchU,KAAK,KAC3B,IAAK6tC,EACD,MAAM,IAAInrC,MAAM,kDAGpB,OAAKzG,KAAKgmB,OAAOwyG,YAKbx4H,KAAKiY,SAEEjY,KAIKA,KAAKw1H,oBAAoB53G,WAAWg0B,IAQpD5xC,KAAKiY,UAAW,EAGhBjY,KAAK8b,SAAS6/G,cAAc/pF,GAG5B5xC,KAAKyvC,KAAK,gBAAiB,CACvBmC,eACAo+C,SAAUhwF,KAAKw1H,oBAAoBxjC,cACnC74D,OAAQn5B,OAILA,MAjBIA,KAbAA,MA+BZ,eAAgBA,KAtCZA,EAuCX,CAMA,YAAA46D,GACI,OAAO56D,KAAK+X,cAAchU,KAAK,IACpB/D,KAAK42H,aAAah8D,eAC1B,cAAe56D,KAFXA,EAGX,CAQA,KAAA47H,CAAM/vE,EAAMiP,EAAU,IAClB,OAAO96D,KAAK+X,cAAchU,KAAK,KAC3B,IAAK/D,KAAKw5H,IAAIrF,UAEV,OAAOn0H,KAGX,IAAK6rD,GAAwB,iBAATA,EAEhB,OAAO7rD,KAIPA,KAAKw5H,IAAIvhH,UACT1X,OAAOs7H,gBAAgBC,SAI3B,MAAMC,EAAY,IAAIC,yBAAyBnwE,GAQ/C,GALAkwE,EAAU/0E,KAAO8T,EAAQ9T,MAAQ,EACjC+0E,EAAUE,MAAQnhE,EAAQmhE,OAAS,EACnCF,EAAUtyC,OAAS3uB,EAAQ2uB,QAAU,EAGjC3uB,EAAQohE,MAAO,CACf,MACMC,EADS57H,OAAOs7H,gBAAgBO,YACThe,KAAKie,GAAKA,EAAE/vH,OAASwuD,EAAQohE,OACtDC,IACAJ,EAAUG,MAAQC,EAE1B,CAqDA,OAlDAn8H,KAAKw5H,IAAIC,iBAAmBsC,EAG5BA,EAAUO,QAAU,KAChBt8H,KAAKw5H,IAAIvhH,UAAW,EAGpBjY,KAAKk6H,QAAQ,SAGbl6H,KAAKyvC,KAAK,aAAc,CAAEoc,OAAMiP,aAKpCihE,EAAUQ,MAAQ,KACdv8H,KAAKw5H,IAAIvhH,UAAW,EACpBjY,KAAKw5H,IAAIC,iBAAmB,KAG5Bz5H,KAAKk6H,QAAQ,OAGbl6H,KAAKyvC,KAAK,WAAY,CAAEoc,UAK5BkwE,EAAUS,QAAW56H,IACjB5B,KAAKw5H,IAAIvhH,UAAW,EACpBjY,KAAKw5H,IAAIC,iBAAmB,KAG5Bz5H,KAAKyvC,KAAK,WAAY,CAAE7tC,QAAOiqD,UAInCkwE,EAAUU,WAAchrF,IACD,SAAfA,EAAMnlC,MAEF1F,KAAK8I,SAAW,IAEhB1P,KAAKk6H,QAAQ,UAMzB35H,OAAOs7H,gBAAgBD,MAAMG,GAEtB/7H,MACR,YAAaA,KArFTA,EAsFX,CAMA,OAAA08H,GACI,OAAO18H,KAAK+X,cAAchU,KAAK,IACtB/D,KAAKw5H,IAAIrF,WAIVn0H,KAAKw5H,IAAIvhH,WACT1X,OAAOs7H,gBAAgBC,SACvB97H,KAAKw5H,IAAIvhH,UAAW,EACpBjY,KAAKw5H,IAAIC,iBAAmB,KAG5Bz5H,KAAKk6H,QAAQ,OAGbl6H,KAAKyvC,KAAK,eAKPzvC,MAjBIA,KAkBZ,WAAYA,KApBRA,EAqBX,CAMA,cAAAu6D,GACI,OAAOv6D,KAAK+X,cAAchU,KAAK,KACvB/D,KAAK2kD,YAKT3kD,KAAK2kD,WAAY,EAGb3kD,KAAK8b,UAAY9b,KAAK8b,SAASy+C,gBAC/Bv6D,KAAK8b,SAASy+C,iBAIlBv6D,KAAKyvC,KAAK,qBAXCzvC,MAeZ,kBAAmBA,KAlBfA,EAmBX,CAMA,aAAAw6D,GACI,OAAOx6D,KAAK+X,cAAchU,KAAK,IACtB/D,KAAK2kD,WAKV3kD,KAAK2kD,WAAY,EAGb3kD,KAAK8b,UAAY9b,KAAK8b,SAAS0+C,eAC/Bx6D,KAAK8b,SAAS0+C,gBAIlBx6D,KAAKyvC,KAAK,oBAGHzvC,MAdIA,KAeZ,iBAAkBA,KAlBdA,EAmBX,CAMA,KAAA28H,GACI,OAAO38H,KAAK+X,cAAchU,KAAKuyG,UACvBt2G,KAAKwmD,WASTxmD,KAAKk6H,QAAQ,cACP,IAAIxzH,QAAQC,GAAW1E,WAAW0E,EAAS,MAGjD3G,KAAKk6H,QAAQ,cACP,IAAIxzH,QAAQC,GAAW1E,WAAW0E,EAAS,MAGjD3G,KAAKwmD,UAAW,EAGZxmD,KAAK8b,UAAY9b,KAAK8b,SAAS2+C,gBAC/Bz6D,KAAK8b,SAAS2+C,iBAIdz6D,KAAKg3H,cAAgBh3H,KAAKg3H,aAAax6C,YACvCx8E,KAAKg3H,aAAax6C,aAItBx8E,KAAKyvC,KAAK,UA5BCzvC,MAgCZ,QAASA,KAnCLA,EAoCX,CAMA,IAAAi5H,GACI,OAAOj5H,KAAK+X,cAAchU,KAAKuyG,SACtBt2G,KAAKwmD,UAMVxmD,KAAKwmD,UAAW,EAGZxmD,KAAK8b,UAAY9b,KAAK8b,SAAS4+C,QAC/B16D,KAAK8b,SAAS4+C,SAId16D,KAAKg3H,cAAgBh3H,KAAKg3H,aAAat8D,QACvC16D,KAAKg3H,aAAat8D,SAOtB16D,KAAKk6H,QAAQ,iBACP,IAAIxzH,QAAQC,GAAW1E,WAAW0E,EAAS,MAGjD3G,KAAKk6H,QAAQ,mBACP,IAAIxzH,QAAQC,GAAW1E,WAAW0E,EAAS,MAGjD3G,KAAKk6H,QAAQ,eACP,IAAIxzH,QAAQC,GAAW1E,WAAW0E,EAAS,MAGjD3G,KAAKyvC,KAAK,QAGHzvC,MAnCIA,KAoCZ,OAAQA,KAvCJA,EAwCX,CAMA,YAAA48H,GACI,OAAK58H,KAAKw5H,IAAIrF,UAIP5zH,OAAOs7H,gBAAgBO,YAHnB,EAIf,CAMA,aAAAS,GACI,OAAO78H,KAAKw5H,IAAIvhH,QACpB,CAMA,KAAAzM,GACI,OAAOxL,KAAK+X,cAAchU,KAAK,IACpB/D,KAAK45H,oBAAoBpuH,QACjC,QAASxL,KAFLA,EAGX,CAMA,IAAA0vC,GACI,OAAO1vC,KAAK+X,cAAchU,KAAK,IACpB/D,KAAK45H,oBAAoBlqF,OACjC,OAAQ1vC,KAFJA,EAGX,CAYA,iBAAA88H,CAAkB/0F,EAAQg1F,EAAO70F,EAAQ80F,GACrC,OAAOh9H,KAAK+X,cAAchU,KAAK,KAE3B,MAAMk5H,EAAal1F,EAASg1F,EAAQ70F,EAAS80F,EAiB7C,OAdAh9H,KAAKk9H,eAAiB,CAClBn1F,SACAg1F,QACA70F,SACA80F,QACAC,aACAE,aAAc,SACdC,eAAgB54H,KAAK+N,MACrB8qH,cAAe,GAInBr9H,KAAKs9H,0BAEEt9H,MACR,oBAAqBA,KApBjBA,EAqBX,CASA,WAAAu9H,CAAY97H,EAAO+M,EAAW,IAAM9C,EAAS,aACzC,OAAO1L,KAAK+X,cAAchU,KAAK,KAC3B,GAAI/D,KAAK8b,SAAU,CAEf,MAAM0hH,EAAax9H,KAAKy9H,iBAAmB,EACrCplH,EAAY7T,KAAK+N,MAEjBokE,EAAU,KACZ,MAAM57D,EAAUvW,KAAK+N,MAAQ8F,EACvBxP,EAAWjC,KAAKkB,IAAIiT,EAAUvM,EAAU,GAG9C,IAAIwM,EAAgBnS,EACL,WAAX6C,EACAsP,EAAgBnS,EAAWA,EACT,YAAX6C,EACPsP,EAAgBnS,GAAY,EAAIA,GACd,cAAX6C,IACPsP,EAAgBnS,EAAW,GACrB,EAAIA,EAAWA,GACT,EAAI,EAAIA,GAAYA,EAA1B,GAIV7I,KAAKy9H,gBAAkBD,GAAc/7H,EAAQ+7H,GAAcxiH,EAGvDhb,KAAK8b,SAASwjD,gBACdt/D,KAAK8b,SAASwjD,eAAet/D,KAAKy9H,iBAIlC50H,EAAW,GAAK7I,KAAKwvC,WACrBW,sBAAsBwmC,IAI9BA,GACJ,CAEA,OAAO32E,MACR,cAAeA,KAxCXA,EAyCX,CAOA,OAAAynC,CAAQniC,EAAO,QACX,OAAOtF,KAAK+X,cAAchU,KAAK,KAC3B,MAAM25H,EAAU,CACZntH,KAAM,CAAEw3B,OAAQ,EAAGg1F,MAAO,EAAG70F,OAAQ,EAAG80F,MAAO,GAC/Cz+D,QAAS,CAAEx2B,OAAQ,EAAGg1F,MAAO,EAAG70F,OAAQ,EAAG80F,MAAO,GAClDW,WAAY,CAAE51F,OAAQ,EAAGg1F,MAAO,EAAG70F,OAAQ,EAAG80F,MAAO,GACrDY,KAAM,CAAE71F,OAAQ,EAAGg1F,MAAO,EAAG70F,OAAQ,EAAG80F,MAAO,GAC/CL,MAAO,CAAE50F,OAAQ,EAAGg1F,MAAO,EAAG70F,OAAQ,EAAG80F,MAAO,IAG9C/rH,EAAUysH,EAAQp4H,IAASo4H,EAAQntH,KACzC,OAAOvQ,KAAK88H,kBAAkB7rH,EAAQ82B,OAAQ92B,EAAQ8rH,MAAO9rH,EAAQi3B,OAAQj3B,EAAQ+rH,QACtF,UAAWh9H,KAXPA,EAYX,CAMA,uBAAAs9H,GAEQt9H,KAAK69H,sBACL30D,qBAAqBlpE,KAAK69H,sBAG9B,MAAMlnD,EAAU,KACZ,IAAK32E,KAAKk9H,iBAAmBl9H,KAAKwvC,UAAW,OAE7C,MAAMv+B,EAAUjR,KAAKk9H,eACf3qH,EAAM/N,KAAK+N,MACXurH,GAAgBvrH,EAAMtB,EAAQmsH,gBAAkB,IAEtD,IAAI37H,EAAQ,EACRs8H,EAAY9sH,EAAQksH,aAGxB,OAAQlsH,EAAQksH,cACZ,IAAK,SACGW,GAAgB7sH,EAAQ82B,QACxBg2F,EAAY,QACZ9sH,EAAQmsH,eAAiB7qH,EACzBvS,KAAKyvC,KAAK,aAAc,CAAEnqC,KAAM,iBAIhC7D,EAAQ,EADSq8H,EAAe7sH,EAAQ82B,OACzB,GAEnB,MAEJ,IAAK,QACG+1F,GAAgB7sH,EAAQ8rH,QACxBgB,EAAY,SACZ9sH,EAAQmsH,eAAiB7qH,EACzBvS,KAAKyvC,KAAK,iBAEdhuC,EAAQ,IACR,MAEJ,IAAK,SACGq8H,GAAgB7sH,EAAQi3B,QACxB61F,EAAY,QACZ9sH,EAAQmsH,eAAiB7qH,EACzBvS,KAAKyvC,KAAK,aAAc,CAAEnqC,KAAM,iBAIhC7D,EAAQ,IADSq8H,EAAe7sH,EAAQi3B,OACzB,GAEnB,MAEJ,IAAK,QACG41F,GAAgB7sH,EAAQ+rH,QACxBe,EAAY,SACZ9sH,EAAQmsH,eAAiB7qH,EACzBvS,KAAKyvC,KAAK,iBAEdhuC,EAAQ,GAKZs8H,IAAc9sH,EAAQksH,eACtBlsH,EAAQksH,aAAeY,GAIvB/9H,KAAK8b,UAAY9b,KAAK8b,SAASwjD,gBAC/Bt/D,KAAK8b,SAASwjD,eAAe79D,GAIjCzB,KAAK69H,qBAAuB1tF,sBAAsBwmC,IAItD32E,KAAKk9H,eAAeC,aAAe,SACnCn9H,KAAKk9H,eAAeE,eAAiB54H,KAAK+N,MAC1CvS,KAAKyvC,KAAK,gBACVknC,GACJ,CAMA,aAAAqnD,GACI,OAAOh+H,KAAK+X,cAAchU,KAAK,KACvB/D,KAAK69H,uBACL30D,qBAAqBlpE,KAAK69H,sBAC1B79H,KAAK69H,qBAAuB,MAGhC79H,KAAKk9H,eAAiB,KAGlBl9H,KAAK8b,UAAY9b,KAAK8b,SAASwjD,gBAC/Bt/D,KAAK8b,SAASwjD,eAAe,GAG1Bt/D,MACR,gBAAiBA,KAdbA,EAeX,CAQA,EAAA0xC,CAAGD,EAAO9vC,GACN,OAAO3B,KAAK+X,cAAchU,KAAK,KACX/D,KAAKizF,aAAavhD,GAAGD,EAAO9vC,GAIrC3B,MACR,qBAAsBA,KANlBA,EAOX,CAQA,GAAAi+H,CAAIxsF,EAAO9vC,GACP,OAAO3B,KAAK+X,cAAchU,KAAK,KAC3B/D,KAAKizF,aAAagrC,IAAIxsF,EAAO9vC,GACtB3B,MACR,wBAAyBA,KAHrBA,EAIX,CAQA,IAAAi0F,CAAKxiD,EAAO9vC,GACR,OAAO3B,KAAK+X,cAAchU,KAAK,KACX/D,KAAKizF,aAAagB,KAAKxiD,EAAO9vC,GAIvC3B,MACR,sBAAuBA,KANnBA,EAOX,CAOA,kBAAAk+H,CAAmBzsF,EAAQ,MACvB,OAAOzxC,KAAK+X,cAAchU,KAAK,KACN/D,KAAKizF,aAAairC,mBAAmBzsF,GAInDzxC,MACR,wBAAyBA,KANrBA,EAOX,CAOA,aAAAm+H,CAAc1sF,GACV,OAAOzxC,KAAKizF,aAAakrC,cAAc1sF,EAC3C,CAMA,aAAA2sF,GACI,OAAOp+H,KAAKizF,aAAamrC,eAC7B,CAMA,aAAAC,GACI,OAAOr+H,KAAKizF,aAAaorC,eAC7B,CAMA,iBAAAC,GACI,OAAOt+H,KAAKizF,aAAasrC,cAC7B,CAMA,uBAAAC,GACI,MAAO,CACH1wB,QAASiB,GAAqBjB,QAC9B76E,SAAU87E,GAAqBC,iBAAiB7C,cAChD1B,aAAcsE,GAAqBtE,aACnC0E,iBAAkBJ,GAAqBI,iBACvC1M,cAAesM,GAAqBG,qBAAqBV,mBAEjE,CAMA,oBAAAiwB,GACI,OAAKz+H,KAAK02H,mBAIH,CACHxmC,aAAclwF,KAAK02H,mBAAmB5kC,kBACtC4sC,kBAAmB1+H,KAAK02H,mBAAmBiI,uBAC3CC,oBAAqB5+H,KAAK02H,mBAAmBmI,yBAC7CC,iBAAkB9+H,KAAK02H,mBAAmBqI,sBAC1CC,UAAWh/H,KAAK02H,mBAAmBuI,gBAR5B,IAUf,CAOA,mBAAAC,CAAoB1tC,GAChB,QAAKxxF,KAAK02H,oBAKH12H,KAAK02H,mBAAmByI,SAAS3tC,EAC5C,CAOA,kBAAA4tC,CAAmB5yB,GACf,OAAKxsG,KAAK02H,mBAMH12H,KAAK02H,mBAAmB0I,mBAAmB5yB,GAJ7BuC,GAAqBC,iBAAiB7C,cACvCK,KAAY,CAIpC,CAMA,oBAAA6yB,GACI,QAAKr/H,KAAK+4H,iBAIH/4H,KAAK+4H,gBAAgBprB,SAChC,CAMA,mBAAA2xB,GACI,QAAKt/H,KAAK+4H,iBAIH/4H,KAAK+4H,gBAAgBrrB,QAChC,CAMA,YAAA6xB,CAAa5qH,GACT3U,KAAK23H,UAAYhjH,EAEbA,GACAi7F,GAAgBjK,IAAI,OAAQ,sBAC5BiK,GAAgB8C,mBAAmB,uBAEnC9C,GAAgBjK,IAAI,OAAQ,sBAEpC,CAMA,cAAAoN,GACI,MAAMysB,EAAS,CACXj7H,UAAWC,KAAK+N,MAChB4mB,OAAQ,CACJqW,UAAWxvC,KAAKwvC,UAChBv3B,SAAUjY,KAAKiY,SACf0/G,UAAW33H,KAAK23H,UAChB3xG,OAAQhmB,KAAKgmB,QAIjBy5G,aAAcz/H,KAAKwb,kBACnBkkH,mBAAoB1/H,KAAKqvF,wBACzBswC,WAAY3/H,KAAK4/H,gBACjBC,WAAY7/H,KAAKq+H,gBAGjBtvB,qBAAsB/uG,KAAKw+H,0BAC3BsB,kBAAmB9/H,KAAKy+H,uBAGxBxqB,oBAAqBA,GAAoBgD,iBAGzC8oB,eAAgBnwB,GAAgBmD,kBAUpC,OAPI/yG,KAAK23H,WACL/nB,GAAgBjK,IAAI,QAAS,yBAA0B,CACnDq6B,WAAYjzE,KAAKC,UAAUwyE,GAAQz6H,OACnCk7H,SAAUl6H,OAAO0G,KAAK+yH,KAIvBA,CACX,CAMA,eAAA5rB,GACI,MAAMt1F,EAAO,CACTmzF,SAAU,CACNoC,WAAYrvG,KAAK+N,MACjB0zF,QAAS,QACTnO,UAAWC,UAAUD,UACrBooC,IAAK3/H,OAAOwzG,UAAUosB,MAG1BC,YAAa,CACTp6G,OAAQhmB,KAAKgmB,OACby5G,aAAcz/H,KAAKwb,kBACnBg0B,UAAWxvC,KAAKwvC,UAChBv3B,SAAUjY,KAAKiY,UAGnBmC,YAAa,CACTimH,QAASrgI,KAAKqvF,wBACdywC,kBAAmB9/H,KAAKy+H,uBACxBpuB,aAAcT,GAAgBS,cAGlC3J,cAAe,CACXoH,QAAS9tG,KAAKw+H,0BACdvqB,oBAAqBA,GAAoBgD,kBAG7CqpB,aAAc1wB,GAAgBgE,mBASlC,OANI5zG,KAAK23H,WACL/nB,GAAgBjK,IAAI,OAAQ,sBAAuB,CAC/C46B,SAAUxzE,KAAKC,UAAU1uC,GAAMvZ,SAIhCuZ,CACX,CAOA,cAAAkiH,CAAel0H,EAAMmlG,EAAW,IACxBzxG,KAAK23H,WACL/nB,GAAgB4B,aAAallG,EAAMmlG,EAE3C,CAOA,YAAAgvB,CAAan0H,GACT,OAAItM,KAAK23H,UACE/nB,GAAgBmC,WAAWzlG,GAE/B,IACX,CAMA,kBAAAomG,CAAmBzZ,GACXj5F,KAAK23H,WACL/nB,GAAgB8C,mBAAmBzZ,EAE3C,CAKA,cAAAynC,GACI9wB,GAAgB1tG,QAEZlC,KAAK23H,WACL/nB,GAAgBjK,IAAI,OAAQ,qBAEpC,CAMA,sBAAAg7B,GACI,OAAO1sB,GAAoBgD,gBAC/B,CAOA,IAAAxnE,CAAKgC,EAAOnzB,EAAO,MACfte,KAAKizF,aAAaxjD,KAAKgC,EAAOnzB,EAClC,CAMA,MAAA3D,CAAO3H,GACHhT,KAAK+X,cAAchU,KAAK,KACpB/D,KAAK45H,oBAAoBj/G,OAAO3H,IACjC,eAFHhT,EAGJ,CASA,MAAAk4C,GACI,IAAIllC,EAAY,MACZ4tH,EAAc,EAElB,IACIA,EAAc5gI,KAAK23H,UAAYv9G,YAAY7H,MAAQ,EAGnDS,EAAYhT,KAAKs2H,oBAAsBt2H,KAAKs2H,oBAAoBtjH,UAAY,MAG5E,MAAM6tH,EAAc,CAChB3lH,WAAYlb,KAAK2tE,aAAa1yD,gCAC9B1X,QAASvD,KAAK2tE,aAAanyD,kBAAkBjY,QAC7CsG,UAAW7J,KAAK2tE,aAAanyD,kBAAkB3R,UAC/CmqC,eAAgBh0C,KAAKg0C,eACrB/7B,SAAUjY,KAAKiY,SACfxU,WAAYzD,KAAKw1H,oBAAoB1jC,kBACrCzmB,WAAYrrE,KAAK82H,YAAc92H,KAAK82H,YAAYt9C,YAAc,CAAEn3E,EAAG,EAAGC,EAAG,IAmB7E,GAdItC,KAAK23H,WACL/nB,GAAgB6C,iBAAiBz/F,GAKrChT,KAAKqqE,cAAcnoE,QAGflC,KAAK82H,aACL92H,KAAK82H,YAAYn8G,OAAO3H,GAIA,cAAxB6tH,EAAYt9H,SAA2BvD,KAAK82H,YAAa,CACzD,MAAMC,EAAmBjjH,EAAW,aACpC,GAAIijH,GAAoBA,EAAiBlqH,OAAQ,CAC3B7M,KAAK82H,YAAYt/E,WACnC,MAAM8hC,EAAWt5E,KAAK82H,YAAYx9C,SAC5B34E,EAAUX,KAAKqqE,cAAc5pE,MAAQ,EACrCG,EAAUZ,KAAKqqE,cAAc3pE,OAAS,EAAIV,KAAKgmB,OAAOmlD,UAGtDpoD,EAAWnc,KAAKkb,KAClBlb,KAAKC,IAAIyyE,EAASj3E,EAAI1B,EAAS,GAC/BiG,KAAKC,IAAIyyE,EAASh3E,EAAI1B,EAAS,IAI7BkgI,EAAUl6H,KAAKkB,IAAI9H,KAAKqqE,cAAc5pE,MAAOT,KAAKqqE,cAAc3pE,QAAU,EAG1E8M,EAAc5G,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAG,EAAKib,EAAW+9G,IAG5D/J,EAAiBlqH,OAAOW,YAAcA,CAC1C,CACJ,CAGA,IAAI0oH,EAAgB/hH,EAAuB0sH,EAAYt9H,SAEvDvD,KAAK8b,SAASo5D,kBAAkB2rD,EAAYt9H,QAAS2yH,EAAe2K,EAAYh3H,WAGhF,MAAM0sH,EAAOv2H,KAAKqqE,cAAc5pE,MAAQ,EACxC,IAAI+1H,EAAOx2H,KAAKqqE,cAAc3pE,OAAS,EAAIV,KAAKgmB,OAAOmlD,UAIvD,MAAM41D,EAAa/gI,KAAK2tE,aAAa1yD,gCAGjC8lH,EAAWluG,iBACX2jG,EAAQx2H,KAAKqqE,cAAc3pE,OAAS,EAAIV,KAAKgmB,OAAOmlD,UAAcnrE,KAAKqqE,cAAc3pE,OAASqgI,EAAWluG,gBAI7G,IAAI3lB,EAAmBgpH,EAAchpH,kBAAoB,UACrDH,EAAempH,EAAcnpH,cAAgB,GAE7CC,OAA8CqN,IAA/B67G,EAAclpH,aAA6BkpH,EAAclpH,aAAgB+zH,EAAW/zH,cAAgB,EACnHC,OAA8CoN,IAA/B67G,EAAcjpH,aAA6BipH,EAAcjpH,aAAgB8zH,EAAW9zH,cAAgB,GAI3F,QAAxB4zH,EAAYt9H,UAEZ2J,EAAmBtG,KAAK8I,SAAW,GAAM,UAAY,YAIrD1P,KAAK8b,SAASzJ,OAASrS,KAAK8b,SAASzJ,MAAM2uH,2BAC3C9zH,EAAmBlN,KAAK8b,SAASzJ,MAAM2uH,0BAEvChhI,KAAK8b,SAASzJ,OAASrS,KAAK8b,SAASzJ,MAAMu5D,mBAC3C7+D,EAAenG,KAAKgJ,MAAM7C,EAAe/M,KAAK8b,SAASzJ,MAAMu5D,kBAC7D3+D,EAAerG,KAAKgJ,MAAM3C,EAAejN,KAAK8b,SAASzJ,MAAMu5D,mBAGjE5rE,KAAKg0C,eAAegH,MAChB9tC,EACA2zH,EAAYt9H,QACZwJ,EACAwpH,EACAC,EACAxjH,EACA,KACAhG,EACAC,EACAjN,KAAK8b,SAAS6C,aAAe,EAC7B3e,KAAKgmB,OAAO8yG,eAAe93G,wBAA0B,EACrDk1G,EAAc5oH,gBAAkB,KAChCuzH,EAAYh3H,WAqBhB,MAAM0sC,EAAoBv2C,KAAK8b,SAASD,qBACpC7b,KAAK8b,SAASD,uBAAyB,KAG3C,IAAIolH,EAAmB1qF,EACK,QAAxBsqF,EAAYt9H,SAAqBvD,KAAK8b,SAASzJ,MAAMm5D,qBACrDy1D,EAAmB,IAAM1qF,GAAqB,GAAKi1B,mBAAoBxrE,KAAK8b,SAASzJ,MAAMm5D,qBAI/F,IAAIh1B,EAAgB,KAChBC,EAAkB,EAGtB,GAAIz2C,KAAK+6H,sBAAuB,CAC5B,MAAMhgH,EAAUX,YAAY7H,MAAQvS,KAAK+6H,sBAAsB1iH,UAC/Do+B,EAAkB7vC,KAAKkB,IAAIiT,EAAU/a,KAAK+6H,sBAAsBvsH,SAAU,GAEtEioC,GAAmB,GAEnBD,EAAgB,CACZlxC,KAAMtF,KAAK+6H,sBAAsBz1H,KACjC0I,UAAW,EACXkD,UAAW,EACXjD,UAAW,GAGfwoC,EAAkB,EAEbz2C,KAAK+6H,sBAAsBmG,eAI5BlhI,KAAK+6H,sBAAwB,KAH7B/6H,KAAK+6H,sBAAsBmG,gBAAiB,GAOhD1qF,EAAgB,CACZlxC,KAAMtF,KAAK+6H,sBAAsBz1H,KACjC0I,UAAW,EACXkD,UAAW,EACXjD,UAAW,EAGvB,MAEK,GAAIjO,KAAK8b,UAAY9b,KAAK8b,SAASs3C,kBAAmB,CACvD,MAAM2lB,EAAiB/4E,KAAK8b,SAASs3C,oBACjC2lB,GAAkBA,EAAenrD,iBACjC4oB,EAAgBuiC,EAAenrD,eAC/B6oB,EAAkBsiC,EAAelwE,UAAY,EAErD,CAGA7I,KAAKg0C,eAAer5B,OAAO3H,EAAWujH,EAAMC,EAAMhgF,EAAeC,EAAiBwqF,GAGlF,MAAMljF,EAAmB/9C,KAAK8b,SAASwuD,gBACnCtqE,KAAK8b,SAASwuD,gBAAgBla,yBAA2B,KAiB7D,GAdApwD,KAAKg0C,eAAeiK,iBAAiBj+C,KAAKqqE,cAAcnqE,aAAcg2H,EAAcppH,UAAWixC,GAG/F/9C,KAAK8b,SAASo8B,OAAO2oF,EAAa7tH,EAAW+qC,GAG7C/9C,KAAKg0C,eAAemK,iBAAiBn+C,KAAKqqE,cAAcnqE,aAAcg2H,EAAcppH,UAAWixC,IAG3F/9C,KAAKgmB,OAAO0xG,SAAW13H,KAAKgmB,OAAOm7G,YACnCnhI,KAAKohI,gBAAgBpuH,GAIrBhT,KAAK23H,UAAW,CAChB,MAAM0J,EAAajnH,YAAY7H,MAAQquH,EACnCS,EAAa,OACbzxB,GAAgBjK,IAAI,OAAQ,6BAA8B,CACtD07B,aACAruH,YACAtP,cAAe1D,KAAKg0C,eAAeiM,WAAWC,iBAG1D,CACJ,CAAE,MAAOt+C,GACL5B,KAAK+X,cAAc3T,SAASxC,EAAO,cACvC,CACJ,CAMA,eAAAw/H,CAAgBpuH,GACZ,MAAM/S,EAAMD,KAAKqqE,cAAcnqE,aAC/BD,EAAIwC,OAEJxC,EAAI84C,UAAY,UAChB94C,EAAI8kD,KAAO,iBACX9kD,EAAIw4C,YAAc,UAClBx4C,EAAIy4C,UAAY,EAEhB,IAAIp2C,EAAI,GAGR,GAAItC,KAAKgmB,OAAO0xG,QAAS,CACrB,MAAM2I,EAAUrgI,KAAKs2H,oBAAoBjnC,wBAEnCtnB,EAAMs4D,EAAQ9wC,YAAc8wC,EAAQt4D,KAAO,EAK3Cu5D,EAAQ,CACV,QAAQv5D,IACR,UANcs4D,EAAQz2D,iBAAmBy2D,EAAQz2D,iBAAiB/H,QAAQ,GAAK,UAO/E,cANkB7hE,KAAKg0C,eAAeiM,WAMVC,mBAI1BqhF,EAAU,EAChB,IAAIC,EAAW,EACfF,EAAM5/H,QAAQ+/H,IACV,MAAMhhI,EAAQR,EAAIyhI,YAAYD,GAAMhhI,MAChCA,EAAQ+gI,IAAUA,EAAW/gI,KAGrC,MAAM4B,EAAIrC,KAAKqqE,cAAc5pE,MAAQ+gI,EAAWD,EAAU,GAO1D,IAAII,EAJJ1hI,EAAI84C,UAAY,qBAChB94C,EAAI65D,SAASz3D,EAAIk/H,EAASj/H,EAAI,GAAIk/H,EAAqB,EAAVD,EAAa,GAAKD,EAAMv8H,OAAS,GAK1E48H,EADA55D,GAAO,GACO,UACPA,GAAO,GACA,UAEA,UAGlB9nE,EAAIw4C,YAAckpF,EAClB1hI,EAAIy4C,UAAY,EAChBz4C,EAAI2hI,WAAWv/H,EAAIk/H,EAASj/H,EAAI,GAAIk/H,EAAqB,EAAVD,EAAa,GAAKD,EAAMv8H,OAAS,GAGhFu8H,EAAM5/H,QAAQ,CAAC+/H,EAAM9lF,KACjB,MAAMkmF,EAAQv/H,EA9CH,GA8CQq5C,EAEnB17C,EAAI84C,UAAY,UAChB94C,EAAIklD,SAASs8E,EAAMp/H,EAAGw/H,KAG1Bv/H,GApDe,GAoDGg/H,EAAMv8H,MAC5B,CAEA,GAAI/E,KAAKgmB,OAAOm7G,UAAW,CACvB,MAAM9uH,EAAQrS,KAAK2tE,aAAanyD,kBAC1BsmH,EAAgB9hI,KAAKg0C,eAAeiM,WAEpC8hF,EAAY,CACd,YAAY1vH,EAAM9O,UAAU8O,EAAMxI,UAAY,KAAKwI,EAAMxI,aAAe,KACxE,cAAci4H,EAAc5hF,mBAAmB4hF,EAAc70H,eAC7D,YAAYjN,KAAK+6H,sBAAwB/6H,KAAK+6H,sBAAsBz1H,KAAO,SAC3E,cAAatF,KAAKiY,SAAW,MAAQ,MACrC,iBAAmC,IAAlBjY,KAAKyD,YAAkBo+D,QAAQ,OAIpD5hE,EAAI84C,UAAY,qBAChB,MAAMipF,EAAap7H,KAAKiB,OAAOk6H,EAAU76H,IAAIu6H,GAAQxhI,EAAIyhI,YAAYD,GAAMhhI,QAC3ER,EAAI65D,SAAS,EAAGx3D,EAAI,GAAI0/H,EAAa,GAtEtB,GAsE0BD,EAAUh9H,OAAsB,GAEzE9E,EAAI84C,UAAY,UAChB,IAAK,MAAM66C,KAAQmuC,EACf9hI,EAAIklD,SAASyuC,EAAM,GAAItxF,GACvBA,GA3EW,EA6EnB,CAEArC,EAAI4C,SACR,CAMA,iBAAAo/H,GACI,MAAM/mH,EAAalb,KAAK2tE,aAAa1yD,gCAErC,OAAOC,GAAY9L,cAAgB,SACvC,CAMA,eAAAoM,GACI,OAAOxb,KAAK2tE,aAAanyD,iBAC7B,CAMA,oBAAAgB,GACI,OAAOxc,KAAK2tE,aAAanxD,sBAC7B,CAMA,sBAAAC,GACI,OAAOzc,KAAK2tE,aAAalxD,wBAC7B,CAMA,aAAAylH,GACI,OAAOliI,KAAKw1H,oBAAoB1jC,iBACpC,CAMA,aAAA8tC,GACI,OAAO5/H,KAAKw1H,oBAAoBv1E,UACpC,CAMA,iBAAAkiF,CAAkBn8G,GACdhmB,KAAKw1H,oBAAoBjjC,aAAavsE,EAC1C,CAMA,oBAAAo8G,GACI,MAAO,CACH,SAAU,QAAS,QAAS,OAAQ,QACpC,MAAO,OAAQ,SAAU,WAAY,QACrC,UAAW,OAAQ,UAAW,UAAW,OACzC,QAAS,YAAa,OAAQ,SAC9B,WAAY,YAAa,aAAc,kBAAmB,OAElE,CAOA,kBAAAC,CAAmBxwF,GACf,OAAO7xC,KAAK+X,cAAchU,KAAK,IACtB/D,KAAKsiI,eAKLzwF,GAA8C,mBAAxBA,EAAYuzC,SAMvCvzC,EAAYuzC,QAAQplF,KAAKsiI,eAGzBtiI,KAAKyvC,KAAK,uBAAwB,CAAEoC,gBAE7B7xC,MAdIA,KAeZ,0BAA2BA,KAlBvBA,EAmBX,CAOA,SAAA21H,CAAUlsC,GACN,OAAOzpF,KAAK+X,cAAchU,KAAK,IACpB/D,KAAK42H,aAAajB,UAAUlsC,GACpC,iBAAkBzpF,KAFdA,EAGX,CAMA,SAAAuiI,GACI,OAAOviI,KAAKgmB,OAAOukE,YACvB,CAMA,KAAAi4C,GACI,OAAOxiI,KAAK+X,cAAchU,KAAK,IACtB/D,KAAKs2H,oBAAoBrlD,eAM9BjxE,KAAKs2H,oBAAoB5mF,OACzB1vC,KAAKwvC,WAAY,EAGbxvC,KAAKsuF,YAAYpD,eACjBlrF,KAAKsuF,YAAYlD,gBAAgB,KAGrCprF,KAAKyvC,KAAK,UAEHzvC,MAdIA,KAeZ,QAASA,KAlBLA,EAmBX,CAMA,MAAA+qF,GACI,OAAO/qF,KAAK+X,cAAchU,KAAK,KACvB/D,KAAKs2H,oBAAoBrlD,gBAM7BjxE,KAAKs2H,oBAAoB9qH,QACzBxL,KAAKwvC,WAAY,EASjBxvC,KAAKyvC,KAAK,YAdCzvC,MAiBZ,SAAUA,KApBNA,EAqBX,CAMA,QAAAsY,GACI,OAAOtY,KAAKs2H,oBAAoBrlD,aACpC,CAOA,YAAAhH,CAAahC,GACT,MAAMw6D,EAAa77H,KAAKiB,IAAI,GAAIjB,KAAKkB,IAAI,IAAKmgE,IAO9C,OANAjoE,KAAKgmB,OAAOiiD,UAAYw6D,EACxBziI,KAAKs2H,oBAAoBrsD,aAAaw4D,GAGtCziI,KAAKyvC,KAAK,mBAAoB,CAAEw4B,UAAWw6D,IAEpCziI,IACX,CAMA,YAAA0iI,GACI,OAAO1iI,KAAKs2H,oBAAoBruD,SACpC,CAOA,yBAAA06D,CAA0BhuH,GACtB,MAAM0rH,EAAUrgI,KAAKs2H,oBAAoBjnC,wBAEzC,GAAI16E,IAAY0rH,EAAQhH,uBAAwB,CAC5C,MAAMuJ,EAAa5iI,KAAKg0C,eAAe/mC,aACjC41H,EAASj8H,KAAKiB,IAAI,EAAGjB,KAAKgJ,MAAmB,GAAbgzH,IACtC5iI,KAAKg0C,eAAeoM,gBAAgByiF,EAGxC,MAAYluH,GAAW0rH,EAAQhH,wBAC3Br5H,KAAKg0C,eAAeoM,gBAAgBpgD,KAAKgmB,OAAO/Y,cAKpD,OAAOjN,IACX,CAMA,aAAAkiI,GACI,OAAOliI,KAAKiY,SAAWjY,KAAKyD,WAAa,CAC7C,CAMA,UAAAq/H,GACI,OAAO9iI,KAAKiY,QAChB,CAOA,iBAAA8qH,CAAkBz4G,GACd,OAAOtqB,KAAK+X,cAAchU,KAAK,KAC3B,MAAMi/H,EAAmBp8H,KAAKiB,IAAI,EAAGjB,KAAKkB,IAAI,EAAGwiB,IASjD,OAPItqB,KAAKsiI,gBACLtiI,KAAKsiI,cAAczyC,sBAAwBmzC,GAMxChjI,MACR,kBAAmBA,KAXfA,EAYX,CAMA,eAAAijI,GACI,OAAOjjI,KAAK+X,cAAchU,KAAK,KAC3B,MAAMsO,EAAQrS,KAAK2tE,aAAanyD,kBAC1BsmH,EAAgB9hI,KAAKg0C,eAAeiM,WACpCijF,EAAgBljI,KAAK8b,SAASmkC,WAE9BkjF,EAAmBnjI,KAAKs2H,oBAAoBjnC,wBAElD,MAAO,CAEH7/C,UAAW2zF,EAAiB3zF,UAC5Bu4B,IAAKo7D,EAAiBp7D,IACtBE,UAAWk7D,EAAiBl7D,UAC5BoxD,uBAAwB8J,EAAiB9J,uBAGzC91H,QAAS8O,EAAM9O,QACfsG,UAAWwI,EAAMxI,UACjB4R,gBAAiBpJ,EAAMoJ,gBACvBC,mBAAoBrJ,EAAMqJ,mBAG1Bq9D,eAAgB/4E,KAAK8b,UAAUi9D,gBAAkB,KACjDqqD,cAAepjI,KAAK8b,UAAUk9D,oBAAqB,EAGnDr/B,UAAW,CACPtG,OAAQyuF,EAAc5hF,gBACtBr4C,IAAKi6H,EAAc70H,aACnBkzC,eAAgB2hF,EAAc3hF,gBAIlC+iD,aAAcljG,KAAKgmB,OAAOwyG,YAC1B6K,qBAAsBrjI,KAAKsuF,YAAYpD,cACvCjzE,SAAUjY,KAAKiY,SACfxU,WAAYzD,KAAKyD,WACjB8mF,aAAcvqF,KAAKgmB,OAAOukE,aAG1BzuE,SAAU,CACNwnH,kBAAmBJ,EAAcI,kBACjC1lE,eAAgBslE,EAActlE,eAC9Bl+B,OAAQwjG,EAAcxjG,QAI1B6jG,eAAgBvjI,KAAKo+H,gBAAgBr5H,OAGrCy+H,WAAYxjI,KAAK+X,cAAcnS,kBAEpC,gBAAiB,CAAA,EAnDb5F,EAoDX,CAOA,YAAAu/H,CAAa5qH,GAUT,OATA3U,KAAKgmB,OAAOm7G,YAAcxsH,EAC1B3U,KAAKgmB,OAAO0xG,UAAY/iH,EAQjB3U,IACX,CAOA,gBAAAyjI,CAAiBx/H,EAAU,eACvB,OAAOjE,KAAK+X,cAAchU,KAAK,KAC3B,MAAM,IAAI0C,MAAM,oCAAoCxC,MACrDA,EAASjE,KAFLA,EAGX,CAMA,qBAAAqvF,GACI,MAAM8zC,EAAmBnjI,KAAKs2H,oBAAoBjnC,wBAC5Ch9E,EAAQrS,KAAK2tE,aAAanyD,kBAEhC,MAAO,IACA2nH,EACHvoF,eAAgBvoC,EAAM9O,QACtB83C,iBAAkBhpC,EAAMxI,UACxB4R,gBAAiBpJ,EAAMoJ,gBACvB+nH,WAAYxjI,KAAK+X,cAAcnS,gBAEvC,CAOA,oBAAM6hG,CAAeC,GACjB,OAAO1nG,KAAKo5H,aAAa3xB,eAAeC,EAC5C,CAMA,gBAAAg8B,CAAiB5oE,GACTA,EAAQ26B,gBACRz1F,KAAKk5H,qBAAqBn+B,kBAAkBjgC,EAAQ26B,qBAE1Bp7E,IAA1BygD,EAAQogC,gBACRl7F,KAAKk5H,qBAAqBxjC,uBAAyB56B,EAAQogC,oBAElC7gF,IAAzBygD,EAAQu7B,eACRr2F,KAAKk5H,qBAAqBvjC,oBAAsB76B,EAAQu7B,aAEhE,CAMA,eAAAstC,GACI,OAAO3jI,KAAKm5H,mBAAmBl+B,WACnC,CAMA,sBAAA2oC,GACI,OAAO5jI,KAAKk5H,qBAAqBj+B,WACrC,CAOA,QAAA6K,CAAS+9B,GACL,OAAO7jI,KAAK8Z,WAAW+pH,EAC3B,CAQA,KAAAjI,CAAM/vE,EAAMiP,EAAU,IAElB,IAAKv6D,OAAOs7H,gBAER,OAAO,KAIX,MAAME,EAAY,IAAIC,yBAAyBnwE,GAwC/C,OArCIiP,EAAQohE,QAAOH,EAAUG,MAAQphE,EAAQohE,OACzCphE,EAAQ9T,OAAM+0E,EAAU/0E,KAAO8T,EAAQ9T,MACvC8T,EAAQmhE,QAAOF,EAAUE,MAAQnhE,EAAQmhE,OACzCnhE,EAAQ2uB,SAAQsyC,EAAUtyC,OAAS3uB,EAAQ2uB,QAC3C3uB,EAAQgpE,OAAM/H,EAAU+H,KAAOhpE,EAAQgpE,MAG3C/H,EAAUO,QAAU,KAEhBt8H,KAAK+jI,gBAAe,GACpB/jI,KAAKyvC,KAAK,YAAa,CAAEoc,UAG7BkwE,EAAUQ,MAAQ,KAEdv8H,KAAK+jI,gBAAe,GACpB/jI,KAAKyvC,KAAK,YAGdssF,EAAUS,QAAW/qF,IAEjBzxC,KAAK+jI,gBAAe,GACpB/jI,KAAKyvC,KAAK,YAAa,CAAE7tC,MAAO6vC,KAGpCsqF,EAAUU,WAAchrF,IAEpBzxC,KAAKyvC,KAAK,eAAgB,CACtBnjC,KAAMmlC,EAAMnlC,KACZ03H,UAAWvyF,EAAMuyF,UACjBC,WAAYxyF,EAAMwyF,cAK1B1jI,OAAOs7H,gBAAgBD,MAAMG,GAEtBA,CACX,CAMA,cAAAgI,CAAe9rH,GACXjY,KAAKkkI,YAAcjsH,EAGfjY,KAAK8b,UAAY9b,KAAK8b,SAAS6+C,gBAC3B1iD,EACAjY,KAAK8b,SAAS6+C,gBAEd36D,KAAK8b,SAAS8+C,gBAKtB56D,KAAKiY,SAAWA,CACpB,CAMA,SAAAmkH,GACI,OAAK77H,OAAOs7H,gBAGLt7H,OAAOs7H,gBAAgBO,YAFnB,EAGf,CAKA,OAAAM,GACQn8H,OAAOs7H,kBACPt7H,OAAOs7H,gBAAgBC,SACvB97H,KAAK+jI,gBAAe,GAE5B,CASA,YAAAjjI,CAAaL,EAAOC,EAAQJ,GASxB,GALIN,KAAK8b,UAAY9b,KAAK8b,SAAS0mD,qBAC/BxiE,KAAK8b,SAAS0mD,sBAIdxiE,KAAK2tE,aAAc,CACnB,MAAM/yB,EAAiB56C,KAAK2tE,aAAa/yB,eACnCS,EAAmBr7C,KAAK2tE,aAAatyB,iBAGvCT,GACA56C,KAAK2tE,aAAa7zD,WAAW8gC,GAI7BS,GAAyC,SAArBA,GACpBr7C,KAAK2tE,aAAaw2D,aAAa9oF,EAEvC,CAGAr7C,KAAKyvC,KAAK,SAAU,CAAEhvC,QAAOC,SAAQJ,OACzC,CAQA,OAAAgnH,CAAQ9B,EAAOx/F,EAAS,IACpB,OAAOhmB,KAAK+X,cAAchU,KAAK,IACtB/D,KAAKyvE,cAMVzvE,KAAKyvE,aAAa63C,QAAQ9B,EAAOx/F,GAG7BhmB,KAAK8b,WACL9b,KAAK8b,SAAS2zD,aAAezvE,KAAKyvE,cAItCzvE,KAAKyvC,KAAK,oBAAqB,CAAEjjC,KAAMxM,KAAKyvE,aAAaK,aAAcjzD,GAAI2oG,IAGpExlH,MAfIA,KAgBZ,UAAWA,KAnBPA,EAoBX,CAOA,YAAAo1H,CAAalJ,GACT,OAAOlsH,KAAK+X,cAAchU,KAAKuyG,eACdt2G,KAAK42H,aAAaxB,aAAalJ,GAC7C,eAAgBlsH,KAFZA,EAGX,CAMA,eAAAk1H,GACI,OAAOl1H,KAAK+X,cAAchU,KAAK,IACpB/D,KAAK42H,aAAa1B,kBAC1B,kBAAmBl1H,KAFfA,EAGX,CAMA,kBAAAokI,GACI,OAAOpe,GAAaoe,oBACxB,CAKA,OAAArhI,GACI/C,KAAK+X,cAAchU,KAAK,KAEpB/D,KAAK0vC,OAGD1vC,KAAKiY,UACLjY,KAAK46D,eAIL56D,KAAKs2H,qBACLt2H,KAAKs2H,oBAAoBvzH,UAIzB/C,KAAKsuF,aACLtuF,KAAKsuF,YAAY/+D,UAGjBvvB,KAAKw1H,qBACLx1H,KAAKw1H,oBAAoBjmG,UAGzBvvB,KAAKg0C,gBACLh0C,KAAKg0C,eAAejxC,UAGpB/C,KAAK8b,WAEL9b,KAAK8b,SAASq3C,kBACdnzD,KAAK8b,SAAS/Y,WAGd/C,KAAKqqE,eACLrqE,KAAKqqE,cAActnE,UAInB/C,KAAKizF,cACLjzF,KAAKizF,aAAalwF,UAIlB/C,KAAKk5H,sBACLl5H,KAAKk5H,qBAAqBn2H,UAG1B/C,KAAKm5H,oBACLn5H,KAAKm5H,mBAAmBp2H,UAGxB/C,KAAKo5H,cACLp5H,KAAKo5H,aAAar2H,UAIlB/C,KAAK+6G,gBACL/6G,KAAKk1H,kBACLl1H,KAAK+6G,cAAch4G,WAGnB/C,KAAKyvE,cACLzvE,KAAKyvE,aAAapzD,QAMtBrc,KAAK+X,cAAc5R,eAGpB,cAvEHnG,EAwEJ,CAOA,aAAA4sF,CAAcloF,EAAS2P,GACnB,MAAM9B,EAAM/N,KAAK+N,MAGbA,GAFgBvS,KAAKmqF,kBAAkB91E,IAAQ,GAE3BrU,KAAKoqF,kBAEzBpqF,KAAKmqF,kBAAkB91E,GAAO9B,EAEtC"}